@model MainOps.Models.ViewModels.MeasurePipeVM
<head>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDhvR9rVDhwZhuFSlvp9ZYsGLVpLt6KlIM&sensor=true&libraries=places,geometry"></script>
</head>
@{
    ViewData["Title"] = "Measure";
}
<div class="row">
    <div class="col-xs-12">
        <div style="width:100%;padding:10px;text-align:center;">
            <form asp-action="MeasurePipe" method="get">
                <label>@SharedLocalizer.GetLocalizedHtmlString("Select Project:")</label>
                <select name="ProjectId" asp-items="ViewBag.ProjectId"><option value="">@SharedLocalizer.GetLocalizedHtmlString("Select Project")</option></select>
                <button>Filter</button>
            </form>
        </div>
        <form asp-controller="TrackItems" asp-action="MeasurePipe" method="post" enctype="multipart/form-data" onsubmit="retrievedata();" id="TheForm">
            <table style="width:100%;table-layout:fixed;">
                <tr>
                    <td align="left"><label class="control-label">@SharedLocalizer.GetLocalizedHtmlString("Pictures")</label></td>
                    <td align="right"><input type="file" name="files" multiple accept=".jpg,.jpeg,.png,.gif,.pdf" style="width:100%;" /></td>
                </tr>
                <tr>
                    <td align="left"><label asp-for="TimeStamp" class="control-label">@SharedLocalizer.GetLocalizedHtmlString(@Html.DisplayNameFor(Model => Model.TimeStamp))</label></td>
                    <td align="right">
                        <input type="text" class="date-picker" value="@DateTime.Now.ToString("yyyy-MM-dd")" asp-for="TimeStamp" id="thetime" style="width:100%;" />
                    </td>
                </tr>

                <tr>
                    <td align="left">
                        <label asp-for="InstallationsId" class="control-label">@SharedLocalizer.GetLocalizedHtmlString("Item")</label>
                    </td>
                    <td align="right">
                        <input type="number" id="InstallationsId" name="InstallationsId" value="-1" style="width:100%;"/>
                    </td>
                </tr>
                <tr>
                    <td align="left">
                        <label asp-for="Amount_raw" class="control-label">@SharedLocalizer.GetLocalizedHtmlString("Length")</label>
                    </td>
                    <td align="right">
                        <input type="number" id="Amount_raw" name="Amount_raw" value="0" style="width:100%;" />
                    </td>
                </tr>
                <tr>
                    <td align="left">
                        <label asp-for="Amount" class="control-label">@SharedLocalizer.GetLocalizedHtmlString("Length")</label>
                    </td>
                    <td align="right">
                        <input type="number" id="Amount" name="Amount" value="0" style="width:100%;" />
                    </td>
                </tr>
            </table>
            @for (int i = 0; i < Model.Latitudes.Count; i++)
            {
                @Html.HiddenFor(model => Model.Latitudes[i])
                @Html.HiddenFor(model => Model.Longitudes[i])
            }
            <div>
                <button type="button" id="centerbutton" onclick="setthecenter();" class="btn-hoelscher" style="width:100px;height:50px;">@SharedLocalizer.GetLocalizedHtmlString("Center Map")</button>
            </div>
            <div id="myDiv" style="width:100%;height:400px;"></div>
            <table style="width:100%">
                <tr>
                    <td align="left" style="width:35%"><label>@SharedLocalizer.GetLocalizedHtmlString("Raw Accuracy")</label></td>
                    <td style="width:25%"><input type="number" value="1000" name="acc" id="acc" style="width:100%" /></td>
                    <td align="right" style="width:40%"><button type="button" class="btn-hoelscher" onclick="startTrack();" style="width:100%;height:30px;">@SharedLocalizer.GetLocalizedHtmlString("Start Tracking!")</button></td>
                </tr>
                <tr>
                    <td align="left" style="width:35%"><label>@SharedLocalizer.GetLocalizedHtmlString("Filter Accuracy")</label></td>
                    <td style="width:25%"><input type="number" value="1000" name="acc2" id="acc2" style="width:100%" /></td>
                    <td align="right" style="width:40%"><button type="button" class="btn-hoelscher" onclick="stopTrack();" style="width:100%;height:30px;">@SharedLocalizer.GetLocalizedHtmlString("Stop Tracking!")</button></td>
                </tr>
            </table>
            <table style="width:100%;">
                <tr>
                    <td style="width:50%"><button type="button" class="btn-hoelscher" onclick="calibratePosition();" style="width:100%;height:50px;">@SharedLocalizer.GetLocalizedHtmlString("Reset Position")</button></td>
                    <td style="width:50%"><button class="btn-hoelscher" type="submit" style="width:100%;height:50px;">@SharedLocalizer.GetLocalizedHtmlString("Update Pipe Measure!")</button></td>
                </tr>
            </table>


            <input type="datetime" value="@DateTime.Now" name="TimeStamp" hidden="hidden" />
            <input type="number" id="latinput" value="0" name="Latitude" hidden="hidden" />
            <input type="number" id="longinput" value="0" name="Longitude" hidden="hidden" />
            <input type="text" id="latss" name="latss" value="" hidden="hidden" />
            <input type="text" id="longss" name="longss" value="" hidden="hidden" />
            <input type="text" id="errorss" name="errorss" value="" hidden="hidden" />
            <input type="text" id="latssk" name="latssk" value="" hidden="hidden" />
            <input type="text" id="longssk" name="longssk" value="" hidden="hidden" />
            <input type="text" id="errorssk" name="errorssk" value="" hidden="hidden" />
            <input type="text" id="timess" name="timess" value="" hidden="hidden" />



        </form>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script type="text/javascript">
        var countcoords = 0;
        var gmarkers = [];
        var Lats = new Array();
        var Longs = new Array();
        var Latsk = new Array();
        var Longsk = new Array();
        var Errors = new Array();
        var Errorsk = new Array();
        var myLat = 0, myLng = 0;
        var path = [];
        var pathk = [];
        var id;
        var polyline;
        var polylinek;
        var DoTrack = false;
        var latk = null;
        var lngk = null;
        var variance = null;
        var timestamp;
        var Q_mps = 2.5;
        var K = 1;
        var speed;
        var times = [];       
        var timeinc = 1000;
        var myLat = 55.682936;
        var myLng = 12.3729016;
        //var TimeStamps = [];
        //var myTime = null;
        if (navigator.geolocation) {
            id = navigator.geolocation.watchPosition(function (position) {
                myLat = position.coords.latitude;
                myLng = position.coords.longitude;
                myErr = position.coords.accuracy;
                //myTime = position.timestamp;
                times.push(new Date());
                speed = position.coords.speed;
                if (speed === null) {
                    speed = Q_mps;
                }
                if (DoTrack === false || latk === null) {
                    latk = myLat;
                    lngk = myLng;
                    varieance = myErr;
                }
                document.getElementById("acc").value = myErr
                
                if (DoTrack === true) {
                    if (times.length > 1) {
                        timeinc = (times[times.length -1] - times[times.length - 2]);
                    }
                    if (variance === null) {
                        variance = myErr;
                    }
                    variance += timeinc * speed * speed / 1000.0;
                    Errorsk.push(variance);  
                    document.getElementById("acc2").value = variance
                    K = variance / (variance + myErr * myErr);
                    latk += K * (myLat - latk);
                    lngk += K * (myLng - lngk); 
                    Latsk.push(latk);
                    Longsk.push(lngk);
                    Lats.push(myLat);
                    Longs.push(myLng);
                    //TimeStamps.push(myTime);
                    variance = (1 - K) * variance;
                    Errors.push(myErr);  
                    path.push(new google.maps.LatLng(myLat, myLng));
                    pathk.push(new google.maps.LatLng(latk, lngk));
                    UpdateMap(myLat, myLng);
                    
                }
            },
                function (error) {
                    if (error.code == error.PERMISSION_DENIED) {
                        alert("error");
                    }

                }, { maximumAge: 2000, timeout: 10000, enableHighAccuracy: true });
        }
        var myLatLng = { lat: myLat, lng: myLng };
        //Create Options or set different Characteristics of Google Map
        var mapOptions = {
            center: myLatLng,
            zoom: 15,
            minZoom: 2,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        //Display the Google map in the div control with the defined Options
        const map = new google.maps.Map(document.getElementById("myDiv"), mapOptions);
        
        $(document).ready(function () {
            DisplayGoogleMap();
        });
        $(document).ready(function () {
            $(function () {
                $(".date-picker").datepicker({
                    changeMonth: true,
                    changeYear: true,
                    yearRange: "-2:+0",
                    dateFormat: "dd-MM-yy",
                    controlType: 'select',
                    firstDay: 1
                });
                $('.date-picker').datepicker("setDate", new Date());

            });
        });
        function setthecenter() {
            navigator.geolocation.getCurrentPosition(function (position) {
                var Lat = position.coords.latitude;
                var Lng = position.coords.longitude;
                map.setCenter({ lat: Lat, lng: Lng });
            },
                function (error) {
                    if (error.code == error.PERMISSION_DENIED) {
                        alert("error permission denied");
                    }
                }, { maximumAge: 2000, timeout: 8000, enableHighAccuracy: true });
        }
        function calibratePosition() {
            polyline = null;
            polylinek = null;
            var lastlat = Lats[Lats.length - 1];
            var lastlng = Longs[Longs.length - 1];
            var lasterr = Errors[Errors.length - 1];
            var lastelem = path[path.length - 1];
            var lastlatk = lastlat//Latsk[Latsk.length - 1];
            var lastlngk = lastlng//Longsk[Longsk.length - 1]; 
            var lasterrk = lasterr//Errorsk[Errorsk.length - 1];
            var lastelemk = lastelem//pathk[pathk.length - 1];
            //var lasttime = TimeStamps[TimeStamps.length - 1];
            TimeStamps = [];
            Lats = [];
            Longs = [];
            Errors = [];
            Errorsk = [];
            path = [];
            Latsk = [];
            Longsk = [];
            pathk = [];
            Lats.push(lastlat);
            Longs.push(lastlng);
            Errors.push(lasterr);
            path.push(lastelem);
            Latsk.push(lastlatk);
            Longsk.push(lastlngk);
            Errorsk.push(lasterrk);
            pathk.push(lastelemk);
            //TimeStamps.push(lasttime);
            alert("reset");
        }
        function stopTrack() {
            alert("stopping tracking");
            DoTrack = false;
        }
        function startTrack() {            
            DoTrack = true;            
            alert("starting tracking");
        }
        function getPos(lat, lng) {
            $("#latinput").val(lat);
            $("#longinput").val(lng);
        }
        function retrievedata() {
            DoTrack = false;
            const polyLengthInMeters = google.maps.geometry.spherical.computeLength(polylinek.getPath().getArray());
            document.getElementById("Amount").value = polyLengthInMeters;
            const polyLengthInMeters_raw = google.maps.geometry.spherical.computeLength(polyline.getPath().getArray());
            document.getElementById("Amount_raw").value = parseInt(polyLengthInMeters_raw);
            navigator.geolocation.clearWatch(id);            
            alert("stopped tracking");
            var s1 = document.getElementById("latss");
            s1.value = JSON.stringify(Lats);
            var s2 = document.getElementById("longss");
            s2.value = JSON.stringify(Longs);
            var s3 = document.getElementById("errorss");
            s3.value = JSON.stringify(Errors);
            var s4 = document.getElementById("latssk");
            s4.value = JSON.stringify(Latsk);
            var s5 = document.getElementById("longssk");
            s5.value = JSON.stringify(Longsk);
            var s6 = document.getElementById("errorssk");
            s6.value = JSON.stringify(Errorsk);
            StartSpinner();
        }
        
        function chooseThis(index) {
            $("#InstallationsId").val(index);
        }
        function UpdateMap(lat,lng) {
            var latLngBounds = new google.maps.LatLngBounds();
            for (var i = 0; i < path.length; i++) {
                latLngBounds.extend(path[i]);
            }
            // Creates the polyline object
            polyline = new google.maps.Polyline({
                map: map,
                path: path,
                strokeColor: '#0000FF',
                strokeOpacity: 0.7,
                strokeWeight: 1
            });
            polylinek = new google.maps.Polyline({
                map: map,
                path: pathk,
                strokeColor: '#FF0000',
                strokeOpacity: 0.7,
                strokeWeight: 1
            });
            
            var metersk = google.maps.geometry.spherical.computeLength(polyline.getPath().getArray());
            document.getElementById("Amount").value = metersk;
            var meters = google.maps.geometry.spherical.computeLength(polylinek.getPath().getArray());
            document.getElementById("Amount_raw").value = meters;
            // Fit the bounds of the generated points
            map.fitBounds(latLngBounds);
            map.panTo(new google.maps.LatLng(lat, lng));
        }
        function DisplayGoogleMap() {
            //Set the Latitude and Longitude of the Map

            @foreach(var item in Model.InstalledCoordinates)
            {
             <text>

            var marker = new google.maps.Marker({
                  map: map,
                  position: { lat: @item.Latitude, lng: @item.Longitude },
                    title: '@item.ItemType.Item_Type.Replace("\""," inch",0) : @item.Install_Text',
            });
            marker['infowindow'] = new google.maps.InfoWindow({
                content: 'Item: @item.ItemType.Item_Type : @item.Install_Text <button type="button" onclick="chooseThis(@item.Id)">Choose this</button>'
            });

            google.maps.event.addListener(marker, 'click', function () {
                this['infowindow'].open(map, this);
            });
            gmarkers.push(marker);

            marker.setMap(map);
            </text>
            }
            var thebutton = document.getElementById('centerbutton');
            thebutton.Click();

        }

    </script>
}

