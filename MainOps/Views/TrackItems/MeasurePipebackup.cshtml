@model MainOps.Models.ViewModels.MeasurePipeVM
<head>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDhvR9rVDhwZhuFSlvp9ZYsGLVpLt6KlIM&sensor=true&libraries=places,geometry"></script>
</head>
@{
    ViewData["Title"] = "Measure";
}
<div class="row">
    <div class="col-xs-12">
        <form asp-controller="TrackItems" asp-action="MeasurePipe" method="post" enctype="multipart/form-data" onsubmit="retrievedata();" id="TheForm">
            <table>
                <tr>
                    <td><label asp-for="TimeStamp" class="control-label">@SharedLocalizer.GetLocalizedHtmlString(@Html.DisplayNameFor(Model => Model.TimeStamp))</label></td>
                    <td>
                        <input type="text" class="date-picker" value="@DateTime.Now.ToString("yyyy-MM-dd")" asp-for="TimeStamp" id="thetime" style="width:250px;height:40px;" />
                        <span asp-validation-for="TimeStamp" class="text-danger"></span>
                    </td>
                </tr>
                <tr>
                    <td><label class="control-label">@SharedLocalizer.GetLocalizedHtmlString("Upload pictures")</label></td>
                    <td><input type="file" name="files" multiple accept=".jpg,.jpeg,.png,.gif,.pdf" /></td>
                </tr>
                <tr>
                    <td>
                        <label asp-for="InstallationsId" class="control-label">@SharedLocalizer.GetLocalizedHtmlString("Id of Chosen Item")</label>
                    </td>
                    <td>
                        <input type="number" id="InstallationsId" name="InstallationsId" value="-1" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <label asp-for="Amount" class="control-label">@SharedLocalizer.GetLocalizedHtmlString("Length of Item")</label>
                    </td>
                    <td>
                        <input type="number" id="Amount" name="Amount" value="0" />
                    </td>
                </tr>
            </table>
            @for (int i = 0; i < Model.Latitudes.Count; i++)
            {
                @Html.HiddenFor(model => Model.Latitudes[i])
                @Html.HiddenFor(model => Model.Longitudes[i])
            }
            <div id="myDiv" style="width:100%;height:500px;"></div>
            <input type="number" value="1000" name="acc" id="acc" />
            <input type="datetime" value="@DateTime.Now" name="TimeStamp" hidden="hidden" />
            <input type="number" id="latinput" value="0" name="Latitude" hidden="hidden" />
            <input type="number" id="longinput" value="0" name="Longitude" hidden="hidden" />
            <input type="text" id="latss" name="latss" value="" hidden="hidden" />
            <input type="text" id="longss" name="longss" value="" hidden="hidden" />
            <input type="text" id="errorss" name="errorss" value="" hidden="hidden" />
            <button type="button" onclick="startTrack();">@SharedLocalizer.GetLocalizedHtmlString("Start track!")</button>
            <button type="button" onclick="calibratePosition();">@SharedLocalizer.GetLocalizedHtmlString("Calibrate position")</button>
            <button type="button" onclick="stopTrack();">@SharedLocalizer.GetLocalizedHtmlString("Stop track!")</button>
            <button class="btn-hoelscher" type="submit">@SharedLocalizer.GetLocalizedHtmlString("Update Pipe Measure!")</button>
        </form>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script type="text/javascript">
        var countcoords = 0;
        var gmarkers = [];
        var Lats = new Array();
        var Longs = new Array();
        var Errors = new Array();
        var myLat = 0, myLng = 0;
        var path = [];
        var id;
        var polyline;
        var DoTrack = false;
        if (navigator.geolocation) {
            id = navigator.geolocation.watchPosition(function (position) {
                myLat = position.coords.latitude;
                myLng = position.coords.longitude;
                myErr = position.coords.accuracy;
                document.getElementById("acc").value = myErr
                if (DoTrack === true) {
                    Lats.push(myLat);
                    Longs.push(myLng);
                    Errors.push(myErr);                    
                    path.push(new google.maps.LatLng(myLat, myLng));
                    UpdateMap(myLat, myLng);
                }
            },
                function (error) {
                    if (error.code == error.PERMISSION_DENIED) {
                        alert("error");
                    }

                }, { maximumAge: 'infinity', timeout: 10000, enableHighAccuracy: true });
        }
        var myLatLng = { lat: 55.682936, lng: 12.3729016 };
        //Create Options or set different Characteristics of Google Map
        var mapOptions = {
            center: myLatLng,
            zoom: 11,
            minZoom: 2,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        //Display the Google map in the div control with the defined Options
        const map = new google.maps.Map(document.getElementById("myDiv"), mapOptions);
        
        $(document).ready(function () {
            DisplayGoogleMap();
        });
        $(document).ready(function () {
            $(function () {
                $(".date-picker").datepicker({
                    changeMonth: true,
                    changeYear: true,
                    yearRange: "-2:+0",
                    dateFormat: "dd-MM-yy",
                    controlType: 'select'
                });
                $('.date-picker').datepicker("setDate", new Date());

            });
        });
        function calibratePosition() {
            polyline = null;
            var lastlat = Lats[Lats.length - 1];
            var lastlng = Longs[Longs.length - 1];
            var lasterr = Errors[Errors.length - 1];
            var lastelem = path[path.length - 1];
            Lats = [];
            Longs = [];
            Errors = [];
            path = [];
            Lats.push(lastlat);
            Longs.push(lastlng);
            Errors.push(lasterr);
            path.push(lastelem);
        }
        function stopTrack() {
            alert("stopping tracking");
            DoTrack = false;
        }
        function startTrack() {
            alert("starting tracking");
            DoTrack = true;            
        }
        function getPos(lat, lng) {
            $("#latinput").val(lat);
            $("#longinput").val(lng);
        }
        function retrievedata() {
            DoTrack = false;
            const polyLengthInMeters = google.maps.geometry.spherical.computeLength(polyline.getPath().getArray());
            document.getElementById("Amount").value = polyLengthInMeters;
            navigator.geolocation.clearWatch(id);            
            alert("stopped tracking");
            var s1 = document.getElementById("latss");
            s1.value = JSON.stringify(Lats);
            var s2 = document.getElementById("longss");
            s2.value = JSON.stringify(Longs);
            var s3 = document.getElementById("errorss");
            s3.value = JSON.stringify(Errors);
        }
        
        function chooseThis(index) {
            $("#InstallationsId").val(index);
        }
        function UpdateMap(lat,lng) {
            var latLngBounds = new google.maps.LatLngBounds();
            for (var i = 0; i < path.length; i++) {
                latLngBounds.extend(path[i]);
            }
            // Creates the polyline object
            polyline = new google.maps.Polyline({
                map: map,
                path: path,
                strokeColor: '#0000FF',
                strokeOpacity: 0.7,
                strokeWeight: 1
            });
            var meters = google.maps.geometry.spherical.computeLength(polyline.getPath().getArray());
            document.getElementById("Amount").value = meters;
            // Fit the bounds of the generated points
            map.fitBounds(latLngBounds);
            map.panTo(new google.maps.LatLng(lat, lng));;
        }
        function DisplayGoogleMap() {
            //Set the Latitude and Longitude of the Map
            
            @foreach(var item in Model.InstalledCoordinates)
            {
             <text>

            var marker = new google.maps.Marker({
                  map: map,
                  position: { lat: @item.Latitude, lng: @item.Longitude },
                    title: "@item.ItemType.Item_Type.Replace("\""," inch",0)",
            });
            marker['infowindow'] = new google.maps.InfoWindow({
                content: 'Item: @item.ItemType.Item_Type  <button type="button" onclick="chooseThis(@item.Id)">Choose this</button>'
            });

            google.maps.event.addListener(marker, 'click', function () {
                this['infowindow'].open(map, this);
            });
            gmarkers.push(marker);

            marker.setMap(map);
            </text>
            }


        }

    </script>
}

