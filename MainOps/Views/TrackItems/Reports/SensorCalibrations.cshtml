@model IEnumerable<MainOps.Models.SensorCalibration>

@{
    ViewData["Title"] = "Sensor Calibrations";
}
@inject UserManager<ApplicationUser> _userManager;
<h2>List of Sensor Calibrations</h2>

<form asp-controller="TrackItems" asp-action="ExportPumpInstall" method="post">
    <div style="display: flex; gap: 10px; align-items: center; margin-bottom: 20px;">
        <div>
            <select id="projectSelect" name="ProjectId" class="form-control" onchange="filterTable(this.value)" asp-items="ViewBag.ProjectId">
                <option value="all">@SharedLocalizer.GetLocalizedHtmlString("- Choose a project -")</option>
                @foreach (var item in Model.Select(x => x.Project?.Name).Distinct())
                {
                    <option value="@item">@item</option>
                }
            </select>
        </div>

        <div>
            <input type="text" id="searchInput" class="form-control" placeholder="@SharedLocalizer.GetLocalizedHtmlString("Search by Well Name...")" />
        </div>
        @* <div>
            <td>
                <button type="submit" class="btn-hoelscher">@SharedLocalizer.GetLocalizedHtmlString("Export")</button>
            </td>
        </div> *@
    </div>

</form>

<table class="table" id="projectTable">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Project)
            </th>
           @*  <th>
                @Html.DisplayNameFor(model => model.SubProject)
            </th>   *@         
            <th>
                @Html.DisplayNameFor(model => model.Well)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TimeStamp)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RefLevel)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Hand_dip)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ExpectedWaterlevel)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ScadaWaterlevel)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.SCADA_LevelMatch)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Comment)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DoneBy)
            </th>

            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Project.Name)
                </td>
              @*   <td>
                    @Html.DisplayFor(modelItem => item.SubProject.Name)
                </td> *@
                <td>
                    @Html.DisplayFor(modelItem => item.Well.WellName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TimeStamp)
                </td>
               
                <td>
                    @Html.DisplayFor(modelItem => item.RefLevel)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Hand_dip)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ExpectedWaterlevel)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ScadaWaterlevel)
                </td>
                <td>
                    @($"{(item.SCADA_LevelMatch ? "Yes" : "No")}")
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Comment)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DoneBy)
                </td>

                <td>
                    <form asp-action="SensorCalibrationReport_PDF" asp-controller="TrackItems" asp-route-id="@item.Id" method="get" target="_blank">
                        <button class="btn-hoelscher">@SharedLocalizer.GetLocalizedHtmlString("View")</button>
                    </form>
                    @if (User.IsInRole("Admin") || User.IsInRole("DivisionAdmin") || User.IsInRole("Manager") || (await _userManager.GetUserAsync(User)).full_name().Equals(item.DoneBy))
                    {
                        <form asp-action="Edit_SensorCalibration"  asp-route-id="@item.Id" method="get" target="_blank">
                            <button class="btn-hoelscher">@SharedLocalizer.GetLocalizedHtmlString("Edit")</button>
                        </form>
                        <form asp-action="Delete_SensorCalibration" asp-route-id="@item.Id" method="post">
                            <button class="btn-hoelscher" onclick="return confirm('Do you really want to delete this item?')">@SharedLocalizer.GetLocalizedHtmlString("Delete")</button>
                        </form>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    <script>
              // Create simplified data array to avoid circular references
             

              document.getElementById('searchInput').addEventListener('input', function () {
                  searchByWellName();
              });

              function searchByWellName() {
                  const searchInput = document.getElementById('searchInput').value.trim().toLowerCase();
                  const table = document.getElementById('projectTable');
                  const rows = document.querySelectorAll('#projectTable tbody tr');

                  let hasVisibleRow = false;

                  rows.forEach(row => {
                      const wellNameCell = row.cells[1]; // Adjust index based on Well Name column
                      if (wellNameCell) {
                          const wellName = wellNameCell.textContent.trim().toLowerCase();
                          if (wellName.includes(searchInput)) {
                              row.style.display = '';
                              hasVisibleRow = true;
                          } else {
                              row.style.display = 'none';
                          }
                      }
                  });

                  // Show table only if there are matching rows
                  table.style.display = hasVisibleRow ? '' : 'none';
              }

       
        function filterTable(projectName) {
               const table = document.getElementById('projectTable');
               const rows = document.querySelectorAll('#projectTable tbody tr');
               console.log('Selected: ' + projectName);

               if (projectName === '- Choose a project -' || projectName === 'all' ) {
                   // Show all rows when "Choose a project" is selected
                   rows.forEach(row => row.style.display = '');
                   table.style.display = ''; // Ensure the table is visible
                   return;
               }

               let hasVisibleRow = false; // To track if at least one row matches

               rows.forEach(row => {
                   const projectCell = row.cells[0].textContent.trim(); // Adjust index if needed
                   console.log('Project: ' + projectCell);

                   if (projectCell === projectName) {
                       row.style.display = "";
                       hasVisibleRow = true;
                   } else {
                       row.style.display = "none";
                   }
               });

               // Show table only if there are visible rows
               table.style.display = hasVisibleRow ? '' : 'none';
           }


              // Hide the table initially until an option is selected
              // document.addEventListener("DOMContentLoaded", function () {
              //     document.getElementById('loggerTable').style.display = 'none';
              // });


    </script>
}

