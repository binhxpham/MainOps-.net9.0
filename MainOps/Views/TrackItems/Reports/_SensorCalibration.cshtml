@model MainOps.Models.SensorCalibration
@{
    Layout = null;
}
<head>
    <meta name="viewport" content="width=device-width" charset="UTF-8" />
    <title>@SharedLocalizer.GetLocalizedHtmlString("Sensor Calibration PDF")</title>
    <link rel="stylesheet" href="@Url.Content("~/css/pdfcss.css")" />
</head>
@* @if (string.IsNullOrEmpty(Model.GeneratorName))
{
    Model.GeneratorName = Model.GeneratorNameLocation;
} *@
<body>
    <table style="page-break-inside:avoid;">
        <tr>
            <td colspan="3">
                <b>@SharedLocalizer.GetLocalizedHtmlString("Sensor Calibration")</b>
            </td>
        </tr>
        <tr>
            <td style="text-align:left;">
                <b>
                    @Html.DisplayNameFor(Model => Model.Project.Name)
                </b>
            </td>
            <td>
                @Html.DisplayFor(Model => Model.Project.Name)
            </td>
            <td rowspan="4" align="right"><img src="~/images/Divisions/Photos/@Model.Project.Division.Id/@Model.Project.Division.LogoPath" width="151" height="66" /></td>
        </tr>

        <tr>
            <td style="text-align:left;">
                <b>
                    @Html.DisplayNameFor(Model => Model.Project.ProjectNr)
                </b>
            </td>
            <td>
                @Html.DisplayFor(Model => Model.Project.ProjectNr)
            </td>
        </tr>
        @*  @if (Model.SubProjectId != null)
        {
            <tr>
                <td style="text-align:left;">
                    <b>
                        @Html.DisplayNameFor(Model => Model.SubProject.Name)
                    </b>
                </td>
                <td>
                    @Html.DisplayFor(Model => Model.SubProject.Name) : @Html.DisplayFor(Model => Model.SubProject.SubProjectNr)
                </td>
            </tr>
        } *@
       
        <tr>
            <td style="text-align:left;">
                <b>@Html.DisplayNameFor(Model => Model.Well)</b>
            </td>
            <td>
                @Html.DisplayFor(Model => Model.Well.WellName)
            </td>
        </tr>
        <tr>
            <td style="text-align:left;">
                <b>
                    @Html.DisplayNameFor(Model => Model.TimeStamp)
                </b>
            </td>
            <td>
                @Html.DisplayFor(Model => Model.TimeStamp.Date)
            </td>
        </tr>
        

    </table>
    <table>

        <tr>
            <td style="width:50%"><b>@Html.DisplayNameFor(model => model.RefLevel)</b></td>
            <td colspan="2">@Html.DisplayFor(model => model.RefLevel)</td>
        </tr>
        <tr>
            <td style="width:50%"><b>@Html.DisplayNameFor(model => model.Hand_dip)</b></td>
            <td colspan="2">@Html.DisplayFor(model => model.Hand_dip)</td>
        </tr>
        <tr>
            <td style="width:50%"><b>@Html.DisplayNameFor(model => model.ExpectedWaterlevel)</b></td>
            <td colspan="2">@Html.DisplayFor(model => model.ExpectedWaterlevel)</td>
        </tr>
        <tr>
            <td style="width:50%"><b>@Html.DisplayNameFor(model => model.ScadaWaterlevel)</b></td>
            <td colspan="2">@Html.DisplayFor(model => model.ScadaWaterlevel)</td>
        </tr>
        <tr>
            <td style="width:50%"><b>@Html.DisplayNameFor(model => model.SCADA_LevelMatch)</b></td>
            @if (Model.SCADA_LevelMatch)
            {
                <td style="width:25%"><span_circle style="background-color:forestgreen;">@SharedLocalizer.GetLocalizedHtmlString("Yes")</span_circle></td>
                <td style="width:25%">@SharedLocalizer.GetLocalizedHtmlString("No")</td>
            }
            else
            {
                <td style="width:25%">@SharedLocalizer.GetLocalizedHtmlString("Yes")</td>
                <td style="width:25%"><span_circle style="background-color:red;">@SharedLocalizer.GetLocalizedHtmlString("No")</span_circle></td>

            }
        </tr>
        @if (Model.Comment != null)
        {
            <tr>
                <td colspan="3"><b>@Html.DisplayNameFor(model => model.Comment)</b></td>
            </tr>
            <tr>
                <td colspan="3">
                    <textarea disabled="disabled" class="form-control" style="width:100%;" rows="6" cols="50">@Html.DisplayFor(x => x.Comment)</textarea>
                </td>
            </tr>
        }

    </table>
    <table>
        <tr>
            <td style="width:25%;"><b>@Html.DisplayNameFor(model => model.DoneBy)</b></td>
            <td style="width:75%;text-align:center;">@Html.DisplayFor(model => model.DoneBy)</td>

        </tr>
        <tr>
            <td style="width:25%;"><b>@Html.DisplayNameFor(model => model.Signature)</b></td>
            <td style="width:75%;"><img src="data:image/jpg;base64, @Model.Signature" style="width:100%;"></td>
        </tr>
    </table>
    <table name="phototable" style="page-break-inside:avoid;">
        @{ var rows = 0;}
        @if (Model.Photos.Count() % 3 == 0)
        {
            rows = Model.Photos.Count() / 3;
        }
        else
        {
            rows = Convert.ToInt32(Model.Photos.Count() / 3) + 1;
        }
        @{ var totalpics = Model.Photos.Count();}
        @for (int i = 0; i < rows; i++)
        {

            @if (totalpics - 3 >= 0) //enough room to add whole row
            {
                var photo1 = Model.Photos.ElementAt((i + 1) * 3 - 3);
                var photo2 = Model.Photos.ElementAt((i + 1) * 3 - 3 + 1);
                var photo3 = Model.Photos.ElementAt((i + 1) * 3 - 3 + 2);

                <tr>
                    <td><img src="@String.Concat("/AHAK/", @String.Concat(photo1.Path.Split(".")[0], ".", photo1.Path.Split(".")[1]).Replace("\\", "/").Split("/AHAK/")[1])" /></td>
                    <td><img src="@String.Concat("/AHAK/", @String.Concat(photo2.Path.Split(".")[0], ".", photo2.Path.Split(".")[1]).Replace("\\", "/").Split("/AHAK/")[1])" /></td>
                    <td><img src="@String.Concat("/AHAK/", @String.Concat(photo3.Path.Split(".")[0], ".", photo3.Path.Split(".")[1]).Replace("\\", "/").Split("/AHAK/")[1])" /></td>
                </tr>
                totalpics -= 3;
            }
            else if (totalpics - 2 >= 0)
            {
                var photo1 = Model.Photos.ElementAt((i + 1) * 3 - 3);
                var photo2 = Model.Photos.ElementAt((i + 1) * 3 - 3 + 1);
                <tr>
                    <td><img src="@String.Concat("/AHAK/", @String.Concat(photo1.Path.Split(".")[0], ".", photo1.Path.Split(".")[1]).Replace("\\", "/").Split("/AHAK/")[1])" /></td>
                    <td><img src="@String.Concat("/AHAK/", @String.Concat(photo2.Path.Split(".")[0], ".", photo2.Path.Split(".")[1]).Replace("\\", "/").Split("/AHAK/")[1])" /></td>
                    <td></td>
                </tr>
                totalpics -= 2;
            }
            else //enough room to add 1 picture in row
            {
                var photo1 = Model.Photos.ElementAt((i + 1) * 3 - 3);
                <tr>
                    <td colspan="3"><img src="@String.Concat("/AHAK/", @String.Concat(photo1.Path.Split(".")[0], ".", photo1.Path.Split(".")[1]).Replace("\\", "/").Split("/AHAK/")[1])" /></td>
                </tr>
                totalpics -= 1;
            }

        }
    </table>
   
</body>
@* 
<script src="~/js/jquery-ui-timepicker-addon.min.js"></script> *@
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://rawgit.com/moment/moment/2.2.1/min/moment.min.js"></script>

<script >
   
        // Define the key/value list
        // const generatorMap = {
        //       "Generator Nr. 1 (Atlas Copco)": "Svaneknoppen",
        //       "Generator Nr. 2 (Atlas Copco)": "Svaneknoppen",
        //       "Generator Nr. 3 (Atlas Copco)": "Svaneknoppen",
        //       "Generator Nr. 4 (Repto)": "Færgehavnsvej",
        //       "Generator Nr. 5 (Atlas Copco)": "Baltikavej",
        //       "Generator Nr. 6 (Atlas Copco)": "Baltikavej",
        //       "Generator Nr. 7 (Atlas Copco)": "Baltikavej",
        //       "Generator Nr. 8 (GSV)": "Baltikavej",
        //       "Generator Nr. 9 (Repto)": "Baltikavej",
        //       "Generator Nr. 10 (Repto)": "Baltikavej",
        //       "Generator Nr. 11 (Repto)": "Baltikavej",
        //       "Generator Nr. 12 (Repto)": "Baltikavej",
        //       "Generator Nr. 13 (Repto)": "Nordsøvej"
        // };

   
          // Function to decode HTML entities like &#230; → æ
        function decodeHTMLEntities(text) {
          const txt = document.createElement('textarea');
          txt.innerHTML = text;
          return txt.value;
        }

       

        // $(document).ready(function () {
        //     DisplayGoogleMap();
        // });

        // function DisplayGoogleMap() {
        //     //Set the Latitude and Longitude of the Map
           
        //     var myLatLng = { lat: @Model.Latitude, lng: @Model.Longitude };
        //     console.log('lat: ' +myLatLng.lat + ', longi: ' + myLatLng.lng );
        //     //Create Options or set different Characteristics of Google Map
        //     var mapOptions = {
        //         center: myLatLng,
        //         zoom: 11,
        //         minZoom: 4,
        //         mapTypeId: google.maps.MapTypeId.ROADMAP
        //     };
        //     //Display the Google map in the div control with the defined Options
        //     window.map = new google.maps.Map(document.getElementById("myDiv"), mapOptions);


       

        //     google.maps.event.addListener(marker, 'click', function () {
        //         this['infowindow'].open(map, this);
        //     });

        //     marker.setMap(window.map);
        // }
        // function addmarker(lati, longi, name) {
        //      var marker = new google.maps.Marker({
        //           map: window.map,
        //             position: { lat: lati, lng: longi },
        //           title: "hi",
        //     });
        //     marker['infowindow'] = new google.maps.InfoWindow({
        //         content: name
        //     });
        //     google.maps.event.addListener(marker, 'click', function () {
        //         this['infowindow'].open(window.map, this);
        //     });
        //     marker.setMap(map);
        // }
   
    </script>


