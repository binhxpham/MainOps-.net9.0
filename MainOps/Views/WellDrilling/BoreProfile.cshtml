@model MainOps.Models.Well
@inject IHostingEnvironment _env;
@{
    ViewData["Title"] = SharedLocalizer.GetLocalizedHtmlString("Bore Profile");
    var env = _env.WebRootPath.Replace("\\", "/") + "/wwwroot/";
    
}
<html>
<head>
    <style>
        @{ var heightfactor = (double)ViewData["heightfactor"];
            var heightfactor10th = heightfactor / 10.0;
            var heightfactor100th =heightfactor / 100.0;

            var heightstring = String.Concat(heightfactor10th, "cm !important");
            }
        ol,
        .li1 {
            /* removing the default list counters/markers: */
            list-style-type: none;
        }
        .mimbus2000{
            height:@String.Concat(ViewData["heightfactor"], "cm !important")

        }

           ol {
               /* resetting the counter so every <ol>
        has an independent count: */
               counter-reset: marker -1;
               padding-left:0;
           }
           .ol2{
               counter-reset: marker2 -1;
               padding-left:0;
           }
            tr{
                max-height:@String.Concat(heightfactor10th, "cm");
                min-height:@String.Concat(heightfactor10th, "cm");
            }

           .li1 {
               @*//height: 5cm; @String.Format("{0}cm",Model.WellLayers.Select(x => x.End_m).Max()); /*1cm*/*@
               height:@String.Concat(ViewData["heightfactor"], "cm");
               border-top: 1px solid #000;
               box-sizing: border-box;
               width: 1.5em;
               counter-increment: marker 1;
               position: relative;
               border-left: 1px solid #000;
           }

            .li1:first-child {
                counter-reset: marker -1;
            }

            .li1:first-child,
            .li1:nth-child(n+1) {
                width: 1.5em;
            }
            .li1:last-child {
                height: 0;
            }

            .li1:first-child::after,
            .li1:nth-child(n+1)::after {
                position: absolute;
                top: -0.5em;
                left: 100%;
                height: 1em;
                line-height: 1em;
                width: 1.5em;
                text-align: center;
                /* specifying the counter to use: */
                content: counter(marker);
            }
        .li2 {
            height: @String.Concat(ViewData["heightfactor"], "cm"); /*1cm*/
            border-top: 1px solid #000;
            box-sizing: border-box;
            width: 1.5em;
            counter-increment: marker2 -1;
            position: relative;
            border-left: 1px solid #000;
        }

            .li2:first-child {
                counter-reset: marker2 @Convert.ToInt32(Model.Coord_z + 1);
            }

            .li2:first-child,
            .li2:nth-child(n) {
                width: 1.5em;
            }
            .li2:last-child {
                height: 0;
            }

            .li2:first-child::after,
            .li2:nth-child(n)::after {
                position: absolute;
                top: -0.5em;
                left: 100%;
                height: 1em;
                line-height: 1em;
                width: 1.5em;
                text-align: center;
                /* specifying the counter to use: */
                content: counter(marker2);
            }
           th {
               vertical-align: bottom;
               text-align: center;
           }

               th span {
                   -ms-writing-mode: tb-rl;
                   -webkit-writing-mode: vertical-rl;
                   writing-mode: vertical-rl;
                   transform: rotate(180deg);
                   white-space: nowrap;
               }

            jammer {
                -ms-writing-mode: tb-rl;
                -webkit-writing-mode: vertical-rl;
                writing-mode: vertical-rl;
                transform: rotate(180deg);
                white-space: nowrap;
                text-align:center;
                align-content:center;
                @if(heightfactor < 2)
                {
                <text>
                font-size:9px;
                </text>
             }
            }


           .button-up,
           .button-down {
               position: relative;
               padding: 5px;
               margin: 30px auto;
               background: #000;
               height: 50px;
               width: 50px;
               border-radius: 50%;
               transition: all 0.2s linear;
           }

               .button-down:hover {
                   transform: translate3d(0, 10px, 0);
               }

               .button-up:hover {
                   transform: translate3d(0, -10px, 0);
               }

               .button-up::after,
               .button-down::after {
                   content: "";
                   position: absolute;
                   left: 17px;
                   z-index: 11;
                   display: block;
                   width: 25px;
                   height: 25px;
                   border-top: 2px solid #fff;
                   border-left: 2px solid #fff;
               }

               .button-up::after {
                   top: 20px;
                   transform: rotate(45deg);
               }

               .button-down::after {
                   top: 10px;
                   transform: rotate(225deg);
               }

           .arrow-right,
           .arrow-left,
           .long-arrow-right,
           .long-arrow-left,
           .long-arrow-down {
               display: block;
               margin: 10px 0 0 0;
               width: 25px;
               height: 25px;
               border-top: 2px solid #000;
               border-left: 2px solid #000;
           }

           .arrow-right,
           .long-arrow-right {
               transform: rotate(135deg);
           }

           .long-arrow-down {
               transform: rotate(225deg);
           }

           .arrow-left,
           .long-arrow-left {
               transform: rotate(-45deg);
           }

               .long-arrow-right::after,
               .long-arrow-left::after,
               .long-arrow-down::after {
                   content: "";
                   display: block;
                   width: 2px;
                   height: 45px;
                   background-color: black;
                   transform: rotate(-45deg) translate(15px, 4px);
                   left: 0;
                   top: 0em;
               }

    </style>
</head>
<body>
    @{ var heightfactor2 = (double)ViewData["heightfactor"];
        var heightfactor10th2 = heightfactor2 / 10.0;
        var heightfactor100th2 = heightfactor2 / 100.0;
        var heightstring2 = String.Concat(heightfactor10th2, "cm !important");
    }
    @{ var heightscale = heightfactor10th2;
        var ilength = Convert.ToInt32(Model.WellLayers.Select(x => x.End_m).Max() * 100);
        var tableheight = String.Format("{0}cm !important", Convert.ToDecimal(ilength / 100.0 * heightfactor2));
    }
    <h2>@SharedLocalizer.GetLocalizedHtmlString("Bore Profile")</h2>
    @*<h3><a asp-action="GeneratePDF" asp-controller="WellDrilling" asp-route-id="@Model.Id" target="_blank">@SharedLocalizer.GetLocalizedHtmlString("Generate PDF")</a></h3>*@
    @*<h3><a asp-action="GeneratePDFHtml" asp-controller="WellDrilling" asp-route-id="@Model.Id" target="_blank">@SharedLocalizer.GetLocalizedHtmlString("Generate PDF HTML")</a></h3>*@
    <form asp-action="GeneratePDF" asp-controller="WellDrilling" asp-route-id="@Model.Id" target="_blank" method="get">
        <h3>
            <input name="scale" value="@heightfactor2" hidden="hidden" />
            <button class="btn-hoelscher">@SharedLocalizer.GetLocalizedHtmlString("Generate PDF")</button>
        </h3>
    </form>

    @*<h3><a asp-action="GeneratePDF" asp-controller="WellDrilling" asp-route-id="@Model.Id" target="_blank">@SharedLocalizer.GetLocalizedHtmlString("Generate PDF")</a></h3>*@
    @if (Model.WellDrillingInstructionId != null)
    {
        <h3><a asp-action="GetDrillingInstructionPDF" asp-controller="WellDrilling" asp-route-id="@Model.WellDrillingInstructionId" target="_blank">@SharedLocalizer.GetLocalizedHtmlString("Show Drilling Instruction")</a></h3>
    }
    <table style="width:100%;table-layout:fixed;height:@tableheight">
        <tr style="width:8%;border-right: 1px solid black;">
            <th style="width:4%;"><span>@SharedLocalizer.GetLocalizedHtmlString("Depth(m)")</span></th>
            <td style="text-align:center;border-top:1px solid black;border-bottom:1px solid black;border-left:1px solid black;"></td>
            <td colspan="15" style="text-align: center; width: 35%; border-right: 1px solid black; border-top: 1px solid black; border-bottom: 1px solid black;">@SharedLocalizer.GetLocalizedHtmlString("Test Results")</td>
            <th style="border-left: 1px solid black; border-right: 1px solid black; border-top: 1px solid black; border-bottom: 1px solid black;width:4%;"><span>@SharedLocalizer.GetLocalizedHtmlString("Level(mDVR)")</span></th>
            <th style="border-left: 1px solid black; border-right: 1px solid black; border-top: 1px solid black; border-bottom: 1px solid black; width: 4%;"><span>@SharedLocalizer.GetLocalizedHtmlString("Geology")</span></th>
            <th style="border-left: 1px solid black; border-right: 1px solid black; border-top: 1px solid black; border-bottom: 1px solid black; width:30px;"><span style="text-align:center;">@SharedLocalizer.GetLocalizedHtmlString("Sample")</span></th>
            <th style="width:7%;border-left: 1px solid black; border-right: 1px solid black; border-top: 1px solid black; border-bottom: 1px solid black;"><span>@SharedLocalizer.GetLocalizedHtmlString("No.")</span></th>
            <td style="text-align: center; width: 35%; border-top: 1px solid black; border-bottom: 1px solid black;">@SharedLocalizer.GetLocalizedHtmlString("Geological Description")</td>
            <th style="width: 3%; border-top: 1px solid black; border-bottom: 1px solid black;"><span>@SharedLocalizer.GetLocalizedHtmlString("Env.")</span></th>
            <th style="border-right: 1px solid black; width: 3%; border-top: 1px solid black; border-bottom: 1px solid black;"><span>@SharedLocalizer.GetLocalizedHtmlString("Age")</span></th>
        </tr>
        <tr style="border-right: 1px solid black;">
            <td></td>
            <td style="border-left: 1px solid black;">@String.Format("{0:N2} mDVR90", Model.Coord_z)</td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td style="border-left: 1px solid black; border-right: 1px solid black;"></td>
            <td style="border-left: 1px solid black; border-right: 1px solid black;"></td>
            <td style="border-left: 1px solid black; border-right: 1px solid black;"></td>
            <td style="border-left: 1px solid black; border-right: 1px solid black;"></td>
            <td style="border-left: 1px solid black;"></td>
            <td></td>
            <td style="border-right: 1px solid black;"></td>
        </tr>
        <tr>
            <td></td>
            <td style="border-bottom: 1px solid black; border-left: 1px solid black; vertical-align: bottom; text-align: center;"><span class="long-arrow-down"></span></td>
            <td style="border-bottom:1px solid black;"></td>
            <td style="border-bottom:1px solid black;"></td>
            <td style="border-bottom:1px solid black;"></td>
            <td style="border-bottom:1px solid black;"></td>
            <td style="border-bottom:1px solid black;"></td>
            <td style="border-bottom:1px solid black;"></td>
            <td style="border-bottom:1px solid black;"></td>
            <td style="border-bottom:1px solid black;"></td>
            <td style="border-bottom:1px solid black;"></td>
            <td style="border-bottom:1px solid black;"></td>
            <td style="border-bottom:1px solid black;"></td>
            <td style="border-bottom:1px solid black;"></td>
            <td style="border-bottom:1px solid black;"></td>
            <td style="border-bottom:1px solid black;"></td>
            <td style="border-bottom:1px solid black;"></td>
            <td style="border-bottom: 1px solid black; border-left: 1px solid black; border-right: 1px solid black;"></td>
            <td style="border-bottom: 1px solid black; border-left: 1px solid black; border-right: 1px solid black;"></td>
            <td style="border-bottom: 1px solid black; border-left: 1px solid black; border-right: 1px solid black;"></td>
            <td style="border-bottom: 1px solid black; border-left: 1px solid black; border-right: 1px solid black;"></td>
            <td style="border-bottom: 1px solid black; border-left: 1px solid black;"></td>
            <td style="border-bottom: 1px solid black;"></td>
            <td style="border-bottom: 1px solid black;border-right: 1px solid black;"></td>
        </tr>
        @{ var heightrow = heightstring2; }  @*"0.4cm !important";}*@
        <tr style="height:@tableheight;">
            <td style="padding:0px;vertical-align:top;height:@tableheight;">
                <table cellpadding="0" style="height:@tableheight;margin:0;width:100%;">
                    <tr>
                        @{var heightoftd = String.Format("{0}cm", Model.WellLayers.Select(x => x.End_m).Max() * 100 * heightscale);
                            int rowspanruler = Convert.ToInt32(Convert.ToDouble(Model.WellLayers.Select(x => x.End_m).Max()) * 100); }
                        <td rowspan="@rowspanruler" style="padding: 0px; vertical-align: top;">
                            <ol id="rule" style="height:100%;">
                                @for (int j = 0; j <= rowspanruler; j = j + 10)
                                {
                                    @if (j % 100 == 0 || j == 0)
                                    {
                                        if (j == rowspanruler || j + 100 > rowspanruler)
                                        {
                                            <li class="li1" style="@String.Format("{0}cm",Model.WellLayers.Select(x => x.End_m).Max())"></li>
                                        }
                                        else
                                        {
                                            <li class="li1" style="height:@String.Format("{0}cm",heightfactor2);"></li>
                                        }

                                    }

                                }
                            </ol>
                        </td>
                    </tr>
                </table>
            </td>
            @for (int j = 0; j <= 10; j++)
            {
                <td style="padding:0px;width:100%;vertical-align:top;height:@tableheight;">
                    <table cellpadding="0" style="height:@tableheight; border:1px solid black; width:100%;">
                        @for (int i = 0; i < ilength; i = i + 10)
                        {
                            <tr style="height:@heightrow;padding:0px;">
                                <td style="padding:0px;border:1px solid black;width:100%"></td>
                            </tr>
                        }
                    </table>
                </td>
            }

            <td colspan="2" style="padding:0px;vertical-align:top;height:@tableheight;">
                <table cellpadding="0" style="height:@tableheight;width:100%;">
                    @for (int i = 0; i < ilength; i = i + 10) // i = i +10
                    {
                        var bentonit = Model.BentoniteLayers.Where(x => x.meter_start * 100 < (i + 10) && x.meter_start * 100 >= i).FirstOrDefault();
                        var sand = Model.SandLayers.Where(x => x.meter_start * 100 < (i + 10) && x.meter_start * 100 >= i).FirstOrDefault();
                        bool inbentonite = false;
                        bool insand = false;

                        int rowspansandbentonite = 1;
                        heightrow = String.Format("{0}cm !important", rowspansandbentonite * heightscale);
                        if (bentonit != null)
                        {
                            rowspansandbentonite = Convert.ToInt32((bentonit.meter_end - bentonit.meter_start) * 10);
                            heightrow = String.Format("{0}cm !important", rowspansandbentonite * heightscale);
                            <tr style="height:@heightrow;">
                                @if (heightscale < 4)
                                {
                                    <td style="padding: 0px; width: 40%; border-left: 1px solid black;"><jammer style="font-size:9px;">@bentonit.CastingType.TypeOfCasting</jammer></td>
                                }
                                else
                                {
                                    <td style="padding: 0px; width: 40%; border-left: 1px solid black;"><jammer>@bentonit.CastingType.TypeOfCasting</jammer></td>
                                }

                                <td style="padding: 0px; width: 60%; border-left: 1px solid black; background-image: url( @String.Concat("/Images/LayerBackGroundImages/1.jpg") ); background-repeat: repeat; background-position: center center; background-size: 100%;"></td>
                            </tr>
                        }
                        else if (sand != null)
                        {

                            rowspansandbentonite = Convert.ToInt32((sand.meter_end - sand.meter_start) * 10);
                            heightrow = String.Format("{0}cm !important", rowspansandbentonite * heightscale);
                            <tr style="height:@heightrow;">
                                @if (heightscale < 4)
                                {
                                    <td style="padding: 0px; width: 40%; border-left: 1px solid black;"><jammer style="font-size:9px;">@sand.SandType.TypeOfSand </jammer></td>
                                }
                                else
                                {
                                    <td style="padding: 0px; width: 40%; border-left: 1px solid black;"><jammer>@sand.SandType.TypeOfSand</jammer></td>
                                }
                                <td style="padding: 0px; width: 60%; border-left: 1px solid black; background-image: url( @String.Concat("/Images/LayerBackGroundImages/2_large.jpg") ); background-repeat: repeat; background-position: center center; background-size: 100%;"></td>
                            </tr>
                        }
                        else
                        {

                            if (Model.BentoniteLayers.Where(x => Convert.ToInt32(x.meter_start * 100) < i + 10 && Convert.ToInt32(x.meter_end * 100 - 1) >= i).FirstOrDefault() != null)
                            {
                                inbentonite = true;
                            }
                            if (Model.SandLayers.Where(x => Convert.ToInt32(x.meter_start * 100) < i + 10 && Convert.ToInt32(x.meter_end * 100 - 1) >= i).FirstOrDefault() != null)
                            {
                                insand = true;
                            }
                            if (insand || inbentonite)
                            {

                            }
                            else
                            {
                                <tr style="height:@heightrow;"><td style="padding: 0px;"></td><td style="padding: 0px;"></td></tr>
                            }
                        }
                    }
                </table>
            </td>
            <td style="vertical-align:top;padding:0px;height:@tableheight;">
                <table cellpadding="0" style="height:@tableheight;width:100%;">
                    @for (int i = 0; i < ilength; i = i + 10) // i = i +10
                    {
                        var filter = Model.FilterLayers.Where(x => x.meter_start * 100 < (i + 10) && x.meter_start * 100 >= i).FirstOrDefault();

                        bool infilter = false;

                        int rowspans = 1;
                        heightrow = String.Format("{0}cm !important", rowspans * heightscale);
                        if (filter != null)
                        {
                            rowspans = Convert.ToInt32((filter.meter_end - filter.meter_start) * 10);
                            heightrow = String.Format("{0}cm !important", rowspans * heightscale);
                            <tr style="height:@heightrow;">
                                <td style="padding: 0px; width: 100%; background-image: url( @String.Concat("/Images/LayerBackGroundImages/3.jpg") ); background-repeat: repeat; background-position: center center; background-size: 100%; border-left: 1px solid black; border-right: 1px solid black;"></td>
                            </tr>
                        }
                        else
                        {
                            if (Model.FilterLayers.Where(x => Convert.ToInt32(x.meter_start * 100) < i + 10 && Convert.ToInt32(x.meter_end * 100 - 1) >= i).FirstOrDefault() != null)
                            {
                                infilter = true;
                            }
                            if (infilter)
                            {

                            }
                            else
                            {
                                <tr id="@i" style="height:@heightrow;"><td style="width: 100%; padding: 0px; border-left: 1px solid black; border-right: 1px solid black; padding: 0px;"></td></tr>
                            }
                        }
                    }
                </table>
            </td>
            <td colspan="2" style="vertical-align:top;padding:0px;height:@tableheight;">
                <table cellpadding="0" style="height:@tableheight;width:100%;">
                    @for (int i = 0; i < ilength; i = i + 10) // i = i +10
                    {
                        var bentonit = Model.BentoniteLayers.Where(x => x.meter_start * 100 < (i + 10) && x.meter_start * 100 >= i).FirstOrDefault();
                        var sand = Model.SandLayers.Where(x => x.meter_start * 100 < (i + 10) && x.meter_start * 100 >= i).FirstOrDefault();
                        bool inbentonite = false;
                        bool insand = false;

                        int rowspansandbentonite = 1;
                        heightrow = String.Format("{0}cm !important", rowspansandbentonite * heightscale);
                        if (bentonit != null)
                        {
                            rowspansandbentonite = Convert.ToInt32((bentonit.meter_end - bentonit.meter_start) * 10);
                            heightrow = String.Format("{0}cm !important", rowspansandbentonite * heightscale);
                            <tr style="height:@heightrow;">
                                <td style="padding: 0px; width: 60%; border-right: 1px solid black; background-image: url( @String.Concat("/Images/LayerBackGroundImages/1.jpg") ); background-repeat: repeat; background-position: center center; background-size: 100%;"></td>
                                @if (heightscale < 2)
                                {
                                    <td style="padding: 0px; width: 40%; border-right: 1px solid black;"><jammer style="font-size:9px;">@bentonit.CastingType.TypeOfCasting</jammer></td>
                                }
                                else
                                {
                                    <td style="padding: 0px; width: 40%; border-right: 1px solid black;"><jammer>@bentonit.CastingType.TypeOfCasting</jammer></td>
                                }


                            </tr>
                        }
                        else if (sand != null)
                        {

                            rowspansandbentonite = Convert.ToInt32((sand.meter_end - sand.meter_start) * 10);
                            heightrow = String.Format("{0}cm !important", rowspansandbentonite * heightscale);
                            <tr style="height:@heightrow;">
                                <td style="padding: 0px; width: 60%; border-right: 1px solid black; background-image: url( @String.Concat("/Images/LayerBackGroundImages/2_large.jpg") ); background-repeat: repeat; background-position: center center; background-size: 100%;"></td>
                                @if (heightscale < 2)
                                {
                                    <td style="padding: 0px; width: 40%; border-right: 1px solid black;"><jammer style="font-size:9px;">@sand.SandType.TypeOfSand </jammer></td>
                                }
                                else
                                {
                                    <td style="padding: 0px; width: 40%; border-right: 1px solid black;"><jammer>@sand.SandType.TypeOfSand</jammer></td>
                                }

                            </tr>
                        }
                        else
                        {
                            if (Model.BentoniteLayers.Where(x => Convert.ToInt32(x.meter_start * 100) < i + 10 && Convert.ToInt32(x.meter_end * 100 - 1) >= i).FirstOrDefault() != null)
                            {
                                inbentonite = true;
                            }
                            if (Model.SandLayers.Where(x => Convert.ToInt32(x.meter_start * 100) < i + 10 && Convert.ToInt32(x.meter_end * 100 - 1) >= i).FirstOrDefault() != null)
                            {
                                insand = true;
                            }
                            if (insand || inbentonite)
                            {

                            }
                            else
                            {
                                <tr style="height:@heightrow;"><td style="padding: 0px; "></td><td style="padding: 0px; "></td></tr>
                            }
                        }
                    }
                </table>
            </td>
            <td style="vertical-align:top;padding:0px;height:@tableheight;">
                <table cellpadding="0" style="height:@tableheight;width:100%;">

                    @{heightrow = String.Format("{0}cm !important", Math.Abs(Convert.ToDouble(Model.Coord_z - Convert.ToInt32(Model.Coord_z)))); }

                    <tr>
                        <td rowspan="@rowspanruler" style="border-left:1px solid black;padding-top:@heightrow;padding-bottom:0;vertical-align:top;">
                            <ol class="ol2" id="rule2">
                                @for (int k = 0; k <= rowspanruler; k = k + 10)
                                {
                                    if (k % 100 == 0 || k == 0)
                                    {
                                        if (k == rowspanruler || k + 100 > rowspanruler)
                                        {
                                            <li class="li2"></li>
                                        }
                                        else
                                        {
                                            <li class="li2" style="height:@String.Format("{0}cm",heightfactor2);"></li>
                                        }
                                    }
                                }
                            </ol>
                        </td>
                    </tr>
                </table>
            </td>
            <td style="vertical-align:top;padding:0px;height:@tableheight;">
                <table cellpadding="0" style="height:@tableheight;width:100%;">
                    @for (int i = 0; i < ilength; i = i + 10) // i = i +10
                    {
                        var layer = Model.WellLayers.Where(x => x.Start_m * 100 < (i + 10) && x.Start_m * 100 >= i).FirstOrDefault();
                        if (layer != null)
                        {
                            double rowspannr = Convert.ToInt32((layer.End_m - layer.Start_m) * 10);
                            heightrow = String.Format("{0}cm !important", rowspannr * heightscale);
                            <tr style="height:@heightrow;border:1px solid black;">
                                <td style="padding: 0px; background-image: url( @String.Concat("/Images/LayerBackGroundImages/", layer.LayerId, ".jpg")); background-repeat: repeat; background-position: center center; background-size: 100%;"></td>
                            </tr>

                        }
                    }
                </table>
            </td>
            <td style="vertical-align:top;padding:0px;height:@tableheight;">
                <table cellpadding="0" style="height:@tableheight;width:100%;">
                    @for (int i = 0; i < ilength; i = i + 10)
                    {
                        var sample = Model.SoilSamples.Where(x => x.sample_meter * 100 < (i + 10) && x.sample_meter * 100 >= i).FirstOrDefault();

                        if (sample != null)
                        {
                            var nextsample = Model.SoilSamples.Where(x => x.sample_meter > sample.sample_meter).OrderBy(y => y.sample_meter).FirstOrDefault();
                            double rowspannr = 0;
                            if (nextsample != null)
                            {
                                rowspannr = Convert.ToDouble((nextsample.sample_meter - sample.sample_meter) * 10);
                                heightrow = String.Format("{0}cm !important", rowspannr * heightscale);
                            }
                            else
                            {

                                rowspannr = (ilength - i) / 10.0;
                                heightrow = String.Format("{0}cm !important", rowspannr * heightscale);

                            }
                            int rowspanratio = Convert.ToInt32(100 / rowspannr);
                            string aspectratio = String.Format("{0}/{1}", rowspanratio.ToString(), 100.ToString());
                            <tr style="height:@heightrow">
                                <td style="padding: 0px; width: 100%; border-right: 1px solid black;">
                                    <img src="~/images/LayerBackGroundImages/cross.jpg" style="aspect-ratio:@aspectratio;height:@heightrow; width:100%;" />
                                </td>
                            </tr>

                        }

                    }
                </table>
            </td>
            <td style="vertical-align:top;padding:0px;height:@tableheight;">
                <table cellpadding="0" style="height:@tableheight;width:100%;">
                    @for (int i = 0; i < ilength; i = i + 10)
                    {
                        var sample = Model.SoilSamples.Where(x => x.sample_meter * 100 < (i + 10) && x.sample_meter * 100 >= i).FirstOrDefault();

                        if (sample != null)
                        {
                            var nextsample = Model.SoilSamples.Where(x => x.sample_meter > sample.sample_meter).OrderBy(y => y.sample_meter).FirstOrDefault();
                            double rowspannr = 0;
                            if (nextsample != null)
                            {
                                rowspannr = Convert.ToDouble((nextsample.sample_meter - sample.sample_meter) * 10);
                                heightrow = String.Format("{0}cm !important", rowspannr * heightscale);
                            }
                            else
                            {
                                rowspannr = (ilength - i) / 10.0;
                                heightrow = String.Format("{0}cm !important", rowspannr * heightscale);

                            }
                            <tr style="height:@heightrow">
                                <td style="width:100%;padding:0;text-align:center;vertical-align:top;">
                                    @String.Format("{0}", sample.Code)
                                </td>

                            </tr>

                        }
                    }
                </table>
            </td>
            <td style="vertical-align:top;padding:0px;height:@tableheight;">
                <table cellpadding="0" style="height:@tableheight;width:100%;">
                    @for (int i = 0; i < ilength; i = i + 10)
                    {
                        var sample = Model.SoilSamples.Where(x => x.sample_meter * 100 < (i + 10) && x.sample_meter * 100 >= i).FirstOrDefault();

                        if (sample != null)
                        {
                            var layer = Model.WellLayers.Where(x => x.Start_m <= sample.sample_meter && x.End_m >= sample.sample_meter).FirstOrDefault();
                            var nextsample = Model.SoilSamples.Where(x => x.sample_meter > sample.sample_meter).OrderBy(y => y.sample_meter).FirstOrDefault();
                            double rowspannr = 0;
                            if (nextsample != null)
                            {
                                rowspannr = Convert.ToDouble((nextsample.sample_meter - sample.sample_meter) * 10);
                                heightrow = String.Format("{0}cm !important", rowspannr * heightscale);
                            }
                            else
                            {
                                rowspannr = (ilength - i) / 10.0;
                                heightrow = String.Format("{0}cm !important", rowspannr * heightscale);

                            }
                            int rowspanratio = Convert.ToInt32(100 / rowspannr);
                            string aspectratio = String.Format("{0}/{1}", rowspanratio.ToString(), 100.ToString());
                            <tr style="height:@heightrow">
                                <td style="width:100%;padding:0;vertical-align:top;">
                                    @if (layer != null)
                                    {
                                        @if (sample.IsWet == true)
                                        {
                                            var odor = SharedLocalizer.GetLocalizedHtmlString("odor");
                                            var wet = SharedLocalizer.GetLocalizedHtmlString("wet");
                                            var color = SharedLocalizer.GetLocalizedHtmlString("color");
                                            @String.Format("{5} : {0}, {1} : {2}, {3} : {4}", wet, odor, sample.Odour, color, sample.SoilColor, layer.Layer.LayerType)

                                        }
                                        else
                                        {
                                            var odor = SharedLocalizer.GetLocalizedHtmlString("odor");
                                            var dry = SharedLocalizer.GetLocalizedHtmlString("dry");
                                            var color = SharedLocalizer.GetLocalizedHtmlString("color");
                                            @String.Format("{5} : {0} ,{1} : {2}, {3} : {4}", dry, odor, sample.Odour, color, sample.SoilColor, layer.Layer.LayerType)
                                        }
                                    }
                                    else
                                    {
                                        @if (sample.IsWet == true)
                                        {
                                            var odor = SharedLocalizer.GetLocalizedHtmlString("odor");
                                            var wet = SharedLocalizer.GetLocalizedHtmlString("wet");
                                            var color = SharedLocalizer.GetLocalizedHtmlString("color");
                                            @String.Format("{0}, {1} : {2}, {3} : {4}", wet, odor, sample.Odour, color, sample.SoilColor)

                                        }
                                        else
                                        {
                                            var odor = SharedLocalizer.GetLocalizedHtmlString("odor");
                                            var dry = SharedLocalizer.GetLocalizedHtmlString("dry");
                                            var color = SharedLocalizer.GetLocalizedHtmlString("color");
                                            @String.Format("{0}, {1} : {2}, {3} : {4}", dry, odor, sample.Odour, color, sample.SoilColor)
                                        }
                                    }

                                </td>

                            </tr>

                        }
                    }
                </table>
            </td>
            @*<td style="vertical-align:top;padding:0px;">
                    <table cellpadding="0" style="height:@tableheight;width:100%;">
                        @for (int i = 0; i < ilength; i = i + 10) // i = i +10
                        {
                            var layer = Model.WellLayers.Where(x => x.Start_m * 100 < (i + 10) && x.Start_m * 100 >= i).FirstOrDefault();
                            @if (layer != null)
                            {
                                int rowspannr = Convert.ToInt32((layer.End_m - layer.Start_m) * 10);
                                heightrow = String.Format("{0}cm !important", rowspannr * heightscale);
                                <tr style="height:@heightrow;border-left:1px solid black;">
                                    <td style="font-size: 12px;padding:0;">
                                        @if (layer.Description != null)
                                        {
                                            @String.Format("{0} , {1}", layer.Layer.LayerType, layer.Description)
                                        }
                                        else
                                        {
                                            @layer.Layer.LayerType
                                        }
                                    </td>
                                </tr>

                            }
                        }
                    </table>
                </td>*@
            @{ heightrow = String.Format("{0}cm !important", 1 * heightscale);}
            <td style="vertical-align:top;padding:0px;height:@tableheight;">
                <table cellpadding="0" style="height:@tableheight;width:100%;">
                    @for (int i = 0; i < ilength; i = i + 10) // i = i +10
                    {
                        heightrow = String.Format("{0}cm !important", 1 * heightscale);
                        <tr style="height:@heightrow;">
                            <td style="font-size: 12px;padding-top:0px;">
                            </td>
                        </tr>


                    }
                </table>
            </td>
            @{ heightrow = String.Format("{0}cm !important", 1 * heightscale);}
            <td style="vertical-align:top;padding:0px;height:@heightrow;">
                <table cellpadding="0" style="height:@tableheight;width:100%;border-right:1px solid black;">

                    <tr style="height:100%;">

                        <td style="font-size: 12px;padding-top:0px;">
                        </td>
                    </tr>

                </table>
            </td>
        </tr>
    </table>
    <footer>
        @{
            var filterslots = "";
            if (Model.FilterLayers.FirstOrDefault() != null)
            {
                filterslots = Model.FilterLayers.First().Slitsize;
            }
        }
        <table style="width:100%; table-layout:fixed;break-inside:avoid;">
            <tr>
                <td colspan="20" style="border-top:1px solid black;border-bottom:1px solid black;border-left:1px solid black;"></td>
                <td colspan="4" rowspan="8" style="height:100%;width:50%;border:1px solid black;">
                    <textarea readonly="readonly" rows="8" cols="60" style="height: 100%; border: none; resize: none;overflow:hidden;">@Model.Well_Type @Environment.NewLine @Environment.NewLine @SharedLocalizer.GetLocalizedHtmlString("Stand Pipe") 1: @Model.PipeDiameter , @SharedLocalizer.GetLocalizedHtmlString("Slots") @filterslots - T.O.P : @String.Format("{0:N3} mDVR90",Model.Coord_z) @Environment.NewLine @Environment.NewLine @Environment.NewLine @SharedLocalizer.GetLocalizedHtmlString("Method"): @Model.Drill_Method @Environment.NewLine @SharedLocalizer.GetLocalizedHtmlString("Coordinate System"): @Model.CoordSystem.system @Environment.NewLine x: @Model.Coord_x , y: @Model.Coord_y</textarea>
                </td>
            </tr>
            <tr>
                <td colspan="20" style="border-top: 1px solid black; border-bottom: 1px solid black; border-left: 1px solid black;"></td>

            </tr>
            <tr>
                <td colspan="20" style="border-top: 1px solid black; border-bottom: 1px solid black; border-left: 1px solid black;"></td>
            </tr>
            <tr>
                <td colspan="20" style="border-top: 1px solid black; border-bottom: 1px solid black; border-left: 1px solid black;"></td>
            </tr>
            <tr>
                <td colspan="20" style="border-top: 1px solid black; border-bottom: 1px solid black; border-left: 1px solid black;"></td>
            </tr>
            <tr>
                <td colspan="20" style="border-top: 1px solid black; border-bottom: 1px solid black; border-left: 1px solid black;"></td>
            </tr>
            <tr>
                <td colspan="20" style="border-top: 1px solid black; border-bottom: 1px solid black; border-left: 1px solid black;"></td>
            </tr>
            <tr>
                <td colspan="20" style="border-top: 1px solid black; border-bottom: 1px solid black; border-left: 1px solid black;"></td>
            </tr>
            <tr style="height:2px;"><td colspan="24"></td></tr>
        </table>
        <table style="width:100%;table-layout:fixed;border:1px solid black;margin-bottom:8px;">
            <tr style="font-size:15px;">
                <td colspan="2" style="border:0;text-align:left;"><label asp-for="Project">@SharedLocalizer.GetLocalizedHtmlString("Project")</label>:</td>
                <td colspan="2" style="border:0;text-align:left;">@Model.Project.ProjectNr</td>
                <td colspan="2" style="border:0;text-align:left;">@Model.Project.Name</td>
                @if (Model.SubProjectId != null)
                {
                    <td colspan="2" style="border:0;text-align:left;"><label asp-for="SubProject">@SharedLocalizer.GetLocalizedHtmlString("SubProject")</label>:</td>
                    <td colspan="2" style="border:0;text-align:left;">@Html.DisplayFor(Model => Model.SubProject.Name) </td>
                }
                else
                {
                    <td colspan="4" style="border:0;"></td>
                }

            </tr>

            <tr style="font-size:10px;">
                <td><label asp-for="Done_By">@SharedLocalizer.GetLocalizedHtmlString("Drilled by")</label>:</td>
                <td>@Html.DisplayFor(Model => Model.Project.Division.Name)</td>
                <td><label>@SharedLocalizer.GetLocalizedHtmlString("Date")</label>:</td>
                <td>@String.Format("{0:yyyy-MM-dd}", Model.Drill_Date_End)</td>
                <td><label asp-for="Assessed_By"></label>:</td>
                <td>@Html.DisplayFor(Model => Model.Assessed_By)</td>
                <td><label asp-for="DGU_Number"></label>:</td>
                <td>@Html.DisplayFor(Model => Model.DGU_Number) </td>
                <td><label asp-for="WellName"></label>:</td>
                <td>@Html.DisplayFor(Model => Model.WellName)</td>
            </tr>
            <tr style="font-size:11px;">
                <td><label asp-for="Done_By">@SharedLocalizer.GetLocalizedHtmlString("Done by:")</label>:</td>
                <td>@Html.DisplayFor(Model => Model.Done_By)</td>
                <td><label asp-for="Approved_By">@SharedLocalizer.GetLocalizedHtmlString("Approved by:")</label></td>
                <td>@Html.DisplayFor(Model => Model.Approved_By)</td>
                <td><label asp-for="Approved_Date">@SharedLocalizer.GetLocalizedHtmlString("Approved date:")</label></td>
                <td>@String.Format("{0:yyyy-MM-dd}", Model.Approved_Date)</td>
                <td></td>
                <td><label>@SharedLocalizer.GetLocalizedHtmlString("Attachments:")</label></td>
                <td>@Html.DisplayFor(Model => Model.Attachments)</td>
            </tr>
            <tr style="border-top:1px solid black;">
                <td colspan="5" style="text-align:left;"><img src="~/images/Divisions/Photos/@Model.Project.Division.Id/@Model.Project.Division.LogoPath" width="100" height="44" /></td>
                <td colspan="5" style="text-align:right;font-size:18px;">@SharedLocalizer.GetLocalizedHtmlString("Drill Profile")</td>
            </tr>
        </table>
    </footer>
</body>
</html>

@section Scripts
{
}

