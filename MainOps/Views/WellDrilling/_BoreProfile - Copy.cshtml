@model MainOps.Models.Well

@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>@SharedLocalizer.GetLocalizedHtmlString("Bore Profile")</title>
    <script src="https://code.jquery.com/jquery-3.2.1.js"></script>
    <link rel="stylesheet" href="@Url.Content("~/css/BoreProfileCSS.css")" asp-append-version="true" />
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/Footer.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/Different.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/Sidebarmenu.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/PicturesHeader.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/RandomCss.css" asp-append-version="true">
    <link rel="stylesheet" href="~/css/RandomCss.min.css" asp-append-version="true">
    <style>
    .li2:first-child {
        counter-reset: marker2 @Convert.ToInt32(Model.Coord_z + 1);

    }
    .tableheader{
        display:table-header-group;
    }
    .tablefooter{
        display:table-row-group !important;
    }
    tr {
            page-break-inside: avoid;
            page-break-after: auto
        
    }
    .tablefooter > tr{
        max-height:2cm;
        min-height:0.5cm;
        height:0.7cm;
    }

        
    </style>
</head>
<body>
    @{ var heightscale = 0.4;
        var ilength = Convert.ToInt32(Model.WellLayers.Select(x => x.End_m).Max() * 100);
        var tableheight = String.Format("{0}cm", Convert.ToDecimal(ilength / 100.0 * heightscale * 10));
        var filterslots = "";
        if (Model.FilterLayers.FirstOrDefault() != null)
        {
            filterslots = Model.FilterLayers.First().Slitsize;
        }
    }
    <h2>@SharedLocalizer.GetLocalizedHtmlString("Bore Profile")</h2>
    <table style="width:100%;table-layout:fixed;">
        <tr style="border-right: 1px solid black;">
            <th style="width:5%;"><span>@SharedLocalizer.GetLocalizedHtmlString("Depth(m)")</span></th>
            <td style="width:2.5%;text-align:center;border-top:1px solid black;border-bottom:1px solid black;border-left:1px solid black;"></td>
            <td colspan="15" style="text-align: center; width: 35%; border-right: 1px solid black; border-top: 1px solid black; border-bottom: 1px solid black;">@SharedLocalizer.GetLocalizedHtmlString("Test Results")</td>
            <th style="border-left: 1px solid black; border-right: 1px solid black; border-top: 1px solid black; border-bottom: 1px solid black;width:5%;"><span>@SharedLocalizer.GetLocalizedHtmlString("Level(mDVR)")</span></th>
            <th style="border-left: 1px solid black; border-right: 1px solid black; border-top: 1px solid black; border-bottom: 1px solid black; width: 5%;"><span>@SharedLocalizer.GetLocalizedHtmlString("Geology")</span></th>
            <th style="border-left: 1px solid black; border-right: 1px solid black; border-top: 1px solid black; border-bottom: 1px solid black; width:30px;"><span style="text-align:center;">@SharedLocalizer.GetLocalizedHtmlString("Sample")</span></th>
            <th style="width:7%;border-left: 1px solid black; border-right: 1px solid black; border-top: 1px solid black; border-bottom: 1px solid black;"><span>@SharedLocalizer.GetLocalizedHtmlString("No.")</span></th>
            <td style="text-align: center; width: 35%; border-top: 1px solid black; border-bottom: 1px solid black;">@SharedLocalizer.GetLocalizedHtmlString("Geological Description")</td>
            <th style="width: 3%; border-top: 1px solid black; border-bottom: 1px solid black;"><span>@SharedLocalizer.GetLocalizedHtmlString("Env.")</span></th>
            <th style="border-right: 1px solid black; width: 3%; border-top: 1px solid black; border-bottom: 1px solid black;"><span>@SharedLocalizer.GetLocalizedHtmlString("Age")</span></th>
        </tr>
        <tr style="border-right: 1px solid black;">
            <td></td>
            <td style="border-left: 1px solid black;">@String.Format("{0:N2} mDVR90", Model.Coord_z)</td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td style="border-left: 1px solid black; border-right: 1px solid black;"></td>
            <td style="border-left: 1px solid black; border-right: 1px solid black;"></td>
            <td style="border-left: 1px solid black; border-right: 1px solid black;"></td>
            <td style="border-left: 1px solid black; border-right: 1px solid black;"></td>
            <td style="border-left: 1px solid black;"></td>
            <td></td>
            <td style="border-right: 1px solid black;"></td>
        </tr>
        <tr>
            <td></td>
            <td style="width:100%;border-bottom: 1px solid black; border-left: 1px solid black; vertical-align: bottom; text-align: center;"><span class="long-arrow-down"></span></td>
            <td style="border-bottom:1px solid black;"></td>
            <td style="border-bottom:1px solid black;"></td>
            <td style="border-bottom:1px solid black;"></td>
            <td style="border-bottom:1px solid black;"></td>
            <td style="border-bottom:1px solid black;"></td>
            <td style="border-bottom:1px solid black;"></td>
            <td style="border-bottom:1px solid black;"></td>
            <td style="border-bottom:1px solid black;"></td>
            <td style="border-bottom:1px solid black;"></td>
            <td style="border-bottom:1px solid black;"></td>
            <td style="border-bottom:1px solid black;"></td>
            <td style="border-bottom:1px solid black;"></td>
            <td style="border-bottom:1px solid black;"></td>
            <td style="border-bottom:1px solid black;"></td>
            <td style="border-bottom:1px solid black;"></td>
            <td style="border-bottom: 1px solid black; border-left: 1px solid black; border-right: 1px solid black;"></td>
            <td style="border-bottom: 1px solid black; border-left: 1px solid black; border-right: 1px solid black;"></td>
            <td style="border-bottom: 1px solid black; border-left: 1px solid black; border-right: 1px solid black;"></td>
            <td style="border-bottom: 1px solid black; border-left: 1px solid black; border-right: 1px solid black;"></td>
            <td style="border-bottom: 1px solid black; border-left: 1px solid black;"></td>
            <td style="border-bottom: 1px solid black;"></td>
            <td style="border-bottom: 1px solid black;border-right: 1px solid black;"></td>
        </tr>
        @{ var heightrow = "0.4cm !important";}
        <tr>
            <td style="padding:0px;vertical-align:top;">
                <table cellpadding="0" style="height:@tableheight;margin:0;width:100%;">
                    <tr>
                        @{var heightoftd = String.Format("{0}cm", Model.WellLayers.Select(x => x.End_m).Max() * 100 * heightscale);
                            int rowspanruler = Convert.ToInt32(Convert.ToDouble(Model.WellLayers.Select(x => x.End_m).Max()) * 100); }
                        <td rowspan="@rowspanruler" style="padding-top:0;padding-bottom:0;vertical-align:top;">
                            <ol id="rule" style="height:100%;">
                                @for (int j = 0; j <= rowspanruler; j = j + 10)
                                {
                                    @if (j % 100 == 0 || j == 0)
                                    {
                                        if (j == rowspanruler || j + 100 > rowspanruler)
                                        {
                                            <li class="li1"></li>
                                        }
                                        else
                                        {
                                            <li class="li1" style="height:4cm !important;"></li>
                                        }

                                    }

                                }
                            </ol>
                        </td>
                    </tr>
                </table>
            </td>
            @for (int j = 0; j <= 10; j++)
            {
                <td style="padding:0px;width:100%;vertical-align:top;">
                    <table cellpadding="0" style="height:@tableheight; border:1px solid black; width:100%;">
                        @for (int i = 0; i < ilength; i = i + 10)
                        {
                            <tr style="height:@heightrow;padding:0px;">
                                <td style="padding:0px;border:1px solid black;width:100%"></td>
                            </tr>
                        }
                    </table>
                </td>
            }

            <td style="padding:0px;vertical-align:top;width:100%;">
                <table cellpadding="0" style="height:@tableheight;width:100%;table-layout:fixed;">
                    @for (int i = 0; i < ilength; i = i + 10) // i = i +10
                    {
                        var bentonit = Model.BentoniteLayers.Where(x => x.meter_start * 100 < (i + 10) && x.meter_start * 100 >= i).FirstOrDefault();
                        var sand = Model.SandLayers.Where(x => x.meter_start * 100 < (i + 10) && x.meter_start * 100 >= i).FirstOrDefault();
                        bool inbentonite = false;
                        bool insand = false;

                        int rowspansandbentonite = 1;
                        heightrow = String.Format("{0}cm !important", rowspansandbentonite * heightscale);
                        if (bentonit != null)
                        {
                            rowspansandbentonite = Convert.ToInt32((bentonit.meter_end - bentonit.meter_start) * 10);
                            heightrow = String.Format("{0}cm !important", rowspansandbentonite * heightscale);
                            <tr style="height:@heightrow;">
                                <td class="verticaltd" style="border-left: 1px solid black;"><div class="rotated">@SharedLocalizer.GetLocalizedHtmlString("bentonite")</div></td>
                            </tr>
                        }
                        else if (sand != null)
                        {

                            rowspansandbentonite = Convert.ToInt32((sand.meter_end - sand.meter_start) * 10);
                            heightrow = String.Format("{0}cm !important", rowspansandbentonite * heightscale);
                            <tr style="height:@heightrow;">
                                @*<td style="border-left: 1px solid black;width:100%;"><span style="writing-mode:vertical-lr;-ms-writing-mode:tb-rl;transform:rotate(180deg);">@SharedLocalizer.GetLocalizedHtmlString("sand")</span></td>*@
                                <td class="verticaltd" style="border-left: 1px solid black;width:100%;"><div class="rotated">@SharedLocalizer.GetLocalizedHtmlString("sand")</div></td>
                            </tr>
                        }
                        else
                        {
                            if (Model.BentoniteLayers.Where(x => Convert.ToInt32(x.meter_start * 100) < i + 10 && Convert.ToInt32(x.meter_end * 100 - 1) >= i).FirstOrDefault() != null)
                            {
                                inbentonite = true;
                            }
                            if (Model.SandLayers.Where(x => Convert.ToInt32(x.meter_start * 100) < i + 10 && Convert.ToInt32(x.meter_end * 100 - 1) >= i).FirstOrDefault() != null)
                            {
                                insand = true;
                            }
                            if (insand || inbentonite)
                            {

                            }
                            else
                            {
                                <tr style="height:@heightrow;"><td></td></tr>
                            }
                        }
                    }
                </table>
            </td>
            <td style="padding:0px;vertical-align:top;width:100%;">
                <table cellpadding="0" style="height:@tableheight;width:100%;table-layout:fixed;">
                    @for (int i = 0; i < ilength; i = i + 10) // i = i +10
                    {
                        var bentonit = Model.BentoniteLayers.Where(x => x.meter_start * 100 < (i + 10) && x.meter_start * 100 >= i).FirstOrDefault();
                        var sand = Model.SandLayers.Where(x => x.meter_start * 100 < (i + 10) && x.meter_start * 100 >= i).FirstOrDefault();
                        bool inbentonite = false;
                        bool insand = false;

                        int rowspansandbentonite = 1;
                        heightrow = String.Format("{0}cm !important", rowspansandbentonite * heightscale);
                        if (bentonit != null)
                        {
                            rowspansandbentonite = Convert.ToInt32((bentonit.meter_end - bentonit.meter_start) * 10);
                            heightrow = String.Format("{0}cm !important", rowspansandbentonite * heightscale);
                            <tr style="height:@heightrow;">
                                <td style="border-left: 1px solid black; background-image: url( @String.Concat("/Images/LayerBackGroundImages/1.jpg") ); background-repeat: repeat; background-position: center center; background-size: 100%;"></td>
                            </tr>
                        }
                        else if (sand != null)
                        {

                            rowspansandbentonite = Convert.ToInt32((sand.meter_end - sand.meter_start) * 10);
                            heightrow = String.Format("{0}cm !important", rowspansandbentonite * heightscale);
                            <tr style="height:@heightrow;">
                                <td style="border-left: 1px solid black; background-image: url( @String.Concat("/Images/LayerBackGroundImages/2.jpg") ); background-repeat: repeat; background-position: center center; background-size: 100%;"></td>
                            </tr>
                        }
                        else
                        {
                            if (Model.BentoniteLayers.Where(x => Convert.ToInt32(x.meter_start * 100) < i + 10 && Convert.ToInt32(x.meter_end * 100 - 1) >= i).FirstOrDefault() != null)
                            {
                                inbentonite = true;
                            }
                            if (Model.SandLayers.Where(x => Convert.ToInt32(x.meter_start * 100) < i + 10 && Convert.ToInt32(x.meter_end * 100 - 1) >= i).FirstOrDefault() != null)
                            {
                                insand = true;
                            }
                            if (insand || inbentonite)
                            {

                            }
                            else
                            {
                                <tr style="height:@heightrow;"><td></td></tr>
                            }
                        }
                    }
                </table>
            </td>
            <td style="vertical-align:top;padding:0px;">
                <table cellpadding="0" style="height:@tableheight;width:100%;table-layout:fixed;">
                    @for (int i = 0; i < ilength; i = i + 10) // i = i +10
                    {
                        var filter = Model.FilterLayers.Where(x => x.meter_start * 100 < (i + 10) && x.meter_start * 100 >= i).FirstOrDefault();

                        bool infilter = false;

                        int rowspans = 1;
                        heightrow = String.Format("{0}cm !important", rowspans * heightscale);
                        if (filter != null)
                        {
                            rowspans = Convert.ToInt32((filter.meter_end - filter.meter_start) * 10);
                            heightrow = String.Format("{0}cm !important", rowspans * heightscale);
                            <tr style="height:@heightrow;border-top:1px solid black;border-bottom:1px solid black;">
                                <td style="width:100%;background-image: url( @String.Concat("/Images/LayerBackGroundImages/3.jpg") ); background-repeat: repeat;background-position:center center; background-size: auto; border-left: 1px solid black; border-right: 1px solid black;">
                            </tr>
                        }
                        else
                        {
                            if (Model.FilterLayers.Where(x => Convert.ToInt32(x.meter_start * 100) < i + 10 && Convert.ToInt32(x.meter_end * 100 - 1) >= i).FirstOrDefault() != null)
                            {
                                infilter = true;
                            }
                            if (infilter)
                            {

                            }
                            else
                            {
                                <tr style="height:@heightrow;"><td style="width:100%;border-left: 1px solid black; border-right: 1px solid black;"></td></tr>
                            }
                        }
                    }
                </table>
            </td>
            <td style="vertical-align:top;padding:0px;width:100%;">
                <table cellpadding="0" style="height:@tableheight;width:100%;table-layout:fixed;">
                    @for (int i = 0; i < ilength; i = i + 10) // i = i +10
                    {
                        var bentonit = Model.BentoniteLayers.Where(x => x.meter_start * 100 < (i + 10) && x.meter_start * 100 >= i).FirstOrDefault();
                        var sand = Model.SandLayers.Where(x => x.meter_start * 100 < (i + 10) && x.meter_start * 100 >= i).FirstOrDefault();
                        bool inbentonite = false;
                        bool insand = false;

                        int rowspansandbentonite = 1;
                        heightrow = String.Format("{0}cm !important", rowspansandbentonite * heightscale);
                        if (bentonit != null)
                        {
                            rowspansandbentonite = Convert.ToInt32((bentonit.meter_end - bentonit.meter_start) * 10);
                            heightrow = String.Format("{0}cm !important", rowspansandbentonite * heightscale);
                            <tr style="height:@heightrow;">
                                <td style="background-image: url( @String.Concat("/Images/LayerBackGroundImages/1.jpg") ); background-repeat: repeat; background-position: center center; background-size: 100%;"></td>
                            </tr>
                        }
                        else if (sand != null)
                        {

                            rowspansandbentonite = Convert.ToInt32((sand.meter_end - sand.meter_start) * 10);
                            heightrow = String.Format("{0}cm !important", rowspansandbentonite * heightscale);
                            <tr style="height:@heightrow;">
                                <td style="padding-bottom: 0;padding-top:0; background-image: url( @String.Concat("/Images/LayerBackGroundImages/2.jpg") ); background-repeat: repeat; background-position: center center; background-size: 100%;"></td>
                            </tr>
                        }
                        else
                        {
                            if (Model.BentoniteLayers.Where(x => Convert.ToInt32(x.meter_start * 100) < i + 10 && Convert.ToInt32(x.meter_end * 100 - 1) >= i).FirstOrDefault() != null)
                            {
                                inbentonite = true;
                            }
                            if (Model.SandLayers.Where(x => Convert.ToInt32(x.meter_start * 100) < i + 10 && Convert.ToInt32(x.meter_end * 100 - 1) >= i).FirstOrDefault() != null)
                            {
                                insand = true;
                            }
                            if (insand || inbentonite)
                            {

                            }
                            else
                            {
                                <tr style="height:@heightrow;"><td></td></tr>
                            }
                        }
                    }
                </table>
            </td>
            <td style="vertical-align:top;padding:0px;width:100%;">
                <table cellpadding="0" style="height:@tableheight;width:100%;table-layout:fixed;">
                    @for (int i = 0; i < ilength; i = i + 10) // i = i +10
                    {
                        var bentonit = Model.BentoniteLayers.Where(x => x.meter_start * 100 < (i + 10) && x.meter_start * 100 >= i).FirstOrDefault();
                        var sand = Model.SandLayers.Where(x => x.meter_start * 100 < (i + 10) && x.meter_start * 100 >= i).FirstOrDefault();
                        bool inbentonite = false;
                        bool insand = false;

                        int rowspansandbentonite = 1;
                        heightrow = String.Format("{0}cm !important", rowspansandbentonite * heightscale);
                        if (bentonit != null)
                        {
                            rowspansandbentonite = Convert.ToInt32((bentonit.meter_end - bentonit.meter_start) * 10);
                            heightrow = String.Format("{0}cm !important", rowspansandbentonite * heightscale);
                            <tr style="height:@heightrow;">
                                <td style="width:40%; padding-bottom: 0; padding-top: 0; border-left: 1px solid black;"><div class="rotated">@SharedLocalizer.GetLocalizedHtmlString("bentonite")</div></td>
                            </tr>
                        }
                        else if (sand != null)
                        {

                            rowspansandbentonite = Convert.ToInt32((sand.meter_end - sand.meter_start) * 10);
                            heightrow = String.Format("{0}cm !important", rowspansandbentonite * heightscale);
                            <tr style="height:@heightrow;">
                                <td style="padding-bottom: 0;padding-top:0; border-left: 1px solid black;"><div class="rotated">@SharedLocalizer.GetLocalizedHtmlString("sand")</div></td>
                            </tr>
                        }
                        else
                        {
                            if (Model.BentoniteLayers.Where(x => Convert.ToInt32(x.meter_start * 100) < i + 10 && Convert.ToInt32(x.meter_end * 100 - 1) >= i).FirstOrDefault() != null)
                            {
                                inbentonite = true;
                            }
                            if (Model.SandLayers.Where(x => Convert.ToInt32(x.meter_start * 100) < i + 10 && Convert.ToInt32(x.meter_end * 100 - 1) >= i).FirstOrDefault() != null)
                            {
                                insand = true;
                            }
                            if (insand || inbentonite)
                            {

                            }
                            else
                            {
                                <tr style="height:@heightrow;"><td></td></tr>
                            }
                        }
                    }
                </table>
            </td>
            <td style="vertical-align:top;padding:0px;">
                <table cellpadding="0" style="height:@tableheight;width:100%;table-layout:fixed;">

                    @{heightrow = String.Format("{0}cm !important", Math.Abs(Convert.ToDouble(Model.Coord_z - Convert.ToInt32(Model.Coord_z)))); }

                    <tr>
                        <td rowspan="@rowspanruler" style="border-left:1px solid black;padding-top:@heightrow;padding-bottom:0;vertical-align:top;">
                            <ol class="ol2" id="rule2">
                                @for (int k = 0; k <= rowspanruler; k = k + 10)
                                {
                                    if (k % 100 == 0 || k == 0)
                                    {
                                        if (k == rowspanruler || k + 100 > rowspanruler)
                                        {
                                            <li class="li2"></li>
                                        }
                                        else
                                        {
                                            <li class="li2" style="height:4cm !important;"></li>
                                        }
                                    }
                                }
                            </ol>
                        </td>
                    </tr>
                </table>
            </td>
            <td style="vertical-align:top;padding:0px;">
                <table cellpadding="0" style="height:@tableheight;width:100%;table-layout:fixed;">
                    @for (int i = 0; i < ilength; i = i + 10) // i = i +10
                    {
                        var layer = Model.WellLayers.Where(x => x.Start_m * 100 < (i + 10) && x.Start_m * 100 >= i).FirstOrDefault();
                        if (layer != null)
                        {
                            double rowspannr = Convert.ToInt32((layer.End_m - layer.Start_m) * 10);
                            heightrow = String.Format("{0}cm !important", rowspannr * heightscale);
                            <tr style="height:@heightrow;border:1px solid black;page-break-inside:auto;">
                                <td style="background-image: url( @String.Concat("/Images/LayerBackGroundImages/", layer.LayerId, ".jpg") ); background-repeat: repeat; background-position: center center; background-size: 100%;"></td>
                            </tr>

                        }
                    }
                </table>
            </td>
            <td style="vertical-align:top;padding:0px;">
                <table cellpadding="0" style="height:@tableheight;width:100%;table-layout:fixed;">
                    @for (int i = 0; i < ilength; i = i + 10)
                    {
                        var sample = Model.SoilSamples.Where(x => x.sample_meter * 100 < (i + 10) && x.sample_meter * 100 >= i).FirstOrDefault();

                        if (sample != null)
                        {
                            var nextsample = Model.SoilSamples.Where(x => x.sample_meter > sample.sample_meter).OrderBy(y => y.sample_meter).FirstOrDefault();
                            double rowspannr = 0;
                            if (nextsample != null)
                            {
                                rowspannr = Convert.ToDouble((nextsample.sample_meter - sample.sample_meter) * 10);
                                heightrow = String.Format("{0}cm !important", rowspannr * heightscale);
                            }
                            else
                            {

                                rowspannr = (ilength - i) / 10.0;
                                heightrow = String.Format("{0}cm !important", rowspannr * heightscale);

                            }
                            int rowspanratio = Convert.ToInt32(100 / rowspannr);
                            string aspectratio = String.Format("{0}/{1}", rowspanratio.ToString(), 100.ToString());
                            <tr style="height:@heightrow">
                                <td style="width:100%;padding:0;border-right:1px solid black;">
                                    <img src="~/images/LayerBackGroundImages/cross.jpg" style="aspect-ratio:@aspectratio;height:@heightrow; width:100%;" />
                                </td>
                            </tr>

                        }

                    }
                </table>
            </td>
            <td style="vertical-align:top;padding:0px;">
                <table cellpadding="0" style="height:@tableheight;width:100%;table-layout:fixed;">
                    @for (int i = 0; i < ilength; i = i + 10)
                    {
                        var sample = Model.SoilSamples.Where(x => x.sample_meter * 100 < (i + 10) && x.sample_meter * 100 >= i).FirstOrDefault();

                        if (sample != null)
                        {
                            var nextsample = Model.SoilSamples.Where(x => x.sample_meter > sample.sample_meter).OrderBy(y => y.sample_meter).FirstOrDefault();
                            double rowspannr = 0;
                            if (nextsample != null)
                            {
                                rowspannr = Convert.ToDouble((nextsample.sample_meter - sample.sample_meter) * 10);
                                heightrow = String.Format("{0}cm !important", rowspannr * heightscale);
                            }
                            else
                            {
                                rowspannr = (ilength - i) / 10.0;
                                heightrow = String.Format("{0}cm !important", rowspannr * heightscale);

                            }
                            <tr style="height:@heightrow">
                                <td style="width:100%;padding:0;text-align:center;vertical-align:top;font-size:10px;">
                                    @String.Format("{0}", sample.Code)
                                </td>

                            </tr>

                        }
                    }
                </table>
            </td>
            <td style="vertical-align:top;padding:0px;">
                <table cellpadding="0" style="height:@tableheight;width:100%;table-layout:fixed;">
                    @for (int i = 0; i < ilength; i = i + 10)
                    {
                        var sample = Model.SoilSamples.Where(x => x.sample_meter * 100 < (i + 10) && x.sample_meter * 100 >= i).FirstOrDefault();

                        if (sample != null)
                        {
                            var layer = Model.WellLayers.Where(x => x.Start_m <= sample.sample_meter && x.End_m >= sample.sample_meter).FirstOrDefault();
                            var nextsample = Model.SoilSamples.Where(x => x.sample_meter > sample.sample_meter).OrderBy(y => y.sample_meter).FirstOrDefault();
                            double rowspannr = 0;
                            if (nextsample != null)
                            {
                                rowspannr = Convert.ToDouble((nextsample.sample_meter - sample.sample_meter) * 10);
                                heightrow = String.Format("{0}cm !important", rowspannr * heightscale);
                            }
                            else
                            {
                                rowspannr = (ilength - i) / 10.0;
                                heightrow = String.Format("{0}cm !important", rowspannr * heightscale);

                            }
                            int rowspanratio = Convert.ToInt32(100 / rowspannr);
                            string aspectratio = String.Format("{0}/{1}", rowspanratio.ToString(), 100.ToString());
                            <tr style="height:@heightrow">
                                <td style="width:100%;padding:0;vertical-align:top;">
                                    @if (layer != null)
                                    {
                                        @if (sample.IsWet == true)
                                        {
                                            var odor = SharedLocalizer.GetLocalizedHtmlString("odor");
                                            var wet = SharedLocalizer.GetLocalizedHtmlString("wet");
                                            var color = SharedLocalizer.GetLocalizedHtmlString("color");
                                            @String.Format("{5} : {0}, {1} : {2}, {3} : {4}", wet, odor, sample.Odour, color, sample.SoilColor, layer.Layer.LayerType)

                                        }
                                        else
                                        {
                                            var odor = SharedLocalizer.GetLocalizedHtmlString("odor");
                                            var dry = SharedLocalizer.GetLocalizedHtmlString("dry");
                                            var color = SharedLocalizer.GetLocalizedHtmlString("color");
                                            @String.Format("{5} : {0} ,{1} : {2}, {3} : {4}", dry, odor, sample.Odour, color, sample.SoilColor, layer.Layer.LayerType)
                                        }
                                    }
                                    else
                                    {

                                        @if (sample.IsWet == true)
                                        {
                                            var odor = SharedLocalizer.GetLocalizedHtmlString("odor");
                                            var wet = SharedLocalizer.GetLocalizedHtmlString("wet");
                                            var color = SharedLocalizer.GetLocalizedHtmlString("color");
                                            @String.Format("{0}, {1} : {2}, {3} : {4}", wet, odor, sample.Odour, color, sample.SoilColor)

                                        }
                                        else
                                        {
                                            var odor = SharedLocalizer.GetLocalizedHtmlString("odor");
                                            var dry = SharedLocalizer.GetLocalizedHtmlString("dry");
                                            var color = SharedLocalizer.GetLocalizedHtmlString("color");
                                            @String.Format("{0}, {1} : {2}, {3} : {4}", dry, odor, sample.Odour, color, sample.SoilColor)
                                        }
                                    }

                                </td>

                            </tr>

                        }
                    }
                </table>
            </td>

            @{ heightrow = String.Format("{0}cm !important", 1 * heightscale);}
            <td style="vertical-align:top;padding:0px;">
                <table cellpadding="0" style="height:@tableheight;width:100%;table-layout:fixed;">
                    @for (int i = 0; i < ilength; i = i + 10) // i = i +10
                    {
                        heightrow = String.Format("{0}cm !important", 1 * heightscale);
                        <tr style="height:@heightrow;">
                            <td style="font-size: 12px;padding-top:0px;">
                            </td>
                        </tr>


                    }
                </table>
            </td>
            @{ heightrow = String.Format("{0}cm !important", 1 * heightscale);}
            <td style="vertical-align:top;padding:0px;height:@heightrow;table-layout:fixed;">
                <table cellpadding="0" style="height:100%;width:100%;border-right:1px solid black;">

                    <tr style="height:100%;">

                        <td style="font-size: 12px;padding-top:0px;">
                        </td>
                    </tr>

                </table>
            </td>
        </tr>
        <tfoot class="tablefooter">
            <tr>
                <td colspan="20" style="border-top:1px solid black;border-bottom:1px solid black;border-left:1px solid black;"></td>
                <td colspan="4" rowspan="8" style="height:100%;width:50%;border:1px solid black;">
                    <textarea readonly="readonly" rows="8" cols="60" style="height: 100%; border: none; resize: none;overflow:hidden;">@Model.Well_Type @Environment.NewLine @Environment.NewLine @SharedLocalizer.GetLocalizedHtmlString("Stand Pipe") 1: @Model.PipeDiameter , @SharedLocalizer.GetLocalizedHtmlString("Slots") @filterslots - T.O.P : @String.Format("{0:N3} mDVR90",Model.Coord_z) @Environment.NewLine @Environment.NewLine @Environment.NewLine @SharedLocalizer.GetLocalizedHtmlString("Method"): @Model.Drill_Method @Environment.NewLine @SharedLocalizer.GetLocalizedHtmlString("Coordinate System"): @Model.CoordSystem.system @Environment.NewLine x: @Model.Coord_x , y: @Model.Coord_y</textarea>
                </td>
            </tr>
            <tr>
                <td colspan="20" style="border-top: 1px solid black; border-bottom: 1px solid black; border-left: 1px solid black;"></td>
                
            </tr>
            <tr>
                <td colspan="20" style="border-top: 1px solid black; border-bottom: 1px solid black; border-left: 1px solid black;"></td>
            </tr>
            <tr>
                <td colspan="20" style="border-top: 1px solid black; border-bottom: 1px solid black; border-left: 1px solid black;"></td>
            </tr>
            <tr>
                <td colspan="20" style="border-top: 1px solid black; border-bottom: 1px solid black; border-left: 1px solid black;"></td>
            </tr>
            <tr>
                <td colspan="20" style="border-top: 1px solid black; border-bottom: 1px solid black; border-left: 1px solid black;"></td>
            </tr>
            <tr>
                <td colspan="20" style="border-top: 1px solid black; border-bottom: 1px solid black; border-left: 1px solid black;"></td>
            </tr>
            <tr>
                <td colspan="20" style="border-top: 1px solid black; border-bottom: 1px solid black; border-left: 1px solid black;"></td>
            </tr>
            <tr style="height:2px;"><td colspan="24"></td></tr>
            <tr style="border:1px solid black;">
                <td colspan="24" style="width:100%;">
                    <table style="width:100%;table-layout:fixed;margin-bottom:6px;">
                        <tr style="font-size:15px;">
                            <td colspan="2" style="border:0;text-align:left;"><label asp-for="Project">@SharedLocalizer.GetLocalizedHtmlString("Project")</label>:</td>
                            <td colspan="2" style="border:0;text-align:left;">@Model.Project.ProjectNr</td>
                            <td colspan="2" style="border:0;text-align:left;">@Model.Project.Name</td>
                            @if (Model.SubProjectId != null)
                            {
                        <td colspan="2" style="border:0;text-align:left;"><label asp-for="SubProject">@SharedLocalizer.GetLocalizedHtmlString("SubProject")</label>:</td>
                        <td colspan="2" style="border:0;text-align:left;">@Html.DisplayFor(Model => Model.SubProject.Name) </td>
                            }
                            else
                            {
                                <td colspan="4" style="border:0;"></td>
                            }

                        </tr>


                        <tr style="font-size:10px;">
                            <td><label asp-for="Done_By">@SharedLocalizer.GetLocalizedHtmlString("Drilled by")</label>:</td>
                            <td>@Html.DisplayFor(Model => Model.Project.Division.Name)</td>
                            <td><label>@SharedLocalizer.GetLocalizedHtmlString("Date")</label>:</td>
                            <td>@String.Format("{0:yyyy-MM-dd}", Model.Drill_Date_End)</td>
                            <td><label asp-for="Assessed_By"></label>:</td>
                            <td>@Html.DisplayFor(Model => Model.Assessed_By)</td>
                            <td><label asp-for="DGU_Number"></label>:</td>
                            <td>@Html.DisplayFor(Model => Model.DGU_Number) </td>
                            <td><label asp-for="WellName"></label>:</td>
                            <td>@Html.DisplayFor(Model => Model.WellName)</td>
                        </tr>
                        <tr style="font-size:11px;">
                            <td><label asp-for="Done_By">@SharedLocalizer.GetLocalizedHtmlString("Done by:")</label>:</td>
                            <td>@Html.DisplayFor(Model => Model.Done_By)</td>
                            <td><label asp-for="Approved_By">@SharedLocalizer.GetLocalizedHtmlString("Approved by:")</label></td>
                            <td>@Html.DisplayFor(Model => Model.Approved_By)</td>
                            <td><label asp-for="Approved_Date">@SharedLocalizer.GetLocalizedHtmlString("Approved date:")</label></td>
                            <td>@String.Format("{0:yyyy-MM-dd}", Model.Approved_Date)</td>
                            <td></td>
                            <td><label>@SharedLocalizer.GetLocalizedHtmlString("Attachments:")</label></td>
                            <td>@Html.DisplayFor(Model  => Model.Attachments)</td>
                        </tr>
                        <tr style="border-top:1px solid black;">
                            <td colspan="5" style="text-align:left;"><img src="~/images/Divisions/Photos/@Model.Project.Division.Id/@Model.Project.Division.LogoPath" width="100" height="44" /></td>
                            <td colspan="5" style="text-align:right;font-size:18px;">@SharedLocalizer.GetLocalizedHtmlString("Drill Profile")</td>
                        </tr>
                    </table>
                </td>
            </tr>
        </tfoot>
    </table>
</body>
</html>