<head>
    <meta name="viewport" content="width=device-width" />
    <link rel="stylesheet" href="@Url.Content("~/css/loadercess.css")" />
</head>

    <div id="theloader" class="loader" hidden="hidden" style="align-self:center;"></div>
    <div class="container">
        <div id="chart1" style="width:100%;"></div>
    </div>
    <div class="container">
        <div id="chart2"></div>
    </div>
    <input type="hidden" id="graphname" value="@ViewData["graphname"]" />
    <input type="hidden" id="mpId" value="@ViewData["MeasPointId"]" />
    <a asp-action="index">@SharedLocalizer.GetLocalizedHtmlString("Return to Index")</a>
    @Html.DropDownList("thenextid", ViewData["MeasPoints"] as IEnumerable<SelectListItem>, SharedLocalizer.GetLocalizedHtmlString("Please Select Measurement Point"), new { id = "dropd", style = "width:250px;height:40px;" })
    <button type="button" onclick="addData();">@Localizer["Add data"]</button>
    <table>
        <tr>
            <td>@SharedLocalizer.GetLocalizedHtmlString("Start"):</td>
            <td><input type="datetime-local" id="StartDate" name="StartDate" value="@DateTime.Now.AddYears(-5).ToString("yyyy-MM-ddTHH:mm")" onchange="drawchart();" /></td>
        </tr>
        <tr>
            <td>@SharedLocalizer.GetLocalizedHtmlString("End"):</td>
            <td><input type="datetime-local" id="EndDate" name="EndDate" value="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" onchange="drawchart();" /></td>
        </tr>
        <tr>
            <td>
                @SharedLocalizer.GetLocalizedHtmlString("Sum values?")
            </td>
            <td><input id="dothesum" value="false" type="checkbox" onclick="$(this).val(this.checked ? true : false)" /></td>
        </tr>
    </table>
        

    @section scripts{
        <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
        <script src="https://rawgit.com/moment/moment/2.2.1/min/moment.min.js"></script>
        <script>
            var thename = document.getElementById('graphname').value;
            var theid = document.getElementById('mpId').value;
            var therealdata;
            var columns = [];
            var index = 0;
            var datas = [];
            var flowstrings = ['watermeter','vandur', 'flowmeter', 'sanitary', 'discharge', ' wm', 'storm', 'kloak'];
            google.charts.load('current', { 'packages': ['corechart'] });
            google.load('visualization', '1.0', { 'packages': ['corechart'], 'callback': drawchart });
            function toggleLoad() {
                var x = document.getElementById("theloader");
                if (x.style.display === "none") {
                    x.style.display = "block";
                } else {
                    x.style.display = "none";
                }
            }
            function checker(value2) {
                var value = value2.toLowerCase();
                for (var i = 0; i < flowstrings.length; i++) {
                    if (value.indexOf(flowstrings[i]) > -1) {
                        return true;
                    }
                }
                return false;
            }
            function calculateSeries(joinedData) {
                var series = {};
                for (var i = 0; i < joinedData.getNumberOfColumns() - 1; i++) {
                    var thelabel = joinedData.getColumnLabel(i + 1);
                    if (thelabel.toLowerCase().includes('m3/h') == 1 || thelabel.toLowerCase().includes('flowrate') == 1) {
                        series[i] = {
                            type: "line",
                            targetAxisIndex: 1 };
                    }
                    else {
                        series[i] = {
                            type: "line",
                            targetAxisIndex: 0
                        };
                    }

                }

                return series;
            }
            function drawchart() {
                datas = []; // new
                index = 0; //new
                var startdate = new Date($("#StartDate").val());
                var enddate = new Date($("#EndDate").val());
                var data = new google.visualization.DataTable();
                var data3 = new google.visualization.DataTable();
                data.addColumn('datetime', 'TimeStamp');
                data.addColumn('number', getBaseName(thename));
                if (checker(thename)) {
                    data3.addColumn('datetime', 'TimeStamp');
                    data3.addColumn('number', getBaseName(thename) + ' m3/h');
                }
                $.post('JsonData/' + theid, function (d) {
                    //toggleLoad();
                    var lasttime = '';
                    for (i = 0; i < d.length; i++) {
                        var timeStamp = new Date(d[i].timeStamp);
                        if (timeStamp >= startdate && timeStamp <= enddate)
                        {
                            var time = { v: timeStamp, f: moment(timeStamp).format('YYYY-MM-DD HH:mm:ss') };
                            var val = d[i].dataValue;
                            data.addRow([time, val]);
                            if (i > 0 && checker(thename))
                            {
                                var dif = timeStamp.getTime() - lasttime.getTime();
                                var Seconds_from_T1_to_T2 = dif / 1000.0;
                                var Seconds_Between_Dates = Math.abs(Seconds_from_T1_to_T2);
                                var Hours_Between_Dates = Seconds_Between_Dates / 3600.0;
                                var measDiff = d[i].dataValue - d[i - 1].dataValue
                                data3.addRow([time, (measDiff / Hours_Between_Dates)]);
                                
                            }
                        }
                        
                        lasttime = timeStamp;

                    }
                    var chart = new google.visualization.LineChart(document.getElementById('chart1'));
                    var options = {
                        title: "Time Series Data Graph",
                        width: 1000,
                        height: 750,
                        legend: { position: 'top' },
                        interpolateNulls: true,
                        chartArea: {
                            height: '80%', width: '80%', left: 100,
                            backgroundColor: { stroke: "gray", strokeWidth: 1 },
                        },
                        explorer: {
                            actions: ['dragToZoom', 'rightClickToReset'],
                            axis: 'both',
                            keepInBounds: true,
                            maxZoomIn: 20.0
                        },
                        pointSize: 8
                    };
                    chart.draw(data, options);
                    
                    window.therealdata = data;
                    
                    if (checker(thename)) {
                        index = index + 1;
                        datas.push(index);
                        var joinData = new google.visualization.data.join(data, data3, 'full', [[0, 0]], datas, [1]);
                        var chart = new google.visualization.LineChart(document.getElementById('chart1'));
                        var options2 = {
                            title: "Time Series Data Graph",
                            width: 1000,
                            height: 750,
                            interpolateNulls: true,
                            legend: { position: 'top' },
                            vAxes: {
                                0: { title: "main" },
                                1: { title: "per hour" }
                            },
                            chartArea: {
                                height: '80%', width: '80%', left: 100,
                                backgroundColor: { stroke: "gray", strokeWidth: 1 },
                            },
                            series: calculateSeries(joinData),
                            explorer: {
                                actions: ['dragToZoom', 'rightClickToReset'],
                                axis: 'both',
                                keepInBounds: true,
                                maxZoomIn: 20.0
                            },
                            pointSize: 8
                        };
                        chart.draw(joinData, options2);
                        window.therealdata = joinData;
                    }
                    //toggleLoad();
                });

            }
            function addData() {
                var doingsum = $("#dothesum").val();
                if (doingsum == "true") {
                    alert(doingsum);
                    alert("doing the sum");
                    addDataSum();
                }
                else {

                
                
                var startdate = new Date($("#StartDate").val());
                var enddate = new Date($("#EndDate").val());
                var dd = document.getElementById("dropd");
                var selectedvalue = dd.options[dd.selectedIndex].value;
                var selectedText = $("#dropd option:selected").text();
                var data1 = new google.visualization.DataTable();
                var data2 = window.therealdata;
                var data3 = new google.visualization.DataTable();
                if (checker(selectedText)) {
                    data3.addColumn('datetime', 'TimeStamp');
                    data3.addColumn('number', getBaseName(selectedText) + ' m3/h');
                }
                //toggleLoad();
                $.post('JsonData/' + selectedvalue, function (d) {
                    //toggleLoad();
                    data1.addColumn('datetime', 'TimeStamp');
                    data1.addColumn('number', getBaseName(selectedText));
                    var lasttime = '';
                    for (i = 0; i < d.length; i++) {
                        var timeStamp = new Date(d[i].timeStamp);
                        if (timeStamp >= startdate && timeStamp <= enddate) {
                            var time = { v: timeStamp, f: moment(timeStamp).format('YYYY-MM-DD HH:mm:ss') };
                            var val = d[i].dataValue;
                            data1.addRow([time, val]);
                            if (i > 0 && (checker(selectedText))) {
                                var dif = timeStamp.getTime() - lasttime.getTime();
                                var Seconds_from_T1_to_T2 = dif / 1000.0;
                                var Seconds_Between_Dates = Math.abs(Seconds_from_T1_to_T2);
                                var Hours_Between_Dates = Seconds_Between_Dates / 3600.0;
                                var measDiff = d[i].dataValue - d[i - 1].dataValue
                                data3.addRow([time, (measDiff / Hours_Between_Dates)]);

                            }
                        }
                        lasttime = timeStamp;
                    }
                    if (checker(selectedText)) {
                        index = index + 1;
                        datas.push(index);
                        var joinData = new google.visualization.data.join(data2, data1, 'full', [[0, 0]], datas, [1]);
                        var chart = new google.visualization.LineChart(document.getElementById('chart1'));
                        var options3 = {
                            title: "Time Series Data Graph",
                            width: 1000,
                            height: 750,
                            interpolateNulls: true,
                            legend: { position: 'top' },
                            vAxes: {
                                0: { title: "main" },
                                1: { title: "per hour" }
                            },
                            chartArea: {
                                height: '80%', width: '80%', left: 100,
                                backgroundColor: { stroke: "gray", strokeWidth: 1 },
                            },
                            series: calculateSeries(joinData),
                            explorer: {
                                actions: ['dragToZoom', 'rightClickToReset'],
                                axis: 'both',
                                keepInBounds: true,
                                maxZoomIn: 20.0
                            },
                            pointSize: 8
                        };
                        chart.draw(joinData, options3);
                        window.therealdata = joinData;
                        index = index + 1;
                        datas.push(index);
                        var joinData = new google.visualization.data.join(joinData, data3, 'full', [[0,0]], datas, [1]);
                        var chart = new google.visualization.LineChart(document.getElementById('chart1'));
                        var options4 = {
                            title: "Time Series Data Graph",
                            width: 1000,
                            height: 750,
                            interpolateNulls: true,
                            legend: { position: 'top' },
                            vAxes: {
                                0: { title: "main" },
                                1: { title: "per hour" }
                            },
                            chartArea: {
                                height: '80%', width: '80%', left: 100,
                                backgroundColor: { stroke: "gray", strokeWidth: 1 },
                            },
                            series: calculateSeries(joinData),
                            explorer: {
                                actions: ['dragToZoom', 'rightClickToReset'],
                                axis: 'both',
                                keepInBounds: true,
                                maxZoomIn: 20.0
                            },
                            pointSize: 8
                        };
                        chart.draw(joinData, options4);
                        window.therealdata = joinData;
                    }
                    else {
                        index = index + 1;
                        datas.push(index);
                        var joinData = new google.visualization.data.join(data2, data1, 'full', [[0, 0]], datas, [1]);
                        var chart = new google.visualization.LineChart(document.getElementById('chart1'));
                        var options5 = {
                            title: "Time Series Data Graph",
                            width: 1000,
                            height: 750,
                            interpolateNulls: true,
                            legend: { position: 'top' },
                            vAxes: {
                                0: { title: "main" },
                                1: { title: "per hour" }
                            },
                            chartArea: {
                                height: '80%', width: '80%', left: 100,
                                backgroundColor: { stroke: "gray", strokeWidth: 1 },
                            },
                            series: calculateSeries(joinData),
                            explorer: {
                                actions: ['dragToZoom', 'rightClickToReset'],
                                axis: 'both',
                                keepInBounds: true,
                                maxZoomIn: 20.0
                            },
                            pointSize: 8
                        };
                        chart.draw(joinData, options5);
                        window.therealdata = joinData;
                    }
                    
                });
                }
                
            }
            function addDataSum() {

                /*var doingsum = $("#dothesum").val();*/
                var startdate = new Date($("#StartDate").val());
                var enddate = new Date($("#EndDate").val());
                var dd = document.getElementById("dropd");
                var selectedvalue = dd.options[dd.selectedIndex].value;
                var selectedText = $("#dropd option:selected").text();
                var data1 = new google.visualization.DataTable();
                var data2 = window.therealdata;
                var data3 = new google.visualization.DataTable();
                if (checker(selectedText)) {
                    data3.addColumn('datetime', 'TimeStamp');
                    data3.addColumn('number', getBaseName(selectedText) + ' m3/h');
                }
                //toggleLoad();
                $.post('JsonData/' + selectedvalue, function (d) {
                    //toggleLoad();
                    data1.addColumn('datetime', 'TimeStamp');
                    data1.addColumn('number', getBaseName(selectedText));
                    var lasttime = '';
                    for (i = 0; i < d.length; i++) {
                        var timeStamp = new Date(d[i].timeStamp);
                        if (timeStamp >= startdate && timeStamp <= enddate) {
                            var time = { v: timeStamp, f: moment(timeStamp).format('YYYY-MM-DD HH:mm:ss') };
                            var val = d[i].dataValue;
                            data1.addRow([time, val]);
                            if (i > 0 && (checker(selectedText))) {
                                var dif = timeStamp.getTime() - lasttime.getTime();
                                var Seconds_from_T1_to_T2 = dif / 1000.0;
                                var Seconds_Between_Dates = Math.abs(Seconds_from_T1_to_T2);
                                var Hours_Between_Dates = Seconds_Between_Dates / 3600.0;
                                var measDiff = d[i].dataValue - d[i - 1].dataValue
                                data3.addRow([time, (measDiff / Hours_Between_Dates)]);

                            }
                        }
                        lasttime = timeStamp;
                    }
                    if (checker(selectedText)) {
                        index = index + 1;
                        datas.push(index);
                        var joinData = new google.visualization.data.join(data2, data1, 'full', [[0, 0]], datas, [1]);
                        var chart = new google.visualization.LineChart(document.getElementById('chart1'));
                        var options3 = {
                            title: "Time Series Data Graph",
                            width: 1000,
                            height: 750,
                            interpolateNulls: true,
                            legend: { position: 'top' },
                            vAxes: {
                                0: { title: "main" },
                                1: { title: "per hour" }
                            },
                            chartArea: {
                                height: '80%', width: '80%', left: 100,
                                backgroundColor: { stroke: "gray", strokeWidth: 1 },
                            },
                            series: calculateSeries(joinData),
                            explorer: {
                                actions: ['dragToZoom', 'rightClickToReset'],
                                axis: 'both',
                                keepInBounds: true,
                                maxZoomIn: 20.0
                            },
                            pointSize: 8
                        };
                        chart.draw(joinData, options3);
                        window.therealdata = joinData;
                        index = index + 1;
                        datas.push(index);
                        var joinData = new google.visualization.data.join(joinData, data3, 'full', [[0, 0]], datas, [1]);
                        var chart = new google.visualization.LineChart(document.getElementById('chart1'));
                        var options4 = {
                            title: "Time Series Data Graph",
                            width: 1000,
                            height: 750,
                            interpolateNulls: true,
                            legend: { position: 'top' },
                            vAxes: {
                                0: { title: "main" },
                                1: { title: "per hour" }
                            },
                            chartArea: {
                                height: '80%', width: '80%', left: 100,
                                backgroundColor: { stroke: "gray", strokeWidth: 1 },
                            },
                            series: calculateSeries(joinData),
                            explorer: {
                                actions: ['dragToZoom', 'rightClickToReset'],
                                axis: 'both',
                                keepInBounds: true,
                                maxZoomIn: 20.0
                            },
                            pointSize: 8
                        };
                        chart.draw(joinData, options4);
                        window.therealdata = joinData;
                    }
                    else {
                        index = index + 1;
                        datas.push(index);
                        var joinData = new google.visualization.data.join(data2, data1, 'full', [[0, 0]], datas, [1]);
                        var chart = new google.visualization.LineChart(document.getElementById('chart1'));
                        var options5 = {
                            title: "Time Series Data Graph",
                            width: 1000,
                            height: 750,
                            interpolateNulls: true,
                            legend: { position: 'top' },
                            vAxes: {
                                0: { title: "main" },
                                1: { title: "per hour" }
                            },
                            chartArea: {
                                height: '80%', width: '80%', left: 100,
                                backgroundColor: { stroke: "gray", strokeWidth: 1 },
                            },
                            series: calculateSeries(joinData),
                            explorer: {
                                actions: ['dragToZoom', 'rightClickToReset'],
                                axis: 'both',
                                keepInBounds: true,
                                maxZoomIn: 20.0
                            },
                            pointSize: 8
                        };
                        chart.draw(joinData, options5);
                        window.therealdata = joinData;
                    }
                    if (doingsum == "true") {
                        alert(doingsum);
                        alert("doing the sum");
                        drawsumchart();

                    }
                });


            }
            function getBaseName(bigname) {
                if (checker(bigname)) {
                    //var parts = bigname.split(" ");
                    //var name = "";
                    //for (i = 0; i <= parts.length - 1; i++) {
                    //    if (i == 1) {
                    //        name = parts[i]
                    //    }
                    //    else {
                    //        name = name + " " + parts[i];
                    //    }
                    //}
                    //return name;
                    return bigname;
                }
                else {
                    return bigname;
                }
            }
        </script>
    }
