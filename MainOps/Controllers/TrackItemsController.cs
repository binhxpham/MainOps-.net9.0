using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using MainOps.Data;
using MainOps.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Hosting;
using System.IO;
using MainOps.Models.ViewModels;
using MainOps.Resources;
using QRCoder;
using System.Drawing;
using Rotativa.AspNetCore;
using MainOps.ExtensionMethods;
using MainOps.Models.ReportClasses;
using System.Net.Http.Headers;
using System.Threading;
using Microsoft.Extensions.DependencyInjection;
using Rotativa.AspNetCore.Options;
using System.Drawing.Imaging;
using MainOps.Services;
using Microsoft.Extensions.Options;
using SendGrid;
using SendGrid.Helpers.Mail;
using System.Drawing.Drawing2D;
using System.Text;
using ImageMagick;
using Newtonsoft.Json;
using System.IO.Compression;
using System.Diagnostics;

namespace MainOps.Controllers
{
    [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember,Guest,International,ExternalDriller")]
    public class TrackItemsController : BaseController
    {
        private readonly DataContext _context;
        private readonly IWebHostEnvironment _env;
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly LocService _SharedLocalizer;
        private readonly IServiceScopeFactory _serviceScopeFactory;
        private readonly IEmailSender _emailSender;
        private readonly IOptions<AuthMessageSenderOptions> _optionsAccessor;

        //private readonly MyBackGroundService _backgroundservice;

        public TrackItemsController(DataContext context, IWebHostEnvironment env,
            UserManager<ApplicationUser> userManager,
            LocService loc,
            IServiceScopeFactory serviceScopeFactory,
            IEmailSender EmailSender,
            IOptions<AuthMessageSenderOptions> optionsAccessor) : base(context, userManager)
        {
            _context = context;
            _env = env;
            _userManager = userManager;
            _SharedLocalizer = loc;
            _serviceScopeFactory = serviceScopeFactory;
            _emailSender = EmailSender;
            _optionsAccessor = optionsAccessor;
        }

        [Authorize(Roles = "Admin,Manager,ProjectMember,Guest")]
        public async Task<IActionResult> MainMenu()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            return View();
        }
        [HttpGet]
        public IActionResult UploadSubProjectDocuments()
        {
            return View();
        }
        [Authorize(Roles = "Admin,DivisionAdmin,Manager")]
        [HttpGet]
        public IActionResult UploadSurveyorCoords()
        {
            return View();
        }
        [Authorize(Roles = "Admin,DivisionAdmin,Manager")]
        [HttpPost]
        public async Task<IActionResult> UploadSurveyorCoords(IFormFile postedFile)
        {
            if (postedFile != null)
            {
                string fileExtension = Path.GetExtension(postedFile.FileName);

                if (fileExtension != ".csv")
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "please provide a CSV file!" });
                }
                using (var sreader = new StreamReader(postedFile.OpenReadStream()))
                {
                    LatLngUTMConverter ltUTMconv = new LatLngUTMConverter("WGS 84");
                    LatLngUTMConverter.LatLng latlng;

                    while (!sreader.EndOfStream)
                    {

                        string[] rows = sreader.ReadLine().Split(',');
                        if (rows[4] == "999")
                        {

                            var prev_inst = await _context.Installations.SingleOrDefaultAsync(x => x.ItemTypeId.Equals(1782) && x.UniqueID.Equals(rows[0]));
                            if (prev_inst == null)
                            {
                                Install inst = new Install();
                                inst.ToBePaid = false;
                                inst.ProjectId = 418;
                                inst.SubProjectId = 232;
                                inst.ItemTypeId = 1782;
                                inst.UniqueID = rows[0];
                                latlng = ltUTMconv.convertUtmToLatLng(Convert.ToDouble(rows[2]), Convert.ToDouble(rows[1]), 32, "N");
                                inst.Latitude = latlng.Lat;
                                inst.Longitude = latlng.Lng;
                                _context.Add(inst);
                                await _context.SaveChangesAsync();
                                var lastadded = await _context.Installations.LastAsync();
                                CoordTrack2 coord = new CoordTrack2();
                                coord.InstallId = lastadded.Id;
                                coord.Latitude = lastadded.Latitude;
                                coord.Longitude = lastadded.Longitude;
                                coord.Accuracy = 0;
                                coord.Latitude_backup = 0;
                                coord.Longitude_backup = 0;
                                coord.TypeCoord = "Coord Measure";
                                _context.Add(coord);
                                //await _context.SaveChangesAsync();
                            }

                        }

                    }
                    await _context.SaveChangesAsync();
                }
            }
            return RedirectToAction(nameof(Index));
        }
        [Authorize(Roles = "Admin")]
        [HttpPost]
        public async Task<IActionResult> UploadSubProjectDocuments(IFormFile[] files)
        {
            var maindirectory = Path.Combine(_env.WebRootPath.ReplaceFirst("/", ""), "Documents", "info");
            if (!Directory.Exists(maindirectory))
            {
                Directory.CreateDirectory(maindirectory);
            }
            foreach (var file in files)
            {
                var ExistingDoc = await _context.Documents.Where(x => x.Name.Equals(file.FileName)).SingleOrDefaultAsync();
                if (ExistingDoc == null)
                {
                    string subprojectnumber = file.FileName.Split("Datablad_")[1].Substring(0, 9);
                    var subproject = await _context.SubProjects.Where(x => x.SubProjectNr.Equals(subprojectnumber)).SingleOrDefaultAsync();
                    if (subproject != null)
                    {
                        Document doc = new Document();
                        doc.DocumentTypeId = 18;
                        doc.SubProjectId = subproject.Id;
                        doc.Name = file.FileName;
                        doc.ProjectId = subproject.ProjectId;
                        var fileName = maindirectory + $@"\{file.FileName}";
                        doc.path = fileName;
                        using (FileStream fs = System.IO.File.Create(fileName))
                        {
                            file.CopyTo(fs);
                            fs.Flush();
                        }
                        _context.Add(doc);
                        await _context.SaveChangesAsync();
                    }
                }
            }
            await _context.SaveChangesAsync();
            return RedirectToAction("MainMenu");
        }
        // GET: TrackItems
        [Authorize(Roles = "Admin,DivisionAdmin,Guest,Manager,ProjectMember")]
        public IActionResult Index()
        {
            return View("MainMenu");
        }
        [HttpGet]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> UploadItems()
        {
            ViewData["ProjectId"] = await GetProjectList();
            return View();
        }



        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember,Guest,ExternalDriller")]
        public async Task<IEnumerable<SelectListItem>> CreateFilterlist()
        {

            List<Project> filternames = new List<Project>();
            var theuser = await _userManager.GetUserAsync(HttpContext.User);
            if (HttpContext.User.IsInRole("Guest") || User.IsInRole("MemberGuest"))
            {

                filternames = await (from pr in _context.Projects
                                     join pu in _context.ProjectUsers on pr.Id
                                     equals pu.projectId
                                     where pu.userId == theuser.Id && theuser.DivisionId.Equals(pr.DivisionId)
                                     select pr).OrderBy(x => x.Name).ToListAsync();
            }
            else
            {
                if (User.IsInRole("Admin"))
                {
                    filternames = await _context.Projects.Include(x => x.Division).OrderBy(x => x.Division.Name).OrderBy(b => b.Name).ToListAsync();
                }
                else
                {
                    filternames = await _context.Projects.Where(x => x.DivisionId.Equals(theuser.DivisionId))
                .OrderBy(b => b.Name).ToListAsync();
                }

            }

            IEnumerable<SelectListItem> selList = from s in filternames
                                                  select new SelectListItem
                                                  {
                                                      Value = s.Id.ToString(),
                                                      Text = s.Name
                                                  };
            return selList;
        }
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember,Guest,ExternalDriller")]
        public async Task<IEnumerable<SelectListItem>> CreateFilter2list()
        {

            List<SubProject> filternames = new List<SubProject>();
            var theuser = await _userManager.GetUserAsync(HttpContext.User);
            if (HttpContext.User.IsInRole("Guest") || User.IsInRole("MemberGuest"))
            {

                filternames = await (from pr in _context.SubProjects.Include(x => x.Project)
                                     join pu in _context.ProjectUsers on pr.ProjectId
                                     equals pu.projectId
                                     where pu.userId == theuser.Id && theuser.DivisionId.Equals(pr.Project.DivisionId)
                                     select pr).OrderBy(x => x.Name).ToListAsync();
            }
            else
            {
                if (User.IsInRole("Admin"))
                {
                    filternames = await _context.SubProjects.Include(x => x.Project).ThenInclude(x => x.Division).OrderBy(x => x.Project.Division.Name).OrderBy(b => b.Name).ToListAsync();
                }
                else
                {
                    filternames = await _context.SubProjects.Include(x => x.Project).ThenInclude(x => x.Division).Where(x => x.Project.DivisionId.Equals(theuser.DivisionId))
                .OrderBy(b => b.Name).ToListAsync();
                }

            }

            IEnumerable<SelectListItem> selList = from s in filternames
                                                  select new SelectListItem
                                                  {
                                                      Value = s.Id.ToString(),
                                                      Text = s.Name
                                                  };
            return selList;
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember,ExternalDriller")]
        public async Task<IActionResult> Load_ongoing_Report()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            var dr_temp = await _context.Daily_Reports_Ongoing.Where(x => x.DoneBy.Equals(user.full_name())).LastOrDefaultAsync();

            if (dr_temp == null)
            {
                return RedirectToAction("Daily_Report");
            }
            else
            {
                Daily_Report_2 dr = new Daily_Report_2();
                dr.ProjectId = Convert.ToInt32(dr_temp.ProjectId);
                dr.InvoiceDate = dr_temp.InvoiceDate;
                if (dr_temp.SubProjectId != null)
                {
                    dr.SubProjectId = Convert.ToInt32(dr_temp.SubProjectId);
                }
                dr.Machinery = dr_temp.Machinery;
                if (dr_temp.Report_Date != null)
                {
                    dr.Report_Date = Convert.ToDateTime(dr_temp.Report_Date);
                }

                dr.StartHour = dr_temp.StartHour;
                dr.EndHour = dr_temp.EndHour;

                dr.SafetyHours = dr_temp.SafetyHours;
                dr.StandingTime = dr_temp.StandingTime;
                dr.short_Description = dr_temp.short_Description;
                dr.Work_Performed = dr_temp.Work_Performed;
                if (dr_temp.Amount != null)
                {
                    dr.Amount = Convert.ToInt32(dr_temp.Amount);
                }
                else
                {
                    dr.Amount = 1;
                }
                if (dr_temp.TitleId != null)
                {
                    dr.TitleId = Convert.ToInt32(dr_temp.TitleId);
                }
                dr.OtherPeople = dr_temp.OtherPeople;
                dr.OtherPeopleIDs = dr_temp.OtherPeopleIDs;
                ViewBag.Machinery = new MultiSelectList(_context.Machinery.Where(x => x.DivisionId.Equals(user.DivisionId)).Select(m => new { m.Id, Name = m.MachineryName }).ToList(), "Id", "Name");
                ViewData["ProjectId"] = await GetProjectList();
                ViewData["TitleId"] = new SelectList(_context.Titles.Include(x => x.Project).Where(x => x.Project.DivisionId.Equals(user.DivisionId)), "Id", "TheTitle");
                ViewData["Users"] = await GetUserList();
                if (dr.SubProjectId != null)
                {
                    ViewData["SubProjectId"] = new SelectList(_context.SubProjects.Where(x => x.Project.DivisionId.Equals(user.DivisionId)), "Id", "Name");
                }
                return View("Daily_Report", dr);
            }
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember,ExternalDriller")]
        public async Task<IActionResult> Save_Ongoing_Report(int? ProjectId1, int? SubProjectId1, int? VariationOrderId1, string short_Description1, int? TitleId1, DateTime? Report_Date1, DateTime? InvoiceDate1, TimeSpan? StartHour1, TimeSpan? EndHour1, TimeSpan? StandingTime1, TimeSpan? SafetyHours1, int? Amount1, string Machinery1, string Work_Performed1, string OtherPeople1, string OtherPeopleIDs1)
        {
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            Daily_Report_2_temp temp_report = new Daily_Report_2_temp();
            temp_report.VariationOrderId = VariationOrderId1;
            temp_report.ProjectId = ProjectId1;
            temp_report.SubProjectId = SubProjectId1;
            temp_report.short_Description = short_Description1;
            temp_report.TitleId = TitleId1;
            if (temp_report.Report_Date == null)
            {
                temp_report.Report_Date = DateTime.Now.Date;
            }
            else
            {
                temp_report.Report_Date = Report_Date1;
            }
            temp_report.InvoiceDate = InvoiceDate1;
            if (StartHour1 == null)
            {
                temp_report.StartHour = TimeSpan.Zero;
            }
            else
            {
                temp_report.StartHour = StartHour1.Value;
            }
            if (EndHour1 == null)
            {
                temp_report.EndHour = TimeSpan.Zero;
            }
            else
            {
                temp_report.EndHour = EndHour1.Value;
            }
            if (StandingTime1 == null)
            {
                temp_report.StandingTime = TimeSpan.Zero;
            }
            else
            {
                temp_report.StandingTime = StandingTime1;
            }
            if (SafetyHours1 == null)
            {
                temp_report.SafetyHours = TimeSpan.Zero;
            }
            else
            {
                temp_report.SafetyHours = SafetyHours1;
            }
            if (Amount1 == 0 || Amount1 == -1 || Amount1 == null)
            {
                temp_report.Amount = 1;
            }
            else
            {
                temp_report.Amount = Amount1;
            }
            temp_report.Machinery = Machinery1;
            temp_report.Work_Performed = Work_Performed1;
            temp_report.OtherPeople = OtherPeople1;
            temp_report.OtherPeopleIDs = OtherPeopleIDs1;
            temp_report.DoneBy = user.full_name();
            _context.Daily_Reports_Ongoing.Add(temp_report);
            await _context.SaveChangesAsync();
            return RedirectToAction("MainMenu");
        }

        [Authorize(Roles = "Admin")]
        [HttpGet]
        public async Task<IActionResult> AddBlindPipesToDrains()
        {
            var drains = await _context.Installations.Where(x => x.ItemTypeId.Equals(1703)).ToListAsync();
            foreach (var drain in drains)
            {
                //first find existing blind pipe with same install text
                var existingblind = await _context.Installations.SingleOrDefaultAsync(x => x.Install_Text.Equals(drain.Install_Text) && x.ItemTypeId.Equals(1706));
                if (existingblind == null)
                {
                    double amount = 0.0;
                    var amounttext = drain.Install_Text.Split("+")[1].Split(" ");
                    foreach (string s in amounttext)
                    {
                        try
                        {
                            amount = Convert.ToDouble(s.Replace("m", ""));
                        }
                        catch
                        {

                        }
                    }
                    Install new_install = new Install
                    {
                        ToBePaid = true,
                        Install_Text = drain.Install_Text,
                        ItemTypeId = 1706,
                        Latitude = drain.Latitude,
                        Longitude = drain.Longitude,
                        TimeStamp = drain.TimeStamp,
                        InvoiceDate = DateTime.Now,
                        isInstalled = drain.isInstalled,
                        Amount = amount,
                        DeinstallDate = drain.DeinstallDate,
                        ProjectId = drain.ProjectId,
                        Location = drain.Location,
                        UniqueID = drain.UniqueID,
                        IsInOperation = drain.IsInOperation,
                        EnteredIntoDataBase = DateTime.Now,
                        LastEditedInDataBase = null,
                        SubProjectId = drain.SubProjectId,
                        RentalStartDate = drain.RentalStartDate
                    };
                    _context.Add(new_install);
                    await _context.SaveChangesAsync();
                    var lastadded = await _context.Installations.LastAsync();
                    CoordTrack2 coords = new CoordTrack2 { Accuracy = 0, Accuracy_backup = 0, Latitude = drain.Latitude, Longitude = drain.Longitude, Latitude_backup = 0, Longitude_backup = 0, TypeCoord = "Installed", TimeStamp = drain.TimeStamp, InstallId = lastadded.Id, MobilizeId = null, ArrivalId = null, MeasPointId = null };
                    _context.Add(coords);
                    await _context.SaveChangesAsync();
                }
            }
            return RedirectToAction("Index", "Home");
        }
        [Authorize(Roles = "Admin")]
        [HttpGet]
        public async Task<IActionResult> AddArrivalToDrains()
        {
            var drains = await _context.Installations.Where(x => x.ItemTypeId.Equals(1703) && x.UniqueID.Contains("#")).ToListAsync();
            foreach (var drain in drains)
            {
                //first find existing blind pipe with same install text
                var existingarrival = await _context.Arrivals.FirstOrDefaultAsync(x => x.UniqueID.Equals(drain.UniqueID) && x.ItemTypeId.Equals(1703));
                if (existingarrival == null)
                {
                    Arrival arr = new Arrival();
                    arr.InvoiceDate = DateTime.Now;
                    arr.ItemTypeId = 1703;
                    arr.TimeStamp = drain.RentalStartDate;
                    arr.ProjectId = drain.ProjectId;
                    arr.SubProjectId = drain.SubProjectId;
                    arr.ToBePaid = true;
                    arr.UniqueID = drain.UniqueID;
                    arr.Latitude = drain.Latitude;
                    arr.Longitude = drain.Longitude;
                    arr.EnteredIntoDataBase = DateTime.Now;
                    arr.Arrival_Text = "Auto arrival of drain uniqueid: " + drain.UniqueID;
                    arr.Amount = drain.Amount;
                    if (drain.DeinstallDate != null)
                    {
                        arr.EndStamp = drain.DeinstallDate;
                    }
                    _context.Add(arr);

                }
                await _context.SaveChangesAsync();
            }
            return RedirectToAction("Index", "Home");
        }
        [HttpPost]
        [Authorize(Roles = ("Admin,DivisionAdmin,Manager,ProjectMember"))]
        public async Task<string> UpdateInstallPos(int? id, double? lat, double? lng)
        {
            if (id != null && lat != null && lng != null && lat > 0.001 && lng > 0.001)
            {
                var install = await _context.Installations.Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                if (install != null)
                {
                    install.Latitude = Convert.ToDouble(lat);
                    install.Longitude = Convert.ToDouble(lng);
                    try
                    {
                        install.Location = FindNearestKM(Convert.ToInt32(install.ProjectId), install.Latitude, install.Longitude);
                    }
                    catch
                    {

                    }
                    var coordtrack = await _context.CoordTrack2s.Where(x => x.InstallId.Equals(id) && (x.TypeCoord.Equals("Installed") || x.TypeCoord.Equals("Install") || x.TypeCoord.Equals("DeInstalled"))).ToListAsync();
                    foreach (var coord in coordtrack)
                    {
                        coord.Latitude_backup = coord.Latitude;
                        coord.Longitude_backup = coord.Longitude;
                        coord.Latitude = lat;
                        coord.Longitude = lng;
                        _context.CoordTrack2s.Update(coord);
                    }
                    _context.Installations.Update(install);

                    await _context.SaveChangesAsync();
                    return "success";
                }
                return "failure";
            }
            return "failure";
        }

        public async Task<IEnumerable<SelectListItem>> CreateItemlist(string type)
        {
            List<ItemType> filternames = new List<ItemType>();
            var theuser = await _userManager.GetUserAsync(User);
            if (type.Equals("install") || type.Equals("arrival") || type.Equals("deinstall"))
            {
                if (!User.IsInRole("Guest") && !User.IsInRole("MemberGuest"))
                {
                    filternames = (from it in _context.ItemTypes.Include(x => x.Project).ThenInclude(x => x.Division)
                                   join bqh in _context.BoQHeadLines on Math.Floor(it.BoQnr) equals Math.Floor(bqh.BoQnum)
                                   where bqh.Type.Equals("Installation")
                                   && bqh.ProjectId.Equals(it.ProjectId)
                                   && !it.Item_Type.ToLower().Contains("discount")
                                   select it).ToList();
                }
                else
                {

                    filternames = (from it in _context.ItemTypes.Include(x => x.Project).ThenInclude(x => x.Division)
                                   join bqh in _context.BoQHeadLines on Math.Floor(it.BoQnr) equals Math.Floor(bqh.BoQnum)
                                   where bqh.Type.Equals("Installation") && !it.Item_Type.ToLower().Contains("discount")
                                   join pu in _context.ProjectUsers on it.ProjectId equals pu.projectId
                                   where pu.userId.Equals(theuser.Id) && bqh.ProjectId.Equals(it.ProjectId)
                                   select it).OrderBy(x => x.Project.Division.Name).ThenBy(x => x.Project.Name).ThenBy(x => x.BoQnr).ToList();
                }
            }
            else if (type.Equals("mobilize"))
            {
                if (!User.IsInRole("Guest") && !User.IsInRole("MemberGuest"))
                {
                    //filternames = _context.ItemTypes.Include(x => x.Project).ThenInclude(x => x.Division).Where(x => x.BoQnr >= (decimal)1.0 && x.BoQnr < (decimal)2.0).OrderBy(x => x.Project.Division.Name).ThenBy(x => x.Project.Name).ThenBy(x => x.BoQnr).ToList();
                    filternames = (from it in _context.ItemTypes.Include(x => x.Project).ThenInclude(x => x.Division)
                                   join bqh in _context.BoQHeadLines on Math.Floor(it.BoQnr) equals Math.Floor(bqh.BoQnum)
                                   where bqh.Type.Equals("Mobilization") && !it.Item_Type.ToLower().Contains("discount")
                                   && bqh.ProjectId.Equals(it.ProjectId)
                                   select it).ToList();
                }
                else
                {
                    filternames = (from it in _context.ItemTypes.Include(x => x.Project).ThenInclude(x => x.Division)
                                   join bqh in _context.BoQHeadLines on Math.Floor(it.BoQnr) equals Math.Floor(bqh.BoQnum)
                                   where bqh.Type.Equals("Mobilization") && !it.Item_Type.ToLower().Contains("discount")
                                   join pu in _context.ProjectUsers on it.ProjectId equals pu.projectId
                                   where pu.userId.Equals(theuser.Id) && bqh.ProjectId.Equals(it.ProjectId)
                                   select it).ToList();
                }
            }
            else if (type.Equals("hours"))
            {
                if (!User.IsInRole("Guest") && !User.IsInRole("MemberGuest"))
                {
                    filternames = (from it in _context.ItemTypes.Include(x => x.Project).ThenInclude(x => x.Division)
                                   join bqh in _context.BoQHeadLines on Math.Floor(it.BoQnr) equals Math.Floor(bqh.BoQnum)
                                   where bqh.Type.Equals("Hours") && !it.Item_Type.ToLower().Contains("discount")
                                   join pu in _context.ProjectUsers on it.ProjectId equals pu.projectId
                                   where pu.userId.Equals(theuser.Id) && bqh.ProjectId.Equals(it.ProjectId)
                                   select it).ToList();
                }
                else
                {
                    filternames = (from it in _context.ItemTypes.Include(x => x.Project).ThenInclude(x => x.Division)
                                   join bqh in _context.BoQHeadLines on Math.Floor(it.BoQnr) equals Math.Floor(bqh.BoQnum)
                                   where bqh.Type.Equals("Hours") && !it.Item_Type.ToLower().Contains("discount")
                                   join pu in _context.ProjectUsers on it.ProjectId equals pu.projectId
                                   where pu.userId.Equals(theuser.Id) && bqh.ProjectId.Equals(it.ProjectId)
                                   select it).ToList();
                }

            }
            else
            {
                filternames = _context.ItemTypes.Include(x => x.Project).ThenInclude(x => x.Division).ToList();
            }
            if (!User.IsInRole("Admin") && !User.IsInRole("International"))
            {
                filternames = filternames.Where(x => x.Project.DivisionId.Equals(theuser.DivisionId)).OrderBy(x => x.Project.Division.Name).ThenBy(x => x.Project.Name).ThenBy(x => x.BoQnr).ToList();
            }
            if (User.IsInRole("International") && !User.IsInRole("Admin"))
            {
                filternames = filternames.Where(x => x.Project.Name.Contains("STOCK")).ToList();
            }
            filternames = filternames.GroupBy(test => test.Id)
                   .Select(grp => grp.First()).OrderBy(x => x.Item_Type).ThenBy(x => x.Project.DivisionId).ThenBy(x => x.Project.Name).ThenBy(x => x.BoQnr)
                   .ToList();
            IEnumerable<SelectListItem> selList = from s in filternames
                                                  select new SelectListItem
                                                  {
                                                      Value = s.Id.ToString(),
                                                      Text = s.Project.Name + " : " + String.Format("{0:0.##}", s.BoQnr) + " : " + s.Item_Type
                                                  };

            return selList;
        }
        public async Task<IEnumerable<SelectListItem>> CreateItemlist2(string type, int ProjectId)
        {
            List<ItemType> filternames = new List<ItemType>();
            var theuser = await _userManager.GetUserAsync(User);
            if (type.Equals("install") || type.Equals("arrival") || type.Equals("deinstall"))
            {
                if (!User.IsInRole("Guest"))
                {
                    filternames = (from it in _context.ItemTypes.Include(x => x.Project).ThenInclude(x => x.Division)
                                   join bqh in _context.BoQHeadLines on Math.Floor(it.BoQnr) equals Math.Floor(bqh.BoQnum)
                                   where bqh.Type.Equals("Installation")
                                   && bqh.ProjectId.Equals(it.ProjectId)
                                   && !it.Item_Type.ToLower().Contains("discount")
                                   select it).ToList();
                }
                else
                {

                    filternames = (from it in _context.ItemTypes.Include(x => x.Project).ThenInclude(x => x.Division)
                                   join bqh in _context.BoQHeadLines on Math.Floor(it.BoQnr) equals Math.Floor(bqh.BoQnum)
                                   where bqh.Type.Equals("Installation") && !it.Item_Type.ToLower().Contains("discount")
                                   join pu in _context.ProjectUsers on it.ProjectId equals pu.projectId
                                   where pu.userId.Equals(theuser.Id) && bqh.ProjectId.Equals(it.ProjectId)
                                   select it).OrderBy(x => x.Project.Division.Name).ThenBy(x => x.Project.Name).ThenBy(x => x.BoQnr).ToList();
                }
            }
            else if (type.Equals("mobilize"))
            {
                if (!User.IsInRole("Guest"))
                {
                    //filternames = _context.ItemTypes.Include(x => x.Project).ThenInclude(x => x.Division).Where(x => x.BoQnr >= (decimal)1.0 && x.BoQnr < (decimal)2.0).OrderBy(x => x.Project.Division.Name).ThenBy(x => x.Project.Name).ThenBy(x => x.BoQnr).ToList();
                    filternames = (from it in _context.ItemTypes.Include(x => x.Project).ThenInclude(x => x.Division)
                                   join bqh in _context.BoQHeadLines on Math.Floor(it.BoQnr) equals Math.Floor(bqh.BoQnum)
                                   where bqh.Type.Equals("Mobilization") && !it.Item_Type.ToLower().Contains("discount")
                                   && bqh.ProjectId.Equals(it.ProjectId)
                                   select it).ToList();
                }
                else
                {
                    filternames = (from it in _context.ItemTypes.Include(x => x.Project).ThenInclude(x => x.Division)
                                   join bqh in _context.BoQHeadLines on Math.Floor(it.BoQnr) equals Math.Floor(bqh.BoQnum)
                                   where bqh.Type.Equals("Mobilization") && !it.Item_Type.ToLower().Contains("discount")
                                   join pu in _context.ProjectUsers on it.ProjectId equals pu.projectId
                                   where pu.userId.Equals(theuser.Id) && bqh.ProjectId.Equals(it.ProjectId)
                                   select it).ToList();
                }
            }
            else if (type.Equals("hours"))
            {
                if (!User.IsInRole("Guest"))
                {
                    filternames = (from it in _context.ItemTypes.Include(x => x.Project).ThenInclude(x => x.Division)
                                   join bqh in _context.BoQHeadLines on Math.Floor(it.BoQnr) equals Math.Floor(bqh.BoQnum)
                                   where bqh.Type.Equals("Hours") && !it.Item_Type.ToLower().Contains("discount")
                                   join pu in _context.ProjectUsers on it.ProjectId equals pu.projectId
                                   where pu.userId.Equals(theuser.Id) && bqh.ProjectId.Equals(it.ProjectId)
                                   select it).ToList();
                }
                else
                {
                    filternames = (from it in _context.ItemTypes.Include(x => x.Project).ThenInclude(x => x.Division)
                                   join bqh in _context.BoQHeadLines on Math.Floor(it.BoQnr) equals Math.Floor(bqh.BoQnum)
                                   where bqh.Type.Equals("Hours") && !it.Item_Type.ToLower().Contains("discount")
                                   join pu in _context.ProjectUsers on it.ProjectId equals pu.projectId
                                   where pu.userId.Equals(theuser.Id) && bqh.ProjectId.Equals(it.ProjectId)
                                   select it).ToList();
                }

            }
            else
            {
                filternames = _context.ItemTypes.Include(x => x.Project).ThenInclude(x => x.Division).ToList();
            }
            if (!User.IsInRole("Admin") && !User.IsInRole("International"))
            {
                filternames = filternames.Where(x => x.Project.DivisionId.Equals(theuser.DivisionId)).OrderBy(x => x.Project.Division.Name).ThenBy(x => x.Project.Name).ThenBy(x => x.BoQnr).ToList();
            }
            if (User.IsInRole("International") && !User.IsInRole("Admin"))
            {
                filternames = filternames.Where(x => x.Project.Name.Contains("STOCK")).ToList();
            }
            filternames = filternames.Where(x => x.ProjectId.Equals(ProjectId)).ToList();
            filternames = filternames.GroupBy(test => test.Id)
                   .Select(grp => grp.First()).OrderBy(x => x.Item_Type).ThenBy(x => x.Project.DivisionId).ThenBy(x => x.Project.Name).ThenBy(x => x.BoQnr)
                   .ToList();
            IEnumerable<SelectListItem> selList = from s in filternames
                                                  select new SelectListItem
                                                  {
                                                      Value = s.Id.ToString(),
                                                      Text = s.Project.Name + " : " + String.Format("{0:0.##}", s.BoQnr) + " : " + s.Item_Type
                                                  };

            return selList;
        }
        public async Task<IEnumerable<SelectListItem>> CreateItemlistHIH(string type)
        {
            List<ItemType> filternames = new List<ItemType>();
            var theuser = await _userManager.GetUserAsync(User);
            //RETURNING 3 TIMES RESULTS BLAH
            if (type.Equals("install") || type.Equals("arrival") || type.Equals("deinstall"))
            {
                if (!User.IsInRole("Guest"))
                {
                    //filternames = _context.ItemTypes.Include(x => x.Project).ThenInclude(x => x.Division).Where(x => ((x.BoQnr >= (decimal)2.0 && x.BoQnr < (decimal)7.0) || (x.BoQnr >= (decimal)9.0 && x.BoQnr < (decimal)11.0)) && !x.Item_Type.ToLower().Contains("discount")).OrderBy(x=>x.Project.Division.Name).ThenBy(x => x.Project.Name).ThenBy(x => x.BoQnr).ToList();
                    filternames = (from it in _context.ItemTypes.Include(x => x.Project).ThenInclude(x => x.Division)
                                   join bqh in _context.BoQHeadLines on Math.Floor(it.BoQnr) equals Math.Floor(bqh.BoQnum)
                                   where bqh.Type.Equals("Installation")
                                   && bqh.ProjectId.Equals(it.ProjectId)
                                   && !it.Item_Type.ToLower().Contains("discount")
                                   && it.Project.Name.Contains("STOCK")
                                   select it).OrderBy(x => x.Project.Division.Name).ThenBy(x => x.Project.Name).ThenBy(x => x.BoQnr).ToList();
                }
                else
                {
                    filternames = (from it in _context.ItemTypes.Include(x => x.Project).ThenInclude(x => x.Division)
                                   join bqh in _context.BoQHeadLines on Math.Floor(it.BoQnr) equals Math.Floor(bqh.BoQnum)
                                   where bqh.Type.Equals("Installation") && !it.Item_Type.ToLower().Contains("discount")
                                   join pu in _context.ProjectUsers on it.ProjectId equals pu.projectId
                                   where pu.userId.Equals(theuser.Id) && bqh.ProjectId.Equals(it.ProjectId)
                                   && it.Project.Name.Contains("STOCK")
                                   select it).OrderBy(x => x.Project.Division.Name).ThenBy(x => x.Project.Name).ThenBy(x => x.BoQnr).ToList();
                }
            }
            else if (type.Equals("mobilize"))
            {
                if (!User.IsInRole("Guest"))
                {
                    //filternames = _context.ItemTypes.Include(x => x.Project).ThenInclude(x => x.Division).Where(x => x.BoQnr >= (decimal)1.0 && x.BoQnr < (decimal)2.0).OrderBy(x => x.Project.Division.Name).ThenBy(x => x.Project.Name).ThenBy(x => x.BoQnr).ToList();
                    filternames = (from it in _context.ItemTypes.Include(x => x.Project).ThenInclude(x => x.Division)
                                   join bqh in _context.BoQHeadLines on Math.Floor(it.BoQnr) equals Math.Floor(bqh.BoQnum)
                                   where bqh.Type.Equals("Mobilization") && !it.Item_Type.ToLower().Contains("discount")
                                   && bqh.ProjectId.Equals(it.ProjectId)
                                   && it.Project.Name.Contains("STOCK")
                                   select it).OrderBy(x => x.Project.Division.Name).ThenBy(x => x.Project.Name).ThenBy(x => x.BoQnr).ToList();
                }
                else
                {
                    filternames = (from it in _context.ItemTypes.Include(x => x.Project).ThenInclude(x => x.Division)
                                   join bqh in _context.BoQHeadLines on Math.Floor(it.BoQnr) equals Math.Floor(bqh.BoQnum)
                                   where bqh.Type.Equals("Mobilization") && !it.Item_Type.ToLower().Contains("discount")
                                   join pu in _context.ProjectUsers on it.ProjectId equals pu.projectId
                                   where pu.userId.Equals(theuser.Id) && bqh.ProjectId.Equals(it.ProjectId)
                                   && it.Project.Name.Contains("STOCK")
                                   select it).OrderBy(x => x.Project.Division.Name).ThenBy(x => x.Project.Name).ThenBy(x => x.BoQnr).ToList();
                }
            }
            else if (type.Equals("hours"))
            {
                if (!User.IsInRole("Guest"))
                {
                    filternames = (from it in _context.ItemTypes.Include(x => x.Project).ThenInclude(x => x.Division)
                                   join bqh in _context.BoQHeadLines on Math.Floor(it.BoQnr) equals Math.Floor(bqh.BoQnum)
                                   where bqh.Type.Equals("Hours") && !it.Item_Type.ToLower().Contains("discount")
                                   join pu in _context.ProjectUsers on it.ProjectId equals pu.projectId
                                   where pu.userId.Equals(theuser.Id) && bqh.ProjectId.Equals(it.ProjectId)
                                   && it.Project.Name.Contains("STOCK")
                                   select it).OrderBy(x => x.Project.Division.Name).ThenBy(x => x.Project.Name).ThenBy(x => x.BoQnr).ToList();
                }
                else
                {
                    filternames = (from it in _context.ItemTypes.Include(x => x.Project).ThenInclude(x => x.Division)
                                   join bqh in _context.BoQHeadLines on Math.Floor(it.BoQnr) equals Math.Floor(bqh.BoQnum)
                                   where bqh.Type.Equals("Hours") && !it.Item_Type.ToLower().Contains("discount")
                                   join pu in _context.ProjectUsers on it.ProjectId equals pu.projectId
                                   where pu.userId.Equals(theuser.Id) && bqh.ProjectId.Equals(it.ProjectId)
                                   && it.Project.Name.Contains("STOCK")
                                   select it).OrderBy(x => x.Project.Division.Name).ThenBy(x => x.Project.Name).ThenBy(x => x.BoQnr).ToList();
                }

            }
            else
            {
                filternames = _context.ItemTypes.Include(x => x.Project).ThenInclude(x => x.Division)
                    .Where(x => x.Project.Name.Contains("STOCK")).OrderBy(x => x.Project.Division.Name).ThenBy(x => x.Project.Name).ThenBy(x => x.BoQnr).ToList();
            }
            if (!User.IsInRole("Admin"))
            {
                filternames = filternames.Where(x => x.Project.Name.Contains("STOCK")).OrderBy(x => x.Project.Division.Name).ThenBy(x => x.Project.Name).ThenBy(x => x.BoQnr).ToList();
            }
            filternames = filternames.GroupBy(test => test.Id)
                   .Select(grp => grp.First())
                   .ToList();
            IEnumerable<SelectListItem> selList = from s in filternames
                                                  select new SelectListItem
                                                  {
                                                      Value = s.Id.ToString(),
                                                      Text = s.Project.Name + " : " + String.Format("{0:0.##}", s.BoQnr) + " : " + s.Item_Type
                                                  };

            return selList;
        }

        public async Task<IActionResult> CombsearchInstall(string searchstring, string filterchoice, string filterchoice2)
        {
            int f_c_converted;
            int f_c_converted2;
            f_c_converted = Convert.ToInt32(filterchoice);
            f_c_converted2 = Convert.ToInt32(filterchoice2);
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            if (f_c_converted2 != 0)
            {
                ViewData["ItemTypeId"] = await CreateItemlist2("install", f_c_converted2);
            }
            else
            {
                ViewData["ItemTypeId"] = await CreateItemlist("install");
            }
            List<Install> data = new List<Install>();
            ViewData["ProjectId"] = await GetProjectList();
            if (searchstring != null && filterchoice != null && filterchoice2 != null)
            {

                data = await _context.Installations
                    .Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => (x.Id.ToString().Equals(searchstring) || x.ItemType.Item_Type.ToLower().Contains(searchstring.ToLower()) || x.UniqueID.ToLower().Contains(searchstring.ToLower()) || x.ItemType.BoQnr.ToString().ToLower().Contains(searchstring.ToLower())) && x.ItemTypeId.Equals(f_c_converted) && x.ProjectId.Equals(f_c_converted2))
                    .OrderByDescending(x => x.TimeStamp).ToListAsync();
            }
            else if (searchstring != null && (filterchoice == null || filterchoice == "All") && (filterchoice2 == null || filterchoice2 == "All"))
            {
                data = await _context.Installations.Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => (x.Id.ToString().Equals(searchstring) || x.ItemType.Item_Type.ToLower().Contains(searchstring.ToLower()) || x.UniqueID.ToLower().Contains(searchstring.ToLower()) || x.ItemType.BoQnr.ToString().ToLower().Contains(searchstring.ToLower())))
                    .OrderByDescending(x => x.TimeStamp).ToListAsync();
            }
            else if (searchstring != null && (filterchoice != null && (filterchoice2 == null) || filterchoice2 == "All"))
            {
                data = await _context.Installations.Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => (x.Id.ToString().Equals(searchstring) || x.ItemType.Item_Type.ToLower().Contains(searchstring.ToLower()) || x.UniqueID.ToLower().Contains(searchstring.ToLower()) || x.ItemType.BoQnr.ToString().ToLower().Contains(searchstring.ToLower())) || x.ItemTypeId.Equals(f_c_converted))
                    .OrderByDescending(x => x.TimeStamp).ToListAsync();
            }
            else if (searchstring != null && (filterchoice == null || filterchoice == "All") && filterchoice2 != null)
            {
                data = await _context.Installations.Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => (x.Id.ToString().Equals(searchstring) || x.ItemType.Item_Type.ToLower().Contains(searchstring.ToLower()) || x.UniqueID.ToLower().Contains(searchstring.ToLower()) || x.ItemType.BoQnr.ToString().ToLower().Contains(searchstring.ToLower())) && (x.ProjectId.Equals(f_c_converted2)))
                    .OrderByDescending(x => x.TimeStamp).ToListAsync();
            }
            else if (searchstring == null && filterchoice != null && (filterchoice2 == null || filterchoice2 == "All"))
            {
                data = await _context.Installations.Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                .Where(x => x.ItemTypeId.Equals(f_c_converted))
                .OrderByDescending(x => x.TimeStamp).ToListAsync();

            }
            else if (searchstring == null && (filterchoice == null || filterchoice == "All") && filterchoice2 != null)
            {
                data = await _context.Installations.Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                .Where(x => x.ProjectId.Equals(f_c_converted2))
                .OrderByDescending(x => x.TimeStamp).ToListAsync();
            }
            else if (searchstring == null && filterchoice != null && filterchoice2 != null)
            {
                data = await _context.Installations.Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                .Where(x => x.ProjectId.Equals(f_c_converted2) && x.ItemTypeId.Equals(f_c_converted))
                .OrderByDescending(x => x.TimeStamp).ToListAsync();
            }
            else
            {

                data = await _context.Installations.Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                .OrderByDescending(x => x.TimeStamp).ToListAsync();

            }
            if (User.IsInRole("Admin"))
            {
                return View("Reports/Installations", data.OrderByDescending(x => x.TimeStamp));
            }
            else if (User.IsInRole("MemberGuest") || User.IsInRole("Guest"))
            {
                var projects = await (from proj in _context.Projects
                                      join pu in _context.ProjectUsers
                                        on proj.Id equals pu.projectId
                                      where pu.userId.Equals(user.Id)
                                      select proj).ToListAsync();

                return View("Reports/Installations", data.OrderByDescending(x => x.TimeStamp).Where(x => projects.Contains(x.Project)));
            }
            else
            {
                var projects = await _context.Projects.Where(x => x.DivisionId.Equals(user.DivisionId)).ToListAsync();
                return View("Reports/Installations", data.OrderByDescending(x => x.TimeStamp).Where(x => projects.Contains(x.Project)));
            }
        }
        public async Task<IActionResult> CombsearchArrival(string searchstring, string filterchoice, string filterchoice2)
        {
            int f_c_converted;
            int f_c_converted2;
            f_c_converted = Convert.ToInt32(filterchoice);
            f_c_converted2 = Convert.ToInt32(filterchoice2);
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }

            List<Arrival> data = new List<Arrival>();
            ViewData["ItemTypeId"] = await CreateItemlist("arrival");
            ViewData["ProjectId"] = await GetProjectList();
            if (searchstring != null && filterchoice != null && filterchoice2 != null)
            {

                data = await _context.Arrivals
                    .Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => (x.UniqueID.ToLower().Contains(searchstring.ToLower()) || x.ItemType.Item_Type.ToLower().Contains(searchstring.ToLower()) || x.ItemType.BoQnr.ToString().ToLower().Contains(searchstring.ToLower())) && x.ItemTypeId.Equals(f_c_converted) && x.ProjectId.Equals(f_c_converted2))
                    .ToListAsync();
            }
            else if (searchstring != null && (filterchoice == null || filterchoice == "All") && (filterchoice2 == null || filterchoice2 == "All"))
            {
                data = await _context.Arrivals.Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject)
                    .Where(x => (x.UniqueID.ToLower().Contains(searchstring.ToLower()) || x.ItemType.Item_Type.ToLower().Contains(searchstring.ToLower()) || x.ItemType.BoQnr.ToString().ToLower().Contains(searchstring.ToLower())) && !x.Project.Name.Contains("STOCK"))
                    .ToListAsync();
            }
            else if (searchstring != null && (filterchoice != null && (filterchoice2 == null) || filterchoice2 == "All"))
            {
                data = await _context.Arrivals.Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject)
                    .Where(x => ((x.UniqueID.ToLower().Contains(searchstring.ToLower()) || x.ItemType.Item_Type.ToLower().Contains(searchstring.ToLower()) || x.ItemType.BoQnr.ToString().ToLower().Contains(searchstring.ToLower())) || x.ItemTypeId.Equals(f_c_converted)) && !x.Project.Name.Contains("STOCK"))
                    .ToListAsync();
            }
            else if (searchstring != null && (filterchoice == null || filterchoice == "All") && filterchoice2 != null)
            {
                data = await _context.Arrivals.Include(x => x.ItemType).Include(x => x.SubProject)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Where(x => (x.UniqueID.ToLower().Contains(searchstring.ToLower()) || x.ItemType.Item_Type.ToLower().Contains(searchstring.ToLower()) || x.ItemType.BoQnr.ToString().ToLower().Contains(searchstring.ToLower())) && (x.ProjectId.Equals(f_c_converted2)))
                    .ToListAsync();
            }
            else if (searchstring == null && filterchoice != null && (filterchoice2 == null || filterchoice2 == "All"))
            {
                data = await _context.Arrivals.Include(x => x.ItemType).Include(x => x.SubProject)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                .Where(x => x.ItemTypeId.Equals(f_c_converted) && !x.Project.Name.Contains("STOCK"))
                .ToListAsync();

            }
            else if (searchstring == null && (filterchoice == null || filterchoice == "All") && filterchoice2 != null)
            {
                data = await _context.Arrivals.Include(x => x.ItemType).Include(x => x.SubProject)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                .Where(x => x.ProjectId.Equals(f_c_converted2) && !x.Project.Name.Contains("STOCK"))
                .ToListAsync();
            }
            else if (searchstring == null && filterchoice != null && filterchoice2 != null)
            {
                data = await _context.Arrivals.Include(x => x.ItemType).Include(x => x.SubProject)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                .Where(x => x.ProjectId.Equals(f_c_converted2) && x.ItemTypeId.Equals(f_c_converted))
                .ToListAsync();
            }
            else
            {

                data = await _context.Arrivals.Include(x => x.ItemType).Include(x => x.SubProject)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Where(x => !x.Project.Name.Contains("STOCK"))
                .ToListAsync();

            }
            if (User.IsInRole("Admin"))
            {
                return View("Reports/Arrivals", data.OrderBy(x => x.TimeStamp));
            }
            else if (User.IsInRole("MemberGuest") || User.IsInRole("Guest"))
            {
                var projects = await (from proj in _context.Projects
                                      join pu in _context.ProjectUsers
                                        on proj.Id equals pu.projectId
                                      where pu.userId.Equals(user.Id)
                                      select proj).ToListAsync();

                return View("Reports/Arrivals", data.OrderBy(x => x.TimeStamp).Where(x => projects.Contains(x.Project)));
            }
            else
            {
                var projects = await _context.Projects.Where(x => x.DivisionId.Equals(user.DivisionId)).ToListAsync();
                return View("Reports/Arrivals", data.OrderBy(x => x.TimeStamp).Where(x => projects.Contains(x.Project)));
            }
        }
        [Authorize(Roles = "Admin,International")]
        public async Task<IActionResult> CombsearchArrivalHIH(string searchstring, string filterchoice, string filterchoice2)
        {
            int f_c_converted;
            int f_c_converted2;
            f_c_converted = Convert.ToInt32(filterchoice);
            f_c_converted2 = Convert.ToInt32(filterchoice2);
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }

            List<Arrival> data = new List<Arrival>();
            ViewData["ItemTypeId"] = await CreateItemlist("arrival");
            ViewData["ProjectId"] = await GetProjectList2();
            if (searchstring != null && filterchoice != null && filterchoice2 != null)
            {

                data = await _context.Arrivals
                    .Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => (x.ItemType.Item_Type.ToLower().Contains(searchstring.ToLower()) || x.ItemType.BoQnr.ToString().ToLower().Contains(searchstring.ToLower())) && x.ItemTypeId.Equals(f_c_converted) && x.ProjectId.Equals(f_c_converted2) && x.Project.Name.Contains("STOCK"))
                    .ToListAsync();
            }
            else if (searchstring != null && (filterchoice == null || filterchoice == "All") && (filterchoice2 == null || filterchoice2 == "All"))
            {
                data = await _context.Arrivals
                    .Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => (x.ItemType.Item_Type.ToLower().Contains(searchstring.ToLower()) || x.ItemType.BoQnr.ToString().ToLower().Contains(searchstring.ToLower())) && x.Project.Name.Contains("STOCK"))
                    .ToListAsync();
            }
            else if (searchstring != null && (filterchoice != null && (filterchoice2 == null) || filterchoice2 == "All"))
            {
                data = await _context.Arrivals
                    .Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => ((x.ItemType.Item_Type.ToLower().Contains(searchstring.ToLower()) || x.ItemType.BoQnr.ToString().ToLower().Contains(searchstring.ToLower())) || x.ItemTypeId.Equals(f_c_converted)) && x.Project.Name.Contains("STOCK"))
                    .ToListAsync();
            }
            else if (searchstring != null && (filterchoice == null || filterchoice == "All") && filterchoice2 != null)
            {
                data = await _context.Arrivals
                    .Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => (x.ItemType.Item_Type.ToLower().Contains(searchstring.ToLower()) || x.ItemType.BoQnr.ToString().ToLower().Contains(searchstring.ToLower())) && (x.ProjectId.Equals(f_c_converted2) && x.Project.Name.Contains("STOCK")))
                    .ToListAsync();
            }
            else if (searchstring == null && filterchoice != null && (filterchoice2 == null || filterchoice2 == "All"))
            {
                data = await _context.Arrivals
                    .Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                .Where(x => x.ItemTypeId.Equals(f_c_converted) && x.Project.Name.Contains("STOCK"))
                .ToListAsync();

            }
            else if (searchstring == null && (filterchoice == null || filterchoice == "All") && filterchoice2 != null)
            {
                data = await _context.Arrivals
                    .Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                .Where(x => x.ProjectId.Equals(f_c_converted2) && x.Project.Name.Contains("STOCK"))
                .ToListAsync();
            }
            else if (searchstring == null && filterchoice != null && filterchoice2 != null)
            {
                data = await _context.Arrivals
                    .Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                .Where(x => x.ProjectId.Equals(f_c_converted2) && x.ItemTypeId.Equals(f_c_converted) && x.Project.Name.Contains("STOCK"))
                .ToListAsync();
            }
            else
            {

                data = await _context.Arrivals
                    .Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => x.Project.Name.Contains("STOCK"))
                .ToListAsync();

            }
            if (User.IsInRole("Admin"))
            {
                return View("Reports/Arrivals_HIH", data.Where(x => x.Project.Name.Contains("STOCK") && x.EndStamp == null).OrderBy(x => x.TimeStamp));
            }
            else
            {

                return View("Reports/Arrivals_HIH", data.Where(x => x.EndStamp == null).OrderBy(x => x.ItemType.Item_Type).ThenBy(x => x.Project.Name));
            }
        }
        public async Task<IActionResult> CombsearchMobilize(string searchstring, string filterchoice, string filterchoice2)
        {
            int f_c_converted;
            int f_c_converted2;
            f_c_converted = Convert.ToInt32(filterchoice);
            f_c_converted2 = Convert.ToInt32(filterchoice2);
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }

            List<Mobilize> data = new List<Mobilize>();
            ViewData["ItemTypeId"] = await CreateItemlist("mobilize");
            ViewData["ProjectId"] = await GetProjectList();
            if (searchstring != null && filterchoice != null && filterchoice2 != null)
            {

                data = await _context.Mobilisations
                    .Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Where(x => (x.ItemType.Item_Type.ToLower().Contains(searchstring.ToLower()) || x.ItemType.BoQnr.ToString().ToLower().Contains(searchstring.ToLower())) && x.ItemTypeId.Equals(f_c_converted) && x.ProjectId.Equals(f_c_converted2))
                    .ToListAsync();
            }
            else if (searchstring != null && (filterchoice == null || filterchoice == "All") && (filterchoice2 == null || filterchoice2 == "All"))
            {
                data = await _context.Mobilisations.Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Where(x => (x.ItemType.Item_Type.ToLower().Contains(searchstring.ToLower()) || x.ItemType.BoQnr.ToString().ToLower().Contains(searchstring.ToLower())))
                    .ToListAsync();
            }
            else if (searchstring != null && (filterchoice != null && (filterchoice2 == null) || filterchoice2 == "All"))
            {
                data = await _context.Mobilisations.Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Where(x => (x.ItemType.Item_Type.ToLower().Contains(searchstring.ToLower()) || x.ItemType.BoQnr.ToString().ToLower().Contains(searchstring.ToLower())) || x.ItemTypeId.Equals(f_c_converted))
                    .ToListAsync();
            }
            else if (searchstring != null && (filterchoice == null || filterchoice == "All") && filterchoice2 != null)
            {
                data = await _context.Mobilisations.Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Where(x => (x.ItemType.Item_Type.ToLower().Contains(searchstring.ToLower()) || x.ItemType.BoQnr.ToString().ToLower().Contains(searchstring.ToLower())) && (x.ProjectId.Equals(f_c_converted2)))
                    .ToListAsync();
            }
            else if (searchstring == null && filterchoice != null && (filterchoice2 == null || filterchoice2 == "All"))
            {
                data = await _context.Mobilisations.Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                .Where(x => x.ItemTypeId.Equals(f_c_converted))
                .ToListAsync();

            }
            else if (searchstring == null && (filterchoice == null || filterchoice == "All") && filterchoice2 != null)
            {
                data = await _context.Mobilisations.Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                .Where(x => x.ProjectId.Equals(f_c_converted2))
                .ToListAsync();
            }
            else if (searchstring == null && filterchoice != null && filterchoice2 != null)
            {
                data = await _context.Mobilisations.Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                .Where(x => x.ProjectId.Equals(f_c_converted2) && x.ItemTypeId.Equals(f_c_converted))
                .ToListAsync();
            }
            else
            {

                data = await _context.Mobilisations.Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                .ToListAsync();

            }
            if (User.IsInRole("Admin"))
            {
                return View("Reports/Mobilisations", data.OrderBy(x => x.TimeStamp));
            }
            else if (User.IsInRole("MemberGuest") || User.IsInRole("Guest"))
            {
                var projects = await (from proj in _context.Projects
                                      join pu in _context.ProjectUsers
                                        on proj.Id equals pu.projectId
                                      where pu.userId.Equals(user.Id)
                                      select proj).ToListAsync();

                return View("Reports/Mobilisations", data.OrderBy(x => x.TimeStamp).Where(x => projects.Contains(x.Project)));
            }
            else
            {
                var projects = await _context.Projects.Where(x => x.DivisionId.Equals(user.DivisionId)).ToListAsync();
                return View("Reports/Mobilisations", data.OrderBy(x => x.TimeStamp).Where(x => projects.Contains(x.Project)));
            }
        }
        public async Task<IActionResult> CombsearchDeInstall(string searchstring, string filterchoice, string filterchoice2)
        {
            int f_c_converted;
            int f_c_converted2;
            f_c_converted = Convert.ToInt32(filterchoice);
            f_c_converted2 = Convert.ToInt32(filterchoice2);
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            };

            List<DeInstall> data = new List<DeInstall>();
            ViewData["ItemTypeId"] = await CreateItemlist("deinstall");
            ViewData["ProjectId"] = await GetProjectList();
            if (searchstring != null && filterchoice != null && filterchoice2 != null)
            {

                data = await _context.Deinstallations
                    .Include(x => x.ItemType)
                    .Include(x => x.Install)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Where(x => (x.Id.ToString().Equals(searchstring) || x.ItemType.Item_Type.ToLower().Contains(searchstring.ToLower()) || x.ItemType.BoQnr.ToString().ToLower().Contains(searchstring.ToLower())) && x.ItemTypeId.Equals(f_c_converted) && x.ProjectId.Equals(f_c_converted2))
                    .ToListAsync();
            }
            else if (searchstring != null && (filterchoice == null || filterchoice == "All") && (filterchoice2 == null || filterchoice2 == "All"))
            {
                data = await _context.Deinstallations.Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.Install)
                    .Where(x => (x.Id.ToString().Equals(searchstring) || x.ItemType.Item_Type.ToLower().Contains(searchstring.ToLower()) || x.ItemType.BoQnr.ToString().ToLower().Contains(searchstring.ToLower()) || x.Install.UniqueID.Contains(searchstring.ToLower())))
                    .ToListAsync();
            }
            else if (searchstring != null && (filterchoice != null && (filterchoice2 == null) || filterchoice2 == "All"))
            {
                data = await _context.Deinstallations.Include(x => x.ItemType)
                    .Include(x => x.Install)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Where(x => (x.Id.ToString().Equals(searchstring) || x.ItemType.Item_Type.ToLower().Contains(searchstring.ToLower()) || x.Install.UniqueID.Contains(searchstring.ToLower()) || x.ItemType.BoQnr.ToString().ToLower().Contains(searchstring.ToLower())) || x.ItemTypeId.Equals(f_c_converted))
                    .ToListAsync();
            }
            else if (searchstring != null && (filterchoice == null || filterchoice == "All") && filterchoice2 != null)
            {
                data = await _context.Deinstallations.Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.Install)
                    .Where(x => (x.Id.ToString().Equals(searchstring) || x.ItemType.Item_Type.ToLower().Contains(searchstring.ToLower()) || x.Install.UniqueID.Contains(searchstring.ToLower()) || x.ItemType.BoQnr.ToString().ToLower().Contains(searchstring.ToLower())) && (x.ProjectId.Equals(f_c_converted2)))
                    .ToListAsync();
            }
            else if (searchstring == null && filterchoice != null && (filterchoice2 == null || filterchoice2 == "All"))
            {
                data = await _context.Deinstallations.Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.Install)
                .Where(x => x.ItemTypeId.Equals(f_c_converted))
                .ToListAsync();

            }
            else if (searchstring == null && (filterchoice == null || filterchoice == "All") && filterchoice2 != null)
            {
                data = await _context.Deinstallations.Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.Install)
                .Where(x => x.ProjectId.Equals(f_c_converted2))
                .ToListAsync();
            }
            else if (searchstring == null && filterchoice != null && filterchoice2 != null)
            {
                data = await _context.Deinstallations.Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.Install)
                .Where(x => x.ProjectId.Equals(f_c_converted2) && x.ItemTypeId.Equals(f_c_converted))
                .ToListAsync();
            }
            else
            {

                data = await _context.Deinstallations.Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.Install)
                .ToListAsync();

            }
            if (User.IsInRole("Admin"))
            {
                return View("Reports/DeInstallations", data.OrderBy(x => x.TimeStamp));
            }
            else if (User.IsInRole("MemberGuest") || User.IsInRole("Guest"))
            {
                var projects = await (from proj in _context.Projects
                                      join pu in _context.ProjectUsers
                                        on proj.Id equals pu.projectId
                                      where pu.userId.Equals(user.Id)
                                      select proj).ToListAsync();

                return View("Reports/DeInstallations", data.OrderBy(x => x.TimeStamp).Where(x => projects.Contains(x.Project)));
            }
            else
            {
                var projects = await _context.Projects.Where(x => x.DivisionId.Equals(user.DivisionId)).ToListAsync();
                return View("Reports/DeInstallations", data.OrderBy(x => x.TimeStamp).Where(x => projects.Contains(x.Project)));
            }
        }

        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember,International")]
        public async Task<IActionResult> Mobilize()
        {
            ViewData["ProjectId"] = await GetProjectList();
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            var subprojects = await _context.SubProjects.Include(x => x.Project).Where(x => x.Project.DivisionId.Equals(user.DivisionId)).ToListAsync();
            var itemtypes = (from it in _context.ItemTypes.Include(x => x.Project)
                             join bqh in _context.BoQHeadLines on Math.Floor(it.BoQnr) equals Math.Floor(bqh.BoQnum)
                             where bqh.Type.Equals("Mobilization") && !it.Item_Type.ToLower().Contains("discount")
                             select it).OrderBy(x => x.BoQnr).ToList();
            if (User.IsInRole("International") && !User.IsInRole("Admin"))
            {
                ViewData["ItemTypeId"] = new SelectList(itemtypes.Where(x => x.Project.Name.Contains("STOCK")), "Id", "Item_Type");
                return View("Mobilize");
            }
            ViewData["ItemTypeId"] = new SelectList(itemtypes, "Id", "Item_Type");
            ViewData["SubProjectId"] = new SelectList(subprojects, "Id", "Name");
            return View("Mobilize");
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> DataLoggerInstall()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            ViewData["ProjectId"] = await GetProjectList();
            ViewData["MeasPointId"] = new SelectList(_context.MeasPoints.Include(x => x.Project).Include(x => x.MeasType).Where(x => x.Project.DivisionId.Equals(user.DivisionId) && x.MeasType.Type.ToLower().Equals("water level")), "Id", "Name");
            return View();
        }
        [HttpPost]
        [RequestSizeLimit(900000000)]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> DataLoggerInstall(DataLoggerInstall model, IFormFile[] files)
        {
            if (ModelState.IsValid)
            {
                var user = await _userManager.GetUserAsync(User);
                model.DoneBy = user.full_name();
                _context.Add(model);
                await _context.SaveChangesAsync();
                var itemadded = await _context.DataLoggerInstallations.LastAsync();

                var directory = _env.WebRootPath + "\\AHAK\\DataLoggerInstallPhotos\\" + itemadded.Id.ToString() + "\\";
                if (!Directory.Exists(directory) && files != null)
                {
                    Directory.CreateDirectory(directory);
                }
                foreach (IFormFile photo in files)
                {

                    var path = Path.Combine(directory, photo.FileName);

                    PhotoFileDataLoggerInstall installphoto = new PhotoFileDataLoggerInstall { Path = path, TimeStamp = model.TimeStamp, DataLoggerInstallId = itemadded.Id, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                    _context.Add(installphoto);
                    var stream = new FileStream(path, FileMode.Create);
                    await photo.CopyToAsync(stream);
                    stream.Close();
                    if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                    {
                        PhotoExtensions.SaveAndCompressJpeg(path, 85);
                    }
                }
                //var itemtype = await _context.ItemTypes.Where(x => x.ProjectId.Equals(model.ProjectId) && x.Item_Type.ToLower().Contains("data logger")).FirstOrDefaultAsync();
                var itemtype = await _context.ItemTypes.Include(x => x.ReportType).Where(x => x.ProjectId.Equals(model.ProjectId) && x.ReportType.Type.Equals("Data Logger Installation")).SingleOrDefaultAsync();
                if (itemtype == null)
                {
                    itemtype = new ItemType { Item_Type = "Data Logger", ProjectId = model.ProjectId, BoQnr = (decimal)2.10, price = (decimal)0.0, ReportTypeId = 6, Valuta = "DKK", Install_UnitId = 1, Rental_UnitId = 3 };
                    _context.Add(itemtype);
                    await _context.SaveChangesAsync();
                    itemtype = await _context.ItemTypes.LastAsync();
                }
                Install install = new Install { ToBePaid = true, ItemTypeId = itemtype.Id, ProjectId = model.ProjectId, SubProjectId = model.SubProjectId, Install_Text = model.Comments, isInstalled = true, DoneBy = user.full_name(), Amount = 1, TimeStamp = model.TimeStamp, InvoiceDate = DateTime.Now, RentalStartDate = model.TimeStamp, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude), UniqueID = string.Concat(model.WellName, " (", model.DataLoggerNumber.ToString(), ")"), EnteredIntoDataBase = DateTime.Now, LastEditedInDataBase = DateTime.Now, IsInOperation = true };
                _context.Add(install);
                await _context.SaveChangesAsync();
                var lastaddedinstall = await _context.Installations.LastAsync();
                var directory2 = _env.WebRootPath + "\\AHAK\\InstallPhotos\\" + lastaddedinstall.Id.ToString() + "\\";
                if (!Directory.Exists(directory2) && files != null)
                {
                    Directory.CreateDirectory(directory2);
                }
                foreach (IFormFile photo in files)
                {

                    var path = Path.Combine(directory2, photo.FileName);

                    PhotoFileInstalled2 installphoto = new PhotoFileInstalled2 { Path = path, TimeStamp = model.TimeStamp, InstallId = lastaddedinstall.Id, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                    _context.Add(installphoto);
                    var stream = new FileStream(path, FileMode.Create);
                    await photo.CopyToAsync(stream);
                    stream.Close();
                    if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                    {
                        PhotoExtensions.SaveAndCompressJpeg(path, 85);
                    }
                }
                CoordTrack2 installCoords = new CoordTrack2 { ArrivalId = null, InstallId = lastaddedinstall.Id, MobilizeId = null, MeasPointId = model.MeasPointId, TypeCoord = "Install", TimeStamp = model.TimeStamp, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                _context.Add(installCoords);
                Log2 newLog = new Log2 { ItemTypeId = itemtype.Id, Description = _SharedLocalizer.GetLocalizedHtmlString("Item Installed.:") + " " + model.Comments + " AMOUNT: " + lastaddedinstall.Amount.ToString(), TimeStamp = model.TimeStamp, PhotoPath = directory, TheUser = user.full_name() };
                _context.Add(newLog);
                await _context.SaveChangesAsync();
            }
            if (User.IsInRole("International") && !User.IsInRole("Admin"))
            {
                return RedirectToAction("MainMenu_HIH", "TrackItems");
            }
            return RedirectToAction("MainMenu", "TrackItems");
        }
        [HttpGet]
        [Authorize(Roles = "Admin,Manager,DivisionAdmin,International")]
        public async Task<IActionResult> SendBackOrTransfer(int? id)
        {
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            if (id != null)
            {
                var arrival = await _context.Arrivals.Include(x => x.ItemType).Include(x => x.Project).Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                if (arrival.Project.DivisionId.Equals(user.DivisionId) || User.IsInRole("Admin"))
                {
                    ViewData["ProjectId"] = await GetProjectList();
                    ViewData["SubProjectId"] = new SelectList(_context.SubProjects, "Id", "Name");
                    return View(arrival);
                }
                else { return NotFound(); }

            }
            else
            {
                return NotFound();
            }
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember,International")]
        public async Task<IActionResult> SendBack(int? ArrivalId, DateTime? TransferDate, int? AmountSendBack)
        {
            if (!(ArrivalId == null || AmountSendBack < 1 || AmountSendBack == null || TransferDate == null))
            {
                var user = await _userManager.GetUserAsync(User);
                var arrival = await _context.Arrivals.Include(x => x.ItemType).Include(x => x.Project).Where(x => x.Id.Equals(ArrivalId)).SingleOrDefaultAsync();
                if (arrival.Project.DivisionId.Equals(user.DivisionId) || User.IsInRole("Admin"))
                {
                    if (arrival.Amount == AmountSendBack)
                    {
                        arrival.EndStamp = Convert.ToDateTime(TransferDate);
                        _context.Update(arrival);
                        Log2 newLog = new Log2 { ItemTypeId = arrival.ItemTypeId, Description = _SharedLocalizer.GetLocalizedHtmlString("Items Sent Back.: All"), TimeStamp = Convert.ToDateTime(TransferDate), PhotoPath = "", TheUser = user.full_name() };
                        _context.Add(newLog);
                        await _context.SaveChangesAsync();
                    }
                    else
                    {
                        Arrival oldArrival = new Arrival(arrival, Convert.ToDouble(arrival.Amount) - Convert.ToDouble(AmountSendBack), Convert.ToInt32(arrival.ProjectId), arrival.SubProjectId, Convert.ToDateTime(TransferDate));
                        _context.Add(oldArrival);
                        arrival.EndStamp = Convert.ToDateTime(TransferDate).AddDays(-1);
                        Log2 Logold = new Log2 { ItemTypeId = arrival.ItemTypeId, Description = _SharedLocalizer.GetLocalizedHtmlString("Stopping Rental on old items:" + arrival.Amount.ToString()), TimeStamp = Convert.ToDateTime(TransferDate).AddDays(-1), PhotoPath = "", TheUser = user.full_name() };
                        _context.Log2s.Add(Logold);
                        _context.Update(arrival);
                        Log2 newLog = new Log2 { ItemTypeId = arrival.ItemTypeId, Description = _SharedLocalizer.GetLocalizedHtmlString("Items Sent Back.:" + AmountSendBack.ToString() + " From Arrival: " + arrival.Id.ToString()), TimeStamp = Convert.ToDateTime(TransferDate), PhotoPath = "", TheUser = user.full_name() };
                        _context.Log2s.Add(newLog);
                        Log2 newLog2 = new Log2 { ItemTypeId = arrival.ItemTypeId, Description = _SharedLocalizer.GetLocalizedHtmlString("Resuming rental on remaining items:" + (arrival.Amount - AmountSendBack).ToString() + " From Arrival: " + arrival.Id.ToString()), TimeStamp = Convert.ToDateTime(TransferDate), PhotoPath = "", TheUser = user.full_name() };
                        _context.Log2s.Add(newLog2);
                        await _context.SaveChangesAsync();
                    }
                }
                else { return NotFound(); }
                if (User.IsInRole("International") && !User.IsInRole("Admin"))
                {
                    return RedirectToAction("Arrivals_HIH");
                }
                return RedirectToAction("Arrivals");
            }
            else
            {
                return NotFound();
            }
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember,International")]
        public async Task<IActionResult> TransferItems(int? ArrivalId, DateTime? TransferDate, int? AmountTransfer, int? ProjectIdTransfer, int? SubProjectIdTransfer)
        {
            if (!(ArrivalId == null || AmountTransfer < 1 || AmountTransfer == null || ProjectIdTransfer == null || TransferDate == null))
            {
                var arrival = await _context.Arrivals.Include(x => x.ItemType).Where(x => x.Id.Equals(ArrivalId)).SingleOrDefaultAsync();
                var itemtypeNewProject = await _context.ItemTypes.Where(x => x.Item_Type.Equals(arrival.ItemType.Item_Type) && x.ProjectId.Equals(ProjectIdTransfer)).SingleOrDefaultAsync();
                var user = await _userManager.GetUserAsync(User);
                if (arrival.Amount == AmountTransfer)
                {
                    //send all items to other project
                    Arrival newArrival;
                    if (itemtypeNewProject != null)
                    {
                        newArrival = new Arrival(arrival, Convert.ToDouble(AmountTransfer), Convert.ToInt32(ProjectIdTransfer), SubProjectIdTransfer, Convert.ToDateTime(TransferDate), itemtypeNewProject.Id);
                    }
                    else
                    {
                        newArrival = new Arrival(arrival, Convert.ToDouble(AmountTransfer), Convert.ToInt32(ProjectIdTransfer), SubProjectIdTransfer, Convert.ToDateTime(TransferDate));
                    }
                    newArrival.EnteredIntoDataBase = DateTime.Now;
                    _context.Add(newArrival);
                    Log2 newLog = new Log2 { ItemTypeId = arrival.ItemTypeId, Description = _SharedLocalizer.GetLocalizedHtmlString("Items Moved from project:" + arrival.ProjectId.ToString() + " To Project: " + Convert.ToInt32(ProjectIdTransfer).ToString() + " Amount: " + AmountTransfer.ToString() + " For Arrival: " + arrival.Id.ToString()), TimeStamp = Convert.ToDateTime(TransferDate), PhotoPath = "", TheUser = user.full_name() };
                    _context.Log2s.Add(newLog);
                    arrival.EndStamp = Convert.ToDateTime(TransferDate).AddDays(-1);
                    _context.Update(arrival);
                    Log2 Logold = new Log2 { ItemTypeId = arrival.ItemTypeId, Description = _SharedLocalizer.GetLocalizedHtmlString("Stopping Rental on old items:" + arrival.Amount.ToString()), TimeStamp = Convert.ToDateTime(TransferDate).AddDays(-1), PhotoPath = "", TheUser = user.full_name() };
                    _context.Log2s.Add(Logold);


                    await _context.SaveChangesAsync();

                }
                else
                {
                    //send some items to other project
                    Arrival newArrival;
                    if (itemtypeNewProject != null)
                    {
                        newArrival = new Arrival(arrival, Convert.ToDouble(AmountTransfer), Convert.ToInt32(ProjectIdTransfer), SubProjectIdTransfer, Convert.ToDateTime(TransferDate), itemtypeNewProject.Id);
                    }
                    else
                    {
                        newArrival = new Arrival(arrival, Convert.ToDouble(AmountTransfer), Convert.ToInt32(ProjectIdTransfer), SubProjectIdTransfer, Convert.ToDateTime(TransferDate));
                    }

                    newArrival.EnteredIntoDataBase = DateTime.Now;
                    Arrival oldArrival = new Arrival(arrival, Convert.ToDouble(arrival.Amount) - Convert.ToInt32(AmountTransfer), Convert.ToInt32(arrival.ProjectId), arrival.SubProjectId, Convert.ToDateTime(TransferDate));
                    oldArrival.EnteredIntoDataBase = DateTime.Now;
                    _context.Add(newArrival);
                    Log2 newLog = new Log2 { ItemTypeId = arrival.ItemTypeId, Description = _SharedLocalizer.GetLocalizedHtmlString("Items Moved from project:" + arrival.ProjectId.ToString() + " To Project: " + Convert.ToInt32(ProjectIdTransfer).ToString() + "For Arrival: " + arrival.Id.ToString() + " Amount: " + Convert.ToInt32(AmountTransfer).ToString()), TimeStamp = Convert.ToDateTime(TransferDate), PhotoPath = "", TheUser = user.full_name() };
                    _context.Log2s.Add(newLog);
                    _context.Add(oldArrival);
                    Log2 newLog2 = new Log2 { ItemTypeId = arrival.ItemTypeId, Description = _SharedLocalizer.GetLocalizedHtmlString("Resuming rental on remaining items:" + (Convert.ToDouble(arrival.Amount) - Convert.ToDouble(AmountTransfer)).ToString() + " From Arrival: " + arrival.Id.ToString()), TimeStamp = Convert.ToDateTime(TransferDate), PhotoPath = "", TheUser = user.full_name() };
                    _context.Log2s.Add(newLog2);
                    arrival.EndStamp = Convert.ToDateTime(TransferDate).AddDays(-1);
                    _context.Update(arrival);
                    Log2 Logold = new Log2 { ItemTypeId = arrival.ItemTypeId, Description = _SharedLocalizer.GetLocalizedHtmlString("Stopping Rental on old items:" + arrival.Amount.ToString()), TimeStamp = Convert.ToDateTime(TransferDate).AddDays(-1), PhotoPath = "", TheUser = user.full_name() };
                    _context.Log2s.Add(Logold);
                    await _context.SaveChangesAsync();
                }
                if (User.IsInRole("International") && !User.IsInRole("Admin"))
                {
                    return RedirectToAction("Arrivals_HIH");
                }
                return RedirectToAction("Arrivals");
            }
            else
            {
                return NotFound();
            }
        }
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> AlarmCall()
        {
            ViewData["ProjectId"] = await GetProjectList();
            return View("AlarmCall");
        }

        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Install()
        {
            ViewData["ProjectId"] = await GetProjectList();
            return View("InstallMultiple");
        }
        [Authorize(Roles = "Admin,ProjectMember,Member,Manager,DivisionAdmin")]
        public async Task<IEnumerable<SelectListItem>> GetUserList()
        {
            var theuser = await _userManager.GetUserAsync(User);
            var obj = (from user in _context.Users.Where(x => x.DivisionId.Equals(theuser.DivisionId) && x.Active.Equals(true)).OrderBy(x => x.FirstName)
                       select new
                       {
                           UserId = user.Id,
                           FullName = user.full_name(),
                           RoleNames = string.Join(",", (from userRole in _context.UserRoles
                                                         join role in _context.Roles on userRole.RoleId
                                                         equals role.Id
                                                         where userRole.UserId == user.Id
                                                         select role.Name).ToList())
                       }).ToList();
            IEnumerable<SelectListItem> selList = from s in obj
                                                  where !(s.RoleNames.Contains("Guest") || s.RoleNames.Contains("MemberGuest"))
                                                  && (s.RoleNames.Contains("ProjectMember") || s.RoleNames.Contains("ExternalDriller"))
                                                  && s.RoleNames.Count() > 0

                                                  select new SelectListItem
                                                  {
                                                      Value = s.UserId,
                                                      Text = s.FullName
                                                  };


            //ViewData["Users"] = selList;
            return selList;
        }
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Drill()
        {
            ViewData["ProjectId"] = await GetProjectList();
            return View("Drill");
        }
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember,International")]
        public async Task<IActionResult> Arrival()
        {
            var user = await _userManager.GetUserAsync(User);
            ViewData["ProjectId"] = await GetProjectList();
            //var itemtypes = (from it in _context.ItemTypes.Include(x => x.Project) join bqh in _context.BoQHeadLines on Math.Floor(it.BoQnr) equals Math.Floor(bqh.BoQnum) where bqh.Type.Equals("Installation") && !it.Item_Type.ToLower().Contains("discount") select it).OrderBy(x => x.Item_Type).ToList();
            //var itemtypes2 = (from it in _context.ItemTypes join bqh in _context.BoQHeadLines on Math.Floor(it.BoQnr) equals Math.Floor(bqh.BoQnum) where bqh.Type.Equals("Mobilization") && !it.Item_Type.ToLower().Contains("discount") && it.Item_Type.ToLower().Contains("transport") select it).OrderBy(x => x.Item_Type).ToList();
            //if (User.IsInRole("International") && !User.IsInRole("Admin"))
            //{
            //    ViewData["ItemTypeId"] = new SelectList(itemtypes.Where(x => x.Project.Name.Contains("STOCK")), "Id", "Item_Type");
            //    ViewData["ItemTypeId2"] = new SelectList(itemtypes2.Where(x => x.Project.Name.Contains("STOCK")), "Id", "Item_Type");
            //    return View("Arrival");
            //}
            ViewData["ItemTypeId"] = new SelectList(_context.ItemTypes.Where(x => x.Project.DivisionId.Equals(user.DivisionId) && x.Project.Active.Equals(true)), "Id", "Item_Type");
            ViewData["ItemTypeId2"] = new SelectList(_context.ItemTypes.Where(x => x.Project.DivisionId.Equals(user.DivisionId) && x.Project.Active.Equals(true)), "Id", "Item_Type");
            return View("ArrivalMultiple");
        }
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> DeInstall()
        {
            ViewData["ProjectId"] = await GetProjectList();
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            DeInstallItemVM model = new DeInstallItemVM();
            if (User.IsInRole("Admin"))
            {
                model.InstalledCoordinates = await _context.Installations.Include(x => x.ItemType).Where(x => x.isInstalled.Equals(true)).ToListAsync();
            }
            else
            {
                model.InstalledCoordinates = await _context.Installations.Include(x => x.ItemType).Where(x => x.isInstalled.Equals(true) && x.Project.DivisionId.Equals(user.DivisionId)).ToListAsync();
            }

            var itemtypes = (from it in _context.ItemTypes
                             join bqh in _context.BoQHeadLines on Math.Floor(it.BoQnr) equals Math.Floor(bqh.BoQnum)
                             where bqh.Type.Equals("Installation") && !it.Item_Type.ToLower().Contains("discount")
                             select it).OrderBy(x => x.BoQnr).ToList();
            ViewData["ItemTypeId"] = new SelectList(itemtypes, "Id", "Item_Type");
            return View("Deinstall", model);
        }

        [HttpPost]
        [RequestSizeLimit(900000000)]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember,International")]
        public async Task<IActionResult> Mobilize(MobilizeItemVM model, IFormFile[] files)
        {
            if (ModelState.IsValid)
            {
                var user = await _userManager.GetUserAsync(User);
                Mobilize mobilize = new Mobilize { VariationOrderId = model.VariationOrderId, PaidAmount = 0, ToBePaid = true, UniqueID = model.UniqueID == null ? "N/A" : model.UniqueID, DoneBy = user.full_name(), InvoiceDate = DateTime.Now.Date, SubProjectId = model.SubProjectId, Amount = model.Amount, EnteredIntoDataBase = DateTime.Now, ProjectId = model.ProjectId, ItemTypeId = model.ItemTypeId, TimeStamp = model.TimeStamp, MobilizeText_Text = model.LogText, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                _context.Add(mobilize);
                await _context.SaveChangesAsync();
                var itemadded = await _context.Mobilisations.LastAsync();

                var directory = _env.WebRootPath + "\\AHAK\\MobilizePhotos\\" + itemadded.Id.ToString() + "\\";
                if (!Directory.Exists(directory) && files != null)
                {
                    Directory.CreateDirectory(directory);
                }
                foreach (IFormFile photo in files)
                {

                    var path = Path.Combine(directory, photo.FileName);
                    if (!path.Contains(".pdf"))
                    {
                        PhotoFileMobilized mobilizephoto = new PhotoFileMobilized { Path = path, TimeStamp = model.TimeStamp, MobilizeId = itemadded.Id, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                        _context.Add(mobilizephoto);
                    }
                    else
                    {
                        PhotoFileMobilized newphoto = new PhotoFileMobilized { Latitude = itemadded.Latitude, Longitude = itemadded.Longitude, MobilizeId = itemadded.Id, Path = path.Replace(".pdf", ".png"), TimeStamp = DateTime.Now };
                        _context.Add(newphoto);
                    }
                    var stream = new FileStream(path, FileMode.Create);
                    await photo.CopyToAsync(stream);
                    stream.Close();
                    if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                    {
                        PhotoExtensions.SaveAndCompressJpeg(path, 80);
                    }
                    else if (path.Contains(".pdf"))
                    {
                        PhotoExtensions.ConvertPdfToPng(path);
                        System.IO.File.Delete(path);
                    }
                }
                CoordTrack2 mobilizeCoords = new CoordTrack2 { ArrivalId = null, InstallId = null, MobilizeId = itemadded.Id, MeasPointId = null, TypeCoord = "Mobilized", TimeStamp = model.TimeStamp, Latitude = model.Latitude, Longitude = model.Longitude };
                _context.Add(mobilizeCoords);
                Log2 newLog = new Log2 { ItemTypeId = model.ItemTypeId, Description = _SharedLocalizer.GetLocalizedHtmlString("Item Mobilized.:") + " " + model.LogText, TimeStamp = model.TimeStamp, PhotoPath = directory, TheUser = user.full_name() };
                _context.Add(newLog);
                await _context.SaveChangesAsync();
            }
            if (User.IsInRole("International") && !User.IsInRole("Admin"))
            {
                return RedirectToAction("MainMenu_HIH", "TrackItems");
            }
            return RedirectToAction("MainMenu", "TrackItems");
        }
        [HttpPost]
        [RequestSizeLimit(900000000)]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember,International")]
        public async Task<IActionResult> AlarmCall(AlarmCall model, IFormFile[] files)
        {
            if (ModelState.IsValid)
            {
                var user = await _userManager.GetUserAsync(User);
                model.EnteredIntoDataBase = DateTime.Now;
                model.LastEditedInDataBase = DateTime.Now;
                model.DoneBy = user.full_name();
                _context.Add(model);
                await _context.SaveChangesAsync();
                var itemadded = await _context.AlarmCalls.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Include(x => x.pictures).LastAsync();

                //Upload photo(s)
                int attachedCount = files.Count();
                int uploadedCount = 0;
                var directory = _env.WebRootPath + "\\AHAK\\AlarmCallPhotos\\" + itemadded.Id.ToString() + "\\";
                if (!Directory.Exists(directory) && files != null)
                {
                    Directory.CreateDirectory(directory);
                }
                foreach (IFormFile photo in files)
                {

                    var path = Path.Combine(directory, photo.FileName);

                    PhotoFileAlarmCall alarmphoto = new PhotoFileAlarmCall { AlarmCallId = itemadded.Id, Path = path, TimeStamp = model.TimeStamp, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                    _context.Add(alarmphoto);
                    var stream = new FileStream(path, FileMode.Create);
                    await photo.CopyToAsync(stream);
                    stream.Close();
                    if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                    {
                        PhotoExtensions.SaveAndCompressJpeg(path, 85);
                    }
                }
                var itemtypealarm = await _context.ItemTypes.Where(x => x.ProjectId.Equals(itemadded.ProjectId) && x.ReportTypeId.Equals(8)).FirstOrDefaultAsync();
                if (itemtypealarm != null)
                {
                    Install inst = new Install { ProjectId = itemadded.ProjectId, SubProjectId = itemadded.SubProjectId, ItemTypeId = itemtypealarm.Id, Install_Text = model.LogText, Amount = 1, TimeStamp = model.TimeStamp, InvoiceDate = DateTime.Now, DoneBy = model.DoneBy, EnteredIntoDataBase = model.EnteredIntoDataBase, Latitude = Convert.ToDouble(itemadded.Latitude), Longitude = Convert.ToDouble(itemadded.Longitude) };
                    _context.Add(inst);
                    await _context.SaveChangesAsync();
                    var itemaddedmob = await _context.Installations.LastAsync();
                    var directory2 = _env.WebRootPath + "\\AHAK\\InstallPhotos\\" + itemaddedmob.Id.ToString() + "\\";
                    if (!Directory.Exists(directory2) && files != null)
                    {
                        Directory.CreateDirectory(directory2);
                    }
                    foreach (IFormFile photo in files)
                    {

                        var path = Path.Combine(directory2, photo.FileName);

                        PhotoFileInstalled2 mobphoto = new PhotoFileInstalled2 { InstallId = itemaddedmob.Id, Path = path, TimeStamp = model.TimeStamp, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                        _context.Add(mobphoto);
                        var stream = new FileStream(path, FileMode.Create);
                        await photo.CopyToAsync(stream);
                        stream.Close();
                        if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                        {
                            PhotoExtensions.SaveAndCompressJpeg(path, 85);
                        }
                    }
                    await _context.SaveChangesAsync();
                }
                Log2 newLog = new Log2 { ItemTypeId = null, Description = _SharedLocalizer.GetLocalizedHtmlString("Alarm Call:") + " " + model.LogText, TimeStamp = model.TimeStamp, PhotoPath = directory, TheUser = user.full_name() };
                _context.Add(newLog);
                //
                ViewAsPdf pdf = new ViewAsPdf("Reports/_AlarmCall", itemadded)
                {
                    FileName = "AlarmCall_" + itemadded.Project.Abbreviation + "_" + itemadded.TimeStamp.ToString("yyyy-MM-dd") + ".pdf",
                };
                byte[] bytes = await pdf.BuildFile(ControllerContext);
                var file = Convert.ToBase64String(bytes);
                string footerstringHTML = "<br />Hölscher Jensen A/S<br />Baldersbuen 38<br />2640 Hedehusene<br />Denmark";
                string footerstringPLAIN = "\r\n\r\nHölscher Jensen A/S \r\nBaldersbuen 38\r\n2640 Hedehusene\r\nDenmark";
                if (itemadded.SubProjectId != null)
                {
                    await _emailSender.SendEmailAsync2("jav@hj-as.dk", "Alarm",
                    "<strong>Dear Sir/Madam</strong><br />Attached you will find the alarm report from " + itemadded.Project.Name + " : " + itemadded.SubProject.Name + "."
                    , footerstringHTML, footerstringPLAIN, pdf.FileName, file);
                    await _emailSender.SendEmailAsync2("apl@hj-as.dk", "Alarm",
                    "<strong>Dear Sir/Madam</strong><br />Attached you will find the alarm report from " + itemadded.Project.Name + " : " + itemadded.SubProject.Name + "."
                    , footerstringHTML, footerstringPLAIN, pdf.FileName, file);
                    if (itemadded.Project.Responsible_Person != "")
                    {
                        var projResp = await _context.Users.Where(x => x.full_name().Equals(itemadded.Project.Responsible_Person)).SingleOrDefaultAsync();
                        if (projResp != null)
                        {
                            await _emailSender.SendEmailAsync2(projResp.Email, "Alarm",
                                "<strong>Dear Sir/Madam</strong><br />Attached you will find the alarm report from " + itemadded.Project.Name + " : " + itemadded.SubProject.Name + "."
                                , footerstringHTML, footerstringPLAIN, pdf.FileName, file);
                        }
                    }
                    var otherusers = await _context.AlarmReportReceivers.Where(x => x.ProjectId.Equals(model.ProjectId)).ToListAsync();
                    foreach (var usertoreceive in otherusers)
                    {
                        var theuser = await _context.Users.SingleOrDefaultAsync(x => x.Id.Equals(usertoreceive.UserId));
                        await _emailSender.SendEmailAsync2(theuser.Email, "Alarm",
                                "<strong>Dear Sir/Madam</strong><br />Attached you will find the alarm report from " + itemadded.Project.Name + " : " + itemadded.SubProject.Name + "."
                                , footerstringHTML, footerstringPLAIN, pdf.FileName, file);
                    }
                }
                else
                {
                    await _emailSender.SendEmailAsync2("ofw@hj-as.dk", "Alarm",
                   "<strong>Dear Sir/Madam</strong><br />Attached you will find the alarm report from " + itemadded.Project.Name + "."
                   , footerstringHTML, footerstringPLAIN, pdf.FileName, file);
                    await _emailSender.SendEmailAsync2("bin@hj-as.dk", "Alarm",
                   "<strong>Dear Sir/Madam</strong><br />Attached you will find the alarm report from " + itemadded.Project.Name + "."
                   , footerstringHTML, footerstringPLAIN, pdf.FileName, file);
                    await _emailSender.SendEmailAsync2("dmm@hj-as.dk", "Alarm",
                   "<strong>Dear Sir/Madam</strong><br />Attached you will find the alarm report from " + itemadded.Project.Name + "."
                   , footerstringHTML, footerstringPLAIN, pdf.FileName, file);
                    await _emailSender.SendEmailAsync2("jav@hj-as.dk", "Alarm",
                    "<strong>Dear Sir/Madam</strong><br />Attached you will find the alarm report from " + itemadded.Project.Name + "."
                    , footerstringHTML, footerstringPLAIN, pdf.FileName, file);
                    if (itemadded.Project.Responsible_Person != "")
                    {
                        var projResp = await _context.Users.Where(x => x.full_name().Equals(itemadded.Project.Responsible_Person)).SingleOrDefaultAsync();
                        if (projResp != null)
                        {
                            await _emailSender.SendEmailAsync2(projResp.Email, "Alarm",
                                "<strong>Dear Sir/Madam</strong><br />Attached you will find the alarm report from " + itemadded.Project.Name + "."
                                , footerstringHTML, footerstringPLAIN, pdf.FileName, file);
                        }
                    }
                    var otherusers = await _context.AlarmReportReceivers.Where(x => x.ProjectId.Equals(model.ProjectId)).ToListAsync();
                    foreach (var usertoreceive in otherusers)
                    {
                        var theuser = await _context.Users.SingleOrDefaultAsync(x => x.Id.Equals(usertoreceive.UserId));
                        await _emailSender.SendEmailAsync2(theuser.Email, "Alarm",
                                "<strong>Dear Sir/Madam</strong><br />Attached you will find the alarm report from " + itemadded.Project.Name + "."
                                , footerstringHTML, footerstringPLAIN, pdf.FileName, file);
                    }
                }
                //
                await _context.SaveChangesAsync();
                //view as pdf
            }
            if (User.IsInRole("International") && !User.IsInRole("Admin"))
            {
                return RedirectToAction("MainMenu_HIH", "TrackItems");
            }
            return RedirectToAction("MainMenu", "TrackItems");
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember,International")]
        public async Task<IActionResult> AlarmCalls()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            var alarms = await _context.AlarmCalls.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Include(x => x.pictures)
                .Where(x => x.Project.DivisionId.Equals(user.DivisionId))
                .OrderByDescending(x => x.TimeStamp).ThenBy(x => x.Alarm_Time).ToListAsync();
            return View("Reports/AlarmCalls", alarms);
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember,International")]
        public async Task<IActionResult> Edit_AlarmCall(int? id)
        {
            if (id != null)
            {
                var user = await _userManager.GetUserAsync(User);
                if (user.Active == false)
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
                }
                var ac = await _context.AlarmCalls.Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                ViewData["ProjectId"] = await GetProjectList();
                ViewData["SubProjectId"] = new SelectList(_context.SubProjects.Include(x => x.Project).Where(x => x.Project.DivisionId.Equals(user.DivisionId)), "Id", "Name");
                return View(ac);
            }
            else
            {
                return NotFound();
            }
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember,International")]
        public async Task<IActionResult> Edit_AlarmCall(AlarmCall model)
        {
            if (ModelState.IsValid)
            {
                model.LastEditedInDataBase = DateTime.Now;
                _context.AlarmCalls.Update(model);
                await _context.SaveChangesAsync();

                var itemtypealarm = await _context.ItemTypes.Where(x => x.ProjectId.Equals(model.ProjectId) && x.ReportTypeId.Equals(8)).FirstOrDefaultAsync();
                if (itemtypealarm != null)
                {
                    Install inst = new Install { ProjectId = model.ProjectId, SubProjectId = model.SubProjectId, ItemTypeId = itemtypealarm.Id, Install_Text = model.LogText, Amount = 1, TimeStamp = model.TimeStamp, InvoiceDate = DateTime.Now, DoneBy = model.DoneBy, EnteredIntoDataBase = model.EnteredIntoDataBase, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                    var prev_install = await _context.Installations.SingleOrDefaultAsync(x => x.ProjectId.Equals(model.ProjectId) && x.ItemTypeId.Equals(itemtypealarm.Id) && x.TimeStamp.Equals(model.TimeStamp) && x.DoneBy.Equals(model.DoneBy));
                    if (prev_install == null) {
                        _context.Add(inst);
                        await _context.SaveChangesAsync();
                    }
                }

                return RedirectToAction("AlarmCalls");
            }
            else
            {
                return NotFound();
            }
        }
        [Authorize(Roles = "Admin,DivisionAdmin,Member,ProjectMember,Manager,Supervisor,Guest")]
        public async Task<IActionResult> DataLoggerInstallations()
        {
            var user = await _userManager.GetUserAsync(User);
            if (User.IsInRole("Admin"))
            {
                var installs = await _context.DataLoggerInstallations.Include(x => x.Project).Include(x => x.SubProject).OrderByDescending(x => x.TimeStamp).ToListAsync();
                return View("Reports/DataLoggerInstallations", installs);
            }
            else if (User.IsInRole("Guest"))
            {
                var projectuser = await _context.ProjectUsers.Where(x => x.userId.Equals(user.Id)).ToListAsync();
                var installs = await _context.DataLoggerInstallations.Include(x => x.Project).Include(x => x.SubProject).Where(x => x.Project.DivisionId.Equals(user.DivisionId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                List<DataLoggerInstall> dataloggersforguest = new List<DataLoggerInstall>();
                foreach (var inst in installs)
                {
                    if (projectuser.SingleOrDefault(x => x.projectId.Equals(inst.ProjectId)) != null)
                    {
                        dataloggersforguest.Add(inst);
                    }
                }
                return View("Reports/DataLoggerInstallations", dataloggersforguest);
            }
            else
            {

                if (user.Active == false)
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
                }
                var installs = await _context.DataLoggerInstallations.Include(x => x.Project).Include(x => x.SubProject).Where(x => x.Project.DivisionId.Equals(user.DivisionId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                return View("Reports/DataLoggerInstallations", installs);
            }

        }
        [HttpGet]
        public async Task<IActionResult> Edit_DataLoggerInstallation(int? id)
        {
            if (id != null)
            {
                var user = await _userManager.GetUserAsync(User);
                if (user.Active == false)
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
                }
                var rep = await _context.DataLoggerInstallations.Include(x => x.Project).Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                if (rep == null)
                {
                    return NotFound();
                }
                else if (!rep.Project.DivisionId.Equals(user.DivisionId) && !User.IsInRole("Admin"))
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You do not have access to this item" });
                }
                if (User.IsInRole("Admin") || User.IsInRole("DivisionAdmin") || User.IsInRole("Manager") || rep.DoneBy.Equals(user.full_name()))
                {
                    ViewData["ProjectId"] = await GetProjectList();
                    ViewData["SubProjects"] = new SelectList(_context.SubProjects.Include(x => x.Project).Where(x => x.Project.DivisionId.Equals(user.DivisionId)), "Id", "Name");
                    ViewData["MeasPointId"] = new SelectList(_context.MeasPoints.Include(x => x.MeasType).Where(x => x.MeasType.Type.ToLower().Equals("water level")), "Id", "Name");
                    return View(rep);
                }
            }
            return NotFound();
        }
        [HttpPost]
        [RequestSizeLimit(900000000)]
        public async Task<IActionResult> Edit_DataLoggerInstallation(DataLoggerInstall model, IFormFile[] files)
        {
            if (ModelState.IsValid)
            {
                _context.Update(model);
                await _context.SaveChangesAsync();
                var directory = _env.WebRootPath + "\\AHAK\\DataLoggerInstallPhotos\\" + model.Id.ToString() + "\\";
                if (!Directory.Exists(directory) && files != null)
                {
                    Directory.CreateDirectory(directory);
                }
                foreach (IFormFile photo in files)
                {

                    var path = Path.Combine(directory, photo.FileName);

                    PhotoFileDataLoggerInstall installphoto = new PhotoFileDataLoggerInstall { Path = path, TimeStamp = model.TimeStamp, DataLoggerInstallId = model.Id, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                    _context.Add(installphoto);
                    var stream = new FileStream(path, FileMode.Create);
                    await photo.CopyToAsync(stream);
                    stream.Close();
                    if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                    {
                        PhotoExtensions.SaveAndCompressJpeg(path, 85);
                    }
                }
                return RedirectToAction("MainMenu");
            }
            else
            {
                return NotFound();
            }
        }
        [Authorize(Roles = "Admin,DivisionAdmin,ProjectMember,Member,Guest,Manager")]
        public async Task<IActionResult> DataLoggerInstall_PDF(int? id)
        {
            if (id != null)
            {
                var user = await _userManager.GetUserAsync(User);
                if (user.Active == false)
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
                }
                var dli = await _context.DataLoggerInstallations.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Include(x => x.Photos).Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                if (dli == null)
                {
                    return NotFound();
                }
                if (User.IsInRole("Guest"))
                {
                    var projects = await _context.ProjectUsers.Where(p => p.userId.Equals(user.Id)).Select(x => x.projectId).ToListAsync();
                    if (projects.IndexOf(dli.ProjectId) >= 0)
                    {
                        return new ViewAsPdf("Reports/_DataLoggerInstallation", dli);
                    }
                }
                if (user.DivisionId.Equals(dli.Project.DivisionId) || User.IsInRole("Admin"))
                {
                    return new ViewAsPdf("Reports/_DataLoggerInstallation", dli);
                }
                return NotFound();

            }
            else
            {
                return NotFound();
            }
        }
        public async Task<IActionResult> AlarmCall_PDF(int? id)
        {
            if (id != null)
            {
                var user = await _userManager.GetUserAsync(User);
                if (user.Active == false)
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
                }
                var ac = await _context.AlarmCalls.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Include(x => x.pictures).Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                if (ac != null)
                {
                    if (user.DivisionId.Equals(ac.Project.DivisionId) || User.IsInRole("Admin"))
                    {
                        return new ViewAsPdf("Reports/_AlarmCall", ac);
                    }
                    return NotFound();
                }
                else
                {
                    return NotFound();
                }
            }
            else
            {
                return NotFound();
            }
        }
        [Authorize(Roles = "Admin")]
        public IActionResult BackupGroutingPhotos()
        {
            List<string> directories = new List<string> { "After", "Before", "Grouted", "WMAfter", "WMBefore" };
            foreach (string dir in directories)
            {
                string maindirectory = _env.WebRootPath + "\\AHAK\\Grouting\\" + dir + "\\";
                foreach (string dy in Directory.GetDirectories(maindirectory))
                {
                    foreach (var file in Directory.GetFiles(dy))
                    {
                        if ((file.ToLower().Contains(".jpg") || file.ToLower().Contains(".jpeg")) && !file.ToLower().Contains("_edit"))
                        {
                            string[] fileparts = file.Split(".");
                            string path2 = fileparts[0] + "_edit." + fileparts[1];
                            if (!Directory.GetFiles(dy).Contains(path2))
                            {
                                PhotoExtensions.SaveAndCompressJpeg(file, 80);
                            }

                        }
                    }
                }
            }
            return RedirectToAction("Index", "Home");
        }
        public void DeleteOrginalGroutingPhotosForCleanup()
        {
            List<string> directories = new List<string> { "After", "Before", "Grouted", "WMAfter", "WMBefore" };
            foreach (string dir in directories)
            {
                string maindirectory = _env.WebRootPath + "\\AHAK\\Grouting\\" + dir + "\\";
                foreach (string dy in Directory.GetDirectories(maindirectory))
                {
                    foreach (var file in Directory.GetFiles(dy))
                    {

                        string ext = Path.GetExtension(file).ToLower();
                        if (ext == ".jpg" || ext == ".jpeg")
                        {
                            string name = Path.GetFileNameWithoutExtension(file);
                            string path = Path.GetDirectoryName(file);
                            if (name.Contains("_edit"))
                            {
                                string[] originalfileparts = name.Split("_edit");
                                string originalfile = originalfileparts[0] + ext;
                                if (System.IO.File.Exists(path + @"/" + originalfile) && System.IO.File.GetCreationTime(path + @"/" + originalfile) <= DateTime.Now.AddDays(-14))
                                {
                                    System.IO.File.Delete(path + @"/" + originalfile);
                                }
                            }
                        }
                    }
                }
            }
        }
        public void DeleteOrginalPreExcavationPhotosForCleanup()
        {
            List<string> directories = new List<string> { "After", "Before", "During" };
            foreach (string dir in directories)
            {
                string maindirectory = _env.WebRootPath + "\\PreExcavations\\" + dir + "\\";
                foreach (string dy in Directory.GetDirectories(maindirectory))
                {
                    foreach (var file in Directory.GetFiles(dy))
                    {

                        string ext = Path.GetExtension(file).ToLower();
                        if (ext == ".jpg" || ext == ".jpeg")
                        {
                            string name = Path.GetFileNameWithoutExtension(file);
                            string path = Path.GetDirectoryName(file);
                            if (name.Contains("_edit"))
                            {
                                string[] originalfileparts = name.Split("_edit");
                                string originalfile = originalfileparts[0] + ext;
                                if (System.IO.File.Exists(path + @"/" + originalfile) && System.IO.File.GetCreationTime(path + @"/" + originalfile) <= DateTime.Now.AddDays(-21))
                                {
                                    System.IO.File.Delete(path + @"/" + originalfile);
                                }
                            }
                        }
                    }
                }
            }
        }
        public void DeleteOrginalWellCheckPhotosForCleanup()
        {
            string maindirectory = _env.WebRootPath + "\\WellChecks\\";
            foreach (string dy in Directory.GetDirectories(maindirectory))
            {
                foreach (var file in Directory.GetFiles(dy))
                {
                    string ext = Path.GetExtension(file).ToLower();
                    if (ext == ".jpg" || ext == ".jpeg")
                    {
                        string name = Path.GetFileNameWithoutExtension(file);
                        string path = Path.GetDirectoryName(file);
                        if (name.Contains("_edit"))
                        {
                            string[] originalfileparts = name.Split("_edit");
                            string originalfile = originalfileparts[0] + ext;
                            if (System.IO.File.Exists(path + @"/" + originalfile) && System.IO.File.GetCreationTime(path + @"/" + originalfile) <= DateTime.Now.AddDays(-21))
                            {
                                System.IO.File.Delete(path + @"/" + originalfile);
                            }
                        }
                    }
                }
            }
        }
        public void DeleteOrginalWorkTaskPhotosForCleanup()
        {
            string maindirectory = _env.WebRootPath + "\\Tasks\\Feedbacks";
            foreach (string dy in Directory.GetDirectories(maindirectory))
            {
                foreach (var file in Directory.GetFiles(dy))
                {
                    string ext = Path.GetExtension(file).ToLower();
                    if (ext == ".jpg" || ext == ".jpeg")
                    {
                        string name = Path.GetFileNameWithoutExtension(file);
                        string path = Path.GetDirectoryName(file);
                        if (name.Contains("_edit"))
                        {
                            string[] originalfileparts = name.Split("_edit");
                            string originalfile = originalfileparts[0] + ext;
                            if (System.IO.File.Exists(path + @"/" + originalfile) && System.IO.File.GetCreationTime(path + @"/" + originalfile) <= DateTime.Now.AddDays(-21))
                            {
                                System.IO.File.Delete(path + @"/" + originalfile);
                            }
                        }
                    }
                }
            }
            string maindirectory2 = _env.WebRootPath + "\\Tasks\\WorkTasks";
            foreach (string dy in Directory.GetDirectories(maindirectory2))
            {
                foreach (string di in Directory.GetDirectories(dy)) {
                    foreach (var file in Directory.GetFiles(di))
                    {
                        string ext = Path.GetExtension(file).ToLower();
                        if (ext == ".jpg" || ext == ".jpeg")
                        {
                            string name = Path.GetFileNameWithoutExtension(file);
                            string path = Path.GetDirectoryName(file);
                            if (name.Contains("_edit"))
                            {
                                string[] originalfileparts = name.Split("_edit");
                                string originalfile = originalfileparts[0] + ext;
                                if (System.IO.File.Exists(path + @"/" + originalfile) && System.IO.File.GetCreationTime(path + @"/" + originalfile) <= DateTime.Now.AddDays(-21))
                                {
                                    System.IO.File.Delete(path + @"/" + originalfile);
                                }
                            }
                        }
                    }
                }
            }
        }
        [Authorize(Roles = "Admin")]
        public IActionResult DeleteOriginalGroutingPhotos()
        {
            List<string> directories = new List<string> { "After", "Before", "Grouted", "WMAfter", "WMBefore" };
            foreach (string dir in directories)
            {
                string maindirectory = _env.WebRootPath + "\\AHAK\\Grouting\\" + dir + "\\";
                foreach (string dy in Directory.GetDirectories(maindirectory))
                {
                    foreach (var file in Directory.GetFiles(dy))
                    {

                        string ext = Path.GetExtension(file).ToLower();
                        if (ext == ".jpg" || ext == ".jpeg")
                        {
                            string name = Path.GetFileNameWithoutExtension(file);
                            string path = Path.GetDirectoryName(file);
                            if (name.Contains("_edit"))
                            {
                                string[] originalfileparts = name.Split("_edit");
                                string originalfile = originalfileparts[0] + ext;
                                if (System.IO.File.Exists(path + @"/" + originalfile) && System.IO.File.GetCreationTime(path + @"/" + originalfile) <= DateTime.Now.AddDays(-14))
                                {
                                    System.IO.File.Delete(path + @"/" + originalfile);
                                }
                            }
                        }
                    }
                }
            }
            return RedirectToAction("Index", "Home");
        }

        [Authorize(Roles = "Admin")]
        public IActionResult DeleteOriginalPhotos()
        {
            DeleteOrginalGroutingPhotosForCleanup();
            DeleteOrginalPreExcavationPhotosForCleanup();
            DeleteOrginalWellCheckPhotosForCleanup();
            DeleteOrginalWorkTaskPhotosForCleanup();
            List<string> directories = new List<string>
            { "ArrivalPhotos",
                "DailyReports",
                "DeInstallPhotos",
                "InstallPhotos",
                "MobilizePhotos",
                "MaintenancePhotos",
                "AlarmCallPhotos",
                "ConstructionSiteInspections",
                "DataLoggerInstallPhotos",
                "Decommissions",
                "DeInstallPhotos",
                "GeneratorChecks",
                "SensorsChecks",
                "SiteChecks",
                "Grouting\\After",
                "Grouting\\Before",
                "Grouting\\Grouted",
                "Grouting\\WMAfter",
                "Grouting\\WMBefore",
                "SiteChecks",
                "WTPChecks"
                };

            List<string> filedirectories = new List<string>
            {
                "akonto",
            "DailySummaries"
            };

            foreach (string dir in directories)
            {
                string maindirectory = _env.WebRootPath + "\\AHAK\\" + dir + "\\";
                foreach (string dy in Directory.GetDirectories(maindirectory))
                {
                    foreach (var file in Directory.GetFiles(dy))
                    {

                        string ext = Path.GetExtension(file).ToLower();
                        if (ext == ".jpg" || ext == ".jpeg")
                        {
                            string name = Path.GetFileNameWithoutExtension(file);
                            string path = Path.GetDirectoryName(file);
                            if (name.Contains("_edit"))
                            {
                                string[] originalfileparts = name.Split("_edit");
                                string originalfile = originalfileparts[0] + ext;
                                if (System.IO.File.Exists(path + @"/" + originalfile) && System.IO.File.GetCreationTime(path + @"/" + originalfile) <= DateTime.Now.AddDays(-21))
                                {
                                    System.IO.File.Delete(path + @"/" + originalfile);
                                }
                            }
                        }

                    }
                }
            }
            foreach (string dir in filedirectories)
            {
                string maindirectory = _env.WebRootPath + "\\AHAK\\" + dir + "\\";
                foreach (string dy in Directory.GetDirectories(maindirectory))
                {
                    foreach (var file in Directory.GetFiles(dy))
                    {
                        string name = Path.GetFileName(file);
                        string path = Path.GetDirectoryName(file);
                        if (System.IO.File.Exists(path + @"/" + name) && System.IO.File.GetCreationTime(path + @"/" + name) <= DateTime.Now.AddDays(-50))
                        {
                            System.IO.File.Delete(path + @"/" + name);
                        }

                    }
                }
            }
            return RedirectToAction("Index", "Home");
        }
        [Authorize(Roles = "Admin")]
        public IActionResult DeleteOriginalPhotosExtraBecauseFoundError()
        {
            DeleteOrginalGroutingPhotosForCleanup();
            DeleteOrginalPreExcavationPhotosForCleanup();
            DeleteOrginalWellCheckPhotosForCleanup();
            DeleteOrginalWorkTaskPhotosForCleanup();
            List<string> directories = new List<string>
            { "ArrivalPhotos",
                "DailyReports",
                "DeInstallPhotos",
                "InstallPhotos",
                "MobilizePhotos",
                "MaintenancePhotos",
                "AlarmCallPhotos",
                "ConstructionSiteInspections",
                "DataLoggerInstallPhotos",
                "Decommissions",
                "DeInstallPhotos",
                "GeneratorChecks",
                "SensorsChecks",
                "SiteChecks",
                "Grouting\\After",
                "Grouting\\Before",
                "Grouting\\Grouted",
                "Grouting\\WMAfter",
                "Grouting\\WMBefore",
                "SiteChecks",
                "WTPChecks"};

            List<string> filedirectories = new List<string>
            {
                "akonto"};

            foreach (string dir in directories)
            {
                string maindirectory = _env.WebRootPath + "\\AHAK\\" + dir + "\\";
                foreach (string dy in Directory.GetDirectories(maindirectory))
                {
                    foreach (var file in Directory.GetFiles(dy))
                    {

                        string ext = Path.GetExtension(file).ToLower();
                        if (ext == ".jpeg")
                        {
                            string name = Path.GetFileNameWithoutExtension(file);
                            string path = Path.GetDirectoryName(file);
                            if (name.Contains("_edit"))
                            {
                                string[] originalfileparts = name.Split("_edit");
                                string originalfile = originalfileparts[0] + ext;
                                if (System.IO.File.Exists(path + @"/" + originalfile) && System.IO.File.GetCreationTime(path + @"/" + originalfile) <= DateTime.Now.AddDays(-35))
                                {
                                    System.IO.File.Delete(path + @"/" + originalfile);
                                }
                            }
                        }
                    }
                }
            }

            return RedirectToAction("Index", "Home");
        }
        [Authorize(Roles = "Admin")]
        public IActionResult ConvertToJPG()
        {
            List<string> directories = new List<string> { "ArrivalPhotos", "DailyReports", "DeInstallPhotos", "InstallPhotos", "MobilizePhotos" };
            foreach (string dir in directories)
            {
                string maindirectory = _env.WebRootPath + "\\AHAK\\" + dir + "\\";
                foreach (string dy in Directory.GetDirectories(maindirectory))
                {
                    foreach (var file in Directory.GetFiles(dy))
                    {
                        string ext = Path.GetExtension(file).ToLower();
                        if (ext == ".png")
                        {
                            string name = Path.GetFileNameWithoutExtension(file);
                            string path = Path.GetDirectoryName(file);

                            Image png = Image.FromFile(file);

                            png.Save(path + @"/" + name + ".jpg", System.Drawing.Imaging.ImageFormat.Jpeg);
                            png.Dispose();

                            System.IO.File.Delete(file);

                        }
                    }
                }
            }
            return RedirectToAction("Index", "Home");
        }
        [Authorize(Roles = "Admin")]
        public IActionResult DeleteFotos()
        {
            List<string> directories = new List<string> { "ArrivalPhotos", "DailyReports", "DeInstallPhotos", "InstallPhotos", "MobilizePhotos" };
            foreach (string dir in directories)
            {
                string maindirectory = _env.WebRootPath + "\\AHAK\\" + dir + "\\";
                foreach (string dy in Directory.GetDirectories(maindirectory))
                {
                    foreach (var file in Directory.GetFiles(dy))
                    {
                        if (file.Contains("_edit"))
                        {
                            System.IO.File.Delete(file);
                        }
                    }
                }
            }
            return RedirectToAction("Index", "Home");

        }
        [HttpPost, ActionName("Delete_DailyReport")]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager")]
        public async Task<IActionResult> DeleteDailyReportConfirmed(int id)
        {

            var dr = await _context.Daily_Report_2s.FindAsync(id);
            string maindirectory = _env.WebRootPath + "\\AHAK\\DailyReports\\" + dr.Id + "\\";
            if (Directory.Exists(maindirectory))
            {
                foreach (var file in Directory.GetFiles(maindirectory))
                {
                    System.IO.File.Delete(file);
                }
            }
            _context.Remove(dr);
            await _context.SaveChangesAsync();
            return RedirectToAction("ShowUncheckedDailyReports");
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager")]
        public async Task<IActionResult> Delete_DailyReport(int? id)
        {
            if (id != null)
            {
                var user = await _userManager.GetUserAsync(User);
                if (user.Active == false)
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
                }
                var dr = await _context.Daily_Report_2s.Include(x => x.Project).SingleOrDefaultAsync(x => x.Id.Equals(id));
                if (user.DivisionId.Equals(dr.Project.DivisionId))
                {
                    return View(dr);
                }
                else
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You do not have the rights to delete this report. Contact your Main Ops administrator" });
                }
            }
            else
            {
                return NotFound();
            }
        }
        [Authorize(Roles = "Admin")]
        [HttpPost]
        public async Task<IActionResult> Delete_Grouting(int? id)
        {
            if (id != null)
            {
                var user = await _userManager.GetUserAsync(User);
                if (user.Active == false)
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
                }
                List<CoordTrack2> coords = new List<CoordTrack2>();
                var grouting = await _context.Groutings.SingleOrDefaultAsync(x => x.Id.Equals(id));
                var groutbeforephotos = await _context.GroutBeforePhotos.Where(x => x.GroutingId.Equals(id)).ToListAsync();
                var groutgroutphotos = await _context.GroutGroutPhotos.Where(x => x.GroutingId.Equals(id)).ToListAsync();
                var groutafterphotos = await _context.GroutAfterPhotos.Where(x => x.GroutingId.Equals(id)).ToListAsync();
                var groutdatas = await _context.GroutDataDevice.Where(x => x.GroutingId.Equals(id)).ToListAsync();
                var groutwmafterphotos = await _context.GroutWMAfterPhotos.Where(x => x.GroutingId.Equals(id)).ToListAsync();
                var groutwmbeforephotos = await _context.GroutWMBeforePhotos.Where(x => x.GroutingId.Equals(id)).ToListAsync();
                var install = await _context.Installations.Where(x => x.Install_Text.Equals("Grouting: " + id.ToString())).SingleOrDefaultAsync();
                try
                {
                    coords = await _context.CoordTrack2s.Where(x => x.InstallId.Equals(install.Id)).ToListAsync();
                }
                catch
                {

                }

                foreach (var item in groutbeforephotos)
                {
                    _context.Remove(item);
                }
                foreach (var item in groutgroutphotos)
                {
                    _context.Remove(item);
                }
                foreach (var item in groutafterphotos)
                {
                    _context.Remove(item);
                }
                await _context.SaveChangesAsync();
                foreach (var item in groutdatas)
                {
                    _context.Remove(item);
                }
                foreach (var item in groutwmafterphotos)
                {
                    _context.Remove(item);
                }
                foreach (var item in groutwmbeforephotos)
                {
                    _context.Remove(item);
                }
                foreach (var item in coords)
                {
                    _context.Remove(item);
                }
                await _context.SaveChangesAsync();
                _context.Remove(grouting);
                await _context.SaveChangesAsync();
                try
                {
                    _context.Remove(install);
                    await _context.SaveChangesAsync();
                }
                catch
                {

                }


            }
            else { return NotFound(); }
            return RedirectToAction("Groutings");
        }
        [Authorize(Roles = "Admin,Manager")]
        [HttpGet]
        public async Task<IActionResult> UpdateLocationInstall(int? id)
        {
            if (id == null)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "Missing ProjectNumber to update" });
            }
            var installations = await _context.Installations.Where(x => x.ProjectId.Equals(id)).ToListAsync();
            foreach (var inst in installations)
            {
                inst.Location = FindNearestKM(Convert.ToInt32(inst.ProjectId), inst.Latitude, inst.Longitude);
                _context.Update(inst);
            }
            await _context.SaveChangesAsync();
            return RedirectToAction("Index", "Home");
        }

        public string FindNearestKM(int ProjectId, double lat, double lng)
        {
            string kmmark = "0";
            var directory = _env.WebRootPath + "\\AHAK\\Reference Coords\\" + ProjectId.ToString() + "\\";
            double smallest_dist = 10000000000.0;
            int counter = 0;
            int index = 0;
            foreach (var file in Directory.GetFiles(directory))
            {
                using (var reader = new StreamReader(file))
                {
                    while (!reader.EndOfStream)
                    {
                        var line = reader.ReadLine();
                        var values = line.Split(';');
                        LatLngUTMConverter ltUTMconv = new LatLngUTMConverter("WGS 84");
                        LatLngUTMConverter.LatLng latlng;
                        latlng = ltUTMconv.convertUtmToLatLng(Convert.ToDouble(values[1]), Convert.ToDouble(values[2]), 32, "N");
                        double distance = DistanceAlgorithm.DistanceBetweenPlaces(latlng.Lat, latlng.Lng, lat, lng);
                        if (distance < smallest_dist)
                        {
                            smallest_dist = distance;
                            index = counter;
                            kmmark = Convert.ToInt32(values[0]).ToString();
                        }
                        counter += 1;
                    }
                }
            }
            if (kmmark.Length < 4)
            {
                kmmark = string.Format("{0}+{1}", 0, kmmark);
            }
            else if (kmmark.Length < 5)
            {
                try
                {
                    kmmark = string.Format("{0}+{1}", kmmark.Substring(0, 1), kmmark.Substring(1, 3));
                }
                catch
                {
                    kmmark = "";
                }
            }
            else
            {
                kmmark = string.Format("{0}+{1}", kmmark.Substring(0, 2), kmmark.Substring(2, 3));
            }
            return kmmark;
        }
        [Authorize(Roles = "Admin")]
        public IActionResult FixFotos()
        {
            List<string> directories = new List<string> { "ArrivalPhotos", "DailyReports", "DeInstallPhotos", "InstallPhotos", "MobilizePhotos", "SafetyProblems" };
            foreach (string dir in directories)
            {
                string maindirectory = _env.WebRootPath + "\\AHAK\\" + dir + "\\";
                foreach (string dy in Directory.GetDirectories(maindirectory))
                {
                    foreach (var file in Directory.GetFiles(dy))
                    {
                        if ((file.ToLower().Contains(".jpg") || file.ToLower().Contains(".jpeg")) && !file.ToLower().Contains("_edit"))
                        {
                            string[] fileparts = file.Split(".");
                            string path2 = fileparts[0] + "_edit." + fileparts[1];
                            if (!Directory.GetFiles(dy).Contains(path2))
                            {
                                PhotoExtensions.SaveAndCompressJpeg(file, 80);
                            }

                        }
                    }
                }
            }
            return RedirectToAction("Index", "Home");

        }
        [HttpPost]
        [RequestSizeLimit(900000000)]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Install_Old(InstallItem2VM model, IFormFile[] files)
        {
            if (ModelState.IsValid)
            {
                var user = await _userManager.GetUserAsync(User);
                var directory1 = _env.WebRootPath + "\\AHAK\\Reference Coords\\" + model.ProjectId.ToString() + "\\";
                if (Directory.Exists(directory1))
                {
                    Install install = new Install { ToBePaid = true, ProjectId = model.ProjectId, RentalStartDate = model.TimeStamp, ItemTypeId = model.ItemTypeId, UniqueID = model.UniqueID, Amount = model.Amount, isInstalled = true, TimeStamp = model.TimeStamp, InvoiceDate = DateTime.Now, Install_Text = model.LogText, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude), Location = FindNearestKM(Convert.ToInt32(model.ProjectId), Convert.ToDouble(model.Latitude), Convert.ToDouble(model.Longitude)) };
                    _context.Add(install);
                }
                else
                {
                    Install install = new Install { ToBePaid = true, ProjectId = model.ProjectId, RentalStartDate = model.TimeStamp, ItemTypeId = model.ItemTypeId, UniqueID = model.UniqueID, Amount = model.Amount, isInstalled = true, TimeStamp = model.TimeStamp, InvoiceDate = DateTime.Now, Install_Text = model.LogText, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude), Location = "Fix Me" };
                    _context.Add(install);
                }

                await _context.SaveChangesAsync();
                var itemadded = await _context.Installations.Include(x => x.ItemType).LastAsync();

                var directory = _env.WebRootPath + "\\AHAK\\InstallPhotos\\" + itemadded.Id.ToString() + "\\";
                if (!Directory.Exists(directory) && files != null)
                {
                    Directory.CreateDirectory(directory);
                }
                foreach (IFormFile photo in files)
                {
                    var path = Path.Combine(directory, photo.FileName);
                    var path2 = Path.Combine(directory, photo.FileName.Split(".")[0] + "_edit." + photo.FileName.Split(".")[1]);
                    PhotoFileInstalled2 installphoto = new PhotoFileInstalled2 { Path = path, TimeStamp = model.TimeStamp, InstallId = itemadded.Id, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                    _context.Add(installphoto);
                    var stream = new FileStream(path, FileMode.Create);
                    await photo.CopyToAsync(stream);
                    stream.Close();
                    if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                    {
                        PhotoExtensions.SaveAndCompressJpeg(path, 80);
                    }
                }
                CoordTrack2 installCoords = new CoordTrack2 { InstallId = itemadded.Id, MobilizeId = null, MeasPointId = null, TypeCoord = "Installed", TimeStamp = model.TimeStamp, Latitude = model.Latitude, Longitude = model.Longitude };
                _context.Add(installCoords);
                Log2 newLog = new Log2 { ItemTypeId = model.ItemTypeId, Description = _SharedLocalizer.GetLocalizedHtmlString("Item Installed.:") + " " + model.LogText, TimeStamp = model.TimeStamp, PhotoPath = directory, TheUser = user.full_name() };
                _context.Add(newLog);
                MeasPoint mp = new MeasPoint();
                mp.MeasTypeId = 37;
                mp.MonitorTypeId = 20;
                mp.Coordx = Convert.ToDouble(itemadded.Latitude);
                mp.Coordy = Convert.ToDouble(itemadded.Longitude);
                mp.Coordz = 0;
                mp.Lati = Convert.ToDouble(itemadded.Latitude);
                mp.Longi = Convert.ToDouble(itemadded.Longitude);
                mp.Name = itemadded.ItemType.Item_Type + " " + itemadded.Id.ToString();
                mp.Offset = 0;
                mp.ProjectId = itemadded.ProjectId;
                mp.LoggerActive = true;
                _context.MeasPoints.Add(mp);
                await _context.SaveChangesAsync();
            }
            return RedirectToAction("Install", "TrackItems");
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Drillings()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            if (User.IsInRole("Admin"))
            {
                var drillings = await _context.Drillings.Include(x => x.Project).Include(x => x.SubProject).ToListAsync();
                return View("Reports/Drillings", drillings);
            }
            else
            {
                var drillings = await _context.Drillings.Include(x => x.Project).Include(x => x.SubProject).Where(x => x.Project.DivisionId.Equals(user.DivisionId)).ToListAsync();
                return View("Reports/Drillings", drillings);
            }

        }
        [HttpPost]
        [RequestSizeLimit(900000000)]
        public async Task<IActionResult> Edit_Drilling(Drill model, string OldID, IFormFile[] files)
        {
            if (ModelState.IsValid)
            {
                //var install = await _context.Installations.Include(x => x.ItemType)
                //    .Where(x => x.Install_Text.Equals("See Drilling Report") && x.UniqueID.Equals(model.WellID))
                //    .FirstOrDefaultAsync();
                var install = await _context.Installations.Include(x => x.ItemType)
                    .Where(x => x.Install_Text.Equals("See Drilling Report") && x.UniqueID.Equals(OldID))
                    .FirstOrDefaultAsync();
                try
                {
                    install.UniqueID = model.WellID;
                    install.Amount = model.DrillDepth;
                    install.ProjectId = model.ProjectId;
                    install.SubProjectId = model.SubProjectId;
                    var itemtype = await _context.ItemTypes.Where(x => x.Item_Type.Equals("Drill Meter") && x.ProjectId.Equals(model.ProjectId)).FirstOrDefaultAsync();
                    if (itemtype != null)
                    {
                        install.ItemTypeId.Equals(itemtype.Id);
                    }
                    _context.Update(install);
                    await _context.SaveChangesAsync();
                }
                catch
                {

                }
                _context.Update(model);
                await _context.SaveChangesAsync();
                var directoryInit = _env.WebRootPath + "\\AHAK\\Drilling\\" + model.ProjectId.ToString() + "\\" + model.Id.ToString() + "\\";
                if (!Directory.Exists(directoryInit) && files != null)
                {
                    Directory.CreateDirectory(directoryInit);
                }
                if (files != null)
                {
                    foreach (IFormFile photo in files)
                    {
                        var path = Path.Combine(directoryInit, photo.FileName);
                        var path2 = Path.Combine(directoryInit, photo.FileName.Split(".")[0] + "_edit." + photo.FileName.Split(".")[1]);
                        if (!path.Contains(".pdf"))
                        {
                            DrillPhoto drillphoto = new DrillPhoto { Path = path, DrillId = model.Id };
                            _context.Add(drillphoto);
                        }
                        else
                        {
                            DrillPhoto drillphoto = new DrillPhoto { DrillId = model.Id, Path = path.Replace(".pdf", ".png") };
                            _context.Add(drillphoto);
                        }
                        var stream = new FileStream(path, FileMode.Create);
                        await photo.CopyToAsync(stream);
                        stream.Close();

                        if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                        {
                            PhotoExtensions.SaveAndCompressJpeg(path, 80);
                        }
                        else if (path.Contains(".pdf"))
                        {
                            PhotoExtensions.ConvertPdfToPng(path);
                            System.IO.File.Delete(path);
                        }
                    }
                    await _context.SaveChangesAsync();
                }
                return RedirectToAction("Drillings");
            }
            else
            {
                var user = await _userManager.GetUserAsync(User);
                if (user.Active == false)
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
                }
                ViewData["ProjectId"] = await GetProjectList();
                ViewData["SubProjectId"] = new SelectList(_context.SubProjects.Include(x => x.Project).Where(x => x.Project.DivisionId.Equals(user.DivisionId)), "Id", "Name");
                return View("Reports/Edit_Drilling", model);
            }
        }
        [HttpGet]
        public async Task<IActionResult> Edit_Drilling(int? id)
        {
            if (id != null)
            {
                var user = await _userManager.GetUserAsync(User);
                if (user.Active == false)
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
                }
                var drill = await _context.Drillings.Include(x => x.Project).SingleOrDefaultAsync(x => x.Id.Equals(id));
                if (user.DivisionId.Equals(drill.Project.DivisionId))
                {
                    ViewData["ProjectId"] = await GetProjectList();
                    ViewData["SubProjectId"] = new SelectList(_context.SubProjects.Include(x => x.Project).Where(x => x.Project.DivisionId.Equals(user.DivisionId)), "Id", "Name");
                    return View("Reports/Edit_Drilling", drill);
                }
                else
                {
                    return RedirectToAction("ErrorMessag", "Home", new { text = "You do not have permission to view this drilling" });
                }

            }
            else
            {
                return NotFound();
            }
        }

        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Drill_PDF(int? id)
        {
            if (id != null)
            {
                var user = await _userManager.GetUserAsync(User);
                if (user.Active == false)
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
                }
                var drill = await _context.Drillings
                    .Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Include(x => x.Photos)
                    .SingleOrDefaultAsync(x => x.Id.Equals(id));
                if (user.DivisionId.Equals(drill.Project.DivisionId) || User.IsInRole("Admin"))
                {
                    return new ViewAsPdf("Reports/_Drilling", drill);
                }
                else
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You do not have access to this record" });
                }
            }
            else { return NotFound(); }
        }
        [HttpPost]
        [RequestSizeLimit(900000000)]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Drill(Drill model, IFormFile[] files)
        {
            if (ModelState.IsValid)
            {
                var user = await _userManager.GetUserAsync(User);
                model.DoneBy = user.full_name();
                _context.Drillings.Add(model);
                await _context.SaveChangesAsync();
                var drilladded = await _context.Drillings.LastAsync();
                var directoryInit = _env.WebRootPath + "\\AHAK\\Drilling\\" + model.ProjectId.ToString() + "\\" + drilladded.Id + "\\";
                if (!Directory.Exists(directoryInit) && files != null)
                {
                    Directory.CreateDirectory(directoryInit);
                }
                if (files != null)
                {
                    foreach (IFormFile photo in files)
                    {
                        var path = Path.Combine(directoryInit, photo.FileName);
                        var path2 = Path.Combine(directoryInit, photo.FileName.Split(".")[0] + "_edit." + photo.FileName.Split(".")[1]);
                        if (!path.Contains(".pdf"))
                        {
                            DrillPhoto drillphoto = new DrillPhoto { Path = path, DrillId = drilladded.Id };
                            _context.Add(drillphoto);
                        }
                        else
                        {
                            DrillPhoto drillphoto = new DrillPhoto { DrillId = drilladded.Id, Path = path.Replace(".pdf", ".png") };
                            _context.Add(drillphoto);
                        }
                        var stream = new FileStream(path, FileMode.Create);
                        await photo.CopyToAsync(stream);
                        stream.Close();

                        if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                        {
                            PhotoExtensions.SaveAndCompressJpeg(path, 80);
                        }
                        else if (path.Contains(".pdf"))
                        {
                            PhotoExtensions.ConvertPdfToPng(path);
                            System.IO.File.Delete(path);
                        }
                    }
                }
                //install well and install well depth
                var itemtypewellinstall = await _context.ItemTypes
                    .Where(x => x.ProjectId.Equals(model.ProjectId) && x.Item_Type.Contains("Moniteringsboring"))
                    .FirstOrDefaultAsync();
                if (itemtypewellinstall != null)
                {
                    var directory1 = _env.WebRootPath + "\\AHAK\\Reference Coords\\" + model.ProjectId.ToString() + "\\";
                    if (Directory.Exists(directory1))
                    {
                        string loca = FindNearestKM(Convert.ToInt32(model.ProjectId), Convert.ToDouble(model.Latitude), Convert.ToDouble(model.Longitude));
                        Install wellinstall = new Install { ToBePaid = true, DoneBy = user.full_name(), RentalStartDate = model.TimeStamp, SubProjectId = model.SubProjectId, EnteredIntoDataBase = DateTime.Now, ProjectId = model.ProjectId, ItemTypeId = itemtypewellinstall.Id, UniqueID = model.WellID, Amount = 1, isInstalled = true, TimeStamp = model.TimeStamp, InvoiceDate = DateTime.Now, Install_Text = model.Comments, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude), Location = loca };
                        _context.Add(wellinstall);
                        drilladded.Location = loca;
                        _context.Update(drilladded);

                    }
                    else
                    {
                        Install wellinstall = new Install { ToBePaid = true, DoneBy = user.full_name(), RentalStartDate = model.TimeStamp, SubProjectId = model.SubProjectId, EnteredIntoDataBase = DateTime.Now, ProjectId = model.ProjectId, ItemTypeId = itemtypewellinstall.Id, UniqueID = model.WellID, Amount = 1, isInstalled = true, TimeStamp = model.TimeStamp, InvoiceDate = DateTime.Now, Install_Text = model.Comments, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                        _context.Add(wellinstall);
                    }
                    await _context.SaveChangesAsync();
                    var itemadded = await _context.Installations.Include(x => x.ItemType).LastAsync();

                    var directory = _env.WebRootPath + "\\AHAK\\InstallPhotos\\" + itemadded.Id.ToString() + "\\";
                    if (!Directory.Exists(directory) && files != null)
                    {
                        Directory.CreateDirectory(directory);
                    }
                    foreach (IFormFile photo in files)
                    {
                        var path = Path.Combine(directory, photo.FileName);
                        var path2 = Path.Combine(directory, photo.FileName.Split(".")[0] + "_edit." + photo.FileName.Split(".")[1]);
                        if (!path.Contains(".pdf"))
                        {
                            PhotoFileInstalled2 installphoto = new PhotoFileInstalled2 { Path = path, TimeStamp = model.TimeStamp, InstallId = itemadded.Id, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                            _context.Add(installphoto);
                        }
                        else
                        {
                            PhotoFileInstalled2 newphoto = new PhotoFileInstalled2 { Latitude = itemadded.Latitude, Longitude = itemadded.Longitude, InstallId = itemadded.Id, Path = path.Replace(".pdf", ".png"), TimeStamp = DateTime.Now };
                            _context.Add(newphoto);
                        }
                        var stream = new FileStream(path, FileMode.Create);
                        await photo.CopyToAsync(stream);
                        stream.Close();

                        if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                        {
                            PhotoExtensions.SaveAndCompressJpeg(path, 80);
                        }
                        else if (path.Contains(".pdf"))
                        {
                            PhotoExtensions.ConvertPdfToPng(path);
                            System.IO.File.Delete(path);
                        }
                    }
                    CoordTrack2 installCoords = new CoordTrack2 { InstallId = itemadded.Id, MobilizeId = null, MeasPointId = null, TypeCoord = "Installed", TimeStamp = model.TimeStamp, Latitude = model.Latitude, Longitude = model.Longitude };
                    _context.Add(installCoords);
                    Log2 newLog = new Log2 { ItemTypeId = Convert.ToInt32(itemtypewellinstall.Id), Description = _SharedLocalizer.GetLocalizedHtmlString("Item Installed.:") + " Monitoring Well : " + itemadded.Id.ToString() + " " + model.Comments, TimeStamp = model.TimeStamp, PhotoPath = directory, TheUser = user.full_name() };
                    _context.Add(newLog);

                    await _context.SaveChangesAsync();

                }
                var itemtypedrillinstall = await _context.ItemTypes
                    .Where(x => x.ProjectId.Equals(model.ProjectId) && x.Item_Type.Contains("Drill Meter"))
                    .FirstOrDefaultAsync();
                if (itemtypedrillinstall != null)
                {
                    var directory1 = _env.WebRootPath + "\\AHAK\\Reference Coords\\" + model.ProjectId.ToString() + "\\";
                    if (Directory.Exists(directory1))
                    {
                        Install drillinstall = new Install { ToBePaid = true, DoneBy = user.full_name(), RentalStartDate = model.TimeStamp, SubProjectId = model.SubProjectId, EnteredIntoDataBase = DateTime.Now, ProjectId = model.ProjectId, ItemTypeId = itemtypedrillinstall.Id, UniqueID = model.WellID, Amount = model.DrillDepth, isInstalled = true, TimeStamp = model.TimeStamp, InvoiceDate = DateTime.Now, Install_Text = "See Drilling Report", Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude), Location = FindNearestKM(Convert.ToInt32(model.ProjectId), Convert.ToDouble(model.Latitude), Convert.ToDouble(model.Longitude)) };
                        _context.Add(drillinstall);
                    }
                    else
                    {
                        Install drillinstall = new Install { ToBePaid = true, DoneBy = user.full_name(), RentalStartDate = model.TimeStamp, SubProjectId = model.SubProjectId, EnteredIntoDataBase = DateTime.Now, ProjectId = model.ProjectId, ItemTypeId = itemtypedrillinstall.Id, UniqueID = model.WellID, Amount = model.DrillDepth, isInstalled = true, TimeStamp = model.TimeStamp, InvoiceDate = DateTime.Now, Install_Text = "See Drilling Report", Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                        _context.Add(drillinstall);
                    }
                    await _context.SaveChangesAsync();
                    var itemadded = await _context.Installations.Include(x => x.ItemType).LastAsync();

                    var directory = _env.WebRootPath + "\\AHAK\\InstallPhotos\\" + itemadded.Id.ToString() + "\\";
                    if (!Directory.Exists(directory) && files != null)
                    {
                        Directory.CreateDirectory(directory);
                    }
                    foreach (IFormFile photo in files)
                    {
                        var path = Path.Combine(directory, photo.FileName);
                        var path2 = Path.Combine(directory, photo.FileName.Split(".")[0] + "_edit." + photo.FileName.Split(".")[1]);
                        if (!path.Contains(".pdf"))
                        {
                            PhotoFileInstalled2 installphoto = new PhotoFileInstalled2 { Path = path, TimeStamp = model.TimeStamp, InstallId = itemadded.Id, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                            _context.Add(installphoto);
                        }
                        else
                        {
                            PhotoFileInstalled2 newphoto = new PhotoFileInstalled2 { Latitude = itemadded.Latitude, Longitude = itemadded.Longitude, InstallId = itemadded.Id, Path = path.Replace(".pdf", ".png"), TimeStamp = DateTime.Now };
                            _context.Add(newphoto);
                        }
                        var stream = new FileStream(path, FileMode.Create);
                        await photo.CopyToAsync(stream);
                        stream.Close();

                        if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                        {
                            PhotoExtensions.SaveAndCompressJpeg(path, 80);
                        }
                        else if (path.Contains(".pdf"))
                        {
                            PhotoExtensions.ConvertPdfToPng(path);
                            System.IO.File.Delete(path);
                        }
                    }
                    CoordTrack2 installCoords = new CoordTrack2 { InstallId = itemadded.Id, MobilizeId = null, MeasPointId = null, TypeCoord = "Installed", TimeStamp = model.TimeStamp, Latitude = model.Latitude, Longitude = model.Longitude };
                    _context.Add(installCoords);
                    Log2 newLog = new Log2 { ItemTypeId = Convert.ToInt32(itemtypedrillinstall.Id), Description = _SharedLocalizer.GetLocalizedHtmlString("Item Installed.:") + " Monitoring Well : " + itemadded.Id.ToString(), TimeStamp = model.TimeStamp, PhotoPath = directory, TheUser = user.full_name() };
                    _context.Add(newLog);

                    await _context.SaveChangesAsync();

                }
                return RedirectToAction("MainMenu");
            }
            else { return View(model); }
        }
        public async Task<IActionResult> UpdateMeasPointNames()
        {
            var measpoints = await _context.MeasPoints.Where(x => x.ProjectId.Equals(418)).ToListAsync();
            foreach (var mp in measpoints)
            {
                if (mp.Name.ToLower().Contains(" idle"))
                {
                    _context.Remove(mp);
                }
                else if (mp.Name.Contains("Piston") && !mp.Name.Contains("#"))
                {
                    int id = Convert.ToInt32(new String(mp.Name.Where(Char.IsDigit).ToArray()));
                    var install = await _context.Installations.SingleOrDefaultAsync(x => x.Id.Equals(id));
                    if (install == null)
                    {
                        _context.Remove(mp);
                    }
                    else
                    {
                        string[] splittedname = mp.Name.Split(" ");
                        int namelength = splittedname.Length;
                        string newname = "";
                        for (int i = 0; i < namelength - 1; i++)
                        {
                            if (i == 0)
                            {
                                newname += splittedname[i];
                            }
                            else
                            {
                                newname += " " + splittedname[i];
                            }
                        }
                        newname += " #" + install.UniqueID.Replace("#", "");
                        var existingmeaspoint = await _context.MeasPoints.Where(x => x.Name.Equals(newname) && x.ProjectId.Equals(install.ProjectId)).FirstOrDefaultAsync();
                        if (existingmeaspoint == null)
                        {
                            mp.Name = newname;
                            _context.Update(mp);
                        }
                        else
                        {
                            _context.Remove(mp);
                        }

                    }
                }

            }
            await _context.SaveChangesAsync();
            return RedirectToAction("Index", "Home");
        }
        //Install(Install
        [HttpPost]
        [RequestSizeLimit(900000000)]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Install(InstallItem3VM model, IFormFile[] files)
        {
            if (ModelState.IsValid)
            {
                if (model.ProjectId == 437 && model.SubProjectId == null)
                {
                    model.SubProjectId = 238;
                }
                string[] itemids = model.ItemTypeIds.Split(',');
                string[] uniqueids = model.UniqueIDs.Split(',');
                string[] amounts = model.Amounts.Split(',');
                //.Replace("[", "").Replace("]", "")
                var user = await _userManager.GetUserAsync(User);
                var directory1 = _env.WebRootPath + "\\AHAK\\Reference Coords\\" + model.ProjectId.ToString() + "\\";
                for (int i = 0; i < itemids.Length; i++)
                {
                    if (uniqueids[i].Length == 4)
                    {
                        try
                        {
                            int uniqueid = Convert.ToInt32(uniqueids[i]);
                            uniqueids[i] = String.Concat("#", uniqueid.ToString());
                        }
                        catch
                        {

                        }
                    }
                    if (Directory.Exists(directory1))
                    {
                        Install install;
                        if (model.InvoiceDate != null)
                        {
                            install = new Install { ToBePaid = true, VariationOrderId = model.VariationOrderId, DoneBy = user.full_name(), RentalStartDate = model.TimeStamp, SubProjectId = model.SubProjectId, EnteredIntoDataBase = DateTime.Now, ProjectId = model.ProjectId, ItemTypeId = Convert.ToInt32(itemids[i]), UniqueID = uniqueids[i], Amount = Convert.ToDouble(amounts[i]), isInstalled = true, TimeStamp = model.TimeStamp, InvoiceDate = Convert.ToDateTime(model.InvoiceDate), Install_Text = model.LogText, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude), Location = FindNearestKM(Convert.ToInt32(model.ProjectId), Convert.ToDouble(model.Latitude), Convert.ToDouble(model.Longitude)) };
                        }
                        else
                        {
                            install = new Install { ToBePaid = true, VariationOrderId = model.VariationOrderId, DoneBy = user.full_name(), RentalStartDate = model.TimeStamp, SubProjectId = model.SubProjectId, EnteredIntoDataBase = DateTime.Now, ProjectId = model.ProjectId, ItemTypeId = Convert.ToInt32(itemids[i]), UniqueID = uniqueids[i], Amount = Convert.ToDouble(amounts[i]), isInstalled = true, TimeStamp = model.TimeStamp, InvoiceDate = DateTime.Now, Install_Text = model.LogText, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude), Location = FindNearestKM(Convert.ToInt32(model.ProjectId), Convert.ToDouble(model.Latitude), Convert.ToDouble(model.Longitude)) };

                        }
                        _context.Add(install);
                        var itemtype = await _context.ItemTypes.SingleOrDefaultAsync(x => x.Id.Equals(Convert.ToInt32(itemids[i])));
                        //if(itemtype.rental_price > 0)
                        //{
                        //    var arrivalsofthattype = await _context.Arrivals.Where(x => x.ItemTypeId.Equals(install.Id) && x.Amount > 1).ToListAsync();
                        //    if(arrivalsofthattype.Count < 1)
                        //    {
                        //        Arrival arr = new Arrival
                        //        {
                        //            ToBePaid = true,
                        //            Amount = install.Amount,
                        //            EndStamp = null,
                        //            TimeStamp = install.TimeStamp,
                        //            UniqueID = install.UniqueID,
                        //            ItemTypeId = itemtype.Id,
                        //            ProjectId = install.ProjectId,
                        //            SubProjectId = install.SubProjectId,
                        //            EnteredIntoDataBase = DateTime.Now,
                        //            LastEditedInDataBase = DateTime.Now,
                        //            InvoiceDate = DateTime.Now,
                        //            Arrival_Text = "Auto Added at installation: " + install.Install_Text,
                        //            Latitude = install.Latitude,
                        //            Longitude = install.Longitude,
                        //            MobilisationId = null,
                        //            PayedAmount = 0
                        //        };
                        //        _context.Add(arr);


                        //    }
                        //}
                    }
                    else
                    {
                        Install install;
                        if (model.InvoiceDate != null)
                        {
                            install = new Install { ToBePaid = true, VariationOrderId = model.VariationOrderId, DoneBy = user.full_name(), RentalStartDate = model.TimeStamp, SubProjectId = model.SubProjectId, EnteredIntoDataBase = DateTime.Now, ProjectId = model.ProjectId, ItemTypeId = Convert.ToInt32(itemids[i]), UniqueID = uniqueids[i], Amount = Convert.ToDouble(amounts[i]), isInstalled = true, TimeStamp = model.TimeStamp, InvoiceDate = Convert.ToDateTime(model.InvoiceDate), Install_Text = model.LogText, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude), Location = "" };

                        }
                        else
                        {
                            install = new Install { ToBePaid = true, VariationOrderId = model.VariationOrderId, DoneBy = user.full_name(), RentalStartDate = model.TimeStamp, SubProjectId = model.SubProjectId, EnteredIntoDataBase = DateTime.Now, ProjectId = model.ProjectId, ItemTypeId = Convert.ToInt32(itemids[i]), UniqueID = uniqueids[i], Amount = Convert.ToDouble(amounts[i]), isInstalled = true, TimeStamp = model.TimeStamp, InvoiceDate = DateTime.Now, Install_Text = model.LogText, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude), Location = "" };

                        }
                        _context.Add(install);
                        //var itemtype = await _context.ItemTypes.SingleOrDefaultAsync(x => x.Id.Equals(Convert.ToInt32(itemids[i])));
                        //if (itemtype.rental_price > 0)
                        //{
                        //    var arrivalsofthattype = await _context.Arrivals.Where(x => x.ItemTypeId.Equals(install.Id) && x.Amount > 1).ToListAsync();
                        //    if (arrivalsofthattype.Count < 1)
                        //    {
                        //        Arrival arr = new Arrival
                        //        {
                        //            ToBePaid = true,
                        //            Amount = install.Amount,
                        //            EndStamp = null,
                        //            TimeStamp = install.TimeStamp,
                        //            UniqueID = install.UniqueID,
                        //            ItemTypeId = itemtype.Id,
                        //            ProjectId = install.ProjectId,
                        //            SubProjectId = install.SubProjectId,
                        //            EnteredIntoDataBase = DateTime.Now,
                        //            LastEditedInDataBase = DateTime.Now,
                        //            InvoiceDate = DateTime.Now,
                        //            Arrival_Text = "Auto Added at installation: " + install.Install_Text,
                        //            Latitude = install.Latitude,
                        //            Longitude = install.Longitude,
                        //            MobilisationId = null,
                        //            PayedAmount = 0
                        //        };
                        //        _context.Add(arr);
                        //    }
                        //}
                    }

                    await _context.SaveChangesAsync();
                    var itemadded = await _context.Installations.Include(x => x.ItemType).LastAsync();

                    var directory = _env.WebRootPath + "\\AHAK\\InstallPhotos\\" + itemadded.Id.ToString() + "\\";
                    if (!Directory.Exists(directory) && files != null)
                    {
                        Directory.CreateDirectory(directory);
                    }
                    foreach (IFormFile photo in files)
                    {
                        var path = Path.Combine(directory, photo.FileName);
                        var path2 = Path.Combine(directory, photo.FileName.Split(".")[0] + "_edit." + photo.FileName.Split(".")[1]);
                        if (!path.Contains(".pdf"))
                        {
                            PhotoFileInstalled2 installphoto = new PhotoFileInstalled2 { Path = path, TimeStamp = model.TimeStamp, InstallId = itemadded.Id, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                            _context.Add(installphoto);
                        }
                        else
                        {
                            PhotoFileInstalled2 newphoto = new PhotoFileInstalled2 { Latitude = itemadded.Latitude, Longitude = itemadded.Longitude, InstallId = itemadded.Id, Path = path.Replace(".pdf", ".png"), TimeStamp = DateTime.Now };
                            _context.Add(newphoto);
                        }
                        var stream = new FileStream(path, FileMode.Create);
                        await photo.CopyToAsync(stream);
                        stream.Close();

                        if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                        {
                            PhotoExtensions.SaveAndCompressJpeg(path, 80);
                        }
                        else if (path.Contains(".pdf"))
                        {
                            PhotoExtensions.ConvertPdfToPng(path);
                            System.IO.File.Delete(path);
                        }
                    }
                    CoordTrack2 installCoords = new CoordTrack2 { InstallId = itemadded.Id, MobilizeId = null, MeasPointId = null, TypeCoord = "Installed", TimeStamp = model.TimeStamp, Latitude = model.Latitude, Longitude = model.Longitude };
                    _context.Add(installCoords);
                    Log2 newLog = new Log2 { ItemTypeId = Convert.ToInt32(itemids[i]), Description = _SharedLocalizer.GetLocalizedHtmlString("Item Installed.:") + " " + model.LogText + " : " + itemadded.Id.ToString() + " : AMOUNT: " + itemadded.Amount.ToString(), TimeStamp = model.TimeStamp, PhotoPath = directory, TheUser = user.full_name() };
                    _context.Add(newLog);
                    //MeasPoint mp = new MeasPoint();
                    //MeasType meastype;
                    //MonitorType monitype;
                    //if (itemadded.ItemType.Item_Type.ToLower().Contains("pump") || itemadded.ItemType.Item_Type.ToLower().Contains("watermeter"))
                    //{
                    //    meastype = await _context.MeasTypes.SingleOrDefaultAsync(x => x.DivisionId.Equals(user.DivisionId) && x.Type.Equals("Water Meter"));
                    //    if (meastype == null)
                    //    {
                    //        meastype = await _context.MeasTypes.SingleOrDefaultAsync(x => x.DivisionId.Equals(user.DivisionId) && x.Type.Equals("Miscellaneous"));
                    //    }
                    //    monitype = await _context.MonitorType.SingleOrDefaultAsync(x => x.DivisionId.Equals(user.DivisionId) && x.MonitorTypeName.Equals("Flow Meter"));
                    //    if (monitype == null)
                    //    {
                    //        monitype = await _context.MonitorType.SingleOrDefaultAsync(x => x.DivisionId.Equals(user.DivisionId) && x.MonitorTypeName.Equals("Miscellaneous"));
                    //    }
                    //}
                    //else
                    //{
                    //    meastype = await _context.MeasTypes.SingleOrDefaultAsync(x => x.DivisionId.Equals(user.DivisionId) && x.Type.Equals("Miscellaneous"));
                    //    monitype = await _context.MonitorType.SingleOrDefaultAsync(x => x.DivisionId.Equals(user.DivisionId) && x.MonitorTypeName.Equals("Miscellaneous"));
                    //}

                    //mp.MeasTypeId = meastype.Id;
                    //mp.MonitorTypeId = monitype.Id;
                    //mp.Coordx = Convert.ToDouble(itemadded.Latitude);
                    //mp.Coordy = Convert.ToDouble(itemadded.Longitude);
                    //mp.Coordz = 0;
                    //mp.Lati = Convert.ToDouble(itemadded.Latitude);
                    //mp.Longi = Convert.ToDouble(itemadded.Longitude);
                    //if (itemadded.UniqueID != "N/A" && itemadded.UniqueID != "")
                    //{
                    //    mp.Name = String.Concat(itemadded.ItemType.Item_Type, " #", itemadded.UniqueID.Replace("#", ""));
                    //}
                    //else
                    //{
                    //    mp.Name = itemadded.ItemType.Item_Type + " " + itemadded.Id.ToString();
                    //}

                    //mp.Offset = 0;
                    //mp.ProjectId = itemadded.ProjectId;
                    //mp.SubProjectId = itemadded.SubProjectId;
                    //mp.LoggerActive = true;
                    //var existingmp = await _context.MeasPoints.Where(x => x.Name.Equals(mp.Name) && x.ProjectId.Equals(mp.ProjectId)).FirstOrDefaultAsync();
                    //if (existingmp == null)
                    //{
                    //    _context.MeasPoints.Add(mp);
                    //}
                    await _context.SaveChangesAsync();
                    if (itemadded.UniqueID != "N/A" && itemadded.UniqueID != "" && itemadded.UniqueID.Contains("#"))
                    {
                        var prev_install = await _context.Installations.Where(x => !x.Id.Equals(itemadded.Id) && x.UniqueID.Replace("#", "").Equals(itemadded.UniqueID.Replace("#", "")) && x.TimeStamp <= itemadded.TimeStamp).OrderByDescending(x => x.TimeStamp).FirstOrDefaultAsync();
                        if (prev_install != null)
                        {
                            if (prev_install.isInstalled == true)
                            {
                                prev_install.isInstalled = false;
                                prev_install.DeinstallDate = itemadded.TimeStamp.AddDays(-1);
                                _context.Update(prev_install);
                                DeInstall d_inst = new DeInstall();
                                d_inst.Latitude = prev_install.Latitude;
                                d_inst.Longitude = prev_install.Longitude;
                                d_inst.ItemTypeId = prev_install.ItemTypeId;
                                d_inst.InstallId = prev_install.Id;
                                d_inst.EnteredIntoDataBase = DateTime.Now;
                                d_inst.Amount = prev_install.Amount;
                                d_inst.SubProjectId = prev_install.SubProjectId;
                                d_inst.ProjectId = prev_install.ProjectId;
                                d_inst.TimeStamp = itemadded.TimeStamp.AddDays(-1);
                                d_inst.DeInstall_Text = "Auto Deinstall of item with unique ID: " + itemadded.UniqueID;
                                d_inst.DoneBy = "MainOps";
                                _context.Add(d_inst);
                                if (prev_install.ItemTypeId.Equals(1800))
                                {
                                    var horizontaldrain = await _context.Installations.Where(x => x.UniqueID.Contains(prev_install.UniqueID) && x.isInstalled.Equals(true) && x.ItemTypeId.Equals(1703) && x.TimeStamp <= prev_install.TimeStamp).OrderBy(x => x.TimeStamp).FirstOrDefaultAsync();
                                    if (horizontaldrain != null)
                                    {
                                        horizontaldrain.isInstalled = false;
                                        horizontaldrain.DeinstallDate = prev_install.DeinstallDate;
                                        _context.Update(horizontaldrain);
                                        DeInstall d_inst2 = new DeInstall();
                                        d_inst2.Latitude = horizontaldrain.Latitude;
                                        d_inst2.Longitude = horizontaldrain.Longitude;
                                        d_inst2.ItemTypeId = horizontaldrain.ItemTypeId;
                                        d_inst2.InstallId = horizontaldrain.Id;
                                        d_inst2.EnteredIntoDataBase = DateTime.Now;
                                        d_inst2.Amount = horizontaldrain.Amount;
                                        d_inst2.SubProjectId = horizontaldrain.SubProjectId;
                                        d_inst2.ProjectId = horizontaldrain.ProjectId;
                                        d_inst2.TimeStamp = itemadded.TimeStamp.AddDays(-1);
                                        d_inst2.DeInstall_Text = "Auto Deinstall of associated Drain with unique ID: " + horizontaldrain.UniqueID;
                                        d_inst2.DoneBy = "MainOps";
                                        _context.Add(d_inst2);
                                        var associated_arrival = await _context.Arrivals.Where(x => x.UniqueID.Equals(horizontaldrain.UniqueID) && x.ItemTypeId.Equals(1703) && x.TimeStamp <= model.TimeStamp).OrderBy(x => x.TimeStamp).LastOrDefaultAsync();
                                        if (associated_arrival != null)
                                        {
                                            associated_arrival.EndStamp = d_inst2.TimeStamp;
                                            _context.Update(associated_arrival);
                                        }
                                    }
                                }
                                await _context.SaveChangesAsync();
                            }
                        }

                        var arrival = await _context.Arrivals
                            .Where(x => x.UniqueID.Replace("#", "").Equals(itemadded.UniqueID.Replace("#", ""))
                            && (x.TimeStamp <= itemadded.TimeStamp || x.TimeStamp <= itemadded.RentalStartDate)
                            ).OrderByDescending(x => x.TimeStamp).FirstOrDefaultAsync();
                        if (arrival == null)
                        {
                            Arrival new_arrival = new Arrival();
                            new_arrival.InvoiceDate = DateTime.Now;
                            new_arrival.ToBePaid = true;
                            new_arrival.ProjectId = itemadded.ProjectId;
                            new_arrival.ItemTypeId = itemadded.ItemTypeId;
                            new_arrival.Amount = itemadded.Amount;
                            new_arrival.Arrival_Text = "Auto Arrival of item with unique ID: " + itemadded.UniqueID;
                            new_arrival.EnteredIntoDataBase = DateTime.Now;
                            new_arrival.Latitude = itemadded.Latitude;
                            new_arrival.Longitude = itemadded.Longitude;
                            new_arrival.SubProjectId = itemadded.SubProjectId;
                            new_arrival.UniqueID = itemadded.UniqueID;
                            new_arrival.TimeStamp = itemadded.RentalStartDate;
                            _context.Add(new_arrival);
                            await _context.SaveChangesAsync();
                        }
                        else
                        {
                            if (!arrival.ItemTypeId.Equals(itemadded.ItemTypeId) || !arrival.SubProjectId.Equals(itemadded.SubProjectId))
                            {
                                arrival.EndStamp = itemadded.TimeStamp.AddDays(-1);
                                _context.Update(arrival);
                                Arrival new_arrival = new Arrival();
                                new_arrival.InvoiceDate = DateTime.Now;
                                new_arrival.ToBePaid = true;
                                new_arrival.ProjectId = itemadded.ProjectId;
                                new_arrival.ItemTypeId = itemadded.ItemTypeId;
                                new_arrival.Amount = itemadded.Amount;
                                new_arrival.Arrival_Text = "Auto Arrival of item with unique ID: " + itemadded.UniqueID;
                                new_arrival.EnteredIntoDataBase = DateTime.Now;
                                new_arrival.Latitude = itemadded.Latitude;
                                new_arrival.Longitude = itemadded.Longitude;
                                new_arrival.SubProjectId = itemadded.SubProjectId;
                                new_arrival.UniqueID = itemadded.UniqueID;
                                new_arrival.TimeStamp = itemadded.TimeStamp;
                                _context.Add(new_arrival);
                                await _context.SaveChangesAsync();
                            }
                        }
                        //var drains = await _context.Arrivals.Where(x => x.UniqueID.Contains(itemadded.UniqueID) && !x.UniqueID.Equals(itemadded.UniqueID)).ToListAsync();
                        //foreach(var drain in drains)
                        //{

                        //}

                    }
                }
            }
            return RedirectToAction("Install", "TrackItems");
        }
        [HttpGet]
        [Authorize(Roles = "Admin,Manager,DivisionAdmin")]
        public async Task<IActionResult> GetArrivalsOrdered()
        {
            var installations = await _context.Installations.Include(x => x.ItemType).Where(x => !x.UniqueID.Equals("N/A") && !x.UniqueID.Equals("") && x.UniqueID.Contains("#") && x.ProjectId.Equals(418)).OrderBy(x => x.TimeStamp).ToListAsync();

            //check if itemtype has rent and only go for that. Also only go for items on project 418
            foreach (var itemadded in installations)
            {
                if (itemadded.ItemType.rental_price >= (decimal)0.01 || itemadded.ItemTypeId.Equals(1800))
                {
                    var arrival = await _context.Arrivals
                        .Where(x => x.UniqueID.Replace("#", "").Equals(itemadded.UniqueID.Replace("#", ""))
                        && (x.TimeStamp <= itemadded.TimeStamp || x.TimeStamp <= itemadded.RentalStartDate)
                        ).OrderByDescending(x => x.TimeStamp).FirstOrDefaultAsync();
                    if (arrival == null)
                    {
                        Arrival new_arrival = new Arrival();
                        new_arrival.InvoiceDate = DateTime.Now;
                        new_arrival.ToBePaid = true;
                        new_arrival.ProjectId = itemadded.ProjectId;
                        new_arrival.ItemTypeId = itemadded.ItemTypeId;
                        new_arrival.Amount = itemadded.Amount;
                        new_arrival.Arrival_Text = "Auto Arrival of item with unique ID: " + itemadded.UniqueID;
                        new_arrival.EnteredIntoDataBase = DateTime.Now;
                        new_arrival.Latitude = itemadded.Latitude;
                        new_arrival.Longitude = itemadded.Longitude;
                        new_arrival.SubProjectId = itemadded.SubProjectId;
                        new_arrival.UniqueID = itemadded.UniqueID;
                        new_arrival.TimeStamp = itemadded.RentalStartDate;
                        if (itemadded.DeinstallDate != null)
                        {
                            new_arrival.EndStamp = Convert.ToDateTime(itemadded.DeinstallDate);
                        }
                        _context.Add(new_arrival);
                        await _context.SaveChangesAsync();
                    }
                    else
                    {
                        if (!arrival.ItemTypeId.Equals(itemadded.ItemTypeId))
                        {
                            arrival.EndStamp = itemadded.RentalStartDate.AddDays(-1);
                            _context.Update(arrival);
                            Arrival new_arrival = new Arrival();
                            new_arrival.InvoiceDate = DateTime.Now;
                            new_arrival.ToBePaid = true;
                            new_arrival.ProjectId = itemadded.ProjectId;
                            new_arrival.ItemTypeId = itemadded.ItemTypeId;
                            new_arrival.Amount = itemadded.Amount;
                            new_arrival.Arrival_Text = "Auto Arrival of item with unique ID: " + itemadded.UniqueID;
                            new_arrival.EnteredIntoDataBase = DateTime.Now;
                            new_arrival.Latitude = itemadded.Latitude;
                            new_arrival.Longitude = itemadded.Longitude;
                            new_arrival.SubProjectId = itemadded.SubProjectId;
                            new_arrival.UniqueID = itemadded.UniqueID;
                            new_arrival.TimeStamp = itemadded.RentalStartDate;
                            if (itemadded.DeinstallDate != null)
                            {
                                new_arrival.EndStamp = Convert.ToDateTime(itemadded.DeinstallDate);
                            }
                            _context.Add(new_arrival);
                            await _context.SaveChangesAsync();
                        }
                    }
                }
            }
            return RedirectToAction("Index", "Home");
        }
        [HttpGet]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> DeInstallItems()
        {
            var installations = await _context.Installations.Where(x => !x.UniqueID.Equals("N/A") && !x.UniqueID.Equals("") && x.isInstalled.Equals(true) && x.ProjectId.Equals(418)).OrderByDescending(x => x.TimeStamp).ToListAsync();
            foreach (var itemadded in installations)
            {
                var prev_install = await _context.Installations.Where(x => !x.Id.Equals(itemadded.Id) && x.UniqueID.Replace("#", "").Equals(itemadded.UniqueID.Replace("#", "")) && x.TimeStamp <= itemadded.TimeStamp).OrderByDescending(x => x.TimeStamp).FirstOrDefaultAsync();
                if (prev_install != null)
                {
                    if (prev_install.isInstalled == true)
                    {
                        prev_install.isInstalled = false;
                        prev_install.DeinstallDate = itemadded.TimeStamp.AddDays(-1);
                        _context.Update(prev_install);
                        DeInstall d_inst = new DeInstall();
                        d_inst.Latitude = prev_install.Latitude;
                        d_inst.Longitude = prev_install.Longitude;
                        d_inst.ItemTypeId = prev_install.ItemTypeId;
                        d_inst.InstallId = prev_install.Id;
                        d_inst.EnteredIntoDataBase = DateTime.Now;
                        d_inst.Amount = prev_install.Amount;
                        d_inst.SubProjectId = prev_install.SubProjectId;
                        d_inst.ProjectId = prev_install.ProjectId;
                        d_inst.TimeStamp = itemadded.TimeStamp.AddDays(-1);
                        d_inst.DeInstall_Text = "Auto Deinstall of item with unique ID: " + itemadded.UniqueID;
                        d_inst.DoneBy = "MainOps";
                        _context.Add(d_inst);
                        if (prev_install.ItemTypeId.Equals(1800))
                        {
                            var horizontaldrain = await _context.Installations.Where(x => x.UniqueID.Contains(prev_install.UniqueID) && x.isInstalled.Equals(true) && x.ItemTypeId.Equals(1703) && x.TimeStamp <= prev_install.TimeStamp).OrderBy(x => x.TimeStamp).FirstOrDefaultAsync();
                            if (horizontaldrain != null)
                            {
                                horizontaldrain.isInstalled = false;
                                horizontaldrain.DeinstallDate = prev_install.DeinstallDate;
                                _context.Update(horizontaldrain);
                                DeInstall d_inst2 = new DeInstall();
                                d_inst2.Latitude = horizontaldrain.Latitude;
                                d_inst2.Longitude = horizontaldrain.Longitude;
                                d_inst2.ItemTypeId = horizontaldrain.ItemTypeId;
                                d_inst2.InstallId = horizontaldrain.Id;
                                d_inst2.EnteredIntoDataBase = DateTime.Now;
                                d_inst2.Amount = horizontaldrain.Amount;
                                d_inst2.SubProjectId = horizontaldrain.SubProjectId;
                                d_inst2.ProjectId = horizontaldrain.ProjectId;
                                d_inst2.TimeStamp = itemadded.TimeStamp.AddDays(-1);
                                d_inst2.DeInstall_Text = "Auto Deinstall of associated Drain with unique ID: " + horizontaldrain.UniqueID;
                                d_inst2.DoneBy = "MainOps";
                                _context.Add(d_inst2);
                                var associated_arrival = await _context.Arrivals.Where(x => x.UniqueID.Equals(horizontaldrain.UniqueID) && x.ItemTypeId.Equals(1703) && x.TimeStamp <= prev_install.TimeStamp).OrderBy(x => x.TimeStamp).LastOrDefaultAsync();
                                if (associated_arrival != null)
                                {
                                    associated_arrival.EndStamp = d_inst2.TimeStamp;
                                    _context.Update(associated_arrival);
                                }

                            }
                        }
                        await _context.SaveChangesAsync();
                    }
                }
            }
            return RedirectToAction("Index", "Home");
        }
        //UpdateArrivalDrain
        public async Task<IActionResult> UpdateDrainArrivals()
        {
            var drains = await _context.Arrivals.Where(x => x.ItemTypeId.Equals(1703) && x.UniqueID.Contains("#")).ToListAsync();
            foreach (var arr in drains)
            {
                var draininstall = await _context.Installations.SingleOrDefaultAsync(x => x.ItemTypeId.Equals(arr.ItemTypeId) && x.UniqueID.Equals(arr.UniqueID));
                if (draininstall != null)
                {
                    string uniqueid = arr.UniqueID.Split("-")[1].Trim();
                    var relevant_install = await _context.Installations.Where(x => x.UniqueID.Equals(uniqueid) && x.ItemTypeId.Equals(1800) && x.TimeStamp >= arr.TimeStamp).OrderBy(x => x.TimeStamp).FirstOrDefaultAsync();

                    if (relevant_install != null)
                    {

                        arr.TimeStamp = relevant_install.RentalStartDate;
                        draininstall.RentalStartDate = arr.TimeStamp;
                        if (relevant_install.DeinstallDate != null)
                        {
                            arr.EndStamp = relevant_install.DeinstallDate;
                            draininstall.DeinstallDate = relevant_install.DeinstallDate;
                        }
                        _context.Update(arr);
                        _context.Update(draininstall);
                    }
                }
            }
            await _context.SaveChangesAsync();
            return RedirectToAction("MainMenu");
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        [RequestSizeLimit(900000000)]
        public async Task<IActionResult> AddMeasurement(int installationid2, double themeas, string comment, IFormFile[] files)
        {
            var item = await _context.Installations.Include(x => x.ItemType).Where(x => x.Id.Equals(installationid2)).FirstAsync();
            var measpoint = await _context.MeasPoints.Where(x => x.Name.Equals(item.ItemType.Item_Type + " " + item.Id.ToString())).SingleOrDefaultAsync();
            if (measpoint == null)
            {
                MeasPoint mp = new MeasPoint();
                mp.MeasTypeId = 37;
                mp.MonitorTypeId = 20;
                mp.Coordx = Convert.ToDouble(item.Latitude);
                mp.Coordy = Convert.ToDouble(item.Longitude);
                mp.Coordz = 0;
                mp.Lati = Convert.ToDouble(item.Latitude);
                mp.Longi = Convert.ToDouble(item.Longitude);
                mp.Name = item.ItemType.Item_Type + " " + item.Id.ToString();
                mp.Offset = 0;
                mp.ProjectId = item.ProjectId;
                mp.SubProjectId = item.SubProjectId;
                mp.LoggerActive = true;
                _context.MeasPoints.Add(mp);
                await _context.SaveChangesAsync();
                measpoint = await _context.MeasPoints.LastAsync();
            }
            Meas meas = new Meas();
            meas.MeasPointId = measpoint.Id;
            meas.Latitude = item.Latitude;
            meas.Longitude = item.Longitude;
            meas.NewComment = comment;
            meas.TheMeasurement = themeas;
            meas.When = DateTime.Now;
            _context.Measures.Add(meas);
            await _context.SaveChangesAsync();
            var lastmeas = await _context.Measures.LastAsync();

            if (files != null)
            {
                Document document = new Document();
                document.DocumentTypeId = 21;
                document.MeasPointId = measpoint.Id;
                document.Name = "Measurement_" + measpoint.Name + "_" + lastmeas.Id.ToString();
                var folderpath = Path.Combine(_env.WebRootPath.ReplaceFirst("/", ""), "Documents", "PHOTO");
                if (!Directory.Exists(folderpath) && files != null)
                {
                    Directory.CreateDirectory(folderpath);
                }

                foreach (var file in files)
                {
                    if (file.Length > 0)
                    {
                        var fileName = ContentDispositionHeaderValue.Parse(file.ContentDisposition).FileName.Trim('"');
                        fileName = folderpath + $@"\{document.Name}" + "." + fileName.Split(".")[1];
                        document.path = fileName;
                        using (FileStream fs = System.IO.File.Create(fileName))
                        {
                            file.CopyTo(fs);
                            fs.Flush();
                        }

                    }
                }
                _context.Add(document);

            }
            await _context.SaveChangesAsync();
            return RedirectToAction("OverView");
        }
        [HttpPost]
        [RequestSizeLimit(900000000)]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember,International")]
        public async Task<IActionResult> Arrival_old(ArrivalItemVM model, IFormFile[] files)
        {
            if (ModelState.IsValid)
            {
                var user = await _userManager.GetUserAsync(User);
                Arrival arrival = new Arrival { ToBePaid = true, InvoiceDate = DateTime.Now, SubProjectId = model.SubProjectId, EnteredIntoDataBase = DateTime.Now, ProjectId = model.ProjectId, MobilisationId = model.MobilisationId, ItemTypeId = model.ItemTypeId, Amount = model.Amount, TimeStamp = model.TimeStamp, Arrival_Text = model.LogText, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                _context.Add(arrival);
                await _context.SaveChangesAsync();
                var itemadded = await _context.Arrivals.LastAsync();

                var directory = _env.WebRootPath + "\\AHAK\\ArrivalPhotos\\" + itemadded.Id.ToString() + "\\";
                if (!Directory.Exists(directory) && files != null)
                {
                    Directory.CreateDirectory(directory);
                }
                foreach (IFormFile photo in files)
                {

                    var path = Path.Combine(directory, photo.FileName);

                    PhotoFileArrival arrivalphoto = new PhotoFileArrival { Path = path, TimeStamp = model.TimeStamp, ArrivalId = itemadded.Id, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                    _context.Add(arrivalphoto);
                    var stream = new FileStream(path, FileMode.Create);
                    await photo.CopyToAsync(stream);
                    stream.Close();
                    if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                    {
                        PhotoExtensions.SaveAndCompressJpeg(path, 80);
                    }
                }
                CoordTrack2 arrivalCoords = new CoordTrack2 { ArrivalId = itemadded.Id, InstallId = null, MobilizeId = null, MeasPointId = null, TypeCoord = "Arrival", TimeStamp = model.TimeStamp, Latitude = model.Latitude, Longitude = model.Longitude };
                _context.Add(arrivalCoords);
                Log2 newLog = new Log2 { ItemTypeId = model.ItemTypeId, Description = _SharedLocalizer.GetLocalizedHtmlString("Item Arrived.:") + " " + model.LogText, TimeStamp = model.TimeStamp, PhotoPath = directory, TheUser = user.full_name() };
                _context.Add(newLog);
                await _context.SaveChangesAsync();
            }
            if (User.IsInRole("International") && !User.IsInRole("Admin"))
            {
                return RedirectToAction("MainMenu_HIH", "TrackItems");
            }
            return RedirectToAction("Arrival", "TrackItems");
        }
        [HttpPost]
        [RequestSizeLimit(900000000)]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Arrival(ArrivalItem3VM model, IFormFile[] files)
        {
            if (ModelState.IsValid)
            {
                string[] itemids = model.ItemTypeIds.Split(',');
                string[] amounts = model.Amounts.Split(',');
                string[] uniqueids = model.UniqueIDs.Split(',');
                //.Replace("[", "").Replace("]", "")
                var user = await _userManager.GetUserAsync(User);
                for (int i = 0; i < itemids.Length; i++)
                {
                    Arrival arrival;
                    if (model.InvoiceDate != null)
                    {
                        arrival = new Arrival { VariationOrderId = model.VariationOrderId, ToBePaid = true, InvoiceDate = Convert.ToDateTime(model.InvoiceDate), SubProjectId = model.SubProjectId, UniqueID = uniqueids[i], MobilisationId = model.MobilisationId, EnteredIntoDataBase = DateTime.Now, ProjectId = model.ProjectId, ItemTypeId = Convert.ToInt32(itemids[i]), Amount = Convert.ToDouble(amounts[i]), TimeStamp = model.TimeStamp, Arrival_Text = model.LogText, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                    }
                    else
                    {
                        arrival = new Arrival { VariationOrderId = model.VariationOrderId, ToBePaid = true, InvoiceDate = DateTime.Now, SubProjectId = model.SubProjectId, UniqueID = uniqueids[i], MobilisationId = model.MobilisationId, EnteredIntoDataBase = DateTime.Now, ProjectId = model.ProjectId, ItemTypeId = Convert.ToInt32(itemids[i]), Amount = Convert.ToDouble(amounts[i]), TimeStamp = model.TimeStamp, Arrival_Text = model.LogText, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                    }
                    _context.Add(arrival);


                    await _context.SaveChangesAsync();
                    var itemadded = await _context.Arrivals.Include(x => x.ItemType).LastAsync();

                    var directory = _env.WebRootPath + "\\AHAK\\ArrivalPhotos\\" + itemadded.Id.ToString() + "\\";
                    if (!Directory.Exists(directory) && files != null)
                    {
                        Directory.CreateDirectory(directory);
                    }
                    foreach (IFormFile photo in files)
                    {
                        var path = Path.Combine(directory, photo.FileName);
                        var path2 = Path.Combine(directory, photo.FileName.Split(".")[0] + "_edit." + photo.FileName.Split(".")[1]);
                        if (!path.Contains(".pdf"))
                        {
                            PhotoFileArrival arrivalphoto = new PhotoFileArrival { Path = path, TimeStamp = model.TimeStamp, ArrivalId = itemadded.Id, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                            _context.Add(arrivalphoto);
                        }
                        else
                        {
                            PhotoFileArrival newphoto = new PhotoFileArrival { Latitude = (double)itemadded.Latitude, Longitude = (double)itemadded.Longitude, ArrivalId = itemadded.Id, Path = path.Replace(".pdf", ".png"), TimeStamp = DateTime.Now };
                            _context.Add(newphoto);
                        }

                        var stream = new FileStream(path, FileMode.Create);
                        await photo.CopyToAsync(stream);
                        stream.Close();
                        if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                        {
                            PhotoExtensions.SaveAndCompressJpeg(path, 80);
                        }
                        else if (path.Contains(".pdf"))
                        {
                            PhotoExtensions.ConvertPdfToPng(path);
                            System.IO.File.Delete(path);
                        }
                    }
                    CoordTrack2 arrivalCoords = new CoordTrack2 { InstallId = null, MobilizeId = null, ArrivalId = itemadded.Id, MeasPointId = null, TypeCoord = "Arrived", TimeStamp = model.TimeStamp, Latitude = model.Latitude, Longitude = model.Longitude };
                    _context.Add(arrivalCoords);
                    Log2 newLog = new Log2 { ItemTypeId = Convert.ToInt32(itemids[i]), Description = _SharedLocalizer.GetLocalizedHtmlString("Item Arrived.:") + " " + model.LogText + " : " + itemadded.Id.ToString(), TimeStamp = model.TimeStamp, PhotoPath = directory, TheUser = user.full_name() };
                    _context.Add(newLog);
                    await _context.SaveChangesAsync();
                }
            }
            return RedirectToAction("Arrival", "TrackItems");
        }
        [HttpGet]
        public JsonResult GetHorizontalInstallsProject(string theId)
        {
            int Id = Convert.ToInt32(theId);
            var installations = _context.Installations.Include(x => x.ItemType).Include(x => x.Project).Where(x => x.ProjectId.Equals(Id) && x.ItemType.Item_Type.ToLower().Contains("horizontal")).OrderBy(x => x.ItemType.Item_Type).ToList();
            IEnumerable<SelectListItem> selList = from s in installations
                                                  select new SelectListItem
                                                  {
                                                      Value = s.Id.ToString(),
                                                      Text = string.Join(" : ", new List<string> { s.Project.Name + " ID: " + s.Id + " : " + s.ItemType.Item_Type, s.UniqueID }.Where(x => !string.IsNullOrEmpty(x) && x != "N/A"))
                                                  };
            return Json(selList);
        }
        [HttpGet]
        public JsonResult GetInstallsProject(string theId)
        {
            int Id = Convert.ToInt32(theId);
            var installations = _context.Installations.Include(x => x.ItemType).Include(x => x.Project).Where(x => x.ProjectId.Equals(Id)).OrderBy(x => x.ItemType.Item_Type).OrderBy(x => x.ItemType).ToList();
            IEnumerable<SelectListItem> selList = from s in installations
                                                  select new SelectListItem
                                                  {
                                                      Value = s.Id.ToString(),
                                                      Text = string.Join(" : ", new List<string> { s.Project.Name + " ID: " + s.Id + " : " + s.ItemType.Item_Type, s.UniqueID }.Where(x => !string.IsNullOrEmpty(x) && x != "N/A"))
                                                  };
            return Json(selList);
        }
        [HttpGet]
        public JsonResult GetInstallsSubProject(string theId)
        {
            int Id = Convert.ToInt32(theId);
            var installations = _context.Installations.Include(x => x.ItemType).Include(x => x.Project).Where(x => x.isInstalled.Equals(true) && x.SubProjectId.Equals(Id)).OrderBy(x => x.ItemType.Item_Type).ToList();
            IEnumerable<SelectListItem> selList = from s in installations
                                                  select new SelectListItem
                                                  {
                                                      Value = s.Id.ToString(),
                                                      Text = string.Join(" : ", new List<string> { s.Project.Name + " ID: " + s.Id + " : " + s.ItemType.Item_Type, s.UniqueID }.Where(x => !string.IsNullOrEmpty(x) && x != "N/A"))
                                                  };
            return Json(selList);
        }
        [HttpGet]
        public JsonResult UpdateProjectInstall(string theId)
        {
            int Id = Convert.ToInt32(theId);
            var install = _context.Installations.Find(Id);
            var project = _context.Projects.Find(install.ProjectId);
            return Json(project.Id);
        }
        [HttpGet]
        public JsonResult UpdateProjectMeasPoint(string theId)
        {
            int Id = Convert.ToInt32(theId);
            var mp = _context.MeasPoints.Find(Id);
            var project = _context.Projects.Find(mp.ProjectId);
            return Json(project.Id);
        }
        [HttpGet]
        public JsonResult GetSubProjectInstall(string theId)
        {
            int Id = Convert.ToInt32(theId);
            var install = _context.Installations.Find(Id);
            var project = _context.SubProjects.Find(install.SubProjectId);
            return Json(project.Id);
        }
        [HttpGet]
        public JsonResult GetSubProjectMP(string theId)
        {
            int Id = Convert.ToInt32(theId);
            var mp = _context.MeasPoints.Find(Id);
            var project = _context.SubProjects.Find(mp.SubProjectId);
            return Json(project.Id);
        }
        [HttpGet]
        public JsonResult GetMeasPointsProjectLevel(string theId)
        {
            int Id = Convert.ToInt32(theId);
            var installations = _context.MeasPoints.Include(x => x.Project).Include(x => x.MeasType).Where(x => x.ProjectId.Equals(Id) && x.MeasType.Type.ToLower().Equals("water level")).OrderBy(x => x.Name).ToList();
            return Json(installations);
        }


        [HttpGet]
        public JsonResult GetMeasPointsProjectLevel2(string theId)
        {
            int Id = Convert.ToInt32(theId);
            var measpoints = _context.MeasPoints.Include(x => x.Project).Include(x => x.MeasType).Where(x => x.ProjectId.Equals(Id) && x.MeasType.Type.ToLower().Equals("water level")).OrderBy(x => x.Name).ToList();
            IEnumerable<SelectListItem> selList = from s in measpoints
                                                  select new SelectListItem
                                                  {
                                                      Value = s.Id.ToString(),
                                                      Text = s.Name //s.Project.Name + " ID: " + s.Id + " : " + s.Name
                                                  };

            return Json(selList);
        }

        [HttpGet]
        public JsonResult GetMeasPointsSubProjectLevel(string theId)
        {
            int Id = Convert.ToInt32(theId);
            var installations = _context.MeasPoints.Include(x => x.Project).Include(x => x.MeasType).Where(x => x.SubProjectId.Equals(Id) && x.MeasType.Type.ToLower().Equals("water level")).OrderBy(x => x.Name).ToList();
            if (installations.Count < 1)
            {
                var subproj = _context.SubProjects.Find(Id);
                installations = _context.MeasPoints.Include(x => x.Project).Include(x => x.MeasType).Where(x => x.ProjectId.Equals(subproj.ProjectId) && x.MeasType.Type.ToLower().Equals("water level")).OrderBy(x => x.Name).ToList();
            }
            return Json(installations);
        }
                     
        [HttpGet]
        public JsonResult GetMeasPointsProject(string theId)
        {
            int Id = Convert.ToInt32(theId);
            var installations = _context.MeasPoints.Include(x => x.Project).Where(x => x.ProjectId.Equals(Id) && x.ToBeHidden.Equals(false)).OrderBy(x => x.Name).ToList();
            IEnumerable<SelectListItem> selList = from s in installations
                                                  select new SelectListItem
                                                  {
                                                      Value = s.Id.ToString(),
                                                      Text = s.Project.Name + " ID: " + s.Id + " : " + s.Name
                                                  };
            return Json(selList);
        }

       
       

        [HttpGet]
        public JsonResult GetWellsProject(string theId)
        {
            int Id = Convert.ToInt32(theId);
            var wells = _context.Wells.Include(x => x.Project).Where(x => x.ProjectId.Equals(Id) ).OrderBy(x => x.WellName).ToList();
            IEnumerable<SelectListItem> selList = from s in wells
                                                  select new SelectListItem
                                                  {
                                                      Value = s.Id.ToString(),
                                                      Text = s.WellName //s.Project.Name + " ID: " + s.Id + " : " + s.Name
                                                  };
            return Json(selList);
        }
        [HttpGet]
        public JsonResult GetMeasPointsSubProject(string theId)
        {
            int Id = Convert.ToInt32(theId);
            var installations = _context.MeasPoints.Include(x => x.Project).Where(x => x.SubProjectId.Equals(Id)).OrderBy(x => x.Name).ToList();
            if (installations.Count < 1)
            {
                var subproj = _context.SubProjects.Find(Id);
                installations = _context.MeasPoints.Include(x => x.Project).Where(x => x.ProjectId.Equals(subproj.ProjectId)).OrderBy(x => x.Name).ToList();
            }
            IEnumerable<SelectListItem> selList = from s in installations
                                                  select new SelectListItem
                                                  {
                                                      Value = s.Id.ToString(),
                                                      Text = s.Project.Name + " ID: " + s.Id + " : " + s.Name
                                                  };
            return Json(selList);
        }

        [HttpGet]
        public JsonResult GetWellsSubProject(string theId)
        {
            int Id = Convert.ToInt32(theId);
            var wells = _context.Wells.Include(x => x.Project).Where(x => x.SubProjectId.Equals(Id)).OrderBy(x => x.WellName).ToList();
            if (wells.Count < 1)
            {
                var subproj = _context.SubProjects.Find(Id);
                wells = _context.Wells.Include(x => x.Project).Where(x => x.ProjectId.Equals(subproj.ProjectId)).OrderBy(x => x.WellName).ToList();
            }
            IEnumerable<SelectListItem> selList = from s in wells
                                                  select new SelectListItem
                                                  {
                                                      Value = s.Id.ToString(),
                                                      Text = s.WellName //s.Project.Name + " ID: " + s.Id + " : " + s.WellName
                                                  };
            return Json(selList);
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Maintenance()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            var coords = await _context.CoordTrack2s.Include(x => x.Install).ThenInclude(x => x.ItemType).Where(x => x.Install.isInstalled.Equals(true) && !x.TypeCoord.Equals("Coord Measure")).ToListAsync();
            MaintenanceVM model = new MaintenanceVM();
            model.installations = coords;
            var measpoints = await _context.MeasPoints.Include(x => x.MeasType).Include(x => x.MonitorType).Include(x => x.Project).Where(x => x.Project.Active.Equals(true) && x.Project.DivisionId.Equals(user.DivisionId) && x.Lati > 0.1 && x.Longi > 0.1 && !x.MeasType.Type.Equals("Miscellaneous") && x.ToBeHidden.Equals(false)).ToListAsync();
            model.MeasPoints = measpoints;
            ViewData["ProjectId"] = await GetProjectList();
            var maintypes = await _context.MaintenanceTypes.ToListAsync();
            foreach (var item in maintypes)
            {
                item.Type = _SharedLocalizer.GetLocalizedHtmlString(item.Type);
            }
            ViewData["MaintenanceTypeId"] = new SelectList(maintypes, "Id", "Type");
            var hjitems = await CreateHJItemlist();
            ViewData["HJItemId"] = new SelectList(hjitems, "Value", "Text");
            return View(model);
        }
        public async Task<IEnumerable<SelectListItem>> CreateHJItemlist()
        {
            var user = await _userManager.GetUserAsync(User);
            var filternames = await _context.HJItems.Include(x => x.HJItemClass).ThenInclude(x => x.HJItemMasterClass)
                .Where(x => x.DivisionId.Equals(user.DivisionId))
                .OrderBy(b => b.HJItemClass.HJItemMasterClass.ClassNumber).ThenBy(x => x.HJItemClass.ClassNumber).ThenBy(x => x.HJId).ToListAsync();

            if (user.Active == true)
            {
                IEnumerable<SelectListItem> selList = from s in filternames
                                                      select new SelectListItem
                                                      {
                                                          Value = s.Id.ToString(),
                                                          Text = s.HJId + " : " + s.Name
                                                      };
                return selList;
            }
            else
            {
                IEnumerable<SelectListItem> selList = from s in filternames
                                                      where s.Id.Equals(10000)
                                                      select new SelectListItem
                                                      {
                                                          Value = s.Id.ToString(),
                                                          Text = s.HJId + " : " + s.Name
                                                      };
                return selList;
            }


        }
        [HttpGet]
        public async Task<IActionResult> Export_Maintenances(int? ProjectId)
        {
            int theid = Convert.ToInt32(ProjectId);
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            List<MaintenanceWithEntry> maintenanceviews = new List<MaintenanceWithEntry>();
            var maintenances = await _context.Maintenances
                .Include(x => x.Project)
                .Include(x => x.MeasPoint)
                .Include(x => x.SubProject)
                .Include(x => x.HJItem)
                .Include(x => x.Install)
                .Where(x => x.ProjectId.Equals(theid))
                .OrderByDescending(x => x.TimeStamp)
                .ToListAsync();
            StringBuilder sb = new StringBuilder();
            List<string> headerrow = new List<string>(new string[] { "Id", "Project", "SubProject", "TimeStamp", "Maintenance Point", "LogText", "HoursSpent", "Latitude", "Longitude", "Doneby", "MaintenaceType", "MaintenanceSubType" });
            sb.AppendLine(string.Join(";", headerrow.ToArray()));
            foreach (var m in maintenances)
            {
                var entries = await _context.MaintenanceEntries.Include(x => x.MaintenanceSubType).Include(x => x.MaintenanceType).Where(x => x.MaintenanceId.Equals(m.Id)).ToListAsync();
                List<string> fillerrow = new List<string>(new string[] { "", "", "", "", "", "", "", "", "", "", "", "" });
                fillerrow[0] = m.Id.ToString();
                fillerrow[1] = m.Project.Name;
                if (m.SubProjectId != null)
                {
                    fillerrow[2] = m.SubProject.Name;
                }
                else
                {
                    fillerrow[2] = "";
                }
                fillerrow[3] = m.TimeStamp.ToString();
                fillerrow[4] = m.MaintenancePoint;

                if (m.LogText != null)
                {
                    fillerrow[5] = m.LogText.Replace("\r\n", " ");
                }
                fillerrow[6] = m.HoursSpent.ToString();
                fillerrow[7] = m.Latitude.ToString();
                fillerrow[8] = m.Longitude.ToString();
                fillerrow[9] = m.DoneBy;
                fillerrow[10] = "";
                foreach (MaintenanceEntry m_entry in entries)
                {
                    if (fillerrow[10] == "")
                    {
                        fillerrow[10] = m_entry.MaintenanceType.Type;
                    }
                    if (fillerrow[11] == "")
                    {
                        if (m_entry.MaintenanceSubTypeId != null)
                        {
                            fillerrow[11] = m_entry.MaintenanceSubType.Type;
                        }
                    }
                    else
                    {
                        if (m_entry.MaintenanceSubTypeId != null)
                        {
                            fillerrow[11] = fillerrow[11] += "," + m_entry.MaintenanceSubType.Type;
                        }
                    }
                }
                sb.AppendLine(string.Join(";", fillerrow.ToArray()));
            }
            return File(System.Text.Encoding.ASCII.GetBytes(sb.ToString()), "text/csv", "data.csv");
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Maintenances()
        {
            // Create a list with projects
            ViewBag.ProjectId = new SelectList(await _context.Projects
                .OrderBy(p => p.Name)
                .Select(p => new { Id = p.Id, Name = p.Name })
                .ToListAsync(), "Id", "Name");
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            List<MaintenanceWithEntry> maintenanceviews = new List<MaintenanceWithEntry>();
            var maintenances = await _context.Maintenances
                .Include(x => x.Project)
                .Include(x => x.MeasPoint)
                .Include(x => x.SubProject)
                .Include(x => x.HJItem)
                .Include(x => x.Install)
                .Include(x => x.MaintenanceEntries).ThenInclude(x => x.MaintenanceType)
                .Include(x => x.MaintenanceEntries).ThenInclude(x => x.MaintenanceSubType)
                .Include(x => x.MaintenancePhotos)
                .Where(x => x.Project.DivisionId.Equals(user.DivisionId)) //  && x.TimeStamp >= DateTime.Now.AddDays(-90) (make search function first...)
                .OrderByDescending(x => x.TimeStamp)
                .ToListAsync();
            foreach (var m in maintenances)
            {
                foreach (var m_entry in m.MaintenanceEntries)
                {
                    MaintenanceWithEntry entry = new MaintenanceWithEntry(m, m_entry);
                    if (m.MaintenancePhotos.Count() > 0)
                    {
                        entry.HasPhotos = true;
                    }
                    else
                    {
                        entry.HasPhotos = false;
                    }
                    maintenanceviews.Add(entry);
                }
            }
            var installations = await _context.Installations
                .Include(x => x.ItemType)
                .Include(x => x.Project)
                .Where(x => x.isInstalled.Equals(true) && x.Project.DivisionId.Equals(user.DivisionId))
                .ToListAsync();
            IEnumerable<SelectListItem> selList = from s in installations
                                                  select new SelectListItem
                                                  {
                                                      Value = s.Id.ToString(),
                                                      Text = s.Project.Name + " ID: " + s.Id + " : " + s.ItemType.Item_Type
                                                  };
            ViewData["MeasPointId"] = new SelectList(_context.MeasPoints.Include(x => x.Project).Where(x => x.Project.DivisionId.Equals(user.DivisionId) && x.ToBeHidden.Equals(false)), "Id", "Name");
            ViewData["ProjectId"] = await GetProjectList();
            ViewData["SubProjectId"] = new SelectList(_context.SubProjects.Include(x => x.Project).Where(x => x.Project.DivisionId.Equals(user.DivisionId)), "Id", "Name");
            ViewData["MaintenanceTypeId"] = new SelectList(_context.MaintenanceTypes, "Id", "Type");
            ViewData["MaintenanceSubTypeId"] = new SelectList(_context.MaintenanceSubTypes, "Id", "Type");
            ViewData["InstallId"] = new SelectList(selList, "Value", "Text");
            var hjitems = await CreateHJItemlist();
            ViewData["HJItemId"] = new SelectList(hjitems, "Value", "Text");
            return View("Reports/Maintenances", maintenanceviews);
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> MaintenanceReport_PDF(int? id)
        {
            if (id != null)
            {
                var maint = await _context.Maintenances
                    .Include(x => x.MeasPoint)
                    .Include(x => x.Install)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Include(x => x.MaintenanceEntries).ThenInclude(x => x.MaintenanceType)
                    .Include(x => x.MaintenanceEntries).ThenInclude(x => x.MaintenanceSubType)
                    .Include(x => x.MaintenancePhotos)
                    .Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                return new ViewAsPdf("Reports/_MaintenancePDF", maint);
            }
            else
            {
                return NotFound();
            }
        }
        [HttpPost]
        [RequestSizeLimit(900000000)]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Maintenance(MaintenanceVM model, IFormFile[] files)
        {
            if (ModelState.IsValid)
            {
                var user = await _userManager.GetUserAsync(User);
                string[] maintenancesubtypes = model.MaintenanceSubTypeList.Split(',');
                string[] maintenancetypes = model.MaintenanceTypeList.Split(',');
                double lat = 0.0;
                double lng = 0.0;
                try
                {
                    lat = Convert.ToDouble(model.Latitude);
                    lng = Convert.ToDouble(model.Longitude);
                }
                catch
                {
                    lat = 0.0;
                    lng = 0.0;
                }
                try
                {
                    Maintenance maintenance = new Maintenance
                    {
                        EnteredIntoDataBase = DateTime.Now,
                        InstallId = model.InstallId,
                        MeasPointId = model.MeasPointId,
                        MaintenancePoint = model.MaintenancePoint,
                        TimeStamp = model.TimeStamp,
                        LogText = model.LogText,
                        Latitude = lat,
                        Longitude = lng,
                        HoursSpent = model.HoursSpent,
                        DoneBy = user.full_name(),
                        Signature = model.Signature,
                        ProjectId = model.ProjectId,
                        SubProjectId = model.SubProjectId,
                        HJItemId = model.HJItemId
                    };
                    _context.Add(maintenance);

                    await _context.SaveChangesAsync();
                    var itemadded = await _context.Maintenances.Include(x => x.Install).Include(x => x.MeasPoint).Include(x => x.HJItem).LastAsync();

                    var directory = _env.WebRootPath + "\\AHAK\\MaintenancePhotos\\" + itemadded.Id.ToString() + "\\";
                    if (!Directory.Exists(directory) && files != null)
                    {
                        Directory.CreateDirectory(directory);
                    }
                    foreach (IFormFile photo in files)
                    {

                        var path = Path.Combine(directory, photo.FileName);

                        PhotoFileMaintenance maintenancephoto = new PhotoFileMaintenance { Path = path, TimeStamp = model.TimeStamp, MaintenanceId = itemadded.Id, Latitude = lat, Longitude = lng };
                        _context.Add(maintenancephoto);
                        var stream = new FileStream(path, FileMode.Create);
                        await photo.CopyToAsync(stream);
                        stream.Close();
                        if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                        {
                            PhotoExtensions.SaveAndCompressJpeg(path, 80);
                        }
                    }
                    if (itemadded.InstallId != null)
                    {
                        CoordTrack2 maintenanceCoords = new CoordTrack2 { ArrivalId = null, InstallId = model.InstallId, MobilizeId = null, MeasPointId = null, TypeCoord = "Maintenance", TimeStamp = model.TimeStamp, Latitude = lat, Longitude = lng };
                        _context.Add(maintenanceCoords);
                    }
                    if (itemadded.MeasPointId != null)
                    {
                        CoordTrack2 maintenanceCoords = new CoordTrack2 { ArrivalId = null, InstallId = null, MobilizeId = null, MeasPointId = model.MeasPointId, TypeCoord = "Maintenance", TimeStamp = model.TimeStamp, Latitude = lat, Longitude = lng };
                        _context.Add(maintenanceCoords);
                    }
                    await _context.SaveChangesAsync();
                    for (int i = 0; i < maintenancesubtypes.Length; i++)
                    {
                        MaintenanceEntry entry = new MaintenanceEntry();
                        entry.MaintenanceId = itemadded.Id;
                        entry.MaintenanceTypeId = Convert.ToInt32(maintenancetypes[i]);
                        //try to add - cannot if MaintenanceType is General
                        if (maintenancesubtypes[i] != "" && maintenancesubtypes[i] != null)
                        {
                            entry.MaintenanceSubTypeId = Convert.ToInt32(maintenancesubtypes[i]);
                        }
                        _context.Add(entry);
                        if (entry.MaintenanceSubTypeId != null)
                        {
                            var maintype = await _context.MaintenanceTypes.FindAsync(entry.MaintenanceTypeId);
                            var mainsubtype = await _context.MaintenanceSubTypes.FindAsync(entry.MaintenanceSubTypeId);
                            Log2 newLog = new Log2 { ItemTypeId = null, Description = "Item Maintenance.:" + itemadded.MaintenancePoint + " : " + model.LogText + " : Maintenance ID: " + itemadded.Id.ToString() + " : Maintenance Done: " + maintype.Type + " : " + mainsubtype.Type, TimeStamp = model.TimeStamp, PhotoPath = directory, TheUser = user.full_name() };
                            _context.Add(newLog);
                        }
                        else
                        {
                            var maintype = await _context.MaintenanceTypes.FindAsync(entry.MaintenanceTypeId);
                            Log2 newLog = new Log2 { ItemTypeId = null, Description = "Item Maintenance.:" + itemadded.MaintenancePoint + " : " + model.LogText + " : Maintenance ID: " + itemadded.Id.ToString() + " : Maintenance Done: " + maintype.Type, TimeStamp = model.TimeStamp, PhotoPath = directory, TheUser = user.full_name() };
                            _context.Add(newLog);
                        }
                    }
                    await _context.SaveChangesAsync();
                    // send email
                    itemadded = null;
                    itemadded = await _context.Maintenances
                    .Include(x => x.MeasPoint)
                    .Include(x => x.Install)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Include(x => x.MaintenanceEntries).ThenInclude(x => x.MaintenanceType)
                    .Include(x => x.MaintenanceEntries).ThenInclude(x => x.MaintenanceSubType)
                    .Include(x => x.MaintenancePhotos)
                    .LastAsync();
                    ViewAsPdf pdf = new ViewAsPdf("Reports/_MaintenancePDF", itemadded)
                    {
                        FileName = "Maintenance_" + itemadded.Project.Abbreviation + "_" + itemadded.TimeStamp.ToString("yyyy-MM-dd") + ".pdf",
                    };
                    byte[] pdfData = await pdf.BuildFile(ControllerContext);

                    var file = Convert.ToBase64String(pdfData);
                    string footerstringHTML = "<br />Hölscher Jensen A/S<br />Fabriksparken 37<br />2600 Glostrup<br />Denmark";
                    string footerstringPLAIN = "\r\n\r\nHölscher Jensen A/S \r\nFabriksparken 37\r\n2600 Glostrup\r\nDenmark";
                    await _emailSender.SendEmailAsync2("ofw@hj-as.dk", String.Concat("Maintenance Report - ", itemadded.MaintenancePoint),
                       "Maintenance Report for: " + itemadded.MaintenancePoint + ". Performed on: " + itemadded.TimeStamp.ToString() + ". On Project: " + itemadded.Project.Name
                        , footerstringHTML, footerstringPLAIN, pdf.FileName, file);
                    // done sending email
                }
                catch (Exception e)
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "Please take picture of this:" + Environment.NewLine + Environment.NewLine + e.ToString() });
                }
            }
            return RedirectToAction("MainMenu", "TrackItems");
        }

        public async Task<IActionResult> OverView()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            LatLngUTMConverter ltUTMconv = new LatLngUTMConverter("WGS 84");
            LatLngUTMConverter.LatLng latlng;
            PipeViewClass pipeGroutSagen1 = new PipeViewClass();
            PipeViewClass pipeGroutSagen2 = new PipeViewClass();
            PipeViewClass pipeGroutSagen3 = new PipeViewClass();
            pipeGroutSagen1.ProjectId = 70;
            pipeGroutSagen2.ProjectId = 70;
            pipeGroutSagen3.ProjectId = 70;
            //PipeViewClass pipeFyn = new PipeViewClass();
            var path1 = _env.WebRootPath + "\\AHAK\\Reference Coords\\70\\Egtved-Stenderup_del1.csv";
            var path2 = _env.WebRootPath + "\\AHAK\\Reference Coords\\70\\Houstrup-Nybro2.csv";
            var path3 = _env.WebRootPath + "\\AHAK\\Reference Coords\\70\\Stenderup_nyborg_del2.csv";
            using (var sreader = new StreamReader(path1))
            {
                while (!sreader.EndOfStream)
                {
                    string[] rows = sreader.ReadLine().Split(';');
                    if (rows[0] != "")
                    {
                        latlng = ltUTMconv.convertUtmToLatLng(Convert.ToDouble(rows[1]), Convert.ToDouble(rows[2]), 32, "N");
                        pipeGroutSagen1.Latitudes.Add(latlng.Lat);
                        pipeGroutSagen1.Longitudes.Add(latlng.Lng);
                        pipeGroutSagen1.KMPoints.Add(rows[0]);
                    }
                }
            }
            using (var sreader = new StreamReader(path2))
            {
                while (!sreader.EndOfStream)
                {
                    string[] rows = sreader.ReadLine().Split(';');
                    if (rows[0] != "")
                    {
                        latlng = ltUTMconv.convertUtmToLatLng(Convert.ToDouble(rows[1]), Convert.ToDouble(rows[2]), 32, "N");
                        pipeGroutSagen2.Latitudes.Add(latlng.Lat);
                        pipeGroutSagen2.Longitudes.Add(latlng.Lng);
                        pipeGroutSagen2.KMPoints.Add(rows[0]);
                    }
                }
            }
            using (var sreader = new StreamReader(path3))
            {
                while (!sreader.EndOfStream)
                {
                    string[] rows = sreader.ReadLine().Split(';');
                    if (rows[0] != "")
                    {
                        latlng = ltUTMconv.convertUtmToLatLng(Convert.ToDouble(rows[1]), Convert.ToDouble(rows[2]), 32, "N");
                        pipeGroutSagen3.Latitudes.Add(latlng.Lat);
                        pipeGroutSagen3.Longitudes.Add(latlng.Lng);
                        pipeGroutSagen3.KMPoints.Add(rows[0]);
                    }
                }
            }
            ViewBag.Pipe1 = pipeGroutSagen1;
            ViewBag.Pipe2 = pipeGroutSagen2;
            ViewBag.Pipe3 = pipeGroutSagen3;
            ViewData["ProjectId"] = await GetProjectList();
            List<ItemType> thedata = new List<ItemType>();
            List<ItemType> thenewdata = new List<ItemType>();
            //var itemtypes = (from it in _context.ItemTypes
            //                 join bqh in _context.BoQHeadLines on Convert.ToInt32(it.BoQnr) equals Convert.ToInt32(bqh.BoQnum)
            //                 where bqh.Type.Equals("Installation")
            //                 && !it.Item_Type.ToLower().Contains("discount") && !it.Rental_UnitId.Equals(5) && !it.Rental_UnitId.Equals(6) && !it.Install_UnitId.Equals(10)
            //                 && !it.Rental_UnitId.Equals(19) && !it.Install_UnitId.Equals(19)
            //                 select it).OrderBy(x => x.Item_Type)
            //                 .ToList();
            thedata = _context.ItemTypes.Where(x => x.Project.DivisionId.Equals(user.DivisionId)).ToList();
            thedata = thedata.Where(x => !x.Item_Type.ToLower().Contains("discount") && !x.Item_Type.ToLower().Contains(" idle") && !x.Item_Type.ToLower().Contains(" idxle") && !x.Item_Type.ToLower().Contains(" excluded grouting l") && !x.Item_Type.ToLower().Contains("decommission")).ToList();
            thedata = thedata.Where(x => x.price > 0 && !x.Rental_UnitId.Equals(5) && !x.Rental_UnitId.Equals(6) && !x.Rental_UnitId.Equals(19) && !x.Install_UnitId.Equals(19)).ToList();
            var boqheadlines = _context.BoQHeadLines.Where(x => x.Project.DivisionId.Equals(user.DivisionId) && x.Type.ToLower().Equals("installation")).ToList();
            foreach (var item in thedata)
            {
                if (boqheadlines.Select(x => Convert.ToInt32(Math.Floor(x.BoQnum))).Distinct().Contains(Convert.ToInt32(Math.Floor(item.BoQnr))))
                {
                    thenewdata.Add(item);
                }
            }
            thedata = thenewdata.OrderBy(x => x.BoQnr).ToList();
            ViewData["ItemTypeId"] = new SelectList(thedata, "Id", "Item_Type");
            List<CoordTrack2> coords = new List<CoordTrack2>();
            if (User.IsInRole("Guest"))
            {
                coords = await (from p in _context.Projects
                                join pu in _context.ProjectUsers on p.Id equals pu.projectId
                                where pu.userId == user.Id
                                join c in _context.CoordTrack2s.Include(x => x.Install).ThenInclude(x => x.ItemType)
                                on p.Id equals c.Install.ProjectId
                                where p.Active.Equals(true) && c.InstallId != null && p.DivisionId.Equals(user.DivisionId) && c.Install.ItemTypeId != 1824 && c.Install.ItemTypeId != 1782
                                select c).ToListAsync();
            }
            else if (User.IsInRole("Admin"))
            {
                coords = await _context.CoordTrack2s.Include(x => x.Install).ThenInclude(x => x.ItemType).ThenInclude(x => x.Project).Where(x => x.InstallId != null && x.Install.ItemType.Project.Active.Equals(true)).ToListAsync();
            }
            else
            {
                coords = await _context.CoordTrack2s.Include(x => x.Install).ThenInclude(x => x.ItemType).ThenInclude(x => x.Project).Where(x => x.InstallId != null && x.Install.Project.DivisionId.Equals(user.DivisionId) && x.Install.ItemType.Project.Active.Equals(true) && x.Install.ItemTypeId != 1824 && x.Install.ItemTypeId != 1782).ToListAsync();
            }
            return View(coords);
        }



        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        [HttpGet]
        public async Task<IActionResult> MeasurePipe(int? ProjectId = null)
        {
            ViewData["ProjectId"] = await GetProjectList();
            List<Install> InstallationLIst = await _context.Installations
                .Include(x => x.ItemType)
                .Include(x => x.Project)
                .Where(x => x.isInstalled.Equals(true) && (x.ItemType.Item_Type.ToLower().Contains("pipe") || x.ItemType.Item_Type.ToLower().Contains("hose") || x.ItemType.Item_Type.ToLower().Contains("rohr") || x.ItemType.Item_Type.ToLower().Contains("leitung")) && !x.ItemType.Item_Type.Contains("Open")).ToListAsync();
            if (ProjectId != null)
            {
                InstallationLIst = InstallationLIst.Where(x => x.ProjectId.Equals(ProjectId)).ToList();
            }
            MeasurePipeVM model = new MeasurePipeVM();
            model.Latitudes = new List<double>();
            model.Longitudes = new List<double>();
            if (User.IsInRole("Admin"))
            {
                model.InstalledCoordinates = InstallationLIst;
            }
            else
            {
                var user = await _userManager.GetUserAsync(User);
                if (user.Active == false)
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
                }
                model.InstalledCoordinates = InstallationLIst.Where(x => x.Project.DivisionId.Equals(user.DivisionId)).ToList();
            }
            return View(model);
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        [RequestSizeLimit(900000000)]
        public async Task<IActionResult> MeasurePipe(MeasurePipeVM model, string latss, string longss, string errorss, string latssk, string longssk, string errorssk, IFormFile[] files)
        {
            if (ModelState.IsValid)
            {
                string[] latitudes = latss.Replace("[", "").Replace("]", "").Split(',');
                string[] longitudes = longss.Replace("[", "").Replace("]", "").Split(',');
                string[] errors = errorss.Replace("[", "").Replace("]", "").Split(',');
                string[] latitudesk = latssk.Replace("[", "").Replace("]", "").Split(',');
                string[] longitudesk = longssk.Replace("[", "").Replace("]", "").Split(',');
                string[] errorsk = errorssk.Replace("[", "").Replace("]", "").Split(',');
                var before = await _context.Installations.FindAsync(model.InstallationsId);
                DateTime thetime = DateTime.Now;
                var user = await _userManager.GetUserAsync(User);
                Log2 newLog = new Log2
                {
                    ItemTypeId = before.ItemTypeId,
                    Description = _SharedLocalizer.GetLocalizedHtmlString("Install Before Edit.:") + " " + before.Install_Text + " : " + before.Id.ToString() + " : AMOUNT: " + before.Amount.ToString(),
                    TimeStamp = before.TimeStamp,
                    TheUser = user.full_name(),
                    otherinfo = "Edited On: " + DateTime.Now.ToString() + ". Invoicedate: " + before.InvoiceDate + ". RentalStartDate: " + before.RentalStartDate + ". DeInstallDate: " + Convert.ToDateTime(before.DeinstallDate).ToString() + ". PayedAmount: " + before.PayedAmount.ToString() + ". UNIQUEID: " + before.UniqueID + ". ToBePaid: " + before.ToBePaid.ToString() + ". "
                };
                _context.Add(newLog);
                for (int i = 0; i < latitudesk.Length; i++)
                {
                    CoordTrack2 new_coordPair = new CoordTrack2();
                    new_coordPair.InstallId = before.Id;
                    new_coordPair.Latitude = Convert.ToDouble(latitudesk[i]);
                    new_coordPair.Longitude = Convert.ToDouble(longitudesk[i]);
                    new_coordPair.Accuracy = Convert.ToDouble(errorsk[i]);
                    new_coordPair.Latitude_backup = Convert.ToDouble(latitudes[i]);
                    new_coordPair.Longitude_backup = Convert.ToDouble(longitudes[i]);
                    new_coordPair.Accuracy_backup = Convert.ToDouble(errors[i]);
                    new_coordPair.TimeStamp = thetime.AddSeconds(i);
                    new_coordPair.TypeCoord = "Coord Measure";
                    _context.CoordTrack2s.Add(new_coordPair);
                }
                before.Amount = Convert.ToDouble(model.Amount);
                _context.Update(before);
                await _context.SaveChangesAsync();
                Log2 newLogafter = new Log2
                {
                    ItemTypeId = before.ItemTypeId,
                    Description = _SharedLocalizer.GetLocalizedHtmlString("Install After Edit By Measure.:") + " " + before.Install_Text + " : " + before.Id.ToString() + " : AMOUNT: " + before.Amount.ToString(),
                    TimeStamp = model.TimeStamp,
                    TheUser = user.full_name(),
                    otherinfo = "Edited On: " + DateTime.Now.ToString() + ". Invoicedate: " + before.InvoiceDate + ". RentalStartDate: " + before.RentalStartDate + ". DeInstallDate: " + Convert.ToDateTime(before.DeinstallDate).ToString() + ". PayedAmount: " + before.PayedAmount.ToString() + ". UNIQUEID: " + before.UniqueID + ". ToBePaid: " + before.ToBePaid.ToString() + ". "
                };
                _context.Add(newLogafter);
                await _context.SaveChangesAsync();
            }
            return RedirectToAction("MainMenu", "TrackItems");
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> InstallSmallParts()
        {
            List<Install> InstallationLIst = await _context.Installations.Include(x => x.ItemType).ThenInclude(x => x.Project)
               .Where(x => x.isInstalled.Equals(true) && (x.ItemType.Item_Type.ToLower().Contains("pipe") || x.ItemType.Item_Type.ToLower().Contains("hose") || x.ItemType.Item_Type.ToLower().Contains("rohr") || x.ItemType.Item_Type.ToLower().Contains("leitung"))).ToListAsync();
            InstallSmallVM model = new InstallSmallVM();
            if (User.IsInRole("Admin"))
            {
                model.InstalledCoordinates = InstallationLIst;
            }
            else
            {
                var user = await _userManager.GetUserAsync(User);
                if (user.Active == false)
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
                }
                model.InstalledCoordinates = InstallationLIst.Where(x => x.Project.DivisionId.Equals(user.DivisionId)).ToList();
            }

            ViewData["SmallPartId"] = new SelectList(_context.SmallParts.OrderBy(x => x.Name), "Id", "Name");
            return View(model);
        }
        [HttpPost]
        [RequestSizeLimit(900000000)]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> InstallSmallItems(InstallSmallVM model, string latss, string longss, string errorss, string smallitemss, IFormFile[] files)
        {
            string[] latitudes = latss.Replace("[", "").Replace("]", "").Split(',');
            string[] longitudes = longss.Replace("[", "").Replace("]", "").Split(',');
            string[] errors = errorss.Replace("[", "").Replace("]", "").Split(',');
            string[] smallitems = smallitemss.Replace("[", "").Replace("]", "").Split(',');
            var item = await _context.Installations.FindAsync(model.InstallationsId);
            for (int i = 0; i < smallitems.Length; i++)
            {
                CoordTrack2 new_coordPair = new CoordTrack2();
                new_coordPair.InstallId = item.Id;
                new_coordPair.Latitude = Convert.ToDouble(latitudes[i]);
                new_coordPair.Longitude = Convert.ToDouble(longitudes[i]);
                new_coordPair.Accuracy = Convert.ToDouble(errors[i]);
                new_coordPair.Latitude_backup = Convert.ToDouble(latitudes[i]);
                new_coordPair.Longitude_backup = Convert.ToDouble(longitudes[i]);
                new_coordPair.Accuracy_backup = Convert.ToDouble(errors[i]);
                new_coordPair.TimeStamp = model.TimeStamp;
                new_coordPair.TypeCoord = "Small Part";
                _context.CoordTrack2s.Add(new_coordPair);
                Install inst = new Install();
                var SP = await _context.SmallParts.FindAsync(Convert.ToInt32(smallitems[i]));
                inst.ItemTypeId = SP.ItemTypeId;
                inst.ToBePaid = true;
                inst.ProjectId = item.ProjectId;
                inst.Install_Text = SP.Name;
                inst.Latitude = Convert.ToDouble(new_coordPair.Latitude);
                inst.Longitude = Convert.ToDouble(new_coordPair.Longitude);
                inst.isInstalled = true;
                inst.TimeStamp = item.TimeStamp;
                inst.InvoiceDate = DateTime.Now;
                inst.RentalStartDate = item.TimeStamp;
                inst.EnteredIntoDataBase = DateTime.Now;
                inst.Location = item.Location;
                inst.Amount = 1;
                _context.Add(inst);
            }
            var directory = _env.WebRootPath + "\\AHAK\\InstallPhotos\\" + item.Id.ToString() + "\\";
            if (!Directory.Exists(directory) && files != null)
            {
                Directory.CreateDirectory(directory);
            }
            foreach (IFormFile photo in files)
            {

                var path = Path.Combine(directory, photo.FileName);

                PhotoFileInstalled2 installphoto = new PhotoFileInstalled2 { Path = path, TimeStamp = model.TimeStamp, InstallId = item.Id, Latitude = Convert.ToDouble(item.Latitude), Longitude = Convert.ToDouble(item.Longitude) };
                _context.Add(installphoto);
                var stream = new FileStream(path, FileMode.Create);
                await photo.CopyToAsync(stream);
                stream.Close();
                if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                {
                    PhotoExtensions.SaveAndCompressJpeg(path, 80);
                }
            }
            await _context.SaveChangesAsync();
            return RedirectToAction("MainMenu", "TrackItems");
        }
        public JsonResult GetSubTypes(string theId)
        {
            int Id = Convert.ToInt32(theId);
            var thedata = _context.MaintenanceSubTypes.Where(x => x.MaintenanceTypeId.Equals(Id)).OrderBy(x => x.Type).ToList();
            foreach (var item in thedata)
            {
                item.Type = _SharedLocalizer.GetLocalizedHtmlString(item.Type).Value;
            }
            return Json(thedata);
        }
        public async Task<string> getItemType(int id)
        {
            var item = await _context.ItemTypes.FindAsync(id);
            return item.Item_Type.Replace("\"", " inch");
        }
        [HttpGet]
        public async Task<int> GetTheItem(int id)
        {
            var item = await _context.Installations.FindAsync(id);
            return item.ItemTypeId;
        }
        [HttpGet]
        public async Task<IActionResult> GetInstallPartialView(int id)
        {
            var install = await _context.Installations.Include(x => x.ItemType).Include(x => x.Project).Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
            return PartialView("_installPartial", install);
        }
        [HttpGet]
        public async Task<int> GetTheProject(int id)
        {
            var item = await _context.Installations.FindAsync(id);
            return Convert.ToInt32(item.ProjectId);
        }
        [HttpPost]
        [RequestSizeLimit(900000000)]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> DeInstall(DeInstallItemVM model, IFormFile[] files)
        {
            if (ModelState.IsValid)
            {
                var user = await _userManager.GetUserAsync(User);
                var itemdeinstalled = await _context.Installations.Include(x => x.ItemType).Where(x => x.Id.Equals(model.DeInstallItemId)).SingleOrDefaultAsync();
                itemdeinstalled.isInstalled = false;
                itemdeinstalled.DeinstallDate = model.TimeStamp;

                _context.Update(itemdeinstalled);
                //if (itemdeinstalled.ItemType.BoQnr >= (decimal)9.0 && itemdeinstalled.ItemType.BoQnr < (decimal)10.0)
                //{
                //    var arrival = await _context.Arrivals.Where(x => x.ItemTypeId.Equals(itemdeinstalled.ItemTypeId)).SingleOrDefaultAsync();
                //    if (arrival != null)
                //    {
                //        arrival.EndStamp = model.TimeStamp;
                //        arrival.LastEditedInDataBase = DateTime.Now;
                //        _context.Update(arrival);
                //    }
                //}
                if (itemdeinstalled.UniqueID != null && itemdeinstalled.ProjectId.Equals(418))
                {
                    if (itemdeinstalled.UniqueID.Contains("#"))
                    {
                        if (itemdeinstalled.SubProjectId != 233)
                        {
                            var arrival = await _context.Arrivals.Where(x => x.ItemTypeId.Equals(itemdeinstalled.ItemTypeId) && x.UniqueID.Equals(itemdeinstalled.UniqueID) && x.EndStamp == null).SingleOrDefaultAsync();
                            if (arrival != null)
                            {
                                arrival.EndStamp = model.TimeStamp;
                                arrival.LastEditedInDataBase = DateTime.Now;
                                _context.Update(arrival);
                            }
                        }
                    }
                }

                if (itemdeinstalled.ItemTypeId.Equals(1800))
                {
                    var horizontaldrain = await _context.Installations.Where(x => x.UniqueID.Contains(itemdeinstalled.UniqueID) && x.isInstalled.Equals(true) && x.ItemTypeId.Equals(1703) && x.TimeStamp <= itemdeinstalled.TimeStamp).OrderBy(x => x.TimeStamp).FirstOrDefaultAsync();
                    if (horizontaldrain != null)
                    {
                        horizontaldrain.isInstalled = false;
                        horizontaldrain.DeinstallDate = itemdeinstalled.DeinstallDate;
                        _context.Update(horizontaldrain);
                        DeInstall d_inst2 = new DeInstall();
                        d_inst2.Latitude = horizontaldrain.Latitude;
                        d_inst2.Longitude = horizontaldrain.Longitude;
                        d_inst2.ItemTypeId = horizontaldrain.ItemTypeId;
                        d_inst2.InstallId = horizontaldrain.Id;
                        d_inst2.EnteredIntoDataBase = DateTime.Now;
                        d_inst2.Amount = horizontaldrain.Amount;
                        d_inst2.SubProjectId = horizontaldrain.SubProjectId;
                        d_inst2.ProjectId = horizontaldrain.ProjectId;
                        d_inst2.TimeStamp = model.TimeStamp;
                        d_inst2.DeInstall_Text = "Auto Deinstall of associated Drain with unique ID: " + horizontaldrain.UniqueID;
                        d_inst2.DoneBy = "MainOps";
                        _context.Add(d_inst2);
                        var associated_arrival = await _context.Arrivals.Where(x => x.UniqueID.Equals(horizontaldrain.UniqueID) && x.ItemTypeId.Equals(1703) && x.TimeStamp <= model.TimeStamp).OrderBy(x => x.TimeStamp).LastOrDefaultAsync();
                        if (associated_arrival != null)
                        {
                            associated_arrival.EndStamp = d_inst2.TimeStamp;
                            _context.Update(associated_arrival);
                        }

                    }
                }

                if (model.Latitude == null || model.Longitude == null)
                {
                    DeInstall deinstall = new DeInstall { DoneBy = user.full_name(), SubProjectId = itemdeinstalled.SubProjectId, InstallId = model.DeInstallItemId, EnteredIntoDataBase = DateTime.Now, ProjectId = itemdeinstalled.ProjectId, ItemTypeId = itemdeinstalled.ItemTypeId, Amount = itemdeinstalled.Amount, TimeStamp = model.TimeStamp, DeInstall_Text = model.LogText, Latitude = Convert.ToDouble(itemdeinstalled.Latitude), Longitude = Convert.ToDouble(itemdeinstalled.Longitude) };
                    _context.Add(deinstall);
                }
                else
                {
                    DeInstall deinstall = new DeInstall { DoneBy = user.full_name(), SubProjectId = itemdeinstalled.SubProjectId, ProjectId = itemdeinstalled.ProjectId, InstallId = model.DeInstallItemId, ItemTypeId = itemdeinstalled.ItemTypeId, Amount = itemdeinstalled.Amount, TimeStamp = model.TimeStamp, DeInstall_Text = model.LogText, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                    _context.Add(deinstall);
                }

                await _context.SaveChangesAsync();
                var itemadded = await _context.Deinstallations.LastAsync();

                var directory = _env.WebRootPath + "\\AHAK\\DeInstallPhotos\\" + itemadded.Id.ToString() + "\\";
                if (!Directory.Exists(directory) && files != null)
                {
                    Directory.CreateDirectory(directory);
                }
                foreach (IFormFile photo in files)
                {

                    var path = Path.Combine(directory, photo.FileName);
                    if (!path.Contains(".pdf"))
                    {
                        PhotoFileDeinstalled deinstallphoto = new PhotoFileDeinstalled { Path = path, TimeStamp = model.TimeStamp, DeinstallId = itemadded.Id, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                        _context.Add(deinstallphoto);
                    }
                    else
                    {
                        PhotoFileDeinstalled deinstallphoto = new PhotoFileDeinstalled { Path = path.Replace(".pdf", ".png"), TimeStamp = model.TimeStamp, DeinstallId = itemadded.Id, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                        _context.Add(deinstallphoto);
                    }
                    var stream = new FileStream(path, FileMode.Create);
                    await photo.CopyToAsync(stream);
                    stream.Close();
                    if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                    {
                        PhotoExtensions.SaveAndCompressJpeg(path, 80);
                    }
                    else if (path.Contains(".pdf"))
                    {
                        PhotoExtensions.ConvertPdfToPng(path);
                        System.IO.File.Delete(path);
                    }
                }
                if (model.Latitude != null && model.Longitude != null)
                {
                    CoordTrack2 deinstallCoords = new CoordTrack2 { ArrivalId = null, InstallId = itemdeinstalled.Id, MeasPointId = null, TypeCoord = "DeInstalled", TimeStamp = model.TimeStamp, Latitude = model.Latitude, Longitude = model.Longitude };
                    _context.Add(deinstallCoords);
                }
                else
                {
                    CoordTrack2 deinstallCoords = new CoordTrack2 { ArrivalId = null, InstallId = itemdeinstalled.Id, MeasPointId = null, TypeCoord = "DeInstalled", TimeStamp = model.TimeStamp, Latitude = itemdeinstalled.Latitude, Longitude = itemdeinstalled.Longitude };
                    _context.Add(deinstallCoords);
                }
                Log2 newLog = new Log2 { ItemTypeId = itemdeinstalled.ItemTypeId, Description = _SharedLocalizer.GetLocalizedHtmlString("Item DeInstalled.:") + " " + model.LogText + " : " + itemdeinstalled.Id.ToString(), TimeStamp = model.TimeStamp, PhotoPath = directory, TheUser = user.full_name() };
                _context.Add(newLog);
                await _context.SaveChangesAsync();
                //

                var itemtype = await _context.DecommissionableItems.Include(x => x.BoQItemType).Include(x => x.InstallItemType).Where(x => x.InstalledItemTypeId.Equals(itemdeinstalled.ItemTypeId)).SingleOrDefaultAsync();
                if (itemtype != null)
                {
                    Install inst = new Install
                    {
                        ToBePaid = true,
                        ItemTypeId = itemtype.BoQItemType.Id,
                        Latitude = Convert.ToDouble(itemdeinstalled.Latitude),
                        Longitude = Convert.ToDouble(itemdeinstalled.Longitude),
                        TimeStamp = model.TimeStamp.Date,
                        DeinstallDate = model.TimeStamp.Date,
                        InvoiceDate = DateTime.Now,
                        RentalStartDate = model.TimeStamp.Date,
                        Install_Text = itemdeinstalled.Install_Text + ". Deinstalled with text: " + itemadded.DeInstall_Text,
                        isInstalled = true,
                        Amount = itemdeinstalled.Amount,
                        ProjectId = itemdeinstalled.ProjectId,
                        SubProjectId = itemdeinstalled.SubProjectId,
                        EnteredIntoDataBase = DateTime.Now,
                        LastEditedInDataBase = DateTime.Now,
                        VariationOrderId = itemdeinstalled.VariationOrderId,
                        UniqueID = itemdeinstalled.UniqueID,
                        DoneBy = user.full_name()

                    };
                    _context.Installations.Add(inst);
                    await _context.SaveChangesAsync();
                    var lastinst = await _context.Installations.LastAsync();
                    var directory2 = _env.WebRootPath + "\\AHAK\\InstallPhotos\\" + lastinst.Id.ToString() + "\\";
                    if (!Directory.Exists(directory2))
                    {
                        Directory.CreateDirectory(directory2);
                    }
                    foreach (IFormFile photo in files)
                    {
                        var path = Path.Combine(directory2, photo.FileName);
                        var path2 = Path.Combine(directory2, photo.FileName.Split(".")[0] + "_edit." + photo.FileName.Split(".")[1]);
                        PhotoFileInstalled2 installphoto = new PhotoFileInstalled2 { Path = path, TimeStamp = model.TimeStamp, InstallId = lastinst.Id, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                        _context.Add(installphoto);
                        var stream = new FileStream(path, FileMode.Create);
                        await photo.CopyToAsync(stream);
                        stream.Close();
                        if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                        {
                            PhotoExtensions.SaveAndCompressJpeg(path, 75);
                        }
                    }
                    CoordTrack2 installCoords = new CoordTrack2 { InstallId = lastinst.Id, MobilizeId = null, MeasPointId = null, TypeCoord = "Installed", TimeStamp = model.TimeStamp, Latitude = model.Latitude, Longitude = model.Longitude };
                    _context.Add(installCoords);
                    newLog = new Log2 { ItemTypeId = lastinst.ItemTypeId, Description = _SharedLocalizer.GetLocalizedHtmlString("Item Installed.:") + " " + lastinst.Install_Text + " : " + lastinst.Id.ToString(), TimeStamp = model.TimeStamp, PhotoPath = directory2, TheUser = user.full_name() };
                    _context.Add(newLog);

                }

                await _context.SaveChangesAsync();
                //
            }
            return RedirectToAction("MainMenu", "TrackItems");
        }
        [HttpGet]
        [Authorize(Roles = "Admin,Manager,DivisionAdmin")]
        public async Task<IActionResult> DeInstallItem(int? id)
        {
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            var item = await _context.Installations.Include(x => x.Project).SingleOrDefaultAsync(x => x.Id.Equals(id));
            if (!User.IsInRole("Admin"))
            {
                if (!(item.Project.DivisionId == user.DivisionId))
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
                }
            }
            DeInstallModel model = new DeInstallModel();
            model.id = item.Id;
            model.Amount = item.Amount;
            model.TimeStamp = DateTime.Now.Date;
            if (item != null)
            {
                if (item.Project.DivisionId.Equals(user.DivisionId))
                {
                    return View(model);
                }
                else
                {
                    if (User.IsInRole("Admin"))
                    {
                        return View(model);
                    }
                    else
                    {
                        return RedirectToAction("ErrorMessage", "Home", new { text = "You do not have access to this item" });
                    }
                }
            }
            else
            {
                return NotFound();
            }
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> DeInstallItem(DeInstallModel model, IFormFile[] files)
        {
            if (ModelState.IsValid)
            {
                bool makingnew = false;
                var user = await _userManager.GetUserAsync(User);
                var itemdeinstalled = await _context.Installations.Include(x => x.ItemType).Where(x => x.Id.Equals(model.id)).SingleOrDefaultAsync();
                if (model.Amount == itemdeinstalled.Amount || Math.Abs(Convert.ToDecimal(itemdeinstalled.Amount) - Convert.ToDecimal(model.Amount)) <= (decimal)0.01)
                {
                    itemdeinstalled.isInstalled = false;
                    itemdeinstalled.IsInOperation = false;
                    itemdeinstalled.DeinstallDate = model.TimeStamp;
                    _context.Update(itemdeinstalled);
                    if (itemdeinstalled.ItemTypeId.Equals(1800))
                    {
                        var horizontaldrain = await _context.Installations.Where(x => x.UniqueID.Contains(itemdeinstalled.UniqueID) && x.isInstalled.Equals(true) && x.ItemTypeId.Equals(1703) && x.TimeStamp <= itemdeinstalled.TimeStamp).OrderBy(x => x.TimeStamp).FirstOrDefaultAsync();
                        if (horizontaldrain != null)
                        {
                            horizontaldrain.isInstalled = false;
                            horizontaldrain.DeinstallDate = itemdeinstalled.DeinstallDate;
                            _context.Update(horizontaldrain);
                            DeInstall d_inst2 = new DeInstall();
                            d_inst2.Latitude = horizontaldrain.Latitude;
                            d_inst2.Longitude = horizontaldrain.Longitude;
                            d_inst2.ItemTypeId = horizontaldrain.ItemTypeId;
                            d_inst2.InstallId = horizontaldrain.Id;
                            d_inst2.EnteredIntoDataBase = DateTime.Now;
                            d_inst2.Amount = horizontaldrain.Amount;
                            d_inst2.SubProjectId = horizontaldrain.SubProjectId;
                            d_inst2.ProjectId = horizontaldrain.ProjectId;
                            d_inst2.TimeStamp = model.TimeStamp;
                            d_inst2.DeInstall_Text = "Auto Deinstall of associated Drain with unique ID: " + horizontaldrain.UniqueID;
                            d_inst2.DoneBy = "MainOps";
                            _context.Add(d_inst2);
                            var associated_arrival = await _context.Arrivals.Where(x => x.UniqueID.Equals(horizontaldrain.UniqueID) && x.ItemTypeId.Equals(1703) && x.TimeStamp <= model.TimeStamp).OrderBy(x => x.TimeStamp).LastOrDefaultAsync();
                            if (associated_arrival != null)
                            {
                                associated_arrival.EndStamp = d_inst2.TimeStamp;
                                _context.Update(associated_arrival);
                            }

                        }
                    }
                }
                else
                {
                    makingnew = true;
                    itemdeinstalled.Amount = itemdeinstalled.Amount - model.Amount;
                    _context.Update(itemdeinstalled);
                    await _context.SaveChangesAsync();
                    Install new_install = new Install();
                    new_install.Amount = model.Amount;
                    new_install.ToBePaid = true;
                    new_install.DoneBy = itemdeinstalled.DoneBy;
                    new_install.ItemTypeId = itemdeinstalled.ItemTypeId;
                    new_install.EnteredIntoDataBase = DateTime.Now;
                    new_install.Install_Text = itemdeinstalled.Install_Text + Environment.NewLine + _SharedLocalizer.GetLocalizedHtmlString(" Being Deinstalled. Original item ID: ") + itemdeinstalled.Id.ToString();
                    new_install.isInstalled = false;
                    new_install.Latitude = itemdeinstalled.Latitude;
                    new_install.Longitude = itemdeinstalled.Longitude;
                    new_install.ProjectId = itemdeinstalled.ProjectId;
                    new_install.SubProjectId = itemdeinstalled.SubProjectId;
                    new_install.TimeStamp = itemdeinstalled.TimeStamp;
                    new_install.InvoiceDate = DateTime.Now;
                    new_install.RentalStartDate = itemdeinstalled.RentalStartDate;
                    new_install.UniqueID = itemdeinstalled.UniqueID;
                    new_install.IsInOperation = false;
                    new_install.DeinstallDate = model.TimeStamp;
                    _context.Add(new_install);
                    await _context.SaveChangesAsync();
                    itemdeinstalled = null;
                }
                if (makingnew == true)
                {
                    itemdeinstalled = await _context.Installations.LastAsync();
                }

                if (itemdeinstalled.UniqueID.Contains("#") && itemdeinstalled.ProjectId.Equals(418))
                {
                    if (itemdeinstalled.SubProjectId != 233)
                    {
                        var arrival = await _context.Arrivals.Where(x => x.ItemTypeId.Equals(itemdeinstalled.ItemTypeId) && x.UniqueID.Equals(itemdeinstalled.UniqueID) && x.EndStamp == null).SingleOrDefaultAsync();
                        if (arrival != null)
                        {
                            arrival.EndStamp = model.TimeStamp;
                            arrival.LastEditedInDataBase = DateTime.Now;
                            _context.Update(arrival);
                        }
                    }
                }

                if (model.LogText != null)
                {
                    if (!model.LogText.Contains("#") && itemdeinstalled.UniqueID.Contains("#"))
                    {
                        if (model.LogText.ToString().Trim().Equals(""))
                        {
                            model.LogText = itemdeinstalled.UniqueID;
                        }
                        else
                        {
                            model.LogText = itemdeinstalled.UniqueID + ": " + model.LogText;
                        }

                    }
                }
                else
                {
                    model.LogText = itemdeinstalled.UniqueID;
                }

                DeInstall deinstall = new DeInstall
                {
                    SubProjectId = itemdeinstalled.SubProjectId,
                    InstallId = itemdeinstalled.Id,
                    EnteredIntoDataBase = DateTime.Now,
                    ProjectId = itemdeinstalled.ProjectId,
                    ItemTypeId = itemdeinstalled.ItemTypeId,
                    Amount = model.Amount,
                    TimeStamp = model.TimeStamp,
                    DeInstall_Text = model.LogText,
                    Latitude = Convert.ToDouble(itemdeinstalled.Latitude),
                    Longitude = Convert.ToDouble(itemdeinstalled.Longitude),
                    DoneBy = user.full_name()

                };
                _context.Add(deinstall);
                var prev_arrival = await _context.Arrivals.OrderBy(x => x.Id).LastOrDefaultAsync(x => x.UniqueID.Equals(itemdeinstalled.UniqueID) && x.ItemTypeId.Equals(itemdeinstalled.ItemTypeId) && x.Amount.Equals(itemdeinstalled.Amount) && x.EndStamp == null);
                if (prev_arrival != null)
                {
                    prev_arrival.EndStamp = model.TimeStamp;
                    _context.Update(prev_arrival);
                }
                await _context.SaveChangesAsync();
                var itemadded = await _context.Deinstallations.LastAsync();

                var directory = _env.WebRootPath + "\\AHAK\\DeInstallPhotos\\" + itemadded.Id.ToString() + "\\";
                if (!Directory.Exists(directory) && files != null)
                {
                    Directory.CreateDirectory(directory);
                }
                foreach (IFormFile photo in files)
                {

                    var path = Path.Combine(directory, photo.FileName);
                    if (!path.Contains(".pdf"))
                    {
                        PhotoFileDeinstalled deinstallphoto = new PhotoFileDeinstalled { Path = path, TimeStamp = model.TimeStamp, DeinstallId = itemadded.Id, Latitude = Convert.ToDouble(itemdeinstalled.Latitude), Longitude = Convert.ToDouble(itemdeinstalled.Longitude) };
                        _context.Add(deinstallphoto);
                    }
                    else
                    {
                        PhotoFileDeinstalled deinstallphoto = new PhotoFileDeinstalled { Path = path.Replace(".pdf", ".png"), TimeStamp = model.TimeStamp, DeinstallId = itemadded.Id, Latitude = Convert.ToDouble(itemdeinstalled.Latitude), Longitude = Convert.ToDouble(itemdeinstalled.Longitude) };
                        _context.Add(deinstallphoto);
                    }
                    var stream = new FileStream(path, FileMode.Create);
                    await photo.CopyToAsync(stream);
                    stream.Close();
                    if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                    {
                        PhotoExtensions.SaveAndCompressJpeg(path, 80);
                    }
                    else if (path.Contains(".pdf"))
                    {
                        PhotoExtensions.ConvertPdfToPng(path);
                        System.IO.File.Delete(path);
                    }
                }
                CoordTrack2 deinstallCoords = new CoordTrack2 { ArrivalId = null, InstallId = itemdeinstalled.Id, MeasPointId = null, TypeCoord = "DeInstalled", TimeStamp = model.TimeStamp, Latitude = Convert.ToDouble(itemdeinstalled.Latitude), Longitude = Convert.ToDouble(itemdeinstalled.Longitude) };
                _context.Add(deinstallCoords);
                Log2 newLog = new Log2 { ItemTypeId = itemdeinstalled.ItemTypeId, Description = _SharedLocalizer.GetLocalizedHtmlString("Item DeInstalled.:") + " " + model.LogText + " : " + itemdeinstalled.Id.ToString(), TimeStamp = model.TimeStamp, PhotoPath = directory, TheUser = user.full_name() };
                _context.Add(newLog);
                await _context.SaveChangesAsync();
                //
                var itemtype = await _context.DecommissionableItems.Include(x => x.BoQItemType).Include(x => x.InstallItemType).Where(x => x.InstalledItemTypeId.Equals(itemdeinstalled.ItemTypeId)).SingleOrDefaultAsync();
                if (itemtype != null)
                {
                    Install inst = new Install
                    {
                        ToBePaid = true,
                        ItemTypeId = itemtype.BoQItemType.Id,
                        Latitude = Convert.ToDouble(itemdeinstalled.Latitude),
                        Longitude = Convert.ToDouble(itemdeinstalled.Longitude),
                        TimeStamp = model.TimeStamp,
                        InvoiceDate = DateTime.Now,
                        RentalStartDate = model.TimeStamp,
                        Install_Text = itemdeinstalled.Install_Text + ". Deinstalled with text: " + model.LogText,
                        isInstalled = true,
                        Amount = model.Amount,
                        ProjectId = itemdeinstalled.ProjectId,
                        SubProjectId = itemdeinstalled.SubProjectId,
                        EnteredIntoDataBase = DateTime.Now,
                        LastEditedInDataBase = DateTime.Now
                    };
                    _context.Installations.Add(inst);
                    await _context.SaveChangesAsync();
                    var lastinst = await _context.Installations.LastAsync();
                    var directory2 = _env.WebRootPath + "\\AHAK\\InstallPhotos\\" + lastinst.Id.ToString() + "\\";
                    if (!Directory.Exists(directory2))
                    {
                        Directory.CreateDirectory(directory2);
                    }
                    foreach (IFormFile photo in files)
                    {
                        var path = Path.Combine(directory2, photo.FileName);
                        var path2 = Path.Combine(directory2, photo.FileName.Split(".")[0] + "_edit." + photo.FileName.Split(".")[1]);
                        PhotoFileInstalled2 installphoto = new PhotoFileInstalled2 { Path = path, TimeStamp = model.TimeStamp, InstallId = lastinst.Id, Latitude = Convert.ToDouble(itemdeinstalled.Latitude), Longitude = Convert.ToDouble(itemdeinstalled.Longitude) };
                        _context.Add(installphoto);
                        var stream = new FileStream(path, FileMode.Create);
                        await photo.CopyToAsync(stream);
                        stream.Close();
                        if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                        {
                            PhotoExtensions.SaveAndCompressJpeg(path, 75);
                        }
                    }
                    CoordTrack2 installCoords = new CoordTrack2 { InstallId = lastinst.Id, MobilizeId = null, MeasPointId = null, TypeCoord = "Installed", TimeStamp = model.TimeStamp, Latitude = itemdeinstalled.Latitude, Longitude = itemdeinstalled.Longitude };
                    _context.Add(installCoords);
                    newLog = new Log2 { ItemTypeId = lastinst.ItemTypeId, Description = _SharedLocalizer.GetLocalizedHtmlString("Item Installed.:") + " " + lastinst.Install_Text + " : " + lastinst.Id.ToString(), TimeStamp = model.TimeStamp, PhotoPath = directory2, TheUser = user.full_name() };
                    _context.Add(newLog);

                }
            }
            await _context.SaveChangesAsync();


            return RedirectToAction("Installations", "TrackItems");
        }
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<SummaryReport> PopulateSummaryReport(SummaryReport SR)
        {
            var project = await _context.Projects.Where(x => x.Id.Equals(SR.ProjectId)).Include(x => x.Division).SingleOrDefaultAsync();
            SR.Project = project;
            if (SR.SubProjectId != null)
            {
                SR.SubProject = await _context.SubProjects.SingleOrDefaultAsync(x => x.Id.Equals(SR.SubProjectId));

                SR.Mobilizations = await _context.Mobilisations
                        .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                        .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                        .Include(x => x.Project).ThenInclude(x => x.Division)
                        .Include(x => x.SubProject)
                        .Where(x => x.TimeStamp.Date.Equals(SR.Report_Date.Date) && x.ProjectId.Equals(SR.ProjectId) && x.SubProjectId.Equals(SR.SubProjectId))
                        .OrderBy(x => x.TimeStamp)
                        .ToListAsync();
                SR.Installations = await _context.Installations
                    .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                    .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => x.ProjectId.Equals(SR.ProjectId) && x.TimeStamp.Date.Equals(SR.Report_Date.Date) && x.SubProjectId.Equals(SR.SubProjectId))
                    .OrderBy(x => x.ItemType.Item_Type)
                    .ToListAsync();
                SR.Deinstallations = await _context.Deinstallations
                    .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                    .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Include(x => x.Install)
                    .Where(x => x.TimeStamp.Date.Equals(SR.Report_Date.Date) && x.ProjectId.Equals(SR.ProjectId) && x.SubProjectId.Equals(SR.SubProjectId))
                    .OrderBy(x => x.ItemType.Item_Type)
                    .ToListAsync();
                SR.Arrivals = await _context.Arrivals
                    .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                    .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => x.TimeStamp.Date.Equals(SR.Report_Date.Date) && x.ProjectId.Equals(SR.ProjectId) && x.SubProjectId.Equals(SR.SubProjectId))
                    .OrderBy(x => x.ItemType.Item_Type)
                    .ToListAsync();
                SR.Daily_Reports = await _context.Daily_Report_2s
                    .Include(x => x.Title)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => x.Report_Date.Date.Equals(SR.Report_Date.Date) && x.ProjectId.Equals(SR.ProjectId) && x.SubProjectId.Equals(SR.SubProjectId))
                    .OrderBy(x => x.Title.TheTitle)
                    .ToListAsync();
                SR.Maintenances = await _context.Maintenances
                .Include(x => x.Project).ThenInclude(x => x.Division)
                .Include(x => x.SubProject)
                .Include(x => x.MaintenanceEntries).ThenInclude(x => x.MaintenanceType)
                .Include(x => x.MaintenanceEntries).ThenInclude(x => x.MaintenanceSubType)
                .Where(x => x.TimeStamp.Date.Equals(SR.Report_Date.Date) && x.ProjectId.Equals(SR.ProjectId) && x.SubProjectId.Equals(SR.SubProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                SR.GeneratorChecks = await _context.GeneratorChecks
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => x.TimeStamp.Date.Equals(SR.Report_Date.Date) && x.ProjectId.Equals(SR.ProjectId) && x.SubProjectId.Equals(SR.SubProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                SR.WTPChecks = await _context.WTPChecks
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => x.TimeStamp.Date.Equals(SR.Report_Date.Date) && x.ProjectId.Equals(SR.ProjectId) && x.SubProjectId.Equals(SR.SubProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                SR.SensorsChecks = await _context.SensorsChecks.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.TimeStamp.Date.Equals(SR.Report_Date.Date) && x.ProjectId.Equals(SR.ProjectId) && x.SubProjectId.Equals(SR.SubProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                SR.Decommissions = await _context.Decommissions.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.TimeStamp.Date.Equals(SR.Report_Date.Date) && x.ProjectId.Equals(SR.ProjectId) && x.SubProjectId.Equals(SR.SubProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                SR.ConstructionSiteChecks = await _context.ConstructionSiteInspections.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.TimeStamp.Date.Equals(SR.Report_Date.Date) && x.ProjectId.Equals(SR.ProjectId) && x.SubProjectId.Equals(SR.SubProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                SR.SiteChecks = await _context.SiteChecks.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.TimeStamp.Date.Equals(SR.Report_Date.Date) && x.ProjectId.Equals(SR.ProjectId) && x.SubProjectId.Equals(SR.SubProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                SR.ThreeStepTests = await _context.ThreeStepTests.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.Report_Date.Date.Equals(SR.Report_Date.Date) && x.ProjectId.Equals(SR.ProjectId) && x.SubProjectId.Equals(SR.SubProjectId)).OrderByDescending(x => x.Report_Date).ToListAsync();
                SR.ClearPumpTests = await _context.ClearPumpTests.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.Report_Date.Date.Equals(SR.Report_Date.Date) && x.ProjectId.Equals(SR.ProjectId) && x.SubProjectId.Equals(SR.SubProjectId)).OrderByDescending(x => x.Report_Date).ToListAsync();
                SR.AlarmCalls = await _context.AlarmCalls.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.TimeStamp.Date.Equals(SR.Report_Date.Date) && x.ProjectId.Equals(SR.ProjectId) && x.SubProjectId.Equals(SR.SubProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
            }
            else
            {
                SR.Mobilizations = await _context.Mobilisations
                    .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                    .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => x.TimeStamp.Date.Equals(SR.Report_Date.Date) && x.ProjectId.Equals(SR.ProjectId))
                    .OrderBy(x => x.TimeStamp)
                    .ToListAsync();
                SR.Installations = await _context.Installations
                    .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                    .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => x.ProjectId.Equals(SR.ProjectId) && x.TimeStamp.Date.Equals(SR.Report_Date.Date))
                    .OrderBy(x => x.ItemType.Item_Type)
                    .ToListAsync();
                SR.Deinstallations = await _context.Deinstallations
                    .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                    .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Include(x => x.Install)
                    .Where(x => x.TimeStamp.Date.Equals(SR.Report_Date.Date) && x.ProjectId.Equals(SR.ProjectId))
                    .OrderBy(x => x.ItemType.Item_Type)
                    .ToListAsync();
                SR.Arrivals = await _context.Arrivals
                    .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                    .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => x.TimeStamp.Date.Equals(SR.Report_Date.Date) && x.ProjectId.Equals(SR.ProjectId))
                    .OrderBy(x => x.ItemType.Item_Type)
                    .ToListAsync();
                SR.Daily_Reports = await _context.Daily_Report_2s
                    .Include(x => x.Title)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => x.Report_Date.Date.Equals(SR.Report_Date.Date) && x.ProjectId.Equals(SR.ProjectId))
                    .OrderBy(x => x.Title.TheTitle)
                    .ToListAsync();
                SR.Maintenances = await _context.Maintenances
                .Include(x => x.Project).ThenInclude(x => x.Division)
                .Include(x => x.SubProject)
                .Include(x => x.MaintenanceEntries).ThenInclude(x => x.MaintenanceType)
                .Include(x => x.MaintenanceEntries).ThenInclude(x => x.MaintenanceSubType)
                .Where(x => x.TimeStamp.Date.Equals(SR.Report_Date.Date) && x.ProjectId.Equals(SR.ProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                SR.GeneratorChecks = await _context.GeneratorChecks
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => x.TimeStamp.Date.Equals(SR.Report_Date.Date) && x.ProjectId.Equals(SR.ProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                SR.WTPChecks = await _context.WTPChecks
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => x.TimeStamp.Date.Equals(SR.Report_Date.Date) && x.ProjectId.Equals(SR.ProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                SR.SensorsChecks = await _context.SensorsChecks.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.TimeStamp.Date.Equals(SR.Report_Date.Date) && x.ProjectId.Equals(SR.ProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                SR.Decommissions = await _context.Decommissions.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.TimeStamp.Date.Equals(SR.Report_Date.Date) && x.ProjectId.Equals(SR.ProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                SR.ConstructionSiteChecks = await _context.ConstructionSiteInspections.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.TimeStamp.Date.Equals(SR.Report_Date.Date) && x.ProjectId.Equals(SR.ProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                SR.SiteChecks = await _context.SiteChecks.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.TimeStamp.Date.Equals(SR.Report_Date.Date) && x.ProjectId.Equals(SR.ProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                SR.ThreeStepTests = await _context.ThreeStepTests.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.Report_Date.Date.Equals(SR.Report_Date.Date) && x.ProjectId.Equals(SR.ProjectId)).OrderByDescending(x => x.Report_Date).ToListAsync();
                SR.ClearPumpTests = await _context.ClearPumpTests.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.Report_Date.Date.Equals(SR.Report_Date.Date) && x.ProjectId.Equals(SR.ProjectId)).OrderByDescending(x => x.Report_Date).ToListAsync();
                SR.AlarmCalls = await _context.AlarmCalls.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.TimeStamp.Date.Equals(SR.Report_Date.Date) && x.ProjectId.Equals(SR.ProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
            }
            return SR;
        }

        [HttpGet]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> UpdateLocationAllItems()
        {
            var items = await _context.Installations.Where(x => (x.Location == null || x.Location.Equals("")) && x.Latitude > 0.001 && (x.ProjectId.Equals(40) || x.ProjectId.Equals(48) || x.ProjectId.Equals(418))).ToListAsync();
            foreach (var item in items)
            {
                item.Location = FindNearestKM(Convert.ToInt32(item.ProjectId), item.Latitude, item.Longitude);
                _context.Installations.Update(item);
            }
            await _context.SaveChangesAsync();
            return RedirectToAction("MainMenu");
        }
        [HttpGet]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> UpdateLocationTrencher()
        {
            var items = await _context.Installations.Where(x => (x.Location == null || x.Location.Equals("")) && x.Latitude > 0.001 && x.ProjectId.Equals(418) && x.ItemTypeId.Equals(1824)).ToListAsync();
            foreach (var item in items)
            {
                item.Location = FindNearestKM(Convert.ToInt32(item.ProjectId), item.Latitude, item.Longitude);
                _context.Installations.Update(item);
            }
            await _context.SaveChangesAsync();
            return RedirectToAction("MainMenu");
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager")]
        public async Task<IActionResult> ApproveDailySummary(SummaryReport SR)
        {
            if (ModelState.IsValid)
            {
                if (SR.signatureHJ != "" && SR.signatureHJ != null)
                {
                    SR.IsSignedByHJ = true;
                }
                else
                {
                    SR.IsSignedByHJ = false;
                }
                SR.IsSignedByClient = false;
                SR.SentToClient = false;
                SR = await PopulateSummaryReport(SR);
                SR.TheDailyText = SR.TheDailyText.Replace(Environment.NewLine, "<br />").Replace("\r\n", "<br />");
                SR.People = SR.People.Replace(Environment.NewLine, "<br />").Replace("\r\n", "<br />");
                if (SR.ShowDailyReports == true)
                {
                    foreach (Daily_Report_2 DR in SR.Daily_Reports)
                    {
                        string path = _env.WebRootPath + "/AHAK/DailyReports/" + DR.Id.ToString() + "/";
                        List<string> pictures = new List<string>();

                        if (Directory.Exists(path))
                        {
                            var folder = Directory.EnumerateFiles(path)
                                         .Select(fn => Path.GetFileName(fn));

                            foreach (string drfile in folder)
                            {
                                if (drfile.Contains("_edit"))
                                {
                                    pictures.Add(drfile);
                                }
                                else
                                {
                                    string[] fileparts = drfile.Split(".");
                                    if (!folder.Contains(fileparts[0] + "_edit." + fileparts[1]))
                                    {
                                        pictures.Add(drfile);
                                    }
                                }
                            }
                        }

                        DR.pictures = pictures;

                    }
                }
                ViewAsPdf pdf = new ViewAsPdf("Reports/_DailySummary", SR)
                {
                    FileName = "DailySummary_" + SR.Project.Abbreviation + "_" + SR.Report_Date.ToString("yyyy-MM-dd") + ".pdf",
                };
                byte[] pdfData = await pdf.BuildFile(ControllerContext);
                string fullPath = _env.WebRootPath + "\\AHAK\\DailySummaries\\";

                if (!Directory.Exists(fullPath))
                {
                    Directory.CreateDirectory(fullPath);
                }
                using (var fileStream = new FileStream(fullPath + pdf.FileName, FileMode.Create, FileAccess.Write))
                {
                    await fileStream.WriteAsync(pdfData, 0, pdfData.Length);
                }
                var bytes = System.IO.File.ReadAllBytes(fullPath + pdf.FileName);
                var file = Convert.ToBase64String(bytes);
                string footerstringHTML = "<br />Hölscher Jensen A/S<br />Fabriksparken 37<br />2600 Glostrup<br />Denmark";
                string footerstringPLAIN = "\r\n\r\nHölscher Jensen A/S \r\nFabriksparken 37\r\n2600 Glostrup\r\nDenmark";
                await _emailSender.SendEmailAsync2(SR.ClientEmail, SR.Project.Client,
                    "<strong>Dear Sir/Madam</strong><br />Attached you will find the daily summary report."
                    , footerstringHTML, footerstringPLAIN, pdf.FileName, file);
                SR.SentToClient = true;
                _context.Add(SR);
                await _context.SaveChangesAsync();

                return RedirectToAction("DailyReports");
            }
            else
            {
                return RedirectToAction("DailyReports");
            }

        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember,ExternalDriller")]
        public async Task<IActionResult> Daily_Report()
        {
            var theuser = await _userManager.GetUserAsync(User);

            if (theuser.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            ViewData["Users"] = await GetUserList();
            ViewData["ProjectId"] = await GetProjectList();
            ViewData["TitleId"] = new SelectList(_context.Titles.Include(x => x.Project).Where(x => x.Project.DivisionId.Equals(theuser.DivisionId)), "Id", "TheTitle");
            ViewBag.Machinery = new MultiSelectList(_context.Machinery.Where(x => x.DivisionId.Equals(theuser.DivisionId)).Select(m => new { m.Id, Name = m.MachineryName }).ToList(), "Id", "Name");
            //if (User.IsInRole("Admin"))
            //{
            //    var lastreport = await _context.Daily_Report_2s.Where(x => x.Machinery != "None" && x.Machinery != null && x.Amount > 1 && x.DoneBy.Equals(theuser.full_name())).OrderByDescending(x => x.Report_Date).ToListAsync();
            //    if (lastreport != null)
            //    {
            //        if (lastreport.Count > 0)
            //        {
            //            Daily_Report_2 DR = new Daily_Report_2();
            //            //DR.Machinery = lastreport.First().Machinery;
            //            DR.Amount = 1;
            //            DR.TitleId = lastreport.First().TitleId;
            //            DR.ProjectId = lastreport.First().ProjectId;
            //            ViewData["ProjectId"] = await GetProjectList();
            //            ViewBag.Machinery = new MultiSelectList(_context.Machinery.Select(m => new { m.Id, Name = m.MachineryName }).ToList(), "Id", "Name");
            //            ViewData["TitleId"] = new SelectList(_context.Titles.Include(x => x.Project).Where(x => x.Project.DivisionId.Equals(theuser.DivisionId) && x.ProjectId.Equals(DR.ProjectId)), "Id", "TheTitle");
            //            return View(DR);
            //        }
            //    }

            //    ViewBag.Machinery = new MultiSelectList(_context.Machinery.OrderBy(x => x.MachineryName).Select(m => new { m.Id, Name = m.MachineryName }).ToList(), "Id", "Name");
            //    ViewData["ProjectId"] = await GetProjectList();
            //    ViewData["TitleId"] = new SelectList(_context.Titles.Include(x => x.Project).Where(x => x.Project.DivisionId.Equals(theuser.DivisionId)), "Id", "TheTitle");
            //    return View();
            //}
            //else
            //{
            //    var lastreport = await _context.Daily_Report_2s.Where(x => !x.Machinery.Equals("None") && x.DoneBy.Equals(theuser.full_name())).OrderByDescending(x => x.Report_Date).ToListAsync();
            //    if (lastreport != null)
            //    {
            //        if (lastreport.Count > 0)
            //        {
            //            Daily_Report_2 DR = new Daily_Report_2();
            //            //DR.Machinery = lastreport.First().Machinery;
            //            DR.Amount = 1;
            //            DR.TitleId = lastreport.First().TitleId;
            //            DR.ProjectId = lastreport.First().ProjectId;
            //            ViewBag.Machinery = new MultiSelectList(_context.Machinery.Select(m => new { m.Id, Name = m.MachineryName }).ToList(), "Id", "Name");
            //            ViewData["ProjectId"] = await GetProjectList();
            //            ViewData["TitleId"] = new SelectList(_context.Titles.Include(x => x.Project).Where(x => x.Project.DivisionId.Equals(theuser.DivisionId) && x.ProjectId.Equals(DR.ProjectId)), "Id", "TheTitle");
            //            return View(DR);
            //        }
            //    }
            //    ViewBag.Machinery = new MultiSelectList(_context.Machinery.Select(m => new { m.Id, Name = m.MachineryName }).ToList(), "Id", "Name");
            //    ViewData["ProjectId"] = await GetProjectList();
            //    ViewData["TitleId"] = new SelectList(_context.Titles.Include(x => x.Project).Where(x => x.Project.DivisionId.Equals(theuser.DivisionId)), "Id", "TheTitle");
            //    return View();
            //}
            return View();
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,Supervisor")]
        public async Task<IActionResult> GenerateUserSummary()
        {
            var theuser = await _userManager.GetUserAsync(User);
            if (theuser.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            /*var users = await (from user in _context.Users
                               join userRole in _context.UserRoles
                               on user.Id equals userRole.UserId
                               join role in _context.Roles on userRole.RoleId
                               equals role.Id
                               where userRole.UserId == user.Id && !role.Name.Equals("Guest") && user.DivisionId.Equals(theuser.DivisionId)
                               select new
                               {
                                   FullName = user.full_name(),
                                   NameEmail = user.full_name() + " : " + user.Email
                               }).OrderBy(x => x.FullName).GroupBy(x => x.NameEmail).Select(grp => grp.First()).ToListAsync();
            ViewData["UserId"] = new SelectList(users, "NameEmail", "NameEmail");*/
            var users = await (from user in _context.Users
                               join userRole in _context.UserRoles on user.Id equals userRole.UserId
                               join role in _context.Roles on userRole.RoleId equals role.Id
                               where user.DivisionId == theuser.DivisionId && role.Name != "Guest"
                               select new
                               {
                                   FirstName = user.FirstName,
                                   LastName = user.LastName,
                                   Email = user.Email
                               })
                   .Distinct() // avoids duplicate rows
                   .ToListAsync();

            // now do the formatting in memory
            var userList = users
                .Select(u => new
                {
                    FullName = u.FirstName + " " + u.LastName,
                    NameEmail = u.FirstName + " " + u.LastName + " : " + u.Email
                })
                .OrderBy(x => x.FullName)
                .GroupBy(x => x.NameEmail)
                .Select(grp => grp.First())
                .ToList();

            ViewData["UserId"] = new SelectList(userList, "NameEmail", "NameEmail");

            UserSummaryVM doc = new UserSummaryVM();
            return View("Reports/UserSummary", doc);
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,Supervisor")]
        public async Task<IActionResult> GenerateUserSummary(DateTime? startdate, DateTime? enddate, string userfullname)
        {
            var theuser = await _userManager.GetUserAsync(User);
            if (theuser.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            var users = await (from user in _context.Users
                               join userRole in _context.UserRoles
                               on user.Id equals userRole.UserId
                               join role in _context.Roles on userRole.RoleId
                               equals role.Id
                               where userRole.UserId == user.Id && !role.Name.Equals("Guest") && user.DivisionId.Equals(theuser.DivisionId)
                               select new
                               {
                                   FullName = user.full_name(),
                                   NameEmail = user.full_name() + " : " + user.Email
                               }).OrderBy(x => x.FullName).GroupBy(x => x.NameEmail).Select(grp => grp.First()).ToListAsync();
            ViewData["UserId"] = new SelectList(users, "NameEmail", "NameEmail");

            if (startdate != null && enddate != null && userfullname != null)
            {
                DateTime StartDate = Convert.ToDateTime(startdate);
                DateTime EndDate = Convert.ToDateTime(enddate);
                var username = userfullname.Split(":")[0].Trim();
                var useremail = userfullname.Split(":")[1].Trim();
                var user = await _context.Users.Where(x => x.full_name() == username && x.Email == useremail).SingleOrDefaultAsync();
                UserSummaryVM doc = new UserSummaryVM(user, StartDate, EndDate);
                doc.Daily_Reports = await _context.Daily_Report_2s
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Where(x => x.Report_Date.Date >= StartDate.Date && x.Report_Date.Date <= EndDate.Date && x.DoneBy.Equals(username) && x.Project.DivisionId.Equals(user.DivisionId))
                    .OrderByDescending(x => x.Report_Date)
                    .ToListAsync();
                doc.GeneratorChecks = await _context.GeneratorChecks.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.TimeStamp.Date >= StartDate.Date && x.TimeStamp.Date <= EndDate.Date && x.DoneBy.Equals(username)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                doc.WTPChecks = await _context.WTPChecks.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.TimeStamp.Date >= StartDate.Date && x.TimeStamp.Date <= EndDate.Date && x.DoneBy.Equals(username)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                doc.SensorsChecks = await _context.SensorsChecks.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.TimeStamp.Date >= StartDate.Date && x.TimeStamp.Date <= EndDate.Date && x.DoneBy.Equals(username)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                doc.Decommissions = await _context.Decommissions.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.TimeStamp.Date >= StartDate.Date && x.TimeStamp.Date <= EndDate.Date && x.DoneBy.Equals(username)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                doc.ConstructionSiteChecks = await _context.ConstructionSiteInspections.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.TimeStamp.Date >= StartDate.Date && x.TimeStamp.Date <= EndDate.Date && x.DoneBy.Equals(username)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                doc.SiteChecks = await _context.SiteChecks.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.TimeStamp.Date >= StartDate.Date && x.TimeStamp.Date <= EndDate.Date && x.DoneBy.Equals(username)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                doc.ThreeStepTests = await _context.ThreeStepTests.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.Report_Date.Date >= StartDate.Date && x.Report_Date.Date <= EndDate.Date && x.DoneBy.Equals(username)).OrderByDescending(x => x.Report_Date).ToListAsync();
                doc.ClearPumpTests = await _context.ClearPumpTests.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.Report_Date.Date >= StartDate.Date && x.Report_Date.Date <= EndDate.Date && x.DoneBy.Equals(username)).OrderByDescending(x => x.Report_Date).ToListAsync();
                doc.Logs = await _context.Log2s.Include(x => x.ItemType).Where(x => x.TheUser.Equals(username) && x.TimeStamp.Date >= StartDate && x.TimeStamp.Date <= EndDate).OrderByDescending(x => x.TimeStamp).ToListAsync();
                string thetext = "";
                string logtext = "";
                foreach (Daily_Report_2 dr in doc.Daily_Reports)
                {
                    thetext += dr.Project.Name + ": " + dr.Report_Date.ToString() + " : " + dr.DoneBy + ": " + dr.Work_Performed + Environment.NewLine + Environment.NewLine;

                }
                foreach (Log2 log in doc.Logs)
                {
                    if (log.ItemTypeId != null)
                    {
                        logtext += log.TimeStamp.ToString() + " : " + log.ItemType.Item_Type + " : " + log.Description + Environment.NewLine + Environment.NewLine;
                    }
                    else
                    {
                        logtext += log.TimeStamp.ToString() + " : " + log.Description + Environment.NewLine + Environment.NewLine;
                    }
                }
                doc.TheDailyText = thetext;
                doc.LogText = logtext;
                return View("Reports/UserSummary", doc);
            }
            else
            {
                UserSummaryVM doc = new UserSummaryVM();
                return View("Reports/UserSummary", doc);
            }
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> GenerateReportSummary(DateTime thedate, int ProjectId, int? SubProjectId)
        {
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            SummaryReport doc = new SummaryReport();
            DateTime StartDate = thedate.Date;
            DateTime EndDate = thedate.Date;
            doc.Report_Date = thedate;
            doc.SubProjectId = SubProjectId;
            doc.ProjectId = ProjectId;
            var project = await _context.Projects.Where(x => x.Id.Equals(ProjectId)).Include(x => x.Division).SingleOrDefaultAsync();
            doc.Project = project;
            if (doc.SubProjectId == null)
            {
                doc.Mobilizations = await _context.Mobilisations
                    .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => x.TimeStamp.Date.Equals(thedate.Date) && x.ProjectId.Equals(ProjectId))
                    .OrderBy(x => x.TimeStamp)
                    .ToListAsync();

                doc.Installations = await _context.Installations
                    .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                    .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => x.ProjectId.Equals(ProjectId) && x.TimeStamp.Date.Equals(thedate.Date))
                    .OrderBy(x => x.ItemType.Item_Type)
                    .ToListAsync();
                doc.Deinstallations = await _context.Deinstallations
                    .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                    .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Include(x => x.Install)
                    .Where(x => x.TimeStamp.Date.Equals(thedate.Date) && x.ProjectId.Equals(ProjectId))
                    .OrderBy(x => x.ItemType.Item_Type)
                    .ToListAsync();
                doc.Arrivals = await _context.Arrivals
                    .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                    .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => x.TimeStamp.Date.Equals(thedate.Date) && x.ProjectId.Equals(ProjectId))
                    .OrderBy(x => x.ItemType.Item_Type)
                    .ToListAsync();
                doc.Daily_Reports = await _context.Daily_Report_2s
                    .Include(x => x.Title)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => x.Report_Date.Date.Equals(thedate.Date) && x.ProjectId.Equals(ProjectId))
                    .OrderBy(x => x.Title.TheTitle)
                    .ToListAsync();
                doc.Maintenances = await _context.Maintenances
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Include(x => x.MaintenanceEntries).ThenInclude(x => x.MaintenanceType)
                    .Include(x => x.MaintenanceEntries).ThenInclude(x => x.MaintenanceSubType)
                    .Where(x => x.TimeStamp.Date >= StartDate.Date && x.TimeStamp.Date <= EndDate.Date && x.ProjectId.Equals(ProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                doc.GeneratorChecks = await _context.GeneratorChecks.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.TimeStamp.Date >= StartDate.Date && x.TimeStamp.Date <= EndDate.Date && x.ProjectId.Equals(ProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                doc.WTPChecks = await _context.WTPChecks.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.TimeStamp.Date >= StartDate.Date && x.TimeStamp.Date <= EndDate.Date && x.ProjectId.Equals(ProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                doc.SensorsChecks = await _context.SensorsChecks.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.TimeStamp.Date >= StartDate.Date && x.TimeStamp.Date <= EndDate.Date && x.ProjectId.Equals(ProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                doc.Decommissions = await _context.Decommissions.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.TimeStamp.Date >= StartDate.Date && x.TimeStamp.Date <= EndDate.Date && x.ProjectId.Equals(ProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                doc.ConstructionSiteChecks = await _context.ConstructionSiteInspections.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.TimeStamp.Date >= StartDate.Date && x.TimeStamp.Date <= EndDate.Date && x.ProjectId.Equals(ProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                doc.SiteChecks = await _context.SiteChecks.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.TimeStamp.Date >= StartDate.Date && x.TimeStamp.Date <= EndDate.Date && x.ProjectId.Equals(ProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                doc.ThreeStepTests = await _context.ThreeStepTests.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.Report_Date.Date >= StartDate.Date && x.Report_Date.Date <= EndDate.Date && x.ProjectId.Equals(ProjectId)).OrderByDescending(x => x.Report_Date).ToListAsync();
                doc.ClearPumpTests = await _context.ClearPumpTests.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.Report_Date.Date >= StartDate.Date && x.Report_Date.Date <= EndDate.Date && x.ProjectId.Equals(ProjectId)).OrderByDescending(x => x.Report_Date).ToListAsync();
                doc.AlarmCalls = await _context.AlarmCalls.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.TimeStamp.Date >= StartDate.Date && x.TimeStamp.Date <= EndDate.Date && x.ProjectId.Equals(ProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
            }
            else
            {
                doc.SubProject = await _context.SubProjects.SingleOrDefaultAsync(x => x.Id.Equals(SubProjectId));
                doc.Mobilizations = await _context.Mobilisations
                    .Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => x.TimeStamp.Date.Equals(thedate.Date) && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId))
                    .OrderBy(x => x.TimeStamp)
                    .ToListAsync();

                doc.Installations = await _context.Installations
                    .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                    .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId) && x.TimeStamp.Date.Equals(thedate.Date))
                    .OrderBy(x => x.ItemType.Item_Type)
                    .ToListAsync();
                doc.Deinstallations = await _context.Deinstallations
                    .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                    .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Include(x => x.Install)
                    .Where(x => x.TimeStamp.Date.Equals(thedate.Date) && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId))
                    .OrderBy(x => x.ItemType.Item_Type)
                    .ToListAsync();
                doc.Arrivals = await _context.Arrivals
                    .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                    .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => x.TimeStamp.Date.Equals(thedate.Date) && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId))
                    .OrderBy(x => x.ItemType.Item_Type)
                    .ToListAsync();
                doc.Daily_Reports = await _context.Daily_Report_2s
                    .Include(x => x.Title)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => x.Report_Date.Date.Equals(thedate.Date) && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId))
                    .OrderBy(x => x.Title.TheTitle)
                    .ToListAsync();
                doc.Maintenances = await _context.Maintenances
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Include(x => x.MaintenanceEntries).ThenInclude(x => x.MaintenanceType)
                    .Include(x => x.MaintenanceEntries).ThenInclude(x => x.MaintenanceSubType)
                    .Where(x => x.TimeStamp.Date >= StartDate.Date && x.TimeStamp.Date <= EndDate.Date && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                doc.GeneratorChecks = await _context.GeneratorChecks.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.TimeStamp.Date >= StartDate.Date && x.TimeStamp.Date <= EndDate.Date && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                doc.WTPChecks = await _context.WTPChecks.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.TimeStamp.Date >= StartDate.Date && x.TimeStamp.Date <= EndDate.Date && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                doc.SensorsChecks = await _context.SensorsChecks.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.TimeStamp.Date >= StartDate.Date && x.TimeStamp.Date <= EndDate.Date && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                doc.Decommissions = await _context.Decommissions.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.TimeStamp.Date >= StartDate.Date && x.TimeStamp.Date <= EndDate.Date && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                doc.ConstructionSiteChecks = await _context.ConstructionSiteInspections.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.TimeStamp.Date >= StartDate.Date && x.TimeStamp.Date <= EndDate.Date && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                doc.SiteChecks = await _context.SiteChecks.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.TimeStamp.Date >= StartDate.Date && x.TimeStamp.Date <= EndDate.Date && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                doc.ThreeStepTests = await _context.ThreeStepTests.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.Report_Date.Date >= StartDate.Date && x.Report_Date.Date <= EndDate.Date && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId)).OrderByDescending(x => x.Report_Date).ToListAsync();
                doc.ClearPumpTests = await _context.ClearPumpTests.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.Report_Date.Date >= StartDate.Date && x.Report_Date.Date <= EndDate.Date && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId)).OrderByDescending(x => x.Report_Date).ToListAsync();
                doc.AlarmCalls = await _context.AlarmCalls.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.TimeStamp.Date >= StartDate.Date && x.TimeStamp.Date <= EndDate.Date && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                doc.ThreeStepTests = await _context.ThreeStepTests.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.Report_Date.Date >= StartDate.Date && x.Report_Date.Date <= EndDate.Date && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId)).OrderByDescending(x => x.Report_Date).ToListAsync();
                doc.ClearPumpTests = await _context.ClearPumpTests.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.Report_Date.Date >= StartDate.Date && x.Report_Date.Date <= EndDate.Date && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId)).OrderByDescending(x => x.Report_Date).ToListAsync();
                doc.AlarmCalls = await _context.AlarmCalls.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.TimeStamp.Date >= StartDate.Date && x.TimeStamp.Date <= EndDate.Date && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
            }

            string thetext = "";
            string thepeople = "";
            string machinery = "";
            int counter = 0;
            foreach (Daily_Report_2 dr in doc.Daily_Reports)
            {

                if (!thepeople.Contains(dr.DoneBy))
                {
                    thepeople += dr.DoneBy + Environment.NewLine;
                }
                //if (dr.OtherPeopleIDs != null)
                //{
                //    foreach (var user2 in dr.OtherPeople.Split(","))
                //    {
                //        if (!thepeople.Contains(user2))
                //        {
                //            thepeople += user2.Trim() + Environment.NewLine;
                //        }
                //    }
                //}


                if (!string.IsNullOrEmpty(dr.OtherPeopleIDs)) // Check if OtherPeopleIDs is null or empty
                {
                    foreach (var user2 in dr.OtherPeople?.Split(",") ?? Array.Empty<string>()) // Safe null handling
                    {
                        if (!thepeople.Contains(user2))
                        {
                            thepeople += user2.Trim() + Environment.NewLine;
                        }
                    }
                }

                if (dr.SubProjectId != null)
                {
                    thetext += dr.DoneBy + " on: " + dr.SubProject.Name + " : " + dr.Work_Performed + Environment.NewLine + Environment.NewLine;
                }
                else
                {
                    thetext += dr.DoneBy + ": " + dr.Work_Performed + Environment.NewLine + Environment.NewLine;
                }

                if (dr.Machinery != null)
                {
                    machinery = "";
                    counter = 0;
                    var machineries = dr.Machinery.Split(",");
                    foreach (string s in machineries)
                    {
                        if (s != "" && s != " ")
                        {
                            if (counter != 0)
                            {
                                machinery += "," + s;
                            }
                            else
                            {
                                machinery += s;
                            }
                        }
                        counter += 1;
                    }

                    dr.Machinery = machinery;
                }
            }
            doc.TheDailyText = thetext;
            doc.People = thepeople;
            return View("Reports/SummaryReport", doc);
        }
        public class ZipItem
        {
            public string Name { get; set; }
            public Stream Content { get; set; }
            public ZipItem(string name, Stream content)
            {
                this.Name = name;
                this.Content = content;
            }
            public ZipItem(string name, string contentStr, Encoding encoding)
            {
                // convert string to stream
                var byteArray = encoding.GetBytes(contentStr);
                var memoryStream = new MemoryStream(byteArray);
                this.Name = name;
                this.Content = memoryStream;
            }
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager")]
        public async Task<IActionResult> GetZipFile(int? id)
        {
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            if (id != null)
            {
                string path = _env.WebRootPath + "/AHAK/DailyReports/" + id.ToString() + "/";

                var botsFolderPath = Path.Combine(_env.WebRootPath, "AHAK", "DailyReports", id.ToString());
                var botFilePaths = Directory.GetFiles(botsFolderPath);
                var zipFileMemoryStream = new MemoryStream();
                using (ZipArchive archive = new ZipArchive(zipFileMemoryStream, ZipArchiveMode.Update, leaveOpen: true))
                {
                    foreach (var botFilePath in botFilePaths)
                    {
                        var botFileName = Path.GetFileName(botFilePath);
                        var entry = archive.CreateEntry(botFileName);
                        using (var entryStream = entry.Open())
                        using (var fileStream = System.IO.File.OpenRead(botFilePath))
                        {
                            await fileStream.CopyToAsync(entryStream);
                        }
                    }
                }

                zipFileMemoryStream.Seek(0, SeekOrigin.Begin);
                return File(zipFileMemoryStream, "application/octet-stream", "Bots.zip");
            }
            else { return NotFound(); }

        }

        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager")]
        public async Task<IActionResult> GetInvoiceZipFile(int? ProjectId)
        {
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            if (ProjectId != null)
            {
                var project = await _context.Projects.Include(x => x.SubProjects).SingleOrDefaultAsync(x => x.Id.Equals(ProjectId));
                var botsFolderPath = Path.Combine(_env.WebRootPath, "TempFolder", project.Name);

                var botFileFolders = Directory.GetDirectories(botsFolderPath);
                var zipFileMemoryStream = new MemoryStream();
                using (ZipArchive archive = new ZipArchive(zipFileMemoryStream, ZipArchiveMode.Update, leaveOpen: true))
                {
                    foreach (var botFileFolder in botFileFolders)
                    {
                        var botFilePaths = Directory.GetFiles(botFileFolder);
                        foreach (var botFilePath in botFilePaths)
                        {
                            var botFileName = Path.GetFileName(botFilePath);
                            var entry = archive.CreateEntry(botFileFolder.Split("\\").Last() + "/" + botFileName);
                            using (var entryStream = entry.Open())
                            using (var fileStream = System.IO.File.OpenRead(botFilePath))
                            {
                                await fileStream.CopyToAsync(entryStream);
                            }
                        }
                    }

                }

                zipFileMemoryStream.Seek(0, SeekOrigin.Begin);
                return File(zipFileMemoryStream, "application/octet-stream", project.ProjectNr.ToString() + ".zip");
            }
            else { return NotFound(); }

        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager")]
        public async Task<IActionResult> GetZipFileMaintenance(int? id)
        {
            if (id != null)
            {
                var user = await _userManager.GetUserAsync(User);
                if (user.Active == false)
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
                }
                string path = _env.WebRootPath + "/AHAK/MaintenancePhotos/" + id.ToString() + "/";

                var botsFolderPath = Path.Combine(_env.WebRootPath, "AHAK", "MaintenancePhotos", id.ToString());
                var botFilePaths = Directory.GetFiles(botsFolderPath);
                var zipFileMemoryStream = new MemoryStream();
                using (ZipArchive archive = new ZipArchive(zipFileMemoryStream, ZipArchiveMode.Update, leaveOpen: true))
                {
                    foreach (var botFilePath in botFilePaths)
                    {
                        var botFileName = Path.GetFileName(botFilePath);
                        var entry = archive.CreateEntry(botFileName);
                        using (var entryStream = entry.Open())
                        using (var fileStream = System.IO.File.OpenRead(botFilePath))
                        {
                            await fileStream.CopyToAsync(entryStream);
                        }
                    }
                }

                zipFileMemoryStream.Seek(0, SeekOrigin.Begin);
                return File(zipFileMemoryStream, "application/octet-stream", "Bots.zip");
            }
            else { return NotFound(); }

        }
        [Authorize(Roles = "Admin")]
        [HttpGet]
        public async Task<IActionResult> updatehasphotos()
        {
            var drs = await _context.Daily_Report_2s.Where(x => x.HasPhotos.Equals(false)).ToListAsync();
            var folderpath = _env.WebRootPath + "\\AHAK\\DailyReports\\";
            foreach (var item in drs)
            {
                var path = folderpath + item.Id.ToString() + "\\";
                if (Directory.Exists(path))
                {
                    var folder = Directory.EnumerateFiles(path)
                                             .Select(fn => Path.GetFileName(fn));
                    if (folder.Count() > 0)
                    {
                        item.HasPhotos = true;
                        _context.Update(item);
                    }
                }
            }
            await _context.SaveChangesAsync();
            return RedirectToAction("Index", "Home");
        }
        [Authorize(Roles = "Admin")]
        [HttpGet]
        public async Task<IActionResult> updatenothasphotos()
        {
            var drs = await _context.Daily_Report_2s.Where(x => x.HasPhotos.Equals(true)).ToListAsync();
            var folderpath = _env.WebRootPath + "\\AHAK\\DailyReports\\";
            foreach (var item in drs)
            {
                var path = folderpath + item.Id.ToString() + "\\";
                if (Directory.Exists(path))
                {
                    var folder = Directory.EnumerateFiles(path)
                                             .Select(fn => Path.GetFileName(fn));
                    if (folder.Count() < 1)
                    {
                        item.HasPhotos = false;
                        _context.Update(item);
                    }
                }
            }
            await _context.SaveChangesAsync();
            return RedirectToAction("Index", "Home");
        }
        [HttpPost]
        [RequestSizeLimit(900000000)]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember,ExternalDriller")]
        public async Task<IActionResult> Daily_Report(Daily_Report_2 model, IFormFile[] files)
        {
            try
            {
                var theuser = await _userManager.GetUserAsync(User);
                model.EnteredIntoDataBase = DateTime.Now;
                if (model.InvoiceDate.GetValueOrDefault() == null)
                {
                    model.InvoiceDate = DateTime.Now;
                }
                if (model.StandingTime.GetValueOrDefault() == null)
                {
                    model.StandingTime = new TimeSpan(0);
                }
                if (model.tobepaid.Equals(3))
                {
                    model.tobepaid = 1;
                }
                if (User.IsInRole("Admin"))
                {
                    ViewData["userId"] = new SelectList(_context.Users, "Id", "Email");
                }
                else
                {
                    ViewData["userId"] = new SelectList(_context.Users.Where(x => x.DivisionId.Equals(theuser.DivisionId)), "Id", "Email");
                }
                if (ModelState.IsValid)
                {
                    model.DoneBy = theuser.full_name();
                    if (model.Machinery != null && model.Machinery != "" && model.Machinery != "None")
                    {
                        model.Machinery = model.Machinery.TrimStart(',');
                        model.Machinery = model.Machinery.TrimEnd(',');
                        if (model.Machinery.Contains(","))
                        {
                            string[] machineries = model.Machinery.Split(",");
                            foreach (string machine in machineries.Distinct())
                            {
                                string machinery = machine.Replace(",", "").Trim();
                                if (machinery != "")
                                {
                                    var existingmachinery = await _context.Machinery.Where(x => x.MachineryName.Equals(machinery) && x.DivisionId.Equals(theuser.DivisionId)).FirstOrDefaultAsync();
                                    if (existingmachinery == null)
                                    {
                                        Machinery mc = new Machinery { MachineryName = machinery, DivisionId = theuser.DivisionId };
                                        _context.Add(mc);
                                    }
                                }
                            }
                        }
                        else
                        {
                            var existingmachinery = await _context.Machinery.Where(x => x.MachineryName.Equals(model.Machinery.Trim()) && x.DivisionId.Equals(theuser.DivisionId)).FirstOrDefaultAsync();
                            if (existingmachinery == null)
                            {
                                Machinery mc = new Machinery { MachineryName = model.Machinery.TrimStart(',').TrimEnd(',').Trim(), DivisionId = theuser.DivisionId };
                                _context.Add(mc);
                            }
                        }

                    }

                    if (files != null)
                    {
                        if (files.Count() > 0)
                        {
                            model.HasPhotos = true;
                        }
                    }
                    _context.Add(model);
                    await _context.SaveChangesAsync();
                    var item = await _context.Daily_Report_2s.Where(x => x.DoneBy.Equals(theuser.full_name())).OrderByDescending(x => x.Id).Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Include(x => x.Title).FirstAsync();
                    var folderpath = _env.WebRootPath + "\\AHAK\\DailyReports\\" + item.Id.ToString() + "\\";
                    if (!Directory.Exists(folderpath) && files.Count() > 0)
                    {
                        Directory.CreateDirectory(folderpath);
                    }
                    if (files != null)
                    {
                        foreach (var file in files)
                        {
                            if (file.Length > 0)
                            {
                                //Getting FileName
                                var fileName = ContentDispositionHeaderValue.Parse(file.ContentDisposition).FileName.Trim('"');
                                fileName = folderpath + $@"\{fileName}";

                                using (FileStream fs = System.IO.File.Create(fileName))
                                {
                                    await file.CopyToAsync(fs);
                                    fs.Flush();
                                }
                                if (fileName.ToLower().Contains(".jpg") || fileName.ToLower().Contains(".jpeg"))
                                {
                                    PhotoExtensions.SaveAndCompressJpeg(fileName, 80);
                                }
                            }
                        }
                        foreach (var file in files.Where(x => x.FileName.ToLower().Contains(".heic")))
                        {
                            PhotoExtensions.ConvertHEICtoJPG(_env.WebRootPath + "/AHAK/DailyReports/" + item.Id.ToString() + "/" + file.FileName);
                        }
                    }
                    var ongoingreports = await _context.Daily_Reports_Ongoing.Where(x => x.DoneBy.Equals(theuser.full_name())).ToListAsync();
                    foreach (var rep in ongoingreports)
                    {
                        _context.Daily_Reports_Ongoing.Remove(rep);
                    }
                    await _context.SaveChangesAsync();
                    if (model.StandingTime != TimeSpan.Zero)
                    {

                        //send email
                        string path = _env.WebRootPath + "/AHAK/DailyReports/" + item.Id.ToString() + "/";
                        List<string> pictures = new List<string>();
                        if (Directory.Exists(path))
                        {
                            var folder = Directory.EnumerateFiles(path)
                                             .Select(fn => Path.GetFileName(fn));

                            foreach (string filen in folder)
                            {
                                if (filen.Contains("_edit"))
                                {
                                    pictures.Add(filen);
                                }
                                else
                                {
                                    string[] fileparts = filen.Split(".");
                                    if (!folder.Contains(fileparts[0] + "_edit." + fileparts[1]))
                                    {
                                        pictures.Add(filen);
                                    }
                                }
                            }
                        }
                        item.pictures = pictures;
                        var pdf = new ViewAsPdf("Reports/_Daily_Report_2", item)
                        {
                            FileName = "Downtime_" + item.Project.Name + "_" + item.Report_Date.ToString("yyyy-MM-dd") + ".pdf",
                            PageSize = Rotativa.AspNetCore.Options.Size.A4
                        };
                        byte[] pdfData = await pdf.BuildFile(ControllerContext);
                        var file = Convert.ToBase64String(pdfData);
                        string footerstringHTML = "<br />Hölscher Jensen A/S<br />Fabriksparken 37<br />2600 Glostrup<br />Denmark";
                        string footerstringPLAIN = "\r\n\r\nHölscher Jensen A/S \r\nFabriksparken 37\r\n2600 Glostrup\r\nDenmark";
                        await _emailSender.SendEmailAsync2("ofw@hj-as.dk", "Downtime",
                            "<strong>Hej,</strong><br />Vedhaeftet finder du dagsseddel med indeholdt ventetid."
                            , footerstringHTML, footerstringPLAIN, pdf.FileName, file);
                        await _emailSender.SendEmailAsync2("jav@hj-as.dk", "Downtime",
                            "<strong>Hej,</strong><br />Vedhaeftet finder du dagsseddel med indeholdt ventetid."
                            , footerstringHTML, footerstringPLAIN, pdf.FileName, file);
                        await _emailSender.SendEmailAsync2("bin@hj-as.dk", "Downtime",
                            "<strong>Hej,</strong><br />Vedhaeftet finder du dagsseddel med indeholdt ventetid."
                            , footerstringHTML, footerstringPLAIN, pdf.FileName, file);
                        var otherusers = await _context.AlarmReportReceivers.Where(x => x.ProjectId.Equals(model.ProjectId)).ToListAsync();
                        foreach (var usertoreceive in otherusers)
                        {
                            var thereceiver = await _context.Users.SingleOrDefaultAsync(x => x.Id.Equals(usertoreceive.Id));
                            await _emailSender.SendEmailAsync2(thereceiver.Email, "Downtime",
                                    "<strong>Hej,</strong><br />Vedhaeftet finder du dagsseddel med indeholdt ventetid."
                                    , footerstringHTML, footerstringPLAIN, pdf.FileName, file);
                        }

                    }
                    
                    return RedirectToAction("MainMenu", "TrackItems");                   
                }
            }
            catch (Exception ex)
            {
                RedirectToAction("ErrorMessage", "Home", new { text = ex.Message });
            }
            
            return RedirectToAction("MainMenu", "TrackItems");
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager")]
        public async Task<IActionResult> ToolBox()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            ViewData["ProjectId"] = await GetProjectList();
            ToolBoxVM vm = new ToolBoxVM();
            vm.DoneBy = user.full_name();
            return View(vm);
        }
        [HttpGet]
        public JsonResult LoadToolBox(string doneby)
        {
            var toolbox = _context.ToolBoxes.Include(x => x.users).Where(x => x.DoneBy.Equals(doneby)).Last();
            return Json(toolbox);
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<bool> TempSaveToolBox(int ProjectId, string doneby, string report_dateIn, string Work_Tasks, string Safety_Aspects, string Dangerous_Work, string Comments, bool Work_Instructed, bool Safety_Instructed, bool Dangerous_work_Instructed, string names, string signatures)
        {
            DateTime report_date = Convert.ToDateTime(report_dateIn);
            var toolbox = await _context.ToolBoxes.LastAsync();
            string[] realnames = names.Split(",");
            string[] realsignatures = signatures.Split(",");
            if (toolbox.DoneBy.Equals(doneby) && toolbox.Report_Date.Equals(report_date) && toolbox.ProjectId.Equals(ProjectId))
            {
                //dont add new one, update old one by adding new people
                var tbusers = await _context.ToolBoxUsers.Where(x => x.ToolBoxId.Equals(toolbox.Id)).ToListAsync();
                for (int i = 0; i < realsignatures.Length; i++)
                {
                    if (realsignatures[i] != "")
                    {
                        if (tbusers.Where(x => x.name.Equals(realnames[i])).Count() < 1)
                        {
                            if (realnames[i] != "")
                            {
                                ToolBoxUser tbu_new = new ToolBoxUser { name = realnames[i], ToolBoxId = toolbox.Id, signature = realsignatures[i] };
                                _context.Add(tbu_new);
                                await _context.SaveChangesAsync();
                            }
                            else
                            {
                                ToolBoxUser tbu_new = new ToolBoxUser { name = "employee", ToolBoxId = toolbox.Id, signature = realsignatures[i] };
                                _context.Add(tbu_new);
                                await _context.SaveChangesAsync();
                            }
                        }
                    }
                }
            }
            else
            {
                toolbox = null;
                //make new toolbox
                ToolBox TB = new ToolBox
                {
                    ProjectId = ProjectId,
                    DoneBy = doneby,
                    Report_Date = report_date,
                    Work_Tasks = Work_Tasks,
                    Safety_Aspects = Safety_Aspects,
                    Dangerous_Work = Dangerous_Work,
                    Comments = Comments,
                    Work_Instructed = Work_Instructed,
                    Safety_Instructed = Safety_Instructed,
                    Dangerous_Work_Instructed = Dangerous_work_Instructed
                };
                _context.Add(TB);
                await _context.SaveChangesAsync();
                var lastadded = await _context.ToolBoxes.LastAsync();
                for (int i = 0; i < realnames.Length; i++)
                {
                    if (realnames[i] != "")
                    {
                        ToolBoxUser TBU = new ToolBoxUser();
                        TBU.name = realnames[i];
                        TBU.signature = realsignatures[i];
                        TBU.ToolBoxId = lastadded.Id;
                        _context.Add(TBU);
                    }
                    else
                    {
                        break;
                    }
                }
                await _context.SaveChangesAsync();
            }
            return true;
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> ToolBox(ToolBoxVM model, string Names, string Signatures)
        {
            if (ModelState.IsValid)
            {
                ToolBox TB = new ToolBox(model);
                _context.Add(TB);
                await _context.SaveChangesAsync();
                string[] names = Names.Split(",");
                string[] signatures = Signatures.Split(",");

                var ToolBox = await _context.ToolBoxes.LastAsync();
                for (int i = 0; i < names.Length; i++)
                {
                    if (names[i] != "" || signatures[i] != "")
                    {
                        if (names[i] == "")
                        {
                            ToolBoxUser TBU = new ToolBoxUser();
                            TBU.name = "employee";
                            TBU.signature = signatures[i];
                            TBU.ToolBoxId = ToolBox.Id;
                            _context.Add(TBU);
                        }
                        else
                        {
                            ToolBoxUser TBU = new ToolBoxUser();
                            TBU.name = names[i];
                            TBU.signature = signatures[i];
                            TBU.ToolBoxId = ToolBox.Id;
                            _context.Add(TBU);
                        }

                    }
                    else
                    {
                        break;
                    }
                }
                await _context.SaveChangesAsync();
                return View("MainMenu", "TrackItems");
            }
            else
            {
                return View("MainMenu", "TrackItems");
            }

        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> ToolBoxUsers()
        {
            var theusers = await _context.ToolBoxUsers.ToListAsync();
            return View(theusers);
        }
        [HttpGet]
        [Authorize(Roles = "Admin,Manager,DivisionAdmin")]
        public async Task<IActionResult> SiteReports()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            ViewData["ProjectId"] = await GetProjectList();
            ViewData["SubProjectId"] = new SelectList(_context.SubProjects.Include(x => x.Project).Where(x => x.Project.DivisionId.Equals(user.DivisionId)), "Id", "Name");
            return View("Reports/SiteReports");
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,Supervisor")]
        public async Task<IActionResult> DownloadSiteDocumentation(int ProjectId, int? SubProjectId, DateTime startdate, DateTime enddate,
            bool DailyReports, bool AlarmReports, bool MaintenanceReports, bool InspectionReports, bool GeneratorReports, bool WTPReports, bool SiteReports, bool SensorReports, bool Decommissions)
        {
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            SiteDocumentationVM model = new SiteDocumentationVM();
            var project = await _context.Projects.Include(x => x.Division).Where(x => x.Id.Equals(ProjectId)).SingleOrDefaultAsync();
            model.DivisionId = project.DivisionId;
            model.LogoPath = project.Division.LogoPath;
            model.Project = project;
            model.StartDate = startdate.Date;
            model.EndDate = enddate.Date;
            if (SubProjectId != null)
            {
                var subproject = await _context.SubProjects.Where(x => x.Id.Equals(SubProjectId)).SingleOrDefaultAsync();
                model.SubProject = subproject;
                if (DailyReports == true)
                {
                    model.DailyReports = await _context.Daily_Report_2s
                        .Include(x => x.Project)
                        .Include(x => x.SubProject)
                        .Include(x => x.Title)
                        .Where(x => x.Report_Date.Date >= startdate.Date && x.Report_Date.Date <= enddate.Date && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId))
                        .OrderBy(x => x.Report_Date).ToListAsync();
                }
                else
                {
                    model.DailyReports = new List<Daily_Report_2>();
                }
                if (Decommissions == true)
                {
                    model.Decommissions = await _context.Decommissions.Where(x => x.TimeStamp.Date >= startdate.Date && x.TimeStamp.Date <= enddate.Date && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId)).OrderBy(x => x.TimeStamp).ToListAsync();
                }
                else
                {
                    model.Decommissions = new List<Decommission>();
                }
                if (AlarmReports == true)
                {
                    model.AlarmCalls = await _context.AlarmCalls
                        .Include(x => x.Project).Include(x => x.SubProject).Include(x => x.pictures)
                        .Where(x => x.TimeStamp.Date >= startdate.Date && x.TimeStamp.Date <= enddate.Date && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId))
                        .OrderBy(x => x.TimeStamp).ToListAsync();
                }
                else
                {
                    model.AlarmCalls = new List<AlarmCall>();
                }
                if (InspectionReports == true)
                {
                    model.ConstructionSiteInspections = await _context.ConstructionSiteInspections
                        .Include(x => x.Project).Include(x => x.SubProject).Include(x => x.Photos)
                        .Where(x => x.TimeStamp.Date >= startdate.Date && x.TimeStamp.Date <= enddate.Date && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId))
                        .OrderBy(x => x.TimeStamp).ToListAsync();
                }
                else
                {
                    model.ConstructionSiteInspections = new List<ConstructionSiteInspection>();
                }
                if (Decommissions == true)
                {
                    model.Decommissions = await _context.Decommissions
                        .Include(x => x.Project).Include(x => x.SubProject).Include(x => x.Photos)
                        .Where(x => x.TimeStamp.Date >= startdate.Date && x.TimeStamp.Date <= enddate.Date && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId))
                        .OrderBy(x => x.TimeStamp).ToListAsync();
                }
                else
                {
                    model.ConstructionSiteInspections = new List<ConstructionSiteInspection>();
                }
                if (SiteReports == true)
                {
                    model.SitesChecks = await _context.SiteChecks
                    .Include(x => x.Project).Include(x => x.SubProject).Include(x => x.Photos)
                    .Where(x => x.TimeStamp.Date >= startdate.Date && x.TimeStamp.Date <= enddate.Date && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId))
                    .OrderBy(x => x.TimeStamp).ToListAsync();
                }
                else
                {
                    model.SitesChecks = new List<SiteCheck>();
                }
                if (WTPReports == true)
                {
                    model.WTPChecks = await _context.WTPChecks
                    .Include(x => x.Project).Include(x => x.SubProject).Include(x => x.Photos)
                    .Where(x => x.TimeStamp.Date >= startdate.Date && x.TimeStamp.Date <= enddate.Date && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId))
                    .OrderBy(x => x.TimeStamp).ToListAsync();
                }
                else
                {
                    model.WTPChecks = new List<WTPCheck>();
                }
                if (SensorReports == true)
                {
                    model.SensorsCheck = await _context.SensorsChecks
                   .Include(x => x.Project).Include(x => x.SubProject).Include(x => x.Photos)
                   .Where(x => x.TimeStamp.Date >= startdate.Date && x.TimeStamp.Date <= enddate.Date && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId))
                   .OrderBy(x => x.TimeStamp).ToListAsync();
                }
                else
                {
                    model.SensorsCheck = new List<SensorsCheck>();
                }
                if (GeneratorReports == true)
                {
                    model.GeneratorChecks = await _context.GeneratorChecks
                    .Include(x => x.Project).Include(x => x.SubProject).Include(x => x.Photos)
                    .Where(x => x.TimeStamp.Date >= startdate.Date && x.TimeStamp.Date <= enddate.Date && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId))
                    .OrderBy(x => x.TimeStamp).ToListAsync();
                }
                else
                {
                    model.GeneratorChecks = new List<GeneratorCheck>();
                }
                if (MaintenanceReports == true)
                {
                    model.Maintenances = await _context.Maintenances
                    .Include(x => x.Project).Include(x => x.SubProject)
                    .Include(x => x.MaintenanceEntries).ThenInclude(x => x.MaintenanceType)
                    .Include(x => x.MaintenanceEntries).ThenInclude(x => x.MaintenanceSubType)
                    .Include(x => x.MaintenancePhotos)
                    .Include(x => x.Install)
                    .Where(x => x.TimeStamp.Date >= startdate.Date && x.TimeStamp.Date <= enddate.Date && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId))
                    .OrderBy(x => x.TimeStamp).ToListAsync();
                }
                else
                {
                    model.Maintenances = new List<Maintenance>();
                }
            }
            else
            {
                if (DailyReports == true)
                {
                    model.DailyReports = await _context.Daily_Report_2s
                    .Include(x => x.Project).Include(x => x.SubProject)
                    .Include(x => x.Title)
                    .Where(x => x.Report_Date.Date >= startdate.Date && x.Report_Date.Date <= enddate.Date && x.ProjectId.Equals(ProjectId))
                    .OrderBy(x => x.Report_Date).ToListAsync();
                }
                else
                {
                    model.DailyReports = new List<Daily_Report_2>();
                }
                if (Decommissions == true)
                {
                    model.Decommissions = await _context.Decommissions.Where(x => x.TimeStamp.Date >= startdate.Date && x.TimeStamp.Date <= enddate.Date && x.ProjectId.Equals(ProjectId)).OrderBy(x => x.TimeStamp).ToListAsync();
                }
                else
                {
                    model.Decommissions = new List<Decommission>();
                }
                if (AlarmReports == true)
                {
                    model.AlarmCalls = await _context.AlarmCalls
                        .Include(x => x.Project).Include(x => x.SubProject).Include(x => x.pictures)
                        .Where(x => x.TimeStamp.Date >= startdate.Date && x.TimeStamp.Date <= enddate.Date && x.ProjectId.Equals(ProjectId))
                        .OrderBy(x => x.TimeStamp).ToListAsync();
                }
                else
                {
                    model.AlarmCalls = new List<AlarmCall>();
                }
                if (InspectionReports == true)
                {
                    model.ConstructionSiteInspections = await _context.ConstructionSiteInspections
                   .Include(x => x.Project).Include(x => x.SubProject).Include(x => x.Photos)
                   .Where(x => x.TimeStamp.Date >= startdate.Date && x.TimeStamp.Date <= enddate.Date && x.ProjectId.Equals(ProjectId))
                   .OrderBy(x => x.TimeStamp).ToListAsync();
                }
                else
                {
                    model.ConstructionSiteInspections = new List<ConstructionSiteInspection>();
                }
                if (Decommissions == true)
                {
                    model.Decommissions = await _context.Decommissions
                   .Include(x => x.Project).Include(x => x.SubProject).Include(x => x.Photos)
                   .Where(x => x.TimeStamp.Date >= startdate.Date && x.TimeStamp.Date <= enddate.Date && x.ProjectId.Equals(ProjectId))
                   .OrderBy(x => x.TimeStamp).ToListAsync();
                }
                else
                {
                    model.ConstructionSiteInspections = new List<ConstructionSiteInspection>();
                }
                if (SiteReports == true)
                {
                    model.SitesChecks = await _context.SiteChecks
                   .Include(x => x.Project).Include(x => x.SubProject).Include(x => x.Photos)
                   .Where(x => x.TimeStamp.Date >= startdate.Date && x.TimeStamp.Date <= enddate.Date && x.ProjectId.Equals(ProjectId))
                   .OrderBy(x => x.TimeStamp).ToListAsync();
                }
                else
                {
                    model.SitesChecks = new List<SiteCheck>();
                }
                if (WTPReports == true)
                {
                    model.WTPChecks = await _context.WTPChecks
                    .Include(x => x.Project).Include(x => x.SubProject).Include(x => x.Photos)
                    .Where(x => x.TimeStamp.Date >= startdate.Date && x.TimeStamp.Date <= enddate.Date && x.ProjectId.Equals(ProjectId))
                    .OrderBy(x => x.TimeStamp).ToListAsync();
                }
                else
                {
                    model.WTPChecks = new List<WTPCheck>();
                }
                if (SensorReports == true)
                {
                    model.SensorsCheck = await _context.SensorsChecks
                    .Include(x => x.Project).Include(x => x.SubProject).Include(x => x.Photos)
                    .Where(x => x.TimeStamp.Date >= startdate.Date && x.TimeStamp.Date <= enddate.Date && x.ProjectId.Equals(ProjectId))
                    .OrderBy(x => x.TimeStamp).ToListAsync();
                }
                else
                {
                    model.SensorsCheck = new List<SensorsCheck>();
                }
                if (GeneratorReports == true)
                {
                    model.GeneratorChecks = await _context.GeneratorChecks
                    .Include(x => x.Project).Include(x => x.SubProject).Include(x => x.Photos)
                    .Where(x => x.TimeStamp.Date >= startdate.Date && x.TimeStamp.Date <= enddate.Date && x.ProjectId.Equals(ProjectId))
                    .OrderBy(x => x.TimeStamp).ToListAsync();
                }
                else
                {
                    model.GeneratorChecks = new List<GeneratorCheck>();
                }
                if (MaintenanceReports == true)
                {
                    model.Maintenances = await _context.Maintenances
                    .Include(x => x.Project).Include(x => x.SubProject)
                    .Include(x => x.MaintenanceEntries).ThenInclude(x => x.MaintenanceType)
                    .Include(x => x.MaintenanceEntries).ThenInclude(x => x.MaintenanceSubType)
                    .Include(x => x.MaintenancePhotos)
                    .Include(x => x.Install)
                    .Where(x => x.TimeStamp.Date >= startdate.Date && x.TimeStamp.Date <= enddate.Date && x.ProjectId.Equals(ProjectId))
                    .OrderBy(x => x.TimeStamp).ToListAsync();
                }
                else
                {
                    model.Maintenances = new List<Maintenance>();
                }
            }

            foreach (Daily_Report_2 DR in model.DailyReports)
            {
                List<string> pictures = new List<string>();
                string path = _env.WebRootPath + "/AHAK/DailyReports/" + DR.Id.ToString() + "/";

                if (Directory.Exists(path))
                {
                    var folder = Directory.EnumerateFiles(path)
                                     .Select(fn => Path.GetFileName(fn));

                    foreach (string file in folder)
                    {
                        if (file.Contains("_edit"))
                        {
                            pictures.Add(file);
                        }
                        else
                        {
                            string[] fileparts = file.Split(".");
                            if (!folder.Contains(fileparts[0] + "_edit." + fileparts[1]))
                            {
                                pictures.Add(file);
                            }
                        }
                    }
                }
                DR.pictures = pictures;
            }

            return new ViewAsPdf("Reports/_SiteDocumentation", model);

        }
        [HttpPost]
        [RequestSizeLimit(500000000)]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> DownloadDailyReports(DateTime starttime, DateTime endtime, int ProjectId, int? SubProjectId, bool paid, bool unpaid)
        {
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            AllDocumentation doc = new AllDocumentation();
            doc.starttime = starttime;
            doc.endtime = endtime;
            doc.ProjectId = ProjectId;

            if (paid && unpaid)
            {
                doc.Daily_Reports = await _context.Daily_Report_2s
                .Include(x => x.Title).ThenInclude(x => x.ItemType)
                .Include(x => x.Project).ThenInclude(x => x.Division)
                .Include(x => x.SubProject)
                .Where(x => x.Report_Date.Date >= starttime.Date && x.Report_Date.Date <= endtime.Date && x.ProjectId.Equals(ProjectId))
                .OrderBy(x => x.Report_Date)
                .ToListAsync();
            }
            else if (paid)
            {
                doc.Daily_Reports = await _context.Daily_Report_2s
                .Include(x => x.Title).ThenInclude(x => x.ItemType)
                .Include(x => x.Project).ThenInclude(x => x.Division)
                .Include(x => x.SubProject)
                .Where(x => x.Report_Date.Date >= starttime.Date && x.Report_Date.Date <= endtime.Date && x.ProjectId.Equals(ProjectId) && x.tobepaid.Equals(true))
                .OrderBy(x => x.Report_Date)
                .ToListAsync();
            }
            else if (unpaid)
            {
                doc.Daily_Reports = await _context.Daily_Report_2s
                .Include(x => x.Title).ThenInclude(x => x.ItemType)
                .Include(x => x.Project).ThenInclude(x => x.Division)
                .Include(x => x.SubProject)
                .Where(x => x.Report_Date.Date >= starttime.Date && x.Report_Date.Date <= endtime.Date && x.ProjectId.Equals(ProjectId) && x.tobepaid.Equals(false))
                .OrderBy(x => x.Report_Date)
                .ToListAsync();
            }
            else
            {
                doc.Daily_Reports = await _context.Daily_Report_2s
                .Include(x => x.Title).ThenInclude(x => x.ItemType)
                .Include(x => x.Project).ThenInclude(x => x.Division)
                .Include(x => x.SubProject)
                .Where(x => x.Report_Date.Date >= starttime.Date && x.Report_Date.Date <= endtime.Date && x.ProjectId.Equals(ProjectId))
                .OrderBy(x => x.Report_Date)
                .ToListAsync();
            }
            if (SubProjectId != null)
            {
                doc.Daily_Reports = doc.Daily_Reports.Where(x => x.SubProjectId.Equals(SubProjectId)).ToList();
            }
            foreach (Daily_Report_2 DR in doc.Daily_Reports)
            {
                string path = _env.WebRootPath + "/AHAK/DailyReports/" + DR.Id.ToString() + "/";
                List<string> pictures = new List<string>();
                if (Directory.Exists(path))
                {
                    var folder = Directory.EnumerateFiles(path)
                                     .Select(fn => Path.GetFileName(fn));

                    foreach (string file in folder)
                    {
                        if (file.Contains("_edit"))
                        {
                            pictures.Add(file);
                        }
                        else
                        {
                            string[] fileparts = file.Split(".");
                            if (!folder.Contains(fileparts[0] + "_edit." + fileparts[1]))
                            {
                                pictures.Add(file);
                            }
                        }
                    }
                }
                DR.pictures = pictures;
            }
            return new ViewAsPdf("Reports/_DailyReports", doc) { IsLowQuality = true, FileName = "Daily_Reports_" + starttime.ToString("yyyy-MM-dd") + "_" + endtime.ToString("yyyy-MM-dd") + ".pdf" };
        }

        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager")]
        public ActionResult GetInvoice(string starttime, string endtime, int ProjectId, string generationtime)
        {
            DateTime myStart = DateTime.ParseExact(starttime, "yyyy-MM-dd",
                                       System.Globalization.CultureInfo.InvariantCulture);
            DateTime myEnd = DateTime.ParseExact(endtime, "yyyy-MM-dd",
                           System.Globalization.CultureInfo.InvariantCulture);

            var project = _context.Projects.Find(ProjectId);
            //string filePath = "~/AHAK/akonto/AKONTO_" + generationtime + "_" + project.Abbreviation + "_" + myStart.ToString("yyyy-MM-dd") + "_" + myEnd.ToString("yyyy-MM-dd") + ".pdf";
            string filePath = "~/AHAK/akonto/Documentation/AKONTO_" + generationtime + "_" + project.Abbreviation + "_" + myStart.ToString("yyyy-MM-dd") + "_" + myEnd.ToString("yyyy-MM-dd") + ".pdf";
            Response.Headers.Add("Content-Disposition", "inline; filename=test.pdf");
            return File(filePath, "application/pdf");
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager")]
        public FileResult GetInvoiceExcel(string starttime, string endtime, int ProjectId, string generationtime)
        {
            DateTime myStart = DateTime.ParseExact(starttime, "yyyy-MM-dd",
                                       System.Globalization.CultureInfo.InvariantCulture);
            DateTime myEnd = DateTime.ParseExact(endtime, "yyyy-MM-dd",
                           System.Globalization.CultureInfo.InvariantCulture);

            var project = _context.Projects.Find(ProjectId);
            string filePath = "~/AHAK/akonto/Excel/" + project.Abbreviation + "_" + generationtime + "_" + myStart.ToString("yyyy-MM-dd") + "_" + myEnd.ToString("yyyy-MM-dd") + ".csv";
            //Response.Headers.Add("Content-Disposition", "inline; filename=Invoice.csv");
            return File(filePath, "text/csv", project.Abbreviation + "_" + myStart.ToString("yyyy-MM-dd") + "_" + myEnd.ToString("yyyy-MM-dd") + ".csv");
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager")]
        public FileResult GetInvoiceSimpleExcel(string starttime, string endtime, int ProjectId, string generationtime)
        {
            DateTime myStart = DateTime.ParseExact(starttime, "yyyy-MM-dd",
                                       System.Globalization.CultureInfo.InvariantCulture);
            DateTime myEnd = DateTime.ParseExact(endtime, "yyyy-MM-dd",
                           System.Globalization.CultureInfo.InvariantCulture);
            var project = _context.Projects.Find(ProjectId);
            string filePath = "~/AHAK/akonto/Excel/" + project.Abbreviation + "_" + myStart.ToString("yyyy-MM-dd") + "_" + myEnd.ToString("yyyy-MM-dd") + "_simple" + ".csv";
            //Response.Headers.Add("Content-Disposition", "inline; filename=Invoice.csv");
            return File(filePath, "text/csv", project.Abbreviation + "_" + generationtime + "_" + myStart.ToString("yyyy-MM-dd") + "_" + myEnd.ToString("yyyy-MM-dd") + "_simple" + ".csv");
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager")]
        public ActionResult GetDocumentation(string starttime, string endtime, int ProjectId, string generationtime)
        {
            DateTime myStart = DateTime.ParseExact(starttime, "yyyy-MM-dd",
                                       System.Globalization.CultureInfo.InvariantCulture);
            DateTime myEnd = DateTime.ParseExact(endtime, "yyyy-MM-dd",
                           System.Globalization.CultureInfo.InvariantCulture);

            var project = _context.Projects.Find(ProjectId);
            string filePath = "~/AHAK/akonto/Documentation/DOC_" + generationtime + "_" + project.Abbreviation + "_" + myStart.ToString("yyyy-MM-dd") + "_" + myEnd.ToString("yyyy-MM-dd") + ".pdf";
            Response.Headers.Add("Content-Disposition", "inline; filename=test.pdf");
            return File(filePath, "application/pdf");
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager")]
        public async Task<bool> SaveAsPdf(InvoiceModel model, DateTime GenerationTime, bool Split = false)
        {
            string footer = "--footer-center \"" + _SharedLocalizer.GetLocalizedHtmlString("Printed on:").Value + DateTime.Now.Date.ToString("yyyy-MM-dd") + "  Page: [page]/[toPage]\"" + " --footer-line --footer-font-size \"9\" --footer-spacing 6 --footer-font-name \"calibri light\"";
            if (Split)
            {
                var project = await _context.Projects.FindAsync(model.ProjectId);

                ViewAsPdf pdf = new ViewAsPdf("_invoice_all", model)
                {
                    FileName = "AKONTO_" + GenerationTime.ToString("yyyy-MM-dd_HHmmss") + "_" + project.Abbreviation + "_" + model.starttime.ToString("yyyy-MM-dd") + "_" + model.endtime.ToString("yyyy-MM-dd") + ".pdf",
                    CustomSwitches = footer,
                };
                byte[] pdfData = await pdf.BuildFile(ControllerContext);
                string fullPath = _env.WebRootPath + "\\AHAK\\akonto\\";

                if (!Directory.Exists(fullPath))
                {
                    Directory.CreateDirectory(fullPath);
                }
                using (var fileStream = new FileStream(fullPath + pdf.FileName, FileMode.Create, FileAccess.Write))
                {
                    fileStream.Write(pdfData, 0, pdfData.Length);
                }
                return true;
            }
            else
            {
                ViewAsPdf pdf = new ViewAsPdf("_invoice", model)
                {
                    FileName = "AKONTO_" + GenerationTime.ToString("yyyy-MM-dd_HHmmss") + "_" + model.Project.Abbreviation + "_" + model.starttime.ToString("yyyy-MM-dd") + "_" + model.endtime.ToString("yyyy-MM-dd") + ".pdf",
                    CustomSwitches = footer,
                };
                byte[] pdfData = await pdf.BuildFile(ControllerContext);
                string fullPath = _env.WebRootPath + "\\AHAK\\akonto\\";

                if (!Directory.Exists(fullPath))
                {
                    Directory.CreateDirectory(fullPath);
                }
                using (var fileStream = new FileStream(fullPath + pdf.FileName, FileMode.Create, FileAccess.Write))
                {
                    fileStream.Write(pdfData, 0, pdfData.Length);
                }
                return true;
            }


        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager")]
        public async Task SaveAsPdfBackGround(InvoiceModel model, bool Split, DateTime GenerationTime)
        {
            var user = await _userManager.GetUserAsync(User);
            string footer = "--footer-center \"" + _SharedLocalizer.GetLocalizedHtmlString("Printed on:").Value + DateTime.Now.Date.ToString("yyyy-MM-dd") + "  Page: [page]/[toPage]\"" + " --footer-line --footer-font-size \"9\" --footer-spacing 6 --footer-font-name \"calibri light\"";
            if (Split)
            {
                var project = await _context.Projects.FindAsync(model.ProjectId);
                ViewAsPdf pdf = new ViewAsPdf("_invoice_all", model)
                {
                    FileName = "AKONTO_" + GenerationTime.ToString("yyyy-MM-dd_HHmmss") + "_" + project.Abbreviation + "_" + model.starttime.ToString("yyyy-MM-dd") + "_" + model.endtime.ToString("yyyy-MM-dd") + ".pdf",
                    CustomSwitches = footer,
                };

                string fullPath = _env.WebRootPath + "\\AHAK\\akonto\\Documentation\\" + user.full_name() + "\\";
                if (!Directory.Exists(fullPath))
                {
                    Directory.CreateDirectory(fullPath);
                }
                Task<byte[]> t = Task.Run(() => pdf.BuildFile(ControllerContext));
                try
                {
                    t.Wait();
                }
                catch
                {

                }
                if (t.Status == TaskStatus.RanToCompletion)
                {
                    using (var fileStream = new FileStream(fullPath + pdf.FileName, FileMode.Create, FileAccess.Write))
                    {
                        fileStream.Write(t.Result, 0, t.Result.Length);
                    }
                    PersonalFile pfile = new PersonalFile
                    {
                        ApplicationUserId = user.Id,
                        Downloaded = false,
                        FileName = pdf.FileName,
                        FileExtension = ".pdf",
                        path = fullPath + pdf.FileName
                    };
                    _context.Add(pfile);
                    _context.SaveChanges();
                }
            }
            else
            {
                ViewAsPdf pdf = new ViewAsPdf("_invoice", model)
                {
                    FileName = "AKONTO_" + GenerationTime.ToString("yyyy-MM-dd_HHmmss") + "_" + model.Project.Abbreviation + "_" + model.starttime.ToString("yyyy-MM-dd") + "_" + model.endtime.ToString("yyyy-MM-dd") + ".pdf",
                    CustomSwitches = footer,
                };
                string fullPath = _env.WebRootPath + "\\AHAK\\akonto\\documentation\\" + user.full_name() + "\\";

                if (!Directory.Exists(fullPath))
                {
                    Directory.CreateDirectory(fullPath);
                }
                Task<byte[]> t = Task.Run(() => pdf.BuildFile(ControllerContext));
                try
                {
                    t.Wait();
                }
                catch
                {

                }
                if (t.Status == TaskStatus.RanToCompletion)
                {
                    using (var fileStream = new FileStream(fullPath + pdf.FileName, FileMode.Create, FileAccess.Write))
                    {
                        fileStream.Write(t.Result, 0, t.Result.Length);
                    }
                    PersonalFile pfile = new PersonalFile
                    {
                        ApplicationUserId = user.Id,
                        Downloaded = false,
                        FileName = pdf.FileName,
                        FileExtension = ".pdf",
                        path = fullPath + pdf.FileName
                    };
                    _context.Add(pfile);
                    _context.SaveChanges();
                }
            }


        }
        public async Task SaveDocumenationAsPdfBackGround(AllDocumentation model, bool Split, DateTime GenerationTime)
        {
            var user = await _userManager.GetUserAsync(User);
            string footer = "--footer-center \"" + _SharedLocalizer.GetLocalizedHtmlString("Printed on:").Value + DateTime.Now.Date.ToString("yyyy-MM-dd") + "  Page: [page]/[toPage]\"" + " --footer-line --footer-font-size \"9\" --footer-spacing 6 --footer-font-name \"calibri light\"";
            if (!Split)
            {
                ViewAsPdf pdf = new ViewAsPdf("Reports/AllDocumentation", model)
                {
                    FileName = "DOC_" + GenerationTime.ToString("yyyy-MM-dd_HHmmss") + "_" + model.Project.Abbreviation + "_" + model.starttime.ToString("yyyy-MM-dd") + "_" + model.endtime.ToString("yyyy-MM-dd") + ".pdf",
                    CustomSwitches = footer,
                };
                string fullPath = _env.WebRootPath + "\\AHAK\\akonto\\Documentation\\" + user.full_name() + "\\";
                if (!Directory.Exists(fullPath))
                {
                    Directory.CreateDirectory(fullPath);
                }
                Task<byte[]> t = Task.Run(() => pdf.BuildFile(ControllerContext));
                try
                {
                    t.Wait();
                }
                catch
                {

                }
                if (t.Status == TaskStatus.RanToCompletion)
                {
                    using (var fileStream = new FileStream(fullPath + pdf.FileName, FileMode.Create, FileAccess.Write))
                    {
                        fileStream.Write(t.Result, 0, t.Result.Length);
                    }
                    PersonalFile pfile = new PersonalFile
                    {
                        ApplicationUserId = user.Id,
                        Downloaded = false,
                        FileName = pdf.FileName,
                        FileExtension = ".pdf",
                        path = fullPath + pdf.FileName
                    };
                    _context.Add(pfile);
                    _context.SaveChanges();
                }
            }
            else
            {
                ViewAsPdf pdf = new ViewAsPdf("Reports/AllDocumentation_all", model)
                {
                    FileName = "DOC_" + GenerationTime.ToString("yyyy-MM-dd_HHmmss") + "_" + model.Project.Abbreviation + "_" + model.starttime.ToString("yyyy-MM-dd") + "_" + model.endtime.ToString("yyyy-MM-dd") + ".pdf",
                    CustomSwitches = footer,
                };
                string fullPath = _env.WebRootPath + "\\AHAK\\akonto\\Documentation\\" + user.full_name() + "\\";
                if (!Directory.Exists(fullPath))
                {
                    Directory.CreateDirectory(fullPath);
                }
                Task<byte[]> t = Task.Run(() => pdf.BuildFile(ControllerContext));
                try
                {
                    t.Wait();
                }
                catch
                {

                }
                if (t.Status == TaskStatus.RanToCompletion)
                {
                    using (var fileStream = new FileStream(fullPath + pdf.FileName, FileMode.Create, FileAccess.Write))
                    {
                        fileStream.Write(t.Result, 0, t.Result.Length);
                    }
                    PersonalFile pfile = new PersonalFile
                    {
                        ApplicationUserId = user.Id,
                        Downloaded = false,
                        FileName = pdf.FileName,
                        FileExtension = ".pdf",
                        path = fullPath + pdf.FileName
                    };
                    _context.Add(pfile);
                    _context.SaveChanges();
                }
            }
        }
        public async Task SaveDocumentationAsPdf2(AllDocumentation model, bool Split, DateTime GenerationTime)
        {
            string filename = "DOC_" + GenerationTime.ToString("yyyy-MM-dd_HHmmss") + "_" + model.Project.Abbreviation + "_" + model.starttime.ToString("yyyy-MM-dd") + "_" + model.endtime.ToString("yyyy-MM-dd") + ".pdf";
            string footer = "--footer-center \"" + _SharedLocalizer.GetLocalizedHtmlString("Printed on:").Value + DateTime.Now.Date.ToString("yyyy-MM-dd") + "  Page: [page]/[toPage]\"" + " --footer-line --footer-font-size \"9\" --footer-spacing 6 --footer-font-name \"calibri light\"";
            if (!Split)
            {
                ViewAsPdf pdf = new ViewAsPdf("Reports/AllDocumentation", model)
                {
                    FileName = filename,
                    CustomSwitches = footer,
                };

                string fullPath = _env.WebRootPath + "\\AHAK\\akonto\\Documentation\\";
                if (System.IO.File.Exists(fullPath + filename))
                {
                    System.IO.File.Delete(fullPath + filename);
                }
                if (!Directory.Exists(fullPath))
                {
                    Directory.CreateDirectory(fullPath);
                }
                Task<byte[]> t = Task.Run(() => pdf.BuildFile(ControllerContext));
                try
                {
                    t.Wait();
                }
                catch
                {

                }
                if (t.Status == TaskStatus.RanToCompletion)
                {
                    using (var fileStream = new FileStream(fullPath + pdf.FileName, FileMode.Create, FileAccess.Write))
                    {
                        await fileStream.WriteAsync(t.Result, 0, t.Result.Length);
                    }
                }
            }
            else
            {
                ViewAsPdf pdf = new ViewAsPdf("Reports/AllDocumentation_all", model)
                {
                    FileName = filename,
                    CustomSwitches = footer,
                };
                string fullPath = _env.WebRootPath + "\\AHAK\\akonto\\Documentation\\";
                if (!Directory.Exists(fullPath))
                {
                    Directory.CreateDirectory(fullPath);
                }
                Task<byte[]> t = Task.Run(() => pdf.BuildFile(ControllerContext));
                try
                {
                    t.Wait();
                }
                catch
                {

                }
                if (t.Status == TaskStatus.RanToCompletion)
                {
                    using (var fileStream = new FileStream(fullPath + pdf.FileName, FileMode.Create, FileAccess.Write))
                    {
                        await fileStream.WriteAsync(t.Result, 0, t.Result.Length);
                    }
                }
            }

        }
        public async Task SaveDocumentationAsPdfs(AllDocumentation model, InvoiceModel invmodel)
        {
            if (model.AcidTreatments == null)
            {
                model.AcidTreatments = new List<AcidTreatment>();

            }
            if (model.PumpTests == null)
            {
                model.PumpTests = new List<ThreeStepTest>();
                model.PumpTest_Photos = new List<PumpTestPhoto>();

            }
            if (model.ClearPumpTests == null)
            {
                model.ClearPumpTests = new List<ClearPumpTest>();
                model.ClearPumpTest_Photos = new List<ClearPumpTestPhoto>();
            }
            string footer = "--footer-center \"" + _SharedLocalizer.GetLocalizedHtmlString("Printed on:").Value + DateTime.Now.Date.ToString("yyyy-MM-dd") + "  Page: [page]/[toPage]\"" + " --footer-line --footer-font-size \"9\" --footer-spacing 6 --footer-font-name \"calibri light\"";
            var subprojectids = model.Daily_Reports.Where(x => x.SubProjectId != null).Select(x => x.SubProjectId).Distinct().ToList();
            var subprojectids2 = model.ExtraWorks.Where(x => x.SubProjectId != null).Select(x => x.SubProjectId).Distinct().ToList();
            foreach (var s2 in subprojectids2)
            {
                if (subprojectids.IndexOf(s2) < 0)
                {
                    subprojectids.Add(s2);
                }
            }
            string projectPath = _env.WebRootPath + "\\TempFolder\\" + model.Project.Name.ToString() + "\\";
            if (!Directory.Exists(projectPath))
            {
                Directory.CreateDirectory(projectPath);
            }
            else
            {
                System.IO.DirectoryInfo di = new DirectoryInfo(projectPath);

                foreach (FileInfo file in di.GetFiles())
                {
                    file.Delete();
                }
                foreach (DirectoryInfo dir in di.GetDirectories())
                {
                    dir.Delete(true);
                }
            }
            foreach (int subprojectid in subprojectids)
            {
                var subp = await _context.SubProjects.FindAsync(subprojectid);
                AllDocumentation submodel = new AllDocumentation(model, subp);
                InvoiceModel subinvmodel = new InvoiceModel(invmodel, subp);

                ViewAsPdf pdf = new ViewAsPdf("Reports/AllDocumentation", submodel)
                {
                    FileName = "DOC_" + invmodel.GenerationTime.ToString("yyyy-MM-dd_HHmmss") + "_" + submodel.SubProject.Name + "_" + model.starttime.ToString("yyyy-MM-dd") + "_" + model.endtime.ToString("yyyy-MM-dd") + ".pdf",
                    CustomSwitches = footer,
                };
                string fullPath = _env.WebRootPath + "\\TempFolder\\" + model.Project.Name.ToString() + "\\" + subp.Name + "\\";
                if (!Directory.Exists(fullPath))
                {
                    Directory.CreateDirectory(fullPath);
                }
                Task<byte[]> t = Task.Run(() => pdf.BuildFile(ControllerContext));
                try
                {
                    t.Wait();
                }
                catch
                {

                }
                if (t.Status == TaskStatus.RanToCompletion)
                {
                    using (var fileStream = new FileStream(fullPath + pdf.FileName, FileMode.Create, FileAccess.Write))
                    {
                        await fileStream.WriteAsync(t.Result, 0, t.Result.Length);
                    }
                }
                ViewAsPdf pdf2 = new ViewAsPdf("_invoice", subinvmodel)
                {
                    FileName = "akonto_" + invmodel.GenerationTime.ToString("yyyy-MM-dd_HHmmss") + "_" + subp.Name + "_" + subinvmodel.starttime.ToString("yyyy-MM-dd") + "_" + subinvmodel.endtime.ToString("yyyy-MM-dd") + ".pdf",
                    CustomSwitches = footer,
                };
                Task<byte[]> t2 = Task.Run(() => pdf2.BuildFile(ControllerContext));
                try
                {
                    t2.Wait();
                }
                catch
                {

                }
                if (t2.Status == TaskStatus.RanToCompletion)
                {
                    using (var fileStream = new FileStream(fullPath + pdf2.FileName, FileMode.Create, FileAccess.Write))
                    {
                        await fileStream.WriteAsync(t2.Result, 0, t2.Result.Length);
                    }
                }
            }
        }
        public async Task SaveDocumentationAsPdfsBackGround(AllDocumentation model, InvoiceModel invmodel)
        {
            var user = await _userManager.GetUserAsync(User);
            var subprojectids = model.Daily_Reports.Where(x => x.SubProjectId != null).Select(x => x.SubProjectId).Distinct().ToList();
            var subprojectids2 = model.ExtraWorks.Where(x => x.SubProjectId != null).Select(x => x.SubProjectId).Distinct().ToList();
            foreach (var s2 in subprojectids2)
            {
                if (subprojectids.IndexOf(s2) < 0)
                {
                    subprojectids.Add(s2);
                }
            }

            string projectPath = _env.WebRootPath + "\\AHAK\\akonto\\Documentation\\" + user.full_name() + "\\TempFolder2\\" + model.Project.Name.ToString() + "\\";
            string footer = "--footer-center \"" + _SharedLocalizer.GetLocalizedHtmlString("Printed on:").Value + DateTime.Now.Date.ToString("yyyy-MM-dd") + "  Page: [page]/[toPage]\"" + " --footer-line --footer-font-size \"9\" --footer-spacing 6 --footer-font-name \"calibri light\"";
            if (!Directory.Exists(projectPath))
            {
                Directory.CreateDirectory(projectPath);
            }
            else
            {
                System.IO.DirectoryInfo di = new DirectoryInfo(projectPath);

                foreach (FileInfo file in di.GetFiles())
                {
                    file.Delete();
                }
                foreach (DirectoryInfo dir in di.GetDirectories())
                {
                    dir.Delete(true);
                }
            }
            foreach (int subprojectid in subprojectids)
            {
                var subp = await _context.SubProjects.FindAsync(subprojectid);
                AllDocumentation submodel = new AllDocumentation(model, subp);
                InvoiceModel subinvmodel = new InvoiceModel(invmodel, subp);

                ViewAsPdf pdf = new ViewAsPdf("Reports/AllDocumentation", submodel)
                {
                    FileName = "DOC_" + invmodel.GenerationTime.ToString("yyyy-MM-dd_HHmmss") + "_" + submodel.SubProject.Name.Replace("\\", "_").Replace("/", "_") + "_" + model.starttime.ToString("yyyy-MM-dd") + "_" + model.endtime.ToString("yyyy-MM-dd") + ".pdf",
                    CustomSwitches = footer,
                };
                string fullPath = _env.WebRootPath + "\\AHAK\\akonto\\Documentation\\" + user.full_name() + "\\TempFolder2\\" + model.Project.Name.ToString() + "\\" + subp.Name + "\\";
                if (!Directory.Exists(fullPath))
                {
                    Directory.CreateDirectory(fullPath);
                }
                Task<byte[]> t = Task.Run(() => pdf.BuildFile(ControllerContext));
                try
                {
                    t.Wait();
                }
                catch
                {

                }
                if (t.Status == TaskStatus.RanToCompletion)
                {
                    using (var fileStream = new FileStream(fullPath + pdf.FileName, FileMode.Create, FileAccess.Write))
                    {
                        fileStream.Write(t.Result, 0, t.Result.Length);
                    }
                    PersonalFile pfile = new PersonalFile
                    {
                        ApplicationUserId = user.Id,
                        Downloaded = false,
                        FileName = pdf.FileName,
                        FileExtension = ".pdf",
                        path = fullPath + pdf.FileName
                    };
                    _context.Add(pfile);
                    await _context.SaveChangesAsync();
                }
                ViewAsPdf pdf2 = new ViewAsPdf("_invoice", subinvmodel)
                {
                    FileName = "akonto_" + invmodel.GenerationTime.ToString("yyyy-MM-dd_HHmmss") + "_" + subp.Name.Replace("\\", "_").Replace("/", "_") + "_" + subinvmodel.starttime.ToString("yyyy-MM-dd") + "_" + subinvmodel.endtime.ToString("yyyy-MM-dd") + ".pdf",
                    CustomSwitches = footer,
                };
                Task<byte[]> t2 = Task.Run(() => pdf2.BuildFile(ControllerContext));
                try
                {
                    t2.Wait();
                }
                catch
                {

                }
                if (t2.Status == TaskStatus.RanToCompletion)
                {
                    using (var fileStream = new FileStream(fullPath + pdf2.FileName, FileMode.Create, FileAccess.Write))
                    {
                        fileStream.Write(t2.Result, 0, t2.Result.Length);
                    }
                    PersonalFile pfile = new PersonalFile
                    {
                        ApplicationUserId = user.Id,
                        Downloaded = false,
                        FileName = pdf2.FileName,
                        FileExtension = ".pdf",
                        path = fullPath + pdf2.FileName
                    };
                    _context.Add(pfile);
                    await _context.SaveChangesAsync();
                }
            }
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> SaveMobilizationAsPdf(DateTime starttime, DateTime endtime, int ProjectId)
        {
            AllDocumentation model = await DownloadMobilizations(starttime, endtime, ProjectId);

            return new ViewAsPdf("Reports/_Mobilisations", model)
            {
                FileName = "Mob_" + starttime.ToString("yyyy-MM-dd") + "_" + endtime.ToString("yyyy-MM-dd") + ".pdf",
            };

        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> SaveArrivalAsPdf(DateTime starttime, DateTime endtime, int ProjectId)
        {
            AllDocumentation model = await DownloadArrivals(starttime, endtime, ProjectId);

            return new ViewAsPdf("Reports/_Arrivals", model)
            {
                FileName = "Arr_" + starttime.ToString("yyyy-MM-dd") + "_" + endtime.ToString("yyyy-MM-dd") + ".pdf",
            };
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> SaveInstallAsPdf(DateTime starttime, DateTime endtime, int ProjectId)
        {
            AllDocumentation model = await DownloadInstallations(starttime, endtime, ProjectId);

            return new ViewAsPdf("Reports/_Installations", model)
            {
                FileName = "Ins_" + starttime.ToString("yyyy-MM-dd") + "_" + endtime.ToString("yyyy-MM-dd") + ".pdf",
            };
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> SaveDeInstallAsPdf(DateTime starttime, DateTime endtime, int ProjectId)
        {
            AllDocumentation model = await DownloadDeInstallations(starttime, endtime, ProjectId);

            return new ViewAsPdf("Reports/_Deinstallations", model)
            {
                FileName = "DeIns_" + starttime.ToString("yyyy-MM-dd") + "_" + endtime.ToString("yyyy-MM-dd") + ".pdf",
            };
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> SavePumpTestsAsPdf(DateTime starttime, DateTime endtime, int ProjectId)
        {
            AllDocumentation model = await DownloadPumpTests(starttime, endtime, ProjectId);

            return new ViewAsPdf("Reports/_PumpTests", model)
            {
                FileName = "PumpTests_" + starttime.ToString("yyyy-MM-dd") + "_" + endtime.ToString("yyyy-MM-dd") + ".pdf",
            };
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> SaveClearpumpingsAsPdf(DateTime starttime, DateTime endtime, int ProjectId)
        {
            AllDocumentation model = await DownloadClearPumpTests(starttime, endtime, ProjectId);

            return new ViewAsPdf("Reports/_ClearPumpTests", model)
            {
                FileName = "ClearPumpTests_" + starttime.ToString("yyyy-MM-dd") + "_" + endtime.ToString("yyyy-MM-dd") + ".pdf",
            };
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> SaveAcidTreatmentsAsPdf(DateTime starttime, DateTime endtime, int ProjectId)
        {
            AllDocumentation model = await DownloadAcidTreatments(starttime, endtime, ProjectId);

            return new ViewAsPdf("Reports/_AcidTreatments", model)
            {
                FileName = "AcidTreatments_" + starttime.ToString("yyyy-MM-dd") + "_" + endtime.ToString("yyyy-MM-dd") + ".pdf",
            };
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<AllDocumentation> DownloadMobilizations(DateTime starttime, DateTime endtime, int ProjectId)
        {
            AllDocumentation doc = new AllDocumentation();
            doc.starttime = starttime;
            doc.endtime = endtime;
            doc.ProjectId = ProjectId;
            doc.Mobilizations = await _context.Mobilisations
                    .Include(x => x.ItemType)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                      .Include(x => x.SubProject)
                    .Where(x => x.TimeStamp.Date >= starttime.Date && x.TimeStamp.Date <= endtime.Date && x.ProjectId.Equals(ProjectId))
                    .OrderBy(x => x.TimeStamp)
                    .ToListAsync();
            doc.Mobilized_Photos = await _context.PhotoFilesMobilizations.Include(x => x.Mobilize).Where(x => x.TimeStamp >= starttime && x.TimeStamp <= endtime && x.Mobilize.ProjectId.Equals(ProjectId)).ToListAsync();
            return doc;
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<AllDocumentation> DownloadInstallations(DateTime starttime, DateTime endtime, int ProjectId)
        {
            AllDocumentation doc = new AllDocumentation();
            doc.starttime = starttime;
            doc.endtime = endtime;
            doc.ProjectId = ProjectId;
            doc.Installations = await _context.Installations
                .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                .Include(x => x.Project).ThenInclude(x => x.Division)
                  .Include(x => x.SubProject)
                .Where(x => x.TimeStamp.Date >= starttime.Date && x.TimeStamp.Date <= endtime.Date && (x.DeinstallDate == null || x.DeinstallDate >= starttime) && x.ProjectId.Equals(ProjectId))
                .OrderBy(x => x.TimeStamp)
                .ToListAsync();
            doc.Install_Photos = await _context.PhotoFilesInstalls.Include(x => x.Install).Where(x => x.TimeStamp >= starttime && x.TimeStamp <= endtime && x.Install.ProjectId.Equals(ProjectId)).ToListAsync();
            return doc;
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<AllDocumentation> DownloadDeInstallations(DateTime starttime, DateTime endtime, int ProjectId)
        {
            AllDocumentation doc = new AllDocumentation();
            doc.starttime = starttime;
            doc.endtime = endtime;
            doc.ProjectId = ProjectId;
            doc.Deinstallations = await _context.Deinstallations
                .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                .Include(x => x.Project).ThenInclude(x => x.Division)
                .Where(x => x.TimeStamp.Date >= starttime.Date && x.TimeStamp.Date <= endtime.Date && x.ProjectId.Equals(ProjectId))
                .OrderBy(x => x.TimeStamp)
                .ToListAsync();
            doc.Deinstall_Photos = await _context.PhotoFilesDeInstalls.Include(x => x.DeInstall).Where(x => x.TimeStamp >= starttime && x.TimeStamp <= endtime && x.DeInstall.ProjectId.Equals(ProjectId)).ToListAsync();
            return doc;
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<AllDocumentation> DownloadPumpTests(DateTime starttime, DateTime endtime, int ProjectId)
        {
            AllDocumentation doc = new AllDocumentation();
            doc.starttime = starttime;
            doc.endtime = endtime;
            doc.ProjectId = ProjectId;
            doc.PumpTests = await _context.ThreeStepTests
                .Include(x => x.Project).ThenInclude(x => x.Division)
                .Include(x => x.SubProject)
                .Include(x => x.TestData)
                .Where(x => x.Report_Date.Date >= starttime.Date && x.Report_Date.Date <= endtime.Date && x.ProjectId.Equals(ProjectId))
                .OrderBy(x => x.Report_Date)
                .ToListAsync();
            doc.PumpTest_Photos = await _context.PumpTestPhotos.Include(x => x.ThreeStep).Where(x => x.TimeStamp >= starttime && x.TimeStamp <= endtime && x.ThreeStep.ProjectId.Equals(ProjectId)).ToListAsync();
            return doc;
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<AllDocumentation> DownloadClearPumpTests(DateTime starttime, DateTime endtime, int ProjectId)
        {
            AllDocumentation doc = new AllDocumentation();
            doc.starttime = starttime;
            doc.endtime = endtime;
            doc.ProjectId = ProjectId;
            doc.ClearPumpTests = await _context.ClearPumpTests
                .Include(x => x.Project).ThenInclude(x => x.Division)
                .Include(x => x.SubProject)
                .Include(x => x.Measurements)
                .Where(x => x.Report_Date.Date >= starttime.Date && x.Report_Date.Date <= endtime.Date && x.ProjectId.Equals(ProjectId))
                .OrderBy(x => x.Report_Date)
                .ToListAsync();
            doc.ClearPumpTest_Photos = await _context.ClearPumpTestPhotos.Include(x => x.ClearPumpTest).Where(x => x.TimeStamp >= starttime && x.TimeStamp <= endtime && x.ClearPumpTest.ProjectId.Equals(ProjectId)).ToListAsync();
            return doc;
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<AllDocumentation> DownloadAcidTreatments(DateTime starttime, DateTime endtime, int ProjectId)
        {
            AllDocumentation doc = new AllDocumentation();
            doc.starttime = starttime;
            doc.endtime = endtime;
            doc.ProjectId = ProjectId;
            doc.AcidTreatments = await _context.AcidTreatments
                .Include(x => x.Project).ThenInclude(x => x.Division)
                .Include(x => x.SubProject)
                .Include(x => x.TestData)
                .Where(x => x.Report_Date.Date >= starttime.Date && x.Report_Date.Date <= endtime.Date && x.ProjectId.Equals(ProjectId))
                .OrderBy(x => x.Report_Date)
                .ToListAsync();
            return doc;
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<AllDocumentation> DownloadArrivals(DateTime starttime, DateTime endtime, int ProjectId)
        {
            AllDocumentation doc = new AllDocumentation();
            doc.starttime = starttime;
            doc.endtime = endtime;
            doc.ProjectId = ProjectId;
            doc.Arrivals = await _context.Arrivals
                .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                .Include(x => x.Project).ThenInclude(x => x.Division)
                .Include(x => x.SubProject)
                .Where(x => x.TimeStamp.Date >= starttime.Date && x.TimeStamp.Date <= endtime.Date && x.ProjectId.Equals(ProjectId))
                .OrderBy(x => x.TimeStamp)
                .ToListAsync();
            doc.Arrival_Photos = await _context.PhotoFilesArrivals.Include(x => x.Arrival).Where(x => x.TimeStamp >= starttime && x.TimeStamp <= endtime && x.Arrival.ProjectId.Equals(ProjectId)).ToListAsync();
            return doc;
        }

        //public MemoryStream PdfToImage(byte[] pdfBytes)
        //{
        //    MemoryStream memoryStream = new MemoryStream();
        //    MagickImage imgBackdrop;
        //    MagickColor backdropColor = MagickColors.White; // replace transparent pixels with this color 
        //    int pdfPageNum = 0; // first page is 0

        //    using (IDocLib pdfLibrary = DocLib.Instance)
        //    {
        //        using (var docReader = pdfLibrary.GetDocReader(pdfBytes, new Docnet.Core.Models.PageDimensions(1.0d)))
        //        {
        //            using (var pageReader = docReader.GetPageReader(pdfPageNum))
        //            {
        //                var rawBytes = pageReader.GetImage(); // Returns image bytes as B-G-R-A ordered list.
        //                rawBytes = RearrangeBytesToRGBA(rawBytes);
        //                var width = pageReader.GetPageWidth();
        //                var height = pageReader.GetPageHeight();

        //                // specify that we are reading a byte array of colors in R-G-B-A order.
        //                PixelReadSettings pixelReadSettings = new PixelReadSettings(width, height, StorageType.Char, PixelMapping.RGBA);
        //                using (MagickImage imgPdfOverlay = new MagickImage(rawBytes, pixelReadSettings))
        //                {
        //                    // turn transparent pixels into backdrop color using composite: http://www.imagemagick.org/Usage/compose/#compose
        //                    imgBackdrop = new MagickImage(backdropColor, width, height);
        //                    imgBackdrop.Composite(imgPdfOverlay, CompositeOperator.Over);
        //                }
        //            }
        //        }
        //    }


        //    imgBackdrop.Write(memoryStream, MagickFormat.Png);
        //    imgBackdrop.Dispose();
        //    memoryStream.Position = 0;
        //    return memoryStream;
        //}

        //private byte[] RearrangeBytesToRGBA(byte[] BGRABytes)
        //{
        //    var max = BGRABytes.Length;
        //    var RGBABytes = new byte[max];
        //    var idx = 0;
        //    byte r;
        //    byte g;
        //    byte b;
        //    byte a;
        //    while (idx < max)
        //    {
        //        // get colors in original order: B G R A
        //        b = BGRABytes[idx];
        //        g = BGRABytes[idx + 1];
        //        r = BGRABytes[idx + 2];
        //        a = BGRABytes[idx + 3];

        //        // re-arrange to be in new order: R G B A
        //        RGBABytes[idx] = r;
        //        RGBABytes[idx + 1] = g;
        //        RGBABytes[idx + 2] = b;
        //        RGBABytes[idx + 3] = a;

        //        idx += 4;
        //    }
        //    return RGBABytes;
        //}
        //public void ConvertHEICtoJPG(string path)
        //{
        //    using (MagickImage image = new MagickImage(path))
        //    {
        //        image.Write(path.Split(".")[0] + ".jpg");
        //    }
        //    System.IO.File.Delete(path);
        //}
        public async Task<IActionResult> ConvertHEIC()
        {
            var dailyreports = await _context.Daily_Report_2s.Where(x => x.Id.Equals(2167)).ToListAsync();
            foreach (Daily_Report_2 DR in dailyreports)
            {
                string path = _env.WebRootPath + "/AHAK/DailyReports/" + DR.Id.ToString() + "/";
                if (Directory.Exists(path))
                {
                    var folder = Directory.EnumerateFiles(path)
                                     .Select(fn => Path.GetFileName(fn));

                    foreach (string file in folder)
                    {
                        if (file.ToLower().Contains(".heic"))
                        {
                            PhotoExtensions.ConvertHEICtoJPG(path + file);
                        }

                    }
                }
            }
            return RedirectToAction("MainMenu");
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<AllDocumentation> DownloadDocumentation2(DateTime starttime, DateTime endtime, int ProjectId, int? SubProjectId, List<Daily_Report_2> drs, List<Mobilize> mobs, List<Install> insts, List<Arrival> arrs, List<ExtraWork> ews, bool HidePhotos = false, bool PayDownTime = false, bool ZipItAll = false, bool AddDocumentaion = false, bool AddDocumentationBackGround = false)
        {
            AllDocumentation doc = new AllDocumentation(drs, mobs, insts.Where(x => x.TimeStamp >= starttime && x.TimeStamp <= endtime).OrderBy(x => x.TimeStamp).ToList(), arrs.Where(x => x.TimeStamp >= starttime && x.TimeStamp <= endtime).OrderBy(x => x.TimeStamp).ToList(), ews);
            doc.starttime = starttime.Date;
            doc.endtime = endtime.Date;

            foreach (Daily_Report_2 DR in doc.Daily_Reports)
            {
                string path = _env.WebRootPath + "/AHAK/DailyReports/" + DR.Id.ToString() + "/";
                List<string> pictures = new List<string>();
                if (HidePhotos.Equals(false))
                {
                    if (Directory.Exists(path))
                    {
                        var folder = Directory.EnumerateFiles(path)
                                     .Select(fn => Path.GetFileName(fn));

                        foreach (string file in folder)
                        {
                            if (file.Contains("_edit"))
                            {
                                pictures.Add(file);
                            }
                            else
                            {
                                string[] fileparts = file.Split(".");
                                if (!folder.Contains(fileparts[0] + "_edit." + fileparts[1]))
                                {
                                    pictures.Add(file);
                                }
                            }
                        }
                    }
                }
                DR.pictures = pictures;

            }


            foreach (ExtraWork ER in doc.ExtraWorks)
            {
                string path = _env.WebRootPath + "/AHAK/ExtraWorks/" + ER.Id.ToString() + "/";
                List<string> pictures = new List<string>();
                List<string> pdf2s = new List<string>();
                if (Directory.Exists(path))
                {
                    var folder = Directory.EnumerateFiles(path)
                                     .Select(fn => Path.GetFileName(fn));
                    if (HidePhotos.Equals(false))
                    {
                        foreach (string file in folder)
                        {
                            if (file.Contains(".png"))
                            {
                                pdf2s.Add(file.Replace(".png", ".pdf"));
                            }
                            else if (file.Contains("_edit"))
                            {
                                if (file.Contains(".pdf"))
                                {
                                    int numberofpages = PhotoExtensions.getNumberOfPdfPages(path + file);
                                    if (numberofpages < 1)
                                    {
                                        numberofpages = 30;
                                    }
                                    for (int i = 0; i < numberofpages; i++)
                                    {
                                        try
                                        {
                                            if (!System.IO.File.Exists(path + file.Split(".pdf")[0] + "_" + i.ToString() + ".png"))
                                            {
                                                byte[] bytes = System.IO.File.ReadAllBytes(path + file);
                                                MemoryStream ms = PhotoExtensions.PdfToImage(bytes, i);
                                                string filename = file.Split(".pdf")[0] + "_" + i.ToString() + ".pdf";
                                                using (FileStream fileToSave = new FileStream(path + filename.Replace(".pdf", ".png"), FileMode.Create, System.IO.FileAccess.Write))
                                                {
                                                    ms.CopyTo(fileToSave);
                                                }
                                                ms.Close();
                                                pdf2s.Add(filename);
                                            }
                                        }
                                        catch
                                        {

                                        }
                                    }
                                }
                                else
                                {
                                    if (!System.IO.File.Exists(path + file.Replace(".png", ".pdf")))
                                    {
                                        pictures.Add(file);
                                    }
                                }

                            }
                            else
                            {
                                string[] fileparts = file.Split(".");
                                if (!folder.Contains(fileparts[0] + "_edit." + fileparts[1]))
                                {
                                    if (file.Contains(".pdf"))
                                    {
                                        int numberofpages = PhotoExtensions.getNumberOfPdfPages(path + file);
                                        if (numberofpages < 1)
                                        {
                                            numberofpages = 30;
                                        }
                                        for (int i = 0; i < numberofpages; i++)
                                        {
                                            try
                                            {
                                                if (!System.IO.File.Exists(path + file.Split(".pdf")[0] + "_" + i.ToString() + ".png"))
                                                {
                                                    byte[] bytes = System.IO.File.ReadAllBytes(path + file);
                                                    MemoryStream ms = PhotoExtensions.PdfToImage(bytes, i);
                                                    string filename = file.Split(".pdf")[0] + "_" + i.ToString() + ".pdf";
                                                    using (FileStream fileToSave = new FileStream(path + filename.Replace(".pdf", ".png"), FileMode.Create, System.IO.FileAccess.Write))
                                                    {
                                                        ms.CopyTo(fileToSave);
                                                    }
                                                    ms.Close();
                                                    pdf2s.Add(filename);
                                                }
                                            }
                                            catch
                                            {

                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (!System.IO.File.Exists(path + file.Replace(".png", ".pdf")))
                                        {
                                            pictures.Add(file);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                ER.pictures = pictures;
                ER.pdf2s = pdf2s;
            }
            if (SubProjectId == null)
            {
                doc.Deinstallations = await _context.Deinstallations
                        .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                        .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                        .Include(x => x.Project).ThenInclude(x => x.Division)
                        .Include(x => x.SubProject)
                        .Where(x => x.TimeStamp <= endtime && x.TimeStamp >= starttime && x.ProjectId.Equals(ProjectId))
                        .OrderBy(x => x.TimeStamp)
                        .ToListAsync();
                if (HidePhotos.Equals(false))
                {
                    doc.Mobilized_Photos = await _context.PhotoFilesMobilizations.Include(x => x.Mobilize).Where(x => x.TimeStamp >= starttime && x.TimeStamp <= endtime).ToListAsync();
                    doc.Arrival_Photos = await _context.PhotoFilesArrivals.Include(x => x.Arrival).Where(x => x.TimeStamp >= starttime && x.TimeStamp <= endtime).ToListAsync();
                    doc.Install_Photos = await _context.PhotoFilesInstalls.Include(x => x.Install).Where(x => x.TimeStamp >= starttime && x.TimeStamp <= endtime).ToListAsync();
                    doc.Deinstall_Photos = await _context.PhotoFilesDeInstalls.Include(x => x.DeInstall).Where(x => x.TimeStamp >= starttime && x.TimeStamp <= endtime).ToListAsync();
                }
                else
                {
                    doc.Mobilized_Photos = new List<PhotoFileMobilized>();
                    doc.Arrival_Photos = new List<PhotoFileArrival>();
                    doc.Install_Photos = new List<PhotoFileInstalled2>();
                    doc.Deinstall_Photos = new List<PhotoFileDeinstalled>();
                }
                return doc;
            }
            else
            {
                doc.Mobilizations = doc.Mobilizations.Where(x => x.SubProjectId.Equals(SubProjectId)).OrderByDescending(x => x.TimeStamp).ToList();
                doc.Installations = doc.Installations.Where(x => x.SubProjectId.Equals(SubProjectId)).OrderByDescending(x => x.TimeStamp).ToList();
                doc.Daily_Reports = doc.Daily_Reports.Where(x => x.SubProjectId.Equals(SubProjectId)).OrderByDescending(x => x.Report_Date).ToList();
                doc.ExtraWorks = doc.ExtraWorks.Where(x => x.SubProjectId.Equals(SubProjectId)).OrderByDescending(x => x.TimeStamp).ToList();
                doc.Deinstallations = await _context.Deinstallations
                    .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                    .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => x.TimeStamp <= endtime && x.TimeStamp >= starttime && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId))
                    .OrderBy(x => x.TimeStamp)
                    .ToListAsync();
                if (HidePhotos.Equals(false))
                {
                    doc.Mobilized_Photos = await _context.PhotoFilesMobilizations.Include(x => x.Mobilize).Where(x => x.TimeStamp >= starttime && x.TimeStamp <= endtime && x.Mobilize.SubProjectId.Equals(SubProjectId)).ToListAsync();
                    doc.Arrival_Photos = await _context.PhotoFilesArrivals.Include(x => x.Arrival).Where(x => x.TimeStamp >= starttime && x.TimeStamp <= endtime && x.Arrival.SubProjectId.Equals(SubProjectId)).ToListAsync();
                    doc.Install_Photos = await _context.PhotoFilesInstalls.Include(x => x.Install).Where(x => x.TimeStamp >= starttime && x.TimeStamp <= endtime && x.Install.SubProjectId.Equals(SubProjectId)).ToListAsync();
                    doc.Deinstall_Photos = await _context.PhotoFilesDeInstalls.Include(x => x.DeInstall).Where(x => x.TimeStamp >= starttime && x.TimeStamp <= endtime && x.DeInstall.SubProjectId.Equals(SubProjectId)).ToListAsync();
                }
                else
                {
                    doc.Mobilized_Photos = new List<PhotoFileMobilized>();
                    doc.Arrival_Photos = new List<PhotoFileArrival>();
                    doc.Install_Photos = new List<PhotoFileInstalled2>();
                    doc.Deinstall_Photos = new List<PhotoFileDeinstalled>();
                }
                return doc;
            }
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<AllDocumentation> DownloadDocumentation(DateTime starttime, DateTime endtime, int ProjectId, int? SubProjectId, bool hidePhotos = false)
        {
            if (SubProjectId == null)
            {
                AllDocumentation doc = new AllDocumentation();
                doc.starttime = starttime;
                doc.endtime = endtime;
                doc.ProjectId = ProjectId;
                doc.Mobilizations = await _context.Mobilisations
                        .Include(x => x.ItemType)
                        .Include(x => x.Project).ThenInclude(x => x.Division)
                        .Include(x => x.SubProject)
                        .Where(x => x.TimeStamp >= starttime && x.TimeStamp <= endtime && x.ProjectId.Equals(ProjectId))
                        .OrderBy(x => x.TimeStamp)
                        .ToListAsync();

                doc.Installations = await _context.Installations
                    .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                    .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => x.ProjectId.Equals(ProjectId) && x.TimeStamp <= endtime && (x.DeinstallDate == null || x.DeinstallDate >= starttime))
                    .OrderBy(x => x.TimeStamp)
                    .ToListAsync();
                doc.Deinstallations = await _context.Deinstallations
                    .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                    .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => x.TimeStamp <= endtime && x.TimeStamp >= starttime && x.ProjectId.Equals(ProjectId))
                    .OrderBy(x => x.TimeStamp)
                    .ToListAsync();
                doc.Arrivals = await _context.Arrivals
                    .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                    .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => x.TimeStamp <= endtime && x.ProjectId.Equals(ProjectId))
                    .OrderBy(x => x.TimeStamp)
                    .ToListAsync();
                doc.Daily_Reports = await _context.Daily_Report_2s
                    .Include(x => x.Title)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => x.Report_Date.Date >= starttime.Date && x.Report_Date.Date <= endtime.Date && x.ProjectId.Equals(ProjectId))
                    .OrderBy(x => x.Report_Date)
                    .ToListAsync();
                doc.ExtraWorks = await _context.ExtraWorks
                    .Include(x => x.Project)
                    .Include(x => x.SubProject)
                    .Where(x => x.TimeStamp.Date >= starttime.Date && x.TimeStamp.Date <= endtime.Date && x.ProjectId.Equals(ProjectId))
                    .OrderBy(x => x.TimeStamp)
                    .ToListAsync();
                if (hidePhotos.Equals(false))
                {
                    doc.Mobilized_Photos = await _context.PhotoFilesMobilizations.Include(x => x.Mobilize).Where(x => x.TimeStamp >= starttime && x.TimeStamp <= endtime).ToListAsync();
                    doc.Arrival_Photos = await _context.PhotoFilesArrivals.Include(x => x.Arrival).Where(x => x.TimeStamp >= starttime && x.TimeStamp <= endtime).ToListAsync();
                    doc.Install_Photos = await _context.PhotoFilesInstalls.Include(x => x.Install).Where(x => x.TimeStamp >= starttime && x.TimeStamp <= endtime).ToListAsync();
                    doc.Deinstall_Photos = await _context.PhotoFilesDeInstalls.Include(x => x.DeInstall).Where(x => x.TimeStamp >= starttime && x.TimeStamp <= endtime).ToListAsync();
                }
                else
                {
                    doc.Mobilized_Photos = new List<PhotoFileMobilized>();
                    doc.Arrival_Photos = new List<PhotoFileArrival>();
                    doc.Install_Photos = new List<PhotoFileInstalled2>();
                    doc.Deinstall_Photos = new List<PhotoFileDeinstalled>();
                }
                foreach (Daily_Report_2 DR in doc.Daily_Reports)
                {
                    string path = _env.WebRootPath + "/AHAK/DailyReports/" + DR.Id.ToString() + "/";
                    List<string> pictures = new List<string>();
                    if (hidePhotos.Equals(false))
                    {
                        if (Directory.Exists(path))
                        {
                            var folder = Directory.EnumerateFiles(path)
                                             .Select(fn => Path.GetFileName(fn));

                            foreach (string file in folder)
                            {
                                if (file.Contains("_edit"))
                                {
                                    pictures.Add(file);
                                }
                                else
                                {
                                    string[] fileparts = file.Split(".");
                                    if (!folder.Contains(fileparts[0] + "_edit." + fileparts[1]))
                                    {
                                        pictures.Add(file);
                                    }
                                }
                            }
                        }
                    }
                    DR.pictures = pictures;
                }
                foreach (ExtraWork ER in doc.ExtraWorks)
                {
                    string path = _env.WebRootPath + "/AHAK/ExtraWorks/" + ER.Id.ToString() + "/";
                    List<string> pictures = new List<string>();
                    List<string> pdf2s = new List<string>();
                    if (Directory.Exists(path))
                    {
                        var folder = Directory.EnumerateFiles(path)
                                         .Select(fn => Path.GetFileName(fn));
                        if (hidePhotos.Equals(false))
                        {
                            foreach (string file in folder)
                            {
                                if (file.Contains(".png"))
                                {
                                    pdf2s.Add(file.Replace(".png", ".pdf"));
                                }
                                else if (file.Contains("_edit"))
                                {
                                    if (file.Contains(".pdf"))
                                    {
                                        int numberofpages = PhotoExtensions.getNumberOfPdfPages(path + file);
                                        if (numberofpages < 1)
                                        {
                                            numberofpages = 30;
                                        }
                                        for (int i = 0; i < numberofpages; i++)
                                        {
                                            try
                                            {
                                                if (!System.IO.File.Exists(path + file.Split(".pdf")[0] + "_" + i.ToString() + ".png"))
                                                {
                                                    byte[] bytes = System.IO.File.ReadAllBytes(path + file);
                                                    MemoryStream ms = PhotoExtensions.PdfToImage(bytes, i);
                                                    string filename = file.Split(".pdf")[0] + "_" + i.ToString() + ".pdf";
                                                    using (FileStream fileToSave = new FileStream(path + filename.Replace(".pdf", ".png"), FileMode.Create, System.IO.FileAccess.Write))
                                                    {
                                                        ms.CopyTo(fileToSave);
                                                    }
                                                    ms.Close();
                                                    pdf2s.Add(filename);
                                                }
                                            }
                                            catch
                                            {

                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (!System.IO.File.Exists(path + file.Replace(".png", ".pdf")))
                                        {
                                            pictures.Add(file);
                                        }
                                    }

                                }
                                else
                                {
                                    string[] fileparts = file.Split(".");
                                    if (!folder.Contains(fileparts[0] + "_edit." + fileparts[1]))
                                    {
                                        if (file.Contains(".pdf"))
                                        {
                                            int numberofpages = PhotoExtensions.getNumberOfPdfPages(path + file);
                                            if (numberofpages < 1)
                                            {
                                                numberofpages = 30;
                                            }
                                            for (int i = 0; i < numberofpages; i++)
                                            {
                                                try
                                                {
                                                    if (!System.IO.File.Exists(path + file.Split(".pdf")[0] + "_" + i.ToString() + ".png"))
                                                    {
                                                        byte[] bytes = System.IO.File.ReadAllBytes(path + file);
                                                        MemoryStream ms = PhotoExtensions.PdfToImage(bytes, i);
                                                        string filename = file.Split(".pdf")[0] + "_" + i.ToString() + ".pdf";
                                                        using (FileStream fileToSave = new FileStream(path + filename.Replace(".pdf", ".png"), FileMode.Create, System.IO.FileAccess.Write))
                                                        {
                                                            ms.CopyTo(fileToSave);
                                                        }
                                                        ms.Close();
                                                        pdf2s.Add(filename);
                                                    }
                                                }
                                                catch
                                                {

                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (!System.IO.File.Exists(path + file.Replace(".png", ".pdf")))
                                            {
                                                pictures.Add(file);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    ER.pictures = pictures;
                    ER.pdf2s = pdf2s;
                }
                doc.starttime = starttime;
                doc.endtime = endtime;
                return doc;
            }
            else
            {
                AllDocumentation doc = new AllDocumentation();
                doc.starttime = starttime;
                doc.endtime = endtime;
                doc.ProjectId = ProjectId;
                doc.SubProjectId = SubProjectId;
                doc.Mobilizations = await _context.Mobilisations
                        .Include(x => x.ItemType)
                        .Include(x => x.Project).ThenInclude(x => x.Division)
                        .Include(x => x.SubProject)
                        .Where(x => x.TimeStamp >= starttime && x.TimeStamp <= endtime && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId))
                        .OrderBy(x => x.TimeStamp)
                        .ToListAsync();

                doc.Installations = await _context.Installations
                    .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                    .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId) && x.TimeStamp <= endtime && (x.DeinstallDate == null || x.DeinstallDate >= starttime))
                    .OrderBy(x => x.TimeStamp)
                    .ToListAsync();
                doc.Deinstallations = await _context.Deinstallations
                    .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                    .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => x.TimeStamp <= endtime && x.TimeStamp >= starttime && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId))
                    .OrderBy(x => x.TimeStamp)
                    .ToListAsync();
                doc.Arrivals = await _context.Arrivals
                    .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                    .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => x.TimeStamp <= endtime && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId))
                    .OrderBy(x => x.TimeStamp)
                    .ToListAsync();
                doc.Daily_Reports = await _context.Daily_Report_2s
                    .Include(x => x.Title)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Where(x => x.Report_Date.Date >= starttime.Date && x.Report_Date.Date <= endtime.Date && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId))
                    .OrderBy(x => x.Report_Date)
                    .ToListAsync();
                doc.ExtraWorks = await _context.ExtraWorks
                    .Include(x => x.Project)
                    .Include(x => x.SubProject)
                    .Where(x => x.TimeStamp.Date >= starttime.Date && x.TimeStamp.Date <= endtime.Date && x.ProjectId.Equals(ProjectId) && x.SubProjectId.Equals(SubProjectId))
                    .OrderBy(x => x.TimeStamp)
                    .ToListAsync();
                if (hidePhotos.Equals(false))
                {
                    doc.Mobilized_Photos = await _context.PhotoFilesMobilizations.Include(x => x.Mobilize).Where(x => x.TimeStamp >= starttime && x.TimeStamp <= endtime).ToListAsync();
                    doc.Arrival_Photos = await _context.PhotoFilesArrivals.Include(x => x.Arrival).Where(x => x.TimeStamp >= starttime && x.TimeStamp <= endtime).ToListAsync();
                    doc.Install_Photos = await _context.PhotoFilesInstalls.Include(x => x.Install).Where(x => x.TimeStamp >= starttime && x.TimeStamp <= endtime).ToListAsync();
                    doc.Deinstall_Photos = await _context.PhotoFilesDeInstalls.Include(x => x.DeInstall).Where(x => x.TimeStamp >= starttime && x.TimeStamp <= endtime).ToListAsync();
                }
                else
                {
                    doc.Mobilized_Photos = new List<PhotoFileMobilized>();
                    doc.Arrival_Photos = new List<PhotoFileArrival>();
                    doc.Install_Photos = new List<PhotoFileInstalled2>();
                    doc.Deinstall_Photos = new List<PhotoFileDeinstalled>();
                }
                foreach (Daily_Report_2 DR in doc.Daily_Reports)
                {
                    string path = _env.WebRootPath + "/AHAK/DailyReports/" + DR.Id.ToString() + "/";
                    List<string> pictures = new List<string>();
                    if (hidePhotos.Equals(false))
                    {
                        if (Directory.Exists(path))
                        {
                            var folder = Directory.EnumerateFiles(path)
                                             .Select(fn => Path.GetFileName(fn));

                            foreach (string file in folder)
                            {
                                if (file.Contains("_edit"))
                                {
                                    pictures.Add(file);
                                }
                                else
                                {
                                    string[] fileparts = file.Split(".");
                                    if (!folder.Contains(fileparts[0] + "_edit." + fileparts[1]))
                                    {
                                        pictures.Add(file);
                                    }
                                }
                            }
                        }
                    }
                    DR.pictures = pictures;
                }
                foreach (ExtraWork ER in doc.ExtraWorks)
                {
                    string path = _env.WebRootPath + "/AHAK/ExtraWorks/" + ER.Id.ToString() + "/";
                    List<string> pictures = new List<string>();
                    List<string> pdf2s = new List<string>();
                    if (Directory.Exists(path))
                    {
                        var folder = Directory.EnumerateFiles(path)
                                         .Select(fn => Path.GetFileName(fn));

                        foreach (string file in folder)
                        {
                            if (file.Contains(".png"))
                            {
                                pdf2s.Add(file.Replace(".png", ".pdf"));
                            }
                            else if (file.Contains("_edit"))
                            {
                                if (file.Contains(".pdf"))
                                {
                                    int numberofpages = PhotoExtensions.getNumberOfPdfPages(path + file);
                                    if (numberofpages < 1)
                                    {
                                        numberofpages = 30;
                                    }
                                    for (int i = 0; i < numberofpages; i++)
                                    {
                                        try
                                        {
                                            if (!System.IO.File.Exists(path + file.Split(".pdf")[0] + "_" + i.ToString() + ".png"))
                                            {
                                                byte[] bytes = System.IO.File.ReadAllBytes(path + file);
                                                MemoryStream ms = PhotoExtensions.PdfToImage(bytes, i);
                                                string filename = file.Split(".pdf")[0] + "_" + i.ToString() + ".pdf";
                                                using (FileStream fileToSave = new FileStream(path + filename.Replace(".pdf", ".png"), FileMode.Create, System.IO.FileAccess.Write))
                                                {
                                                    ms.CopyTo(fileToSave);
                                                }
                                                ms.Close();
                                                pdf2s.Add(filename);
                                            }
                                        }
                                        catch
                                        {

                                        }
                                    }
                                }
                                else
                                {
                                    if (!System.IO.File.Exists(path + file.Replace(".png", ".pdf")))
                                    {
                                        pictures.Add(file);
                                    }
                                }

                            }
                            else
                            {
                                string[] fileparts = file.Split(".");
                                if (!folder.Contains(fileparts[0] + "_edit." + fileparts[1]))
                                {
                                    if (file.Contains(".pdf"))
                                    {
                                        int numberofpages = PhotoExtensions.getNumberOfPdfPages(path + file);
                                        if (numberofpages < 1)
                                        {
                                            numberofpages = 30;
                                        }
                                        for (int i = 0; i < numberofpages; i++)
                                        {
                                            try
                                            {
                                                if (!System.IO.File.Exists(path + file.Split(".pdf")[0] + "_" + i.ToString() + ".png"))
                                                {
                                                    byte[] bytes = System.IO.File.ReadAllBytes(path + file);
                                                    MemoryStream ms = PhotoExtensions.PdfToImage(bytes, i);
                                                    string filename = file.Split(".pdf")[0] + "_" + i.ToString() + ".pdf";
                                                    using (FileStream fileToSave = new FileStream(path + filename.Replace(".pdf", ".png"), FileMode.Create, System.IO.FileAccess.Write))
                                                    {
                                                        ms.CopyTo(fileToSave);
                                                    }
                                                    ms.Close();
                                                    pdf2s.Add(filename);
                                                }
                                            }
                                            catch
                                            {

                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (!System.IO.File.Exists(path + file.Replace(".png", ".pdf")))
                                        {
                                            pictures.Add(file);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    ER.pictures = pictures;
                    ER.pdf2s = pdf2s;
                }
                doc.starttime = starttime;
                doc.endtime = endtime;
                return doc;
            }
        }
        [HttpPost]
        [Authorize(Roles = "Admin,Manager")]
        public async Task<IActionResult> MakePaidAjax(int? id)
        {
            var user = await _userManager.GetUserAsync(User);
            var dr = await _context.Daily_Report_2s.Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
            dr.tobepaid = 1;
            dr.InvoiceDate = DateTime.Now;
            _context.Daily_Report_2s.Update(dr);
            await _context.SaveChangesAsync();
            return Ok();
        }
        [HttpPost]
        [Authorize(Roles = "Admin,Manager")]
        public async Task<IActionResult> MakeUnPaidAjax(int? id)
        {
            var user = await _userManager.GetUserAsync(User);
            var dr = await _context.Daily_Report_2s.Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
            dr.tobepaid = 2;
            dr.InvoiceDate = DateTime.Now;
            _context.Daily_Report_2s.Update(dr);
            await _context.SaveChangesAsync();
            return Ok();
        }
        [HttpPost]
        [Authorize(Roles = "Admin,Manager")]
        public async Task<IActionResult> ApproveAjax(int? id)
        {
            var user = await _userManager.GetUserAsync(User);
            var dr = await _context.Daily_Report_2s.Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
            dr.Report_Checked = true;
            dr.Checked_By = user.full_name();
            _context.Daily_Report_2s.Update(dr);
            await _context.SaveChangesAsync();
            return Ok();
        }
        [HttpPost]
        [Authorize(Roles = "Admin,Manager")]
        public async Task<IActionResult> MakePaid(int? id, bool all)
        {
            ViewData["all"] = all;
            if (id != null)
            {
                var user = await _userManager.GetUserAsync(User);
                var dr = await _context.Daily_Report_2s.Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                dr.tobepaid = 1;
                dr.InvoiceDate = DateTime.Now;
                _context.Daily_Report_2s.Update(dr);
                await _context.SaveChangesAsync();
                List<Daily_Report_2> daily_reports = new List<Daily_Report_2>();
                if (User.IsInRole("Manager") || User.IsInRole("Admin") || User.IsInRole("DivisionAdmin"))
                {
                    ViewData["ProjectId"] = await GetProjectList();
                    ViewData["SubProjectId"] = new SelectList(_context.SubProjects.Where(x => x.ProjectId.Equals(dr.ProjectId)), "Id", "Name");
                    if (all == true)
                    {
                        daily_reports = await _context.Daily_Report_2s
                           .Include(x => x.Title)
                           .Include(x => x.Project)
                           .Include(x => x.SubProject)
                           .Include(x => x.VariationOrder)
                           .Where(x => x.ProjectId.Equals(dr.ProjectId) && x.Report_Checked.Equals(false))
                           .OrderByDescending(x => x.Report_Date).ToListAsync();
                        return View("Reports/UncheckedReports", daily_reports);
                    }
                    else
                    {
                        daily_reports = await _context.Daily_Report_2s
                           .Include(x => x.Title)
                           .Include(x => x.Project)
                            .Include(x => x.SubProject)
                           .Include(x => x.VariationOrder)
                           .Where(x => x.ProjectId.Equals(dr.ProjectId) && x.Report_Checked.Equals(false) && x.Report_Date >= DateTime.Now.AddDays(-60))
                           .OrderByDescending(x => x.Report_Date).ToListAsync();
                        return View("Reports/UncheckedReports", daily_reports);
                    }

                }
                else
                {
                    return NotFound();
                }
            }
            else
            {
                return NotFound();
            }
        }
        [HttpPost]
        [Authorize(Roles = "Admin,Manager")]
        public async Task<IActionResult> MakeDrillRigDownTime(int? id)
        {
            if (id != null)
            {
                var user = await _userManager.GetUserAsync(User);
                var dr = await _context.Daily_Report_2s.Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                var itemtype = await _context.ItemTypes.Where(x => x.ProjectId.Equals(dr.ProjectId) && x.ReportTypeId.Equals(18)).SingleOrDefaultAsync();
                if (itemtype != null)
                {
                    Install inst = new Install
                    {
                        ItemTypeId = itemtype.Id,
                        TimeStamp = dr.Report_Date,
                        InvoiceDate = DateTime.Now,
                        RentalStartDate = dr.Report_Date,
                        ToBePaid = true,
                        Latitude = 0,
                        Longitude = 0,
                        isInstalled = false,
                        Amount = 1,
                        DeinstallDate = dr.Report_Date,
                        ProjectId = dr.ProjectId,
                        SubProjectId = dr.SubProjectId,
                        Location = "",
                        UniqueID = "DailyReport: " + String.Format("{0:yyyy-MM-dd}", dr.Report_Date) + " ID: " + dr.Id.ToString(),
                        IsInOperation = false,
                        EnteredIntoDataBase = DateTime.Now,
                        LastEditedInDataBase = null,
                        DoneBy = user.full_name(),
                        PayedAmount = 0

                    };
                    _context.Add(inst);
                    await _context.SaveChangesAsync();
                }
                //dr.tobepaid = 1;
                //_context.Daily_Report_2s.Update(dr);
                //await _context.SaveChangesAsync();
                List<Daily_Report_2> daily_reports = new List<Daily_Report_2>();
                if (User.IsInRole("Manager") || User.IsInRole("Admin") || User.IsInRole("DivisionAdmin"))
                {
                    ViewData["ProjectId"] = await GetProjectList();
                    ViewData["SubProjectId"] = new SelectList(_context.SubProjects.Where(x => x.ProjectId.Equals(dr.ProjectId)), "Id", "Name");

                    daily_reports = await _context.Daily_Report_2s
                            .Include(x => x.Title)
                            .Include(x => x.Project).Include(x => x.SubProject)
                           .Include(x => x.VariationOrder)
                            .Where(x => x.ProjectId.Equals(dr.ProjectId) && x.Report_Checked.Equals(false) && x.Report_Date >= DateTime.Now.AddDays(-60))
                            .OrderByDescending(x => x.Report_Date).ToListAsync();
                    return View("Reports/UncheckedReports", daily_reports);
                }
                else
                {
                    return NotFound();
                }
            }
            else
            {
                return NotFound();
            }
        }
        [HttpPost]
        [Authorize(Roles = "Admin,Manager,ProjectMember")]
        public async Task<IActionResult> CancelDeInstall(int? id)
        {
            if (id != null)
            {
                var deinstall = await _context.Deinstallations.Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                var install = await _context.Installations.SingleOrDefaultAsync(x => x.Id.Equals(deinstall.InstallId));
                var coordtrack = await _context.CoordTrack2s.Where(x => x.InstallId.Equals(install.Id) && x.TypeCoord.Equals("DeInstalled")).FirstOrDefaultAsync();
                if (install != null)
                {
                    install.isInstalled = true;
                    install.DeinstallDate = null;
                    _context.Installations.Update(install);
                }
                _context.Deinstallations.Remove(deinstall);
                if (coordtrack != null)
                {
                    _context.CoordTrack2s.Remove(coordtrack);
                }
                await _context.SaveChangesAsync();
                return RedirectToAction("Deinstallations");

            }
            else
            {
                return NotFound();
            }
        }
        [HttpPost]
        [Authorize(Roles = "Admin,Manager")]
        public async Task<IActionResult> MakeUnPaid(int? id, bool all)
        {
            ViewData["all"] = all;
            if (id != null)
            {
                var user = await _userManager.GetUserAsync(User);
                var dr = await _context.Daily_Report_2s.Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                dr.tobepaid = 2;
                _context.Daily_Report_2s.Update(dr);
                await _context.SaveChangesAsync();

                if (User.IsInRole("Manager") || User.IsInRole("Admin") || User.IsInRole("DivisionAdmin"))
                {
                    ViewData["ProjectId"] = await GetProjectList();
                    ViewData["SubProjectId"] = new SelectList(_context.SubProjects.Where(x => x.ProjectId.Equals(dr.ProjectId)), "Id", "Name");
                    if (all == true)
                    {
                        var daily_reports = await _context.Daily_Report_2s
                            .Include(x => x.Title)
                            .Include(x => x.Project).Include(x => x.SubProject)
                           .Include(x => x.VariationOrder)
                            .Where(x => x.ProjectId.Equals(dr.ProjectId) && x.Report_Checked.Equals(false))
                            .OrderByDescending(x => x.Report_Date).ToListAsync();
                        return View("Reports/UncheckedReports", daily_reports);
                    }
                    else
                    {
                        var daily_reports = await _context.Daily_Report_2s
                            .Include(x => x.Title)
                            .Include(x => x.Project).Include(x => x.SubProject)
                           .Include(x => x.VariationOrder)
                            .Where(x => x.ProjectId.Equals(dr.ProjectId) && x.Report_Checked.Equals(false) && x.Report_Date >= DateTime.Now.AddDays(-60))
                            .OrderByDescending(x => x.Report_Date).ToListAsync();
                        return View("Reports/UncheckedReports", daily_reports);
                    }



                }
                else
                {
                    return NotFound();
                }
            }
            else
            {
                return NotFound();
            }
        }
        [HttpPost]
        [Authorize(Roles = "Admin,Manager")]
        public async Task<IActionResult> Approve_DailyReport(int? id, bool all)
        {
            ViewData["all"] = all;
            if (id != null)
            {

                var user = await _userManager.GetUserAsync(User);
                var dr = await _context.Daily_Report_2s.Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                dr.Report_Checked = true;
                dr.Checked_By = user.full_name();
                _context.Daily_Report_2s.Update(dr);
                await _context.SaveChangesAsync();
                if (User.IsInRole("Manager") || User.IsInRole("Admin") || User.IsInRole("DivisionAdmin") || User.IsInRole("Supervisor"))
                {
                    ViewData["ProjectId"] = await GetProjectList();
                    ViewData["SubProjectId"] = new SelectList(_context.SubProjects.Where(x => x.ProjectId.Equals(dr.ProjectId)), "Id", "Name");
                    if (all == true)
                    {
                        var daily_reports = await _context.Daily_Report_2s
                            .Include(x => x.Title)
                            .Include(x => x.Project)
                            .Include(x => x.SubProject)
                           .Include(x => x.VariationOrder)
                            .Where(x => x.ProjectId.Equals(dr.ProjectId) && x.Report_Checked.Equals(false))
                            .OrderByDescending(x => x.Report_Date).ToListAsync();

                        return View("Reports/UncheckedReports", daily_reports);
                    }
                    else
                    {
                        var daily_reports = await _context.Daily_Report_2s
                            .Include(x => x.Title)
                            .Include(x => x.Project)
                            .Include(x => x.SubProject)
                           .Include(x => x.VariationOrder)
                            .Where(x => x.ProjectId.Equals(dr.ProjectId) && x.Report_Checked.Equals(false) && x.Report_Date >= DateTime.Now.AddDays(-60))
                            .OrderByDescending(x => x.Report_Date).ToListAsync();

                        return View("Reports/UncheckedReports", daily_reports);
                    }

                }
                else
                {
                    return NotFound();
                }

            }
            else
            {
                return NotFound();
            }
        }

        [Authorize(Roles = "Admin,DivisionAdmin,Manager")]
        public async Task<IActionResult> ShowUncheckedDailyReports(int? ProjectId, int? SubProjectId, bool all)
        {
            ViewData["all"] = all;
            var user = await _userManager.GetUserAsync(User);
            List<Daily_Report_2> daily_reports = new List<Daily_Report_2>();
            if (User.IsInRole("Manager") || User.IsInRole("Admin") || User.IsInRole("DivisionAdmin"))
            {
                ViewData["ProjectId"] = await GetProjectList();
                if (all == true)
                {
                    if (ProjectId != null)
                    {
                        daily_reports = await _context.Daily_Report_2s
                            .Include(x => x.Title)
                            .Include(x => x.Project)
                            .Include(x => x.SubProject)
                            .Include(x => x.VariationOrder)
                            .Where(x => x.ProjectId.Equals(ProjectId) && x.Report_Checked.Equals(false))
                            .OrderByDescending(x => x.Report_Date).ToListAsync();


                    }
                    else
                    {
                        if (SubProjectId == null)
                        {
                            daily_reports = await _context.Daily_Report_2s
                            .Include(x => x.Title)
                            .Include(x => x.Project)
                            .Include(x => x.SubProject)
                            .Include(x => x.VariationOrder)
                            .Where(x => x.Report_Checked.Equals(false) && x.Project.DivisionId.Equals(user.DivisionId))
                            .OrderByDescending(x => x.Report_Date).Take(100).ToListAsync();
                        }
                        else
                        {
                            daily_reports = await _context.Daily_Report_2s
                            .Include(x => x.Title)
                            .Include(x => x.Project)
                            .Include(x => x.SubProject)
                            .Include(x => x.VariationOrder)
                            .Where(x => x.Report_Checked.Equals(false) && x.Project.DivisionId.Equals(user.DivisionId))
                            .OrderByDescending(x => x.Report_Date).ToListAsync();
                        }

                    }
                }
                else
                {
                    if (ProjectId != null)
                    {
                        daily_reports = await _context.Daily_Report_2s
                            .Include(x => x.Title)
                            .Include(x => x.Project)
                            .Include(x => x.SubProject)
                            .Include(x => x.VariationOrder)
                            .Where(x => x.ProjectId.Equals(ProjectId) && x.Report_Checked.Equals(false) && x.Report_Date >= DateTime.Now.AddDays(-60))
                            .OrderByDescending(x => x.Report_Date).ToListAsync();


                    }
                    else
                    {
                        if (SubProjectId == null)
                        {
                            daily_reports = await _context.Daily_Report_2s
                            .Include(x => x.Title)
                            .Include(x => x.Project)
                            .Include(x => x.SubProject)
                            .Include(x => x.VariationOrder)
                            .Where(x => x.Report_Checked.Equals(false) && x.Project.DivisionId.Equals(user.DivisionId) && x.Report_Date >= DateTime.Now.AddDays(-60))
                            .OrderByDescending(x => x.Report_Date).Take(100).ToListAsync();
                        }
                        else
                        {
                            daily_reports = await _context.Daily_Report_2s
                            .Include(x => x.Title)
                            .Include(x => x.Project)
                            .Include(x => x.SubProject)
                            .Include(x => x.VariationOrder)
                            .Where(x => x.Report_Checked.Equals(false) && x.Project.DivisionId.Equals(user.DivisionId) && x.Report_Date >= DateTime.Now.AddDays(-60))
                            .OrderByDescending(x => x.Report_Date).ToListAsync();
                        }

                    }
                }

                if (SubProjectId != null)
                {
                    daily_reports = daily_reports.Where(x => x.SubProjectId.Equals(SubProjectId)).OrderByDescending(x => x.Report_Date).ThenBy(x => x.Project.Name).ThenBy(x => x.SubProject.Name).ToList();
                }

                return View("Reports/UncheckedReports", daily_reports);
            }
            else
            {
                return NotFound();
            }

        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Guest,Manager,International")]
        public async Task<IActionResult> GenerateInvoice()
        {
            var theuser = await _userManager.GetUserAsync(User);
            ViewData["ProjectId"] = await GetProjectList();
            GenerateInvoiceVM model = new GenerateInvoiceVM();
            ViewData["snapshotid"] = new SelectList(_context.SnapShots.Include(x => x.Project).Where(x => x.Project.DivisionId.Equals(theuser.DivisionId)), "Id", "SnapShotName");

            return View(model);
        }

        //current works in version 2.0!
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Guest,Manager,International")]
        public async Task<IActionResult> GenerateInvoice(GenerateInvoiceVM modelin)
        {
            if (ModelState.IsValid)
            {
                var stopwatch = Stopwatch.StartNew();

                InvoiceModel model = new InvoiceModel();
                model.GenerationTime = DateTime.Now;
                model.NoMoneyNumbers = modelin.NoMoneyNumbers;
                model.headlines = await _context.BoQHeadLines.Where(x => x.ProjectId.Equals(modelin.ProjectId)).ToListAsync();
                DateTime starttime = modelin.starttime.Date;
                DateTime endtime = modelin.endtime.Date;
                model.starttime = starttime;
                model.endtime = endtime;
                var project = await _context.Projects.Include(x => x.SubProjects).Include(x => x.Division).SingleOrDefaultAsync(x => x.Id.Equals(modelin.ProjectId));
                model.ProjectId = project.Id;
                model.Project = project;
                ItemType servicecar = await _context.ItemTypes.Where(x => x.Item_Type.Equals("Service Car") && x.ProjectId.Equals(model.ProjectId)).SingleOrDefaultAsync();
                model.SubProjectId = modelin.SubProjectId;
                model.HideOldItems = modelin.HideOldItems;
                ViewData["starttime"] = starttime;
                ViewData["endtime"] = endtime;
                List<Log2> Logs = new List<Log2>();
                if (modelin.ShowLogs == true)
                {
                    model.Logs = await _context.Log2s.Include(x => x.ItemType).Where(x => x.ItemType.ProjectId.Equals(modelin.ProjectId) && (x.Description.Contains("Before Edit") || x.Description.Contains("After Edit"))).OrderByDescending(x => x.Id).ToListAsync();
                }
                List<InvoiceItem> items = new List<InvoiceItem>();
                List<InvoiceItem> allItems = new List<InvoiceItem>();
                List<InvoiceItem> inconsistentItems = new List<InvoiceItem>();
                model.inconsistentItems = new List<InvoiceItem>();
                List<InvoiceItem> allInconsistentItems = new List<InvoiceItem>();
                model.allInconsistentItems = new List<InvoiceItem>();
                List<Mobilize> mobilizations = new List<Mobilize>();
                List<Install> installations = new List<Install>();
                List<Arrival> arrivals = new List<Arrival>();
                List<ExtraWork> extraworks = new List<ExtraWork>();
                List<Daily_Report_2> dailyreports = new List<Daily_Report_2>();
                List<Mobilize> mobilizations2 = new List<Mobilize>();
                List<Install> installations2 = new List<Install>();
                List<Arrival> arrivals2 = new List<Arrival>();
                List<ExtraWork> extraworks2 = new List<ExtraWork>();
                List<Install> InstallIdleAll = new List<Install>();
                List<Install> InstallIdle = new List<Install>();
                List<Daily_Report_2> dailyreports2 = new List<Daily_Report_2>();
                List<ItemType> MachineryItems = new List<ItemType>();
                List<ItemActivity> ItemActivities = await _context.ItemActivities.Where(x => x.ProjectId.Equals(modelin.ProjectId) && x.TheDate >= starttime && x.TheDate <= endtime).ToListAsync();
                List<ItemActivity> ItemActivities2 = await _context.ItemActivities.Where(x => x.ProjectId.Equals(modelin.ProjectId) && x.TheDate <= endtime).ToListAsync();
                List<ItemType> IdleItems = await _context.ItemTypes.Include(x => x.Discounts).Include(x => x.Discounts_Installation).Where(x => x.ProjectId.Equals(modelin.ProjectId) && x.Item_Type.ToLower().Contains("idle")).ToListAsync();
                List<AlarmCall> alarms2 = await _context.AlarmCalls.Where(x => x.ProjectId.Equals(modelin.ProjectId) && x.TimeStamp.Date <= endtime).ToListAsync();
                List<AlarmCall> alarms = alarms2.Where(x => x.ProjectId.Equals(modelin.ProjectId) && x.TimeStamp.Date >= starttime && x.TimeStamp.Date <= endtime).ToList();

                if (modelin.SubProjectId == -1 || modelin.SubProjectId == null)
                {
                    if (modelin.Tax)
                    {
                        if (!modelin.PayDownTime)
                        {
                            //dailyreports2 = await _context.Daily_Report_2s
                            //.Include(x => x.Title).ThenInclude(x => x.ItemType).ThenInclude(x => x.Discounts)
                            //.Where(x => x.InvoiceDate != null && Convert.ToDateTime(x.InvoiceDate).Date <= endtime && x.tobepaid.Equals(1) && x.ProjectId.Equals(modelin.ProjectId) && x.Report_Checked.Equals(true))
                            //.OrderBy(x => x.Report_Date)
                            //.ToListAsync();

                            dailyreports2 = await _context.Daily_Report_2s
                                .Include(x => x.Title).ThenInclude(x => x.ItemType).ThenInclude(x => x.Discounts)
                                .Where(x => x.InvoiceDate != null
                                            && x.InvoiceDate.Value.Date <= endtime.Date
                                            && x.tobepaid == 1
                                            && x.ProjectId == modelin.ProjectId
                                            && x.Report_Checked)
                                .OrderBy(x => x.Report_Date)
                                .ToListAsync();

                        }
                        else
                        {
                            dailyreports2 = await _context.Daily_Report_2s
                            .Include(x => x.Title).ThenInclude(x => x.ItemType).ThenInclude(x => x.Discounts)
                            .Where(x => (x.InvoiceDate != null && Convert.ToDateTime(x.InvoiceDate).Date <= endtime && x.tobepaid.Equals(1)) || (x.Report_Date.Date <= endtime && x.StandingTime.HasValue) && x.ProjectId.Equals(modelin.ProjectId) && x.Report_Checked.Equals(true))
                            .OrderBy(x => x.Report_Date)
                            .ToListAsync();
                            // dailyreports2 = dailyreports2.Where(x => x.StandingTime.Value.TotalMinutes > 0).ToList();
                        }
                        if (modelin.OnlyHours.Equals(false))
                        {
                            mobilizations2 = await _context.Mobilisations
                                .Include(x => x.ItemType)
                                .Where(x => x.InvoiceDate.Date <= endtime.Date && x.ProjectId.Equals(modelin.ProjectId))
                                .OrderBy(x => x.TimeStamp)
                                .ToListAsync();
                            installations2 = await _context.Installations
                                .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                                .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                                .Include(x => x.ItemType).ThenInclude(x => x.Discounts)
                                .Include(x => x.ItemType).ThenInclude(x => x.Discounts_Installation)
                                .Where(x => x.InvoiceDate.Date <= endtime.Date && (x.DeinstallDate == null || x.DeinstallDate >= DateTime.Now.AddYears(-5)) && x.ProjectId.Equals(modelin.ProjectId))
                                .OrderBy(x => x.TimeStamp)
                                .ToListAsync();
                            arrivals2 = await _context.Arrivals
                                .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                                .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                                .Include(x => x.ItemType).ThenInclude(x => x.Discounts)
                                .Include(x => x.ItemType).ThenInclude(x => x.Discounts_Installation)
                                .Where(x => x.TimeStamp.Date <= endtime.Date && x.ProjectId.Equals(modelin.ProjectId))
                                .OrderBy(x => x.TimeStamp)
                                .ToListAsync();
                        }
                    }
                    if (modelin.OnlyHours.Equals(false))
                    {
                        //extraworks2 = await _context.ExtraWorks
                        //    .Include(x => x.Project)
                        //    .Include(x => x.SubProject)
                        //    .Where(x => (x.InvoiceDate != null && Convert.ToDateTime(x.InvoiceDate).Date <= endtime) && x.ProjectId.Equals(modelin.ProjectId))
                        //    .ToListAsync();

                        extraworks2 = await _context.ExtraWorks
                            .Include(x => x.Project)
                            .Include(x => x.SubProject)
                            .Where(x => x.InvoiceDate != null
                                        && x.InvoiceDate.Value.Date <= endtime.Date
                                        && x.ProjectId == modelin.ProjectId)
                            .ToListAsync();

                        arrivals = arrivals2.Where(x => (x.EndStamp == null || x.EndStamp >= starttime) || (x.InvoiceDate >= starttime && x.InvoiceDate <= endtime)).OrderBy(x => x.TimeStamp).ToList();

                        mobilizations = mobilizations2.Where(x => x.InvoiceDate.Date >= starttime).OrderBy(x => x.TimeStamp).ToList();
                        installations = installations2.Where(x => (x.DeinstallDate == null || x.DeinstallDate >= starttime) || x.ItemType.Rental_UnitId.Equals(11) || x.ItemType.Rental_UnitId.Equals(12) || x.ItemType.Rental_UnitId.Equals(13) || x.ItemType.Rental_UnitId.Equals(14) || (x.InvoiceDate.Date >= starttime.Date && x.InvoiceDate.Date <= endtime.Date)).OrderBy(x => x.TimeStamp).ToList();
                        extraworks = extraworks2.Where(x => x.InvoiceDate != null && Convert.ToDateTime(x.InvoiceDate).Date >= starttime && Convert.ToDateTime(x.InvoiceDate).Date <= endtime).OrderBy(x => x.TimeStamp).ToList();
                    }
                    dailyreports = dailyreports2.Where(x => (x.InvoiceDate != null && Convert.ToDateTime(x.InvoiceDate).Date >= starttime) || (x.StandingTime.HasValue && x.Report_Date.Date >= starttime)).OrderBy(x => x.Report_Date).ToList();
                }
                else
                {
                    alarms = alarms.Where(x => x.SubProjectId.Equals(modelin.SubProjectId)).ToList();
                    alarms2 = alarms2.Where(x => x.SubProjectId.Equals(modelin.SubProjectId)).ToList();
                    if (modelin.Tax)
                    {
                        if (modelin.OnlyHours.Equals(false))
                        {
                            mobilizations2 = await _context.Mobilisations
                                .Include(x => x.ItemType)
                                .Where(x => x.InvoiceDate.Date <= endtime.Date && x.ProjectId.Equals(modelin.ProjectId) && x.SubProjectId.Equals(modelin.SubProjectId))
                                .OrderBy(x => x.TimeStamp)
                                .ToListAsync();
                            installations2 = await _context.Installations
                                .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                                .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                                .Include(x => x.ItemType).ThenInclude(x => x.Discounts)
                                .Include(x => x.ItemType).ThenInclude(x => x.Discounts_Installation)
                                .Where(x => x.InvoiceDate.Date <= endtime.Date && (x.DeinstallDate == null || x.DeinstallDate >= DateTime.Now.AddYears(-5)) && x.ProjectId.Equals(modelin.ProjectId) && x.SubProjectId.Equals(modelin.SubProjectId))
                                .OrderBy(x => x.TimeStamp)
                                .ToListAsync();
                            arrivals2 = await _context.Arrivals
                                .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                                .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                                .Include(x => x.ItemType).ThenInclude(x => x.Discounts)
                                .Include(x => x.ItemType).ThenInclude(x => x.Discounts_Installation)
                                .Where(x => x.TimeStamp.Date <= endtime.Date && x.ProjectId.Equals(modelin.ProjectId) && x.SubProjectId.Equals(modelin.SubProjectId))
                                .OrderBy(x => x.TimeStamp)
                                .ToListAsync();
                        }
                        if (!modelin.PayDownTime)
                        {
                            dailyreports2 = await _context.Daily_Report_2s
                            .Include(x => x.Title).ThenInclude(x => x.ItemType).ThenInclude(x => x.Discounts)
                            .Where(x => x.InvoiceDate != null && Convert.ToDateTime(x.InvoiceDate).Date <= endtime && x.tobepaid.Equals(1) && x.ProjectId.Equals(modelin.ProjectId) && x.SubProjectId.Equals(modelin.SubProjectId) && x.Report_Checked.Equals(true))
                            .OrderBy(x => x.Report_Date)
                            .ToListAsync();
                        }
                        else
                        {
                            dailyreports2 = await _context.Daily_Report_2s
                            .Include(x => x.Title).ThenInclude(x => x.ItemType).ThenInclude(x => x.Discounts)
                            .Where(x => (x.InvoiceDate != null && Convert.ToDateTime(x.InvoiceDate).Date <= endtime && x.tobepaid.Equals(1)) || (x.Report_Date.Date <= endtime && x.StandingTime.HasValue) && x.ProjectId.Equals(modelin.ProjectId) && x.SubProjectId.Equals(modelin.SubProjectId) && x.Report_Checked.Equals(true))
                            .OrderBy(x => x.Report_Date)
                            .ToListAsync();
                            //dailyreports2 = dailyreports2.Where(x => x.StandingTime.Value.TotalMinutes > 0).ToList();
                        }

                    }
                    if (modelin.OnlyHours.Equals(false))
                    {
                        extraworks2 = await _context.ExtraWorks
                            .Include(x => x.Project)
                            .Include(x => x.SubProject)
                            .Where(x => (x.InvoiceDate != null && Convert.ToDateTime(x.InvoiceDate).Date <= endtime) && x.ProjectId.Equals(modelin.ProjectId) && x.SubProjectId.Equals(modelin.SubProjectId))
                            .ToListAsync();
                        arrivals = arrivals2.Where(x => (x.EndStamp == null || x.EndStamp >= starttime)).OrderBy(x => x.TimeStamp).ToList();

                        mobilizations = mobilizations2.Where(x => x.InvoiceDate.Date >= starttime).OrderBy(x => x.TimeStamp).ToList();
                        installations = installations2.Where(x => (x.DeinstallDate == null || x.DeinstallDate >= starttime) || (x.InvoiceDate.Date >= starttime.Date && x.InvoiceDate.Date <= endtime.Date)).OrderBy(x => x.TimeStamp).ToList();
                        extraworks = extraworks2.Where(x => x.InvoiceDate != null && Convert.ToDateTime(x.InvoiceDate).Date >= starttime && Convert.ToDateTime(x.InvoiceDate).Date <= endtime).OrderBy(x => x.TimeStamp).ToList();
                    }
                    dailyreports = dailyreports2.Where(x => (x.InvoiceDate != null && Convert.ToDateTime(x.InvoiceDate).Date >= starttime.Date) || (x.StandingTime.HasValue && x.Report_Date >= starttime)).OrderBy(x => x.Report_Date).ToList();
                }
                if (!modelin.Tax) //Take off non-liftable tax options
                {
                    extraworks = extraworks.Where(x => x.VAT_Liftable.Equals(false)).ToList();
                    extraworks2 = extraworks2.Where(x => x.VAT_Liftable.Equals(false)).ToList();
                }
                else
                {
                    extraworks = extraworks.Where(x => x.VAT_Liftable.Equals(true)).ToList();
                    extraworks2 = extraworks2.Where(x => x.VAT_Liftable.Equals(true)).ToList();
                }
                MachineryItems = await _context.ItemTypes.Where(x => x.ProjectId.Equals(modelin.ProjectId) && x.Rental_UnitId.Equals(5)).Include(x => x.Discounts).ToListAsync();
                var discounts = await _context.ItemTypes.Where(x => x.ProjectId.Equals(model.ProjectId) && x.Item_Type.Contains("Discount")).ToListAsync();
                var mobilizationsIN = (from m in mobilizations2
                                       where m.InvoiceDate >= starttime
                                       select new InvoiceItem
                                       {
                                           Item_Name = m.ItemType.Item_Type,
                                           Invoice_date = m.InvoiceDate.Date,
                                           SubProjectId = m.SubProjectId,
                                           ItemTypeId = m.ItemTypeId,
                                           ItemType = m.ItemType,
                                           BoQNr = m.ItemType.BoQnr,
                                           MobilizationId = m.Id,
                                           Mobilize = m,
                                           Amount = Convert.ToDouble(m.Amount),
                                           price = (m.InvoiceDate.Date >= starttime && m.InvoiceDate <= endtime) ? Convert.ToDecimal(m.ItemType.price) * Convert.ToDecimal(m.Amount) - (decimal)m.PaidAmount : (decimal)0.00,
                                           Install_date = m.TimeStamp.Date,
                                           Days = (m.TimeStamp.Date <= starttime) ? (endtime - m.TimeStamp.Date).Days + 1 : 0
                                       }).OrderBy(x => x.Install_date).ToList();
                //Add missing arrivals
                InstallIdleAll = await _context.Installations
                            .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                            .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                            .Include(x => x.ItemType).ThenInclude(x => x.Discounts)
                            .Include(x => x.ItemType).ThenInclude(x => x.Discounts_Installation)
                            .Where(x => x.TimeStamp.Date <= endtime && (x.DeinstallDate == null || x.DeinstallDate >= DateTime.Now.AddYears(-5)) && x.ProjectId.Equals(modelin.ProjectId))
                            .OrderBy(x => x.TimeStamp)
                            .ToListAsync();
                InstallIdle = InstallIdleAll.Where(x => (x.DeinstallDate == null || x.DeinstallDate >= starttime)).OrderBy(x => x.TimeStamp).ToList();

                foreach (var item2 in installations.Where(x => x.ItemType.rental_price > (decimal)0.0))
                {
                    //changed
                    var arrivalitem = arrivals2.Where(x => x.ItemTypeId.Equals(item2.ItemTypeId) && x.VariationOrderId.Equals(item2.VariationOrderId)).Count();
                    if (arrivalitem >= 1)
                    {
                        var sumarrivalsatdate = Convert.ToDouble(arrivals2.Where(x => x.ItemTypeId.Equals(item2.ItemTypeId) && x.VariationOrderId.Equals(item2.VariationOrderId) && x.TimeStamp.Date <= item2.RentalStartDate.Date && (x.EndStamp == null || x.EndStamp >= item2.RentalStartDate.Date)).Sum(x => x.Amount));
                        var suminstallsatdate = Convert.ToDouble(installations2.Where(x => x.ItemTypeId.Equals(item2.ItemTypeId) && x.VariationOrderId.Equals(item2.VariationOrderId) && x.RentalStartDate <= item2.RentalStartDate && (x.DeinstallDate == null || x.DeinstallDate > item2.RentalStartDate.Date)).Sum(x => x.Amount));
                        if (suminstallsatdate > sumarrivalsatdate)
                        {
                            Arrival newarrival = new Arrival
                            {
                                ToBePaid = true,
                                VariationOrderId = item2.VariationOrderId,
                                InvoiceDate = DateTime.Now.Date,
                                ItemType = item2.ItemType,
                                ItemTypeId = item2.ItemTypeId,
                                TimeStamp = item2.RentalStartDate,
                                Amount = suminstallsatdate - sumarrivalsatdate,
                                EndStamp = item2.DeinstallDate,
                                Id = 10000,
                                Arrival_Text = item2.UniqueID,
                                UniqueID = item2.UniqueID,
                                Project = model.Project,
                                ProjectId = model.ProjectId,
                                SubProject = model.SubProject,
                                SubProjectId = model.SubProjectId
                            };
                            Arrival newarrivalall = new Arrival
                            {
                                ToBePaid = true,
                                VariationOrderId = item2.VariationOrderId,
                                InvoiceDate = DateTime.Now.Date,
                                ItemType = item2.ItemType,
                                ItemTypeId = item2.ItemTypeId,
                                TimeStamp = item2.RentalStartDate,
                                Amount = suminstallsatdate - sumarrivalsatdate,
                                EndStamp = item2.DeinstallDate,
                                Id = 10000,
                                Arrival_Text = item2.UniqueID,
                                UniqueID = item2.UniqueID,
                                Project = model.Project,
                                ProjectId = model.ProjectId,
                                SubProject = model.SubProject,
                                SubProjectId = model.SubProjectId
                            };

                            arrivals.Add(newarrival);
                            arrivals2.Add(newarrivalall);

                        }
                    }
                    if (arrivalitem < 1)
                    {
                        Arrival newarrival = new Arrival
                        {
                            ToBePaid = true,
                            VariationOrderId = item2.VariationOrderId,
                            InvoiceDate = DateTime.Now.Date,
                            ItemType = item2.ItemType,
                            ItemTypeId = item2.ItemTypeId,
                            TimeStamp = item2.RentalStartDate,
                            Amount = item2.Amount,
                            EndStamp = item2.DeinstallDate,
                            Id = 10000,
                            Arrival_Text = item2.UniqueID,
                            UniqueID = item2.UniqueID,
                            Project = model.Project,
                            ProjectId = model.ProjectId,
                            SubProject = model.SubProject,
                            SubProjectId = model.SubProjectId


                        };
                        Arrival newarrivalall = new Arrival
                        {
                            ToBePaid = true,
                            VariationOrderId = item2.VariationOrderId,
                            InvoiceDate = DateTime.Now.Date,
                            ItemType = item2.ItemType,
                            ItemTypeId = item2.ItemTypeId,
                            TimeStamp = item2.RentalStartDate,
                            Amount = item2.Amount,
                            EndStamp = item2.DeinstallDate,
                            Id = 10000,
                            Arrival_Text = item2.UniqueID,
                            UniqueID = item2.UniqueID,
                            Project = model.Project,
                            ProjectId = model.ProjectId,
                            SubProject = model.SubProject,
                            SubProjectId = model.SubProjectId
                        };


                        arrivals2.Add(newarrivalall);

                        if (item2.DeinstallDate >= starttime || item2.DeinstallDate == null)
                        {
                            arrivals.Add(newarrival);
                        }
                    }
                }
                //
                foreach (var II in mobilizationsIN)
                {
                    items.Add(II);
                    if (modelin.CheckInconsistensies == true)
                    {
                        inconsistentItems.Add(II);
                    }
                    var discount = discounts.Where(x => x.Item_Type.Contains(II.ItemType.Item_Type) && x.BoQnr >= II.ItemType.BoQnr).FirstOrDefault();
                    if (discount != null)
                    {
                        InvoiceItem II2 = new InvoiceItem();
                        II2.MobilizationId = II.MobilizationId;
                        II2.SubProjectId = II.SubProjectId;
                        II2.Install_date = II.Install_date;
                        II2.location = II.location;
                        II2.price = discount.price;
                        II2.Days = II.Days;
                        II2.Amount = II.Amount;
                        II2.BoQNr = discount.BoQnr;
                        II2.ItemTypeId = discount.Id;
                        II2.ItemType = discount;
                        II2.Item_Name = discount.Item_Type;
                        II2.price = Convert.ToDecimal(discount.price) * (decimal)II2.Amount;
                        items.Add(II2);
                    }
                }

                foreach (Arrival arr in arrivals)
                {
                    if (arr.UniqueID == null)
                    {
                        arr.UniqueID = "";
                    }
                    if (arr.UniqueID.Contains("#"))
                    {
                        List<Install>? installs = new List<Install>();
                        if (arr.EndStamp != null)
                        {
                            //installs = installations.Where(x => x.UniqueID.Equals(arr.UniqueID) && x.ItemTypeId.Equals(arr.ItemTypeId) && x.RentalStartDate >= arr.TimeStamp && x.RentalStartDate <= arr.EndStamp).OrderBy(x => x.TimeStamp).ToList();
                            installs = installations?
                                .Where(x => x != null
                                    && x.UniqueID != null && arr?.UniqueID != null && x.UniqueID == arr.UniqueID
                                    && x.ItemTypeId != null && arr?.ItemTypeId != null && x.ItemTypeId == arr.ItemTypeId
                                    && x.RentalStartDate != null && arr != null
                                    && x.RentalStartDate >= arr.TimeStamp
                                    && x.RentalStartDate <= arr.EndStamp)
                                .OrderBy(x => x.TimeStamp)
                                .ToList();

                        }
                        else
                        {
                            try
                            {
                                //installs = installations.Where(x => x.UniqueID.Equals(arr.UniqueID) && x.ItemTypeId.Equals(arr.ItemTypeId) && x.RentalStartDate >= arr.TimeStamp).OrderBy(x => x.TimeStamp).ToList();
                                installs = installations?
                                    .Where(x => x != null
                                        && string.Equals(x.UniqueID, arr?.UniqueID)
                                        && string.Equals(x.ItemTypeId, arr?.ItemTypeId)
                                        && x.RentalStartDate != null
                                        && arr != null
                                        && x.RentalStartDate >= arr.TimeStamp)
                                    .OrderBy(x => x.TimeStamp)
                                    .ToList();

                            }
                            catch
                            {
                                //installs = installations.Where(x => x.UniqueID.Equals(arr.UniqueID) && x.ItemTypeId.Equals(arr.ItemTypeId) && x.RentalStartDate >= arr.TimeStamp).OrderBy(x => x.TimeStamp).ToList();
                            }
                        }
                        int i = 1;
                        foreach (var item in installs)
                        {
                            InvoiceItem II = new InvoiceItem();
                            //if (installs.Count() > 1) {
                            if (item.Location != null && item.Location != "" && item.Location != "N/A")
                            {
                                if (i == 1)
                                {
                                    II.location += "(1): " + item.Location;
                                }
                                else
                                {
                                    II.location += "(" + i.ToString() + "): " + item.Location;
                                }
                            }
                            //}
                            //else
                            //{
                            //    II.location = item.Location;
                            //}
                            i += 1;
                            InvoiceItem II2 = new InvoiceItem(); // Idle item
                            Arrival arr_new = new Arrival(arr);
                            II.SubProjectId = arr.SubProjectId;
                            II.Item_Name = arr.ItemType.Item_Type;
                            II.ItemTypeId = arr.ItemType.Id;
                            II.ItemType = arr.ItemType;
                            II.BoQNr = Convert.ToDecimal(arr.ItemType.BoQnr_Rental);
                            II.BoQNr_Rental = Convert.ToDecimal(arr.ItemType.BoQnr_Rental);
                            II.ArrivalId = arr.Id;
                            II.Arrival = arr_new;
                            II.Discounts = arr.ItemType.Discounts.Where(x => x.StartDate.Date <= model.endtime).ToList();
                            arr_new.TimeStamp = item.RentalStartDate;
                            if (item.DeinstallDate < arr_new.TimeStamp)
                            {

                                //arr_new.EndStamp = null;
                            }
                            else
                            {
                                arr_new.EndStamp = item.DeinstallDate;
                            }

                            if (arr_new.Amount != null)
                            {
                                II.Amount = Convert.ToDouble(arr_new.Amount);
                            }
                            else
                            {
                                II.Amount = 1;
                            }
                            //check invoice date and overwrite!

                            if (arr_new.TimeStamp.Date <= starttime)
                            {
                                if (arr_new.EndStamp == null)
                                {
                                    II.price = (decimal)0.00;
                                    II.Days = (endtime - starttime).Days + 1;
                                }
                                else
                                {
                                    if (arr_new.EndStamp <= endtime)
                                    {
                                        II.price = (decimal)0.00;
                                        II.Days = (Convert.ToDateTime(arr_new.EndStamp) - starttime).Days + 1;
                                    }
                                    else
                                    {
                                        II.price = (decimal)0.00;
                                        II.Days = (endtime - starttime).Days + 1;
                                    }

                                }

                            }
                            else//installed within invoice period
                            {
                                if (arr_new.EndStamp == null)
                                {
                                    II.price = (decimal)0.00;
                                    II.Days = (endtime - arr_new.TimeStamp.Date).Days + 1;
                                }
                                else
                                {
                                    if (arr_new.EndStamp <= endtime)
                                    {
                                        II.price = (decimal)0.00;
                                        II.Days = (Convert.ToDateTime(arr_new.EndStamp) - arr_new.TimeStamp.Date).Days + 1;
                                    }
                                    else
                                    {
                                        II.price = (decimal)0.00;
                                        II.Days = (endtime - arr_new.TimeStamp.Date).Days + 1;
                                    }
                                }
                            }
                            if (arr_new.InvoiceDate.Date >= starttime.Date && arr_new.InvoiceDate.Date <= endtime.Date)
                            {
                                if (arr_new.EndStamp == null)
                                {
                                    II.Days = (endtime.Date - arr_new.TimeStamp.Date).Days + 1;
                                }
                                else
                                {
                                    if (arr_new.EndStamp < endtime)
                                    {
                                        II.Days = (Convert.ToDateTime(arr_new.EndStamp) - arr_new.TimeStamp.Date).Days + 1;
                                    }
                                    else
                                    {
                                        II.Days = (endtime.Date - arr_new.TimeStamp.Date).Days + 1;
                                    }

                                }
                                II.price = (decimal)0.00;
                            }
                            II.Install_date = arr_new.TimeStamp.Date;
                            string idleitemname = String.Concat(arr_new.ItemType.Item_Type, " - Idle");
                            var idleitem = IdleItems.Where(x => x.Item_Type.Equals(idleitemname)).SingleOrDefault();
                            // has rental price
                            if (arr_new.ItemType.rental_price != null || idleitem != null)
                            {
                                // calender day (no amount)
                                if (arr_new.ItemType.Rental_Unit.TheUnit.ToLower().Equals("pr. calender day"))
                                {
                                    II.rental_price = arr_new.ItemType.rental_price * (decimal)II.Days * (decimal)arr_new.Amount;
                                    if (arr_new.PayedAmount != null && arr.InvoiceDate.Date >= starttime && arr.InvoiceDate.Date <= endtime)
                                    {

                                        II.rental_price -= Convert.ToDecimal(arr_new.PayedAmount);
                                    }
                                }
                                else if (arr_new.ItemType.Rental_UnitId.Equals(11) || arr_new.ItemType.Rental_UnitId.Equals(12))
                                {
                                    double tempdays = II.Days;
                                    II.Days = GetOperationalDaysArrival(ItemActivities, arr_new, starttime, endtime);
                                    II.rental_price = arr_new.ItemType.rental_price * (decimal)II.Days * (decimal)arr_new.Amount;
                                    if (arr_new.PayedAmount != null && arr_new.InvoiceDate.Date >= starttime && arr_new.InvoiceDate.Date <= endtime)
                                    {

                                        II.rental_price -= Convert.ToDecimal(arr_new.PayedAmount);
                                    }
                                    if (idleitem != null)
                                    {
                                        II2.Item_Name = idleitem.Item_Type;
                                        II2.Arrival = II.Arrival;
                                        II2.ArrivalId = II.ArrivalId;
                                        II2.Install_date = II.Install_date;
                                        II2.BoQNr = idleitem.BoQnr;
                                        II2.BoQNr_Rental = idleitem.BoQnr_Rental;
                                        II2.Days = tempdays - II.Days;
                                        if ((i - 1) != installs.Count)
                                        {

                                            int moredays = (Convert.ToInt32((installs.ElementAt(i - 1).RentalStartDate - Convert.ToDateTime(arr_new.EndStamp)).TotalDays) - 1);
                                            if (moredays < 0)
                                            {
                                                moredays = 0;
                                            }
                                            II2.Days += moredays;
                                            if (arr_new.EndStamp != null)
                                            {
                                                arr_new.EndStamp = arr_new.EndStamp.Value.AddDays(moredays);
                                            }
                                        }
                                        else if ((i - 1) == installs.Count)
                                        {
                                            //if arr_new endstamp is null, continue till end of invoice period.
                                            if (installs.Last().DeinstallDate == null) //if null it works already.
                                            {

                                            }
                                            else
                                            {

                                                var nextinstall = InstallIdle.Where(x => x.TimeStamp >= installs.Last().DeinstallDate && x.TimeStamp <= endtime && x.UniqueID.Equals(installs.Last().UniqueID)).OrderBy(x => x.TimeStamp).FirstOrDefault();
                                                if (nextinstall != null)
                                                {
                                                    int moredays = (Convert.ToInt32((nextinstall.TimeStamp - Convert.ToDateTime(installs.Last().DeinstallDate)).TotalDays) - 1);
                                                    if (moredays < 0)
                                                    {
                                                        moredays = 0;
                                                    }
                                                    II2.Days += moredays;
                                                    if (arr_new.EndStamp != null)
                                                    {
                                                        arr_new.EndStamp = arr_new.EndStamp.Value.AddDays(moredays);
                                                    }
                                                }

                                            }

                                        }
                                        II2.ItemTypeId = idleitem.Id;
                                        II2.ItemType = idleitem;
                                        II2.location = II.location;
                                        II2.Amount = II.Amount;
                                        II2.rental_price = idleitem.rental_price * (decimal)II2.Days * (decimal)II2.Amount;
                                        II2.Discounts = idleitem.Discounts.Where(x => x.StartDate.Date <= model.endtime).ToList();
                                    }

                                }
                                else if (arr_new.ItemType.Rental_UnitId.Equals(13) || arr_new.ItemType.Rental_UnitId.Equals(14))
                                {
                                    double tempdays = II.Days;

                                    II.Days = GetInstalledDaysArrival(installations, arr_new, starttime, endtime);

                                    II.rental_price = arr_new.ItemType.rental_price * (decimal)II.Days * (decimal)arr_new.Amount;
                                    if (arr_new.PayedAmount != null && arr_new.InvoiceDate.Date >= starttime && arr_new.InvoiceDate.Date <= endtime)
                                    {

                                        II.rental_price -= Convert.ToDecimal(arr_new.PayedAmount);
                                    }
                                    if (idleitem != null)
                                    {
                                        II2.Item_Name = idleitem.Item_Type;
                                        II2.Arrival = II.Arrival;
                                        II2.ArrivalId = II.ArrivalId;
                                        II2.Install_date = II.Install_date;
                                        II2.BoQNr = idleitem.BoQnr;
                                        II2.BoQNr_Rental = idleitem.BoQnr_Rental;
                                        II2.Days = tempdays - II.Days;
                                        if ((i - 1) != installs.Count)
                                        {
                                            int moredays = (Convert.ToInt32((installs.ElementAt(i - 1).RentalStartDate - Convert.ToDateTime(arr_new.EndStamp)).TotalDays) - 1);
                                            if (moredays < 0)
                                            {
                                                moredays = 0;
                                            }
                                            II2.Days += moredays;
                                            if (arr_new.EndStamp != null)
                                            {
                                                arr_new.EndStamp = arr_new.EndStamp.Value.AddDays(moredays);
                                            }

                                        }
                                        else if ((i - 1) == installs.Count)
                                        {
                                            //if arr_new endstamp is null, continue till end of invoice period.
                                            if (installs.Last().DeinstallDate == null) //if null it works already.
                                            {

                                            }
                                            else
                                            {
                                                //var nextinstall1 = InstallIdle.Where(x => x.TimeStamp >= installs.Last().DeinstallDate && x.TimeStamp <= endtime).ToList();
                                                //var nextinstall2 = nextinstall1.Where(x => x.UniqueID != null && x.UniqueID.Equals(installs.Last().UniqueID)).ToList();
                                                //var nextinstall3 = nextinstall2.OrderBy(x => x.TimeStamp).FirstOrDefault();
                                                var nextinstall = InstallIdle.Where(x => x.UniqueID != null && x.TimeStamp >= installs.Last().DeinstallDate && x.TimeStamp <= endtime && x.UniqueID.Equals(installs.Last().UniqueID)).OrderBy(x => x.TimeStamp).FirstOrDefault();
                                                if (nextinstall != null)
                                                {
                                                    int moredays = (Convert.ToInt32((nextinstall.TimeStamp - Convert.ToDateTime(installs.Last().DeinstallDate)).TotalDays) - 1);
                                                    if (moredays < 0)
                                                    {
                                                        moredays = 0;
                                                    }
                                                    II2.Days += moredays;
                                                    if (arr_new.EndStamp != null)
                                                    {
                                                        arr_new.EndStamp = arr_new.EndStamp.Value.AddDays(moredays);
                                                    }
                                                }
                                                //else
                                                //{
                                                //    int moredays = (Convert.ToInt32((endtime - Convert.ToDateTime(installs.ElementAt(i - 1).DeinstallDate)).TotalDays) - 1);
                                                //    II2.Days += moredays;
                                                //}
                                            }
                                            //else continue till next install
                                        }
                                        II2.ItemTypeId = idleitem.Id;
                                        II2.ItemType = idleitem;
                                        II2.location = II.location;
                                        II2.Amount = II.Amount;
                                        II2.rental_price = idleitem.rental_price * (decimal)II2.Days * (decimal)II2.Amount;
                                        II2.Discounts = idleitem.Discounts.Where(x => x.StartDate.Date <= model.endtime).ToList();
                                    }
                                }
                                else
                                {
                                    II.rental_price = arr_new.ItemType.rental_price * (decimal)II.Days * (decimal)arr_new.Amount;
                                    if (arr_new.PayedAmount != null && arr_new.InvoiceDate.Date >= starttime && arr_new.InvoiceDate.Date <= endtime)
                                    {

                                        II.rental_price -= Convert.ToDecimal(arr_new.PayedAmount);
                                    }
                                }
                            }
                            else
                            {
                                II.rental_price = (decimal)0.00;
                                if (arr_new.PayedAmount != null && arr.InvoiceDate.Date >= starttime && arr.InvoiceDate.Date <= endtime)
                                {

                                    II.rental_price -= Convert.ToDecimal(arr_new.PayedAmount);
                                }

                            }
                            if (II.Discounts.Count > 0)
                            {

                                II.Total_Discount = (decimal)0.0;
                                foreach (Discount d in II.Discounts)
                                {
                                    DateTime start;
                                    DateTime end;
                                    if (d.StartDate > starttime)
                                    {
                                        start = d.StartDate;
                                    }
                                    else
                                    {
                                        start = starttime;
                                    }
                                    if (arr_new.TimeStamp.Date > start)
                                    {
                                        start = arr_new.TimeStamp.Date;
                                    }
                                    if (d.EndDate == null)
                                    {
                                        if (arr_new.EndStamp != null)
                                        {
                                            if (arr_new.EndStamp < endtime)
                                            {
                                                end = Convert.ToDateTime(arr_new.EndStamp).Date;
                                            }
                                            else
                                            {
                                                end = endtime;
                                            }
                                        }
                                        else
                                        {
                                            end = endtime;
                                        }

                                    }
                                    else
                                    {
                                        if (arr_new.EndStamp != null)
                                        {
                                            if (arr_new.EndStamp < d.EndDate)
                                            {
                                                end = Convert.ToDateTime(arr_new.EndStamp).Date;
                                            }
                                            else
                                            {
                                                end = Convert.ToDateTime(d.EndDate);
                                            }
                                        }
                                        else
                                        {
                                            if (d.EndDate > endtime)
                                            {
                                                end = endtime;
                                            }
                                            else
                                            {
                                                end = Convert.ToDateTime(d.EndDate);
                                            }
                                        }

                                    }
                                    if (II2.ArrivalId != null)
                                    {
                                        foreach (DateTime dt in GetListOperationalDaysArrival(ItemActivities, arr_new, start.Date, end.Date))
                                        {
                                            II.Total_Discount += d.ItemType.rental_price * d.Rate * (decimal)II.Amount;
                                        }
                                    }
                                    else
                                    {
                                        for (DateTime dt = start.Date; dt <= end.Date; dt = dt.AddDays(1).Date)
                                        {
                                            II.Total_Discount += d.ItemType.rental_price * d.Rate * (decimal)II.Amount;
                                        }
                                    }

                                }
                            }
                            else
                            {
                                II.Total_Discount = (decimal)0.0;
                            }
                            if (arr_new.ToBePaid == false)
                            {
                                II.rental_price = 0;
                                II.Total_Discount = 0;
                            }
                            items.Add(II);
                            if (modelin.CheckInconsistensies == true)
                            {
                                inconsistentItems.Add(II);
                            }
                            if (II2.ArrivalId != null)
                            {
                                if (II2.Discounts.Count > 0)
                                {

                                    II2.Total_Discount = (decimal)0.0;
                                    foreach (Discount d in II2.Discounts)
                                    {
                                        DateTime start;
                                        DateTime end;
                                        if (d.StartDate > starttime)
                                        {
                                            start = d.StartDate;
                                        }
                                        else
                                        {
                                            start = starttime;
                                        }
                                        if (arr_new.TimeStamp.Date > start)
                                        {
                                            start = arr_new.TimeStamp.Date;
                                        }
                                        if (d.EndDate == null)
                                        {
                                            if (arr_new.EndStamp != null)
                                            {
                                                if (arr_new.EndStamp < endtime)
                                                {
                                                    end = Convert.ToDateTime(arr_new.EndStamp).Date;
                                                }
                                                else
                                                {
                                                    end = endtime;
                                                }
                                            }
                                            else
                                            {
                                                end = endtime;
                                            }

                                        }
                                        else
                                        {
                                            if (arr_new.EndStamp != null)
                                            {
                                                if (arr_new.EndStamp < d.EndDate)
                                                {
                                                    end = Convert.ToDateTime(arr_new.EndStamp).Date;
                                                }
                                                else
                                                {
                                                    end = Convert.ToDateTime(d.EndDate);
                                                }
                                            }
                                            else
                                            {
                                                if (d.EndDate > endtime)
                                                {
                                                    end = endtime;
                                                }
                                                else
                                                {
                                                    end = Convert.ToDateTime(d.EndDate);
                                                }
                                            }

                                        }
                                        foreach (DateTime dt in GetListNOTOperationalDaysArrival(ItemActivities, arr_new, start.Date, end.Date))
                                        {
                                            II2.Total_Discount += d.ItemType.rental_price * d.Rate * (decimal)II2.Amount;
                                        }
                                    }
                                }
                                else
                                {
                                    II2.Total_Discount = (decimal)0.0;
                                }
                                if (arr_new.ToBePaid == false)
                                {
                                    II2.rental_price = 0;
                                    II2.Total_Discount = 0;
                                }
                                items.Add(II2);
                            }
                        }
                    }
                    else
                    {
                        //regular arrival
                        InvoiceItem II = new InvoiceItem();
                        InvoiceItem II2 = new InvoiceItem(); // Idle item
                        II.SubProjectId = arr.SubProjectId;
                        II.Item_Name = arr.ItemType.Item_Type;
                        II.ItemTypeId = arr.ItemType.Id;
                        II.ItemType = arr.ItemType;
                        II.BoQNr = Convert.ToDecimal(arr.ItemType.BoQnr_Rental);
                        II.BoQNr_Rental = Convert.ToDecimal(arr.ItemType.BoQnr_Rental);
                        II.ArrivalId = arr.Id;
                        II.Arrival = arr;
                        II.Discounts = arr.ItemType.Discounts.Where(x => x.StartDate.Date <= model.endtime).ToList();

                        if (arr.Amount != null)
                        {
                            II.Amount = Convert.ToDouble(arr.Amount);
                        }
                        else
                        {
                            II.Amount = 1;
                        }
                        if (arr.TimeStamp.Date <= starttime)
                        {
                            if (arr.EndStamp == null)
                            {
                                II.price = (decimal)0.00;
                                II.Days = (endtime - starttime).Days + 1;
                                //if (arr.ItemType.Rental_Unit.TheUnit.ToLower().Equals("pr. week"))
                                //{
                                //    var previousdays = Math.Max(Math.Ceiling((starttime.AddDays(-1) - arr.TimeStamp.Date).TotalDays / 7), 0);
                                //    var alldays = Math.Ceiling((endtime - arr.TimeStamp.Date).TotalDays / 7);
                                //    II.Days = Convert.ToDouble(alldays - previousdays);
                                //}
                                if (arr?.ItemType?.Rental_Unit?.TheUnit?.ToLower() == "pr. week")
                                {
                                    var previousdays = Math.Max(Math.Ceiling((starttime.AddDays(-1) - arr.TimeStamp.Date).TotalDays / 7), 0);
                                    var alldays = Math.Ceiling((endtime - arr.TimeStamp.Date).TotalDays / 7);
                                    II.Days = Convert.ToDouble(alldays - previousdays);
                                }

                                //else if (arr.ItemType.Rental_Unit.TheUnit.ToLower().Equals("pr. month"))
                                //{
                                //    II.Days = CalculateRentalMonths(arr, starttime.Date, endtime.Date);
                                //    //II.Days = modelin.endtime.Month - modelin.starttime.Month + (modelin.endtime.Year - modelin.starttime.Year) * 12;
                                //    //if (arr.TimeStamp.Date.Day == 1)
                                //    //{
                                //    //    II.Days += 1;
                                //    //}
                                //    //else if (arr.TimeStamp.Date >= starttime.Date)
                                //    //{
                                //    //    II.Days += 1;
                                //    //}

                                //    //if (modelin.starttime.Date.Day == 1)
                                //    //{
                                //    //    II.Days += 1;
                                //    //}
                                //}
                                else if (arr?.ItemType?.Rental_Unit?.TheUnit?.ToLower() == "pr. month")
                                {
                                    II.Days = CalculateRentalMonths(arr, starttime.Date, endtime.Date);
                                }


                            }
                            else
                            {
                                if (arr.EndStamp <= endtime)
                                {
                                    II.price = (decimal)0.00;
                                    II.Days = (Convert.ToDateTime(arr.EndStamp) - starttime).Days + 1;
                                    if (arr.ItemType.Rental_Unit.TheUnit.ToLower().Equals("pr. week"))
                                    {
                                        var previousdays = Math.Max(Math.Ceiling((starttime.AddDays(-1) - arr.TimeStamp.Date).TotalDays / 7), 0);
                                        var alldays = Math.Ceiling((endtime - arr.TimeStamp.Date).TotalDays / 7);
                                        II.Days = Convert.ToDouble(alldays - previousdays);
                                        //II.Days = Convert.ToDouble(Convert.ToInt32(II.Days / 7));
                                    }
                                    else if (arr.ItemType.Rental_Unit.TheUnit.ToLower().Equals("pr. month"))
                                    {
                                        II.Days = CalculateRentalMonths(arr, starttime.Date, endtime.Date);
                                        //if(arr.TimeStamp.Date <= modelin.starttime.Date){
                                        //    II.Days = Convert.ToDateTime(arr.EndStamp).Month - modelin.starttime.Month + (Convert.ToDateTime(arr.EndStamp).Year - modelin.starttime.Year) * 12;

                                        //}
                                        //else
                                        //{
                                        //    II.Days = Convert.ToDateTime(arr.EndStamp).Month - arr.TimeStamp.Month + (Convert.ToDateTime(arr.EndStamp).Year - arr.TimeStamp.Year) * 12;

                                        //}

                                        //if (modelin.starttime.Date.Day == 1)
                                        //{
                                        //    II.Days += 1;
                                        //}
                                        //else if (Convert.ToDateTime(arr.EndStamp).AddDays(1).Month == Convert.ToDateTime(arr.EndStamp).Month)
                                        //{
                                        //    II.Days += 1;
                                        //}
                                    }
                                }
                                else
                                {
                                    II.price = (decimal)0.00;
                                    II.Days = (endtime - starttime).Days + 1;
                                    if (arr.ItemType.Rental_Unit.TheUnit.ToLower().Equals("pr. week"))
                                    {
                                        var previousdays = Math.Max(Math.Ceiling((starttime.AddDays(-1) - arr.TimeStamp.Date).TotalDays / 7), 0);
                                        var alldays = Math.Ceiling((endtime - arr.TimeStamp.Date).TotalDays / 7);
                                        II.Days = Convert.ToDouble(alldays - previousdays);
                                        //II.Days = Convert.ToDouble(Convert.ToInt32(II.Days / 7));
                                    }
                                    else if (arr.ItemType.Rental_Unit.TheUnit.ToLower().Equals("pr. month"))
                                    {
                                        II.Days = CalculateRentalMonths(arr, starttime.Date, endtime.Date);
                                        //if(arr.TimeStamp.Date <= modelin.starttime.Date)
                                        //{
                                        //    II.Days = modelin.endtime.Month - modelin.starttime.Month + (modelin.endtime.Year - modelin.starttime.Year) * 12;
                                        //}
                                        //else
                                        //{
                                        //    II.Days = modelin.endtime.Month - arr.TimeStamp.Month + (modelin.endtime.Year - arr.TimeStamp.Year) * 12;
                                        //}

                                        //if (modelin.starttime.Date.Day == 1)
                                        //{
                                        //    II.Days += 1;
                                        //}
                                    }
                                }

                            }

                        }
                        else//installed within invoice period
                        {
                            if (arr.EndStamp == null)
                            {
                                II.price = (decimal)0.00;
                                II.Days = (endtime - arr.TimeStamp.Date).Days + 1;

                                //if (arr.ItemType.Rental_Unit.TheUnit.ToLower().Equals("pr. week"))
                                if (arr.ItemType?.Rental_Unit?.TheUnit != null)
                                {
                                    var unit = arr.ItemType.Rental_Unit.TheUnit.ToLower();

                                    if (unit.Equals("pr. week"))
                                    {
                                        var previousdays = Math.Max(Math.Ceiling((starttime.AddDays(-1) - arr.TimeStamp.Date).TotalDays / 7), 0);
                                        var alldays = Math.Ceiling((endtime - arr.TimeStamp.Date).TotalDays / 7);
                                        II.Days = Convert.ToDouble(alldays - previousdays);
                                        //II.Days = Convert.ToDouble(Convert.ToInt32(II.Days / 7));
                                    }
                                    else if (unit.Equals("pr. month")) //(arr.ItemType.Rental_Unit.TheUnit.ToLower().Equals("pr. month"))
                                    {
                                        II.Days = CalculateRentalMonths(arr, starttime.Date, endtime.Date);
                                        //if(arr.TimeStamp.Date  <= modelin.starttime.Date) {
                                        //    II.Days = modelin.endtime.Month - modelin.starttime.Month + (modelin.endtime.Year - modelin.starttime.Year) * 12;
                                        //    if (modelin.starttime.Date.Day == 1)
                                        //    {
                                        //        II.Days += 1;
                                        //    }
                                        //    else if(arr.InvoiceDate >= modelin.starttime && arr.InvoiceDate <= modelin.endtime)
                                        //    {
                                        //        II.Days += 1;
                                        //    }
                                        //}
                                        //else
                                        //{
                                        //    II.Days = modelin.endtime.Month - arr.TimeStamp.Month + (modelin.endtime.Year - arr.TimeStamp.Year) * 12;
                                        //    if (arr.TimeStamp.Date.Day == 1)
                                        //    {
                                        //        II.Days += 1;
                                        //    }
                                        //    //new
                                        //    if(arr.InvoiceDate.Date >= modelin.starttime.Date) { 
                                        //        if(modelin.endtime.Month != arr.TimeStamp.Month)
                                        //        {
                                        //            II.Days += 1;
                                        //        }
                                        //    }
                                        //}


                                    }
                                }

                            }
                            else
                            {
                                if (arr.EndStamp <= endtime)
                                {
                                    II.price = (decimal)0.00;
                                    II.Days = (Convert.ToDateTime(arr.EndStamp) - arr.TimeStamp.Date).Days + 1;
                                    if (arr.ItemType.Rental_Unit.TheUnit.ToLower().Equals("pr. week"))
                                    {
                                        var previousdays = Math.Max(Math.Ceiling((starttime.AddDays(-1) - arr.TimeStamp.Date).TotalDays / 7), 0);
                                        var alldays = Math.Ceiling((endtime - arr.TimeStamp.Date).TotalDays / 7);
                                        II.Days = Convert.ToDouble(alldays - previousdays);
                                        //II.Days = Convert.ToDouble(Convert.ToInt32(II.Days / 7));
                                    }
                                    else if (arr.ItemType.Rental_Unit.TheUnit.ToLower().Equals("pr. month"))
                                    {
                                        II.Days = CalculateRentalMonths(arr, starttime.Date, endtime.Date);
                                        //if(arr.TimeStamp.Date <= modelin.starttime)
                                        //{
                                        //    II.Days = Convert.ToDateTime(arr.EndStamp).Month - modelin.starttime.Month + (Convert.ToDateTime(arr.EndStamp).Year - modelin.starttime.Year) * 12;
                                        //    if (modelin.starttime.Date.Day == 1)
                                        //    {
                                        //        II.Days += 1;
                                        //    }
                                        //}
                                        //else
                                        //{
                                        //    II.Days = Convert.ToDateTime(arr.EndStamp).Month - arr.TimeStamp.Month + (Convert.ToDateTime(arr.EndStamp).Year - arr.TimeStamp.Year) * 12;
                                        //    if (arr.TimeStamp.Date.Day == 1)
                                        //    {
                                        //        II.Days += 1;
                                        //    }
                                        //}
                                    }
                                }
                                else
                                {
                                    II.price = (decimal)0.00;
                                    II.Days = (endtime - arr.TimeStamp.Date).Days + 1;
                                    if (arr.ItemType.Rental_Unit.TheUnit.ToLower().Equals("pr. week"))
                                    {
                                        var previousdays = Math.Max(Math.Ceiling((starttime.AddDays(-1) - arr.TimeStamp.Date).TotalDays / 7), 0);
                                        var alldays = Math.Ceiling((endtime - arr.TimeStamp.Date).TotalDays / 7);
                                        II.Days = Convert.ToDouble(alldays - previousdays);
                                        //II.Days = Convert.ToDouble(Convert.ToInt32(II.Days / 7));
                                    }
                                    else if (arr.ItemType.Rental_Unit.TheUnit.ToLower().Equals("pr. month"))
                                    {
                                        II.Days = CalculateRentalMonths(arr, starttime.Date, endtime.Date);
                                        //if(arr.TimeStamp.Date <= modelin.starttime.Date) {
                                        //    II.Days = modelin.endtime.Month - modelin.starttime.Month + (modelin.endtime.Year - modelin.starttime.Year) * 12;
                                        //    if (modelin.starttime.Date.Day == 1)
                                        //    {
                                        //        II.Days += 1;
                                        //    }
                                        //}
                                        //else
                                        //{
                                        //    II.Days = modelin.endtime.Month - arr.TimeStamp.Month + (modelin.endtime.Year - arr.TimeStamp.Year) * 12;
                                        //    if (arr.TimeStamp.Date.Day == 1)
                                        //    {
                                        //        II.Days += 1;
                                        //    }
                                        //}
                                        ////II.Days = modelin.endtime.Month - arr.TimeStamp.Month + (modelin.endtime.Year - modelin.starttime.Year) * 12;
                                        ////II.Days += 1;


                                    }
                                }
                            }
                        }
                        if (arr.InvoiceDate.Date >= starttime.Date && arr.InvoiceDate.Date <= endtime.Date)
                        {
                            if (arr.EndStamp == null)
                            {
                                II.Days = (endtime.Date - arr.TimeStamp.Date).Days + 1;
                                if (arr?.ItemType?.Rental_Unit?.TheUnit?.ToLower().Equals("pr. week") == true)
                                {
                                    var previousdays = Math.Max(Math.Ceiling((starttime.AddDays(-1) - arr.TimeStamp.Date).TotalDays / 7), 0);
                                    var alldays = Math.Ceiling((endtime - arr.TimeStamp.Date).TotalDays / 7);
                                    II.Days = Convert.ToDouble(alldays - previousdays);
                                    //II.Days = Convert.ToDouble(Convert.ToInt32(II.Days / 7));

                                }
                                else if (arr?.ItemType?.Rental_Unit?.TheUnit?.ToLower().Equals("pr. month") == true)
                                {
                                    II.Days = CalculateRentalMonths(arr, starttime.Date, endtime.Date);
                                    //II.Days = modelin.endtime.Month - arr.TimeStamp.Month + (modelin.endtime.Year - arr.TimeStamp.Year) * 12;
                                    //if (arr.TimeStamp.Date.Day == 1)
                                    //{
                                    //    II.Days += 1;
                                    //}
                                    //else if(arr.TimeStamp.Date >= starttime.Date)
                                    //{
                                    //    II.Days += 1;
                                    //}
                                    //if(II.Days == 0)
                                    //{
                                    //    II.Days += 1;
                                    //}

                                }

                            }
                            else if (Convert.ToDateTime(arr.EndStamp).Date > endtime.Date)
                            {
                                II.Days = (endtime.Date - arr.TimeStamp.Date).Days + 1;
                                if (arr.ItemType.Rental_Unit.TheUnit.ToLower().Equals("pr. week"))
                                {
                                    var previousdays = Math.Max(Math.Ceiling((starttime.AddDays(-1) - arr.TimeStamp.Date).TotalDays / 7), 0);
                                    var alldays = Math.Ceiling((endtime - arr.TimeStamp.Date).TotalDays / 7);
                                    II.Days = Convert.ToDouble(alldays - previousdays);
                                    //II.Days = Convert.ToDouble(Convert.ToInt32(II.Days / 7));

                                }
                                else if (arr.ItemType.Rental_Unit.TheUnit.ToLower().Equals("pr. month"))
                                {
                                    II.Days = CalculateRentalMonths(arr, starttime.Date, endtime.Date);
                                }

                            }
                            else
                            {
                                II.Days = (Convert.ToDateTime(arr.EndStamp) - arr.TimeStamp.Date).Days + 1;
                                if (arr.ItemType.Rental_Unit.TheUnit.ToLower().Equals("pr. week"))
                                {
                                    var previousdays = Math.Max(Math.Ceiling((starttime.AddDays(-1) - arr.TimeStamp.Date).TotalDays / 7), 0);
                                    var alldays = Math.Ceiling((endtime - arr.TimeStamp.Date).TotalDays / 7);
                                    II.Days = Convert.ToDouble(alldays - previousdays);
                                    //II.Days = Convert.ToDouble(Convert.ToInt32(II.Days / 7));

                                }
                                else if (arr.ItemType.Rental_Unit.TheUnit.ToLower().Equals("pr. month"))
                                {
                                    II.Days = CalculateRentalMonths(arr, starttime.Date, endtime.Date);
                                    //II.Days = Convert.ToDateTime(arr.EndStamp).Month - arr.TimeStamp.Month + (Convert.ToDateTime(arr.EndStamp).Year - arr.TimeStamp.Year) * 12;
                                    //if (arr.TimeStamp.Date.Day == 1)
                                    //{
                                    //    II.Days += 1;
                                    //}
                                    //else if (arr.TimeStamp.Date >= starttime.Date)
                                    //{
                                    //    II.Days += 1;
                                    //}
                                    //if (II.Days == 0)
                                    //{
                                    //    II.Days += 1;
                                    //}
                                }
                            }
                            II.price = (decimal)0.00;
                        }
                        II.Install_date = arr.TimeStamp.Date;
                        if (arr.ItemType != null)
                        {
                            // has rental price
                            string idleitemname = String.Concat(arr.ItemType.Item_Type, " - Idle");
                            var idleitem = IdleItems.Where(x => x.Item_Type.Equals(idleitemname)).SingleOrDefault();

                            if (arr.ItemType.rental_price != null || idleitem != null)
                            {
                                // calender day (no amount)
                                /*if (arr.ItemType.Rental_Unit.TheUnit.ToLower().Equals("pr. calender day"))
                                {
                                    // II.rental_price = arr.ItemType.rental_price * (decimal)II.Days * (decimal)arr.Amount;

                                    //else if (arr.ItemType.Rental_Unit.TheUnit.ToLower().Equals("pr. week"))
                                    //{
                                    //    II.Days = Convert.ToDouble(Convert.ToInt32(II.Days / 7));
                                    //}
                                    //else if (arr.ItemType.Rental_Unit.TheUnit.ToLower().Equals("pr. month"))
                                    //{
                                    //    II.Days = modelin.endtime.Month - arr.TimeStamp.Month + (modelin.endtime.Year - arr.TimeStamp.Year) * 12;
                                    //    II.Days += 1;
                                    //}
                                }*/


                                if (arr.ItemType.Rental_Unit != null &&
                                    !string.IsNullOrEmpty(arr.ItemType.Rental_Unit.TheUnit) &&
                                    arr.ItemType.Rental_Unit.TheUnit.ToLower().Equals("pr. calender day"))
                                {
                                    II.rental_price = arr.ItemType.rental_price * (decimal)II.Days * (decimal)arr.Amount;
                                }
                                else if (arr.ItemType.Rental_UnitId.Equals(11) || arr.ItemType.Rental_UnitId.Equals(12))
                                {
                                    double tempdays = II.Days;
                                    II.Days = GetOperationalDaysArrival(ItemActivities, arr, starttime, endtime);
                                    II.rental_price = arr.ItemType.rental_price * (decimal)II.Days * (decimal)arr.Amount;
                                    //if (arr.PayedAmount != null && arr.InvoiceDate.Date >= starttime && arr.InvoiceDate.Date <= endtime)
                                    //{
                                    //    II.rental_price -= Convert.ToDecimal(arr.PayedAmount);
                                    //}
                                    if (idleitem != null)
                                    {
                                        II2.Item_Name = idleitem.Item_Type;
                                        II2.Arrival = II.Arrival;
                                        II2.ArrivalId = II.ArrivalId;
                                        II2.Install_date = II.Install_date;
                                        II2.Invoice_date = II.Invoice_date;
                                        II2.BoQNr = idleitem.BoQnr;
                                        II2.BoQNr_Rental = idleitem.BoQnr_Rental;
                                        II2.Days = tempdays - II.Days;
                                        II2.ItemTypeId = idleitem.Id;
                                        II2.ItemType = idleitem;
                                        II2.location = II.location;
                                        II2.Amount = II.Amount;
                                        II2.rental_price = idleitem.rental_price * (decimal)II2.Days * (decimal)II2.Amount;
                                        II2.Discounts = idleitem.Discounts.Where(x => x.StartDate.Date <= model.endtime).ToList();
                                    }

                                }
                                else if (arr.ItemType.Rental_UnitId.Equals(13) || arr.ItemType.Rental_UnitId.Equals(14))
                                {
                                    double tempdays = II.Days;
                                    //II.Days = GetOperationalDaysArrival(ItemActivities, arr, starttime, endtime);
                                    //ArrivalReturn arrreturn = GetInstalledDaysArrival(installations, arr, starttime, endtime);
                                    //II.Days = arrreturn.days;
                                    II.Days = GetInstalledDaysArrival(installations, arr, starttime, endtime);
                                    //II.Arrival.EndStamp = arrreturn.arr.EndStamp;
                                    II.rental_price = arr.ItemType.rental_price * (decimal)II.Days * (decimal)arr.Amount;
                                    //var idleitem = IdleItems.Where(x => x.Item_Type.ToLower().Contains(arr.ItemType.Item_Type.ToLower())).SingleOrDefault();
                                    //string idleitemname = String.Concat(arr.ItemType.Item_Type, " - Idle");
                                    //var idleitem = IdleItems.Where(x => x.Item_Type.Equals(idleitemname)).SingleOrDefault();
                                    if (idleitem != null)
                                    {
                                        II2.Item_Name = idleitem.Item_Type;
                                        II2.Arrival = II.Arrival;
                                        II2.ArrivalId = II.ArrivalId;
                                        II2.Install_date = II.Install_date;
                                        II2.BoQNr = idleitem.BoQnr;
                                        II2.BoQNr_Rental = idleitem.BoQnr_Rental;
                                        II2.Days = tempdays - II.Days;
                                        II2.ItemTypeId = idleitem.Id;
                                        II2.ItemType = idleitem;
                                        II2.location = II.location;
                                        II2.Amount = II.Amount;
                                        II2.rental_price = idleitem.rental_price * (decimal)II2.Days * (decimal)II2.Amount;
                                        II2.Discounts = idleitem.Discounts.Where(x => x.StartDate.Date <= model.endtime).ToList();
                                    }
                                }
                                else //if (arr.ItemType.Rental_UnitId.Equals(16)) //binh 11.04.2025
                                {
                                    try
                                    {
                                        //II.Days = CalculateRentalMonths(arr, starttime.Date, endtime.Date);//binh 11.04.2025
                                        II.rental_price = arr.ItemType.rental_price * (decimal)II.Days * (decimal)arr.Amount;
                                        //    II.Days += 1;
                                    }
                                    catch
                                    {
                                        //II.rental_price = arr.ItemType.rental_price * (decimal)II.Days * (decimal)arr.Amount;
                                    }
                                }

                            }
                            else
                            {
                                II.rental_price = (decimal)0.00;
                            }

                        }
                        else
                        {

                        }


                        if (arr.PayedAmount != null && arr.InvoiceDate.Date >= starttime && arr.InvoiceDate.Date <= endtime)
                        {

                            II.rental_price -= Convert.ToDecimal(arr.PayedAmount);

                        }
                        if (II.Discounts.Count > 0)
                        {

                            II.Total_Discount = (decimal)0.0;
                            foreach (Discount d in II.Discounts)
                            {
                                DateTime start;
                                DateTime end;
                                if (d.StartDate > starttime)
                                {
                                    start = d.StartDate;
                                }
                                else
                                {
                                    start = starttime;
                                }
                                if (arr.TimeStamp.Date > start)
                                {
                                    start = arr.TimeStamp.Date;
                                }
                                if (d.EndDate == null)
                                {
                                    if (arr.EndStamp != null)
                                    {
                                        if (arr.EndStamp < endtime)
                                        {
                                            end = Convert.ToDateTime(arr.EndStamp).Date;
                                        }
                                        else
                                        {
                                            end = endtime;
                                        }
                                    }
                                    else
                                    {
                                        end = endtime;
                                    }

                                }
                                else
                                {
                                    if (arr.EndStamp != null)
                                    {
                                        if (arr.EndStamp < d.EndDate)
                                        {
                                            end = Convert.ToDateTime(arr.EndStamp).Date;
                                        }
                                        else
                                        {
                                            end = Convert.ToDateTime(d.EndDate);
                                        }
                                    }
                                    else
                                    {
                                        if (d.EndDate > endtime)
                                        {
                                            end = endtime;
                                        }
                                        else
                                        {
                                            end = Convert.ToDateTime(d.EndDate);
                                        }
                                    }

                                }
                                if (II2.ArrivalId != null)
                                {
                                    foreach (DateTime dt in GetListOperationalDaysArrival(ItemActivities, arr, start.Date, end.Date))
                                    {
                                        II.Total_Discount += d.ItemType.rental_price * d.Rate * (decimal)II.Amount;
                                    }
                                }
                                else
                                {
                                    for (DateTime dt = start.Date; dt <= end.Date; dt = dt.AddDays(1).Date)
                                    {
                                        II.Total_Discount += d.ItemType.rental_price * d.Rate * (decimal)II.Amount;
                                    }
                                }

                            }
                        }
                        else
                        {
                            II.Total_Discount = (decimal)0.0;
                        }
                        if (arr.ToBePaid == false)
                        {
                            II.rental_price = 0;
                            II.Total_Discount = 0;
                        }
                        items.Add(II);

                        if (modelin.CheckInconsistensies == true)
                        {
                            inconsistentItems.Add(II);
                        }
                        if (II2.ArrivalId != null)
                        {
                            if (II2.Discounts.Count > 0)
                            {

                                II2.Total_Discount = (decimal)0.0;
                                foreach (Discount d in II2.Discounts)
                                {
                                    DateTime start;
                                    DateTime end;
                                    if (d.StartDate > starttime)
                                    {
                                        start = d.StartDate;
                                    }
                                    else
                                    {
                                        start = starttime;
                                    }
                                    if (arr.TimeStamp.Date > start)
                                    {
                                        start = arr.TimeStamp.Date;
                                    }
                                    if (d.EndDate == null)
                                    {
                                        if (arr.EndStamp != null)
                                        {
                                            if (arr.EndStamp < endtime)
                                            {
                                                end = Convert.ToDateTime(arr.EndStamp).Date;
                                            }
                                            else
                                            {
                                                end = endtime;
                                            }
                                        }
                                        else
                                        {
                                            end = endtime;
                                        }

                                    }
                                    else
                                    {
                                        if (arr.EndStamp != null)
                                        {
                                            if (arr.EndStamp < d.EndDate)
                                            {
                                                end = Convert.ToDateTime(arr.EndStamp).Date;
                                            }
                                            else
                                            {
                                                end = Convert.ToDateTime(d.EndDate);
                                            }
                                        }
                                        else
                                        {
                                            if (d.EndDate > endtime)
                                            {
                                                end = endtime;
                                            }
                                            else
                                            {
                                                end = Convert.ToDateTime(d.EndDate);
                                            }
                                        }

                                    }
                                    foreach (DateTime dt in GetListNOTOperationalDaysArrival(ItemActivities, arr, start.Date, end.Date))
                                    {
                                        II2.Total_Discount += d.ItemType.rental_price * d.Rate * (decimal)II2.Amount;
                                    }
                                }
                            }
                            else
                            {
                                II2.Total_Discount = (decimal)0.0;
                            }
                            if (arr.ToBePaid == false)
                            {
                                II2.rental_price = 0;
                                II2.Total_Discount = 0;
                            }
                            items.Add(II2);
                        }
                    }
                }

                foreach (ExtraWork ew in extraworks)
                {
                    InvoiceItem II = new InvoiceItem();
                    II.SubProjectId = ew.SubProjectId;
                    II.ExtraWorkId = ew.Id;
                    II.ExtraWork = ew;
                    II.Amount = 1;
                    II.Item_Name = ew.Description;
                    if (ew.EndStamp == null || ew.EndStamp < DateTime.Now.AddDays(-10000))
                    {
                        if (Convert.ToDateTime(ew.InvoiceDate).Date < starttime || Convert.ToDateTime(ew.InvoiceDate).Date > endtime)
                        {
                            II.price = (decimal)0.00;
                            II.Days = (endtime - starttime).Days + 1;
                        }                    //installed within invoice period
                        else
                        {
                            II.price = ew.Price;
                            II.Days = (endtime - ew.TimeStamp.Date).Days + 1;
                        }
                    }
                    else
                    {
                        //Deinstalled after invoice period
                        if (Convert.ToDateTime(ew.EndStamp).Date >= endtime)
                        {
                            if (Convert.ToDateTime(ew.InvoiceDate).Date < starttime || Convert.ToDateTime(ew.InvoiceDate).Date > endtime)
                            {
                                II.price = (decimal)0.00;
                                II.Days = (endtime - starttime).Days + 1;
                            }
                            //installed within invoice period
                            else
                            {
                                II.price = Convert.ToDecimal(ew.Price) * (decimal)II.Amount;
                                II.Days = (endtime - ew.TimeStamp.Date).Days + 1;
                            }
                        }
                        //deinstalled within invoice period
                        else
                        {
                            //installed before invoice period
                            if (Convert.ToDateTime(ew.InvoiceDate).Date < starttime || Convert.ToDateTime(ew.InvoiceDate).Date > endtime)
                            {
                                II.price = (decimal)0.00;
                                II.Days = (Convert.ToDateTime(ew.EndStamp).Date - ew.TimeStamp.Date).Days + 1;
                            }
                            //installed within invoice period
                            else
                            {

                                II.price = Convert.ToDecimal(ew.Price) * (decimal)II.Amount;
                                II.Days = (Convert.ToDateTime(ew.EndStamp).Date - ew.TimeStamp.Date).Days + 1;
                            }
                        }
                    }
                    if (Convert.ToDateTime(ew.InvoiceDate).Date >= starttime && Convert.ToDateTime(ew.InvoiceDate).Date <= endtime)
                    {
                        if (ew.PaidAmount != null)
                        {
                            II.price -= Convert.ToDecimal(ew.PaidAmount);
                        }
                    }
                    II.Install_date = ew.TimeStamp.Date;
                    // has rental price

                    if (ew.Rental_Price >= (decimal)0.001 || ew.Rental_Price <= (decimal)-0.001)
                    {
                        II.rental_price = ew.Rental_Price * (decimal)II.Days;
                    }
                    else
                    {
                        II.rental_price = (decimal)0.00;
                    }
                    if (Convert.ToDateTime(ew.InvoiceDate).Date >= starttime.Date && ew.InvoiceDate <= endtime.Date)
                    {
                        //apply rent back in time, else apply rent as before
                        //apply cost else remove cost
                        //II.price = ew.Price;
                        if (ew.EndStamp == null)
                        {
                            II.Days = (endtime.Date - ew.TimeStamp.Date).Days + 1;
                        }
                        else
                        {
                            if (Convert.ToDateTime(ew.EndStamp) <= endtime)
                            {
                                II.Days = (Convert.ToDateTime(ew.EndStamp) - ew.TimeStamp.Date).Days + 1;
                            }
                            else
                            {
                                II.Days = (endtime.Date - ew.TimeStamp.Date).Days + 1;
                            }

                        }
                        II.rental_price = ew.Rental_Price * (decimal)II.Days;
                        if (ew.PaidAmountRental != null)
                        {
                            II.rental_price -= Convert.ToDecimal(ew.PaidAmountRental);
                        }
                        //if (ew.TimeStamp.Date < starttime.Date)
                        //{
                        //    II.Days = II.Days + (starttime.Date - ew.TimeStamp.Date).TotalDays + 1;
                        //    II.rental_price = ew.Rental_Price * (decimal)II.Days;
                        //}
                    }
                    items.Add(II);
                    if (modelin.CheckInconsistensies == true)
                    {
                        inconsistentItems.Add(II);
                    }
                }

                foreach (Install inst in installations)
                {

                    if (inst.InvoiceDate.Date >= model.starttime.Date && inst.InvoiceDate.Date <= model.endtime.Date && inst.ToBePaid == true)
                    {

                        InvoiceItem II = new InvoiceItem();
                        II.SubProjectId = inst.SubProjectId;
                        II.Install = inst;
                        II.Item_Name = inst.ItemType.Item_Type;
                        II.ItemTypeId = inst.ItemType.Id;
                        II.ItemType = inst.ItemType;
                        II.BoQNr = inst.ItemType.BoQnr;
                        II.BoQNr_Rental = inst.ItemType.BoQnr_Rental;
                        II.InstallationId = inst.Id;
                        II.location = inst.Location;
                        //II.Discounts_Installation = inst.ItemType.Discounts_Installation.Where(x => x.StartDate.Date <= model.endtime).ToList();
                        II.Discounts_Installation = inst.ItemType.Discounts_Installation.Where(x => (x.StartDate.Date <= inst.TimeStamp.Date && x.EndDate == null) || (x.StartDate.Date <= inst.TimeStamp.Date && x.EndDate >= inst.TimeStamp.Date)).ToList();
                        if (inst.Amount != null)
                        {
                            II.Amount = Convert.ToDouble(inst.Amount);
                        }
                        else
                        {
                            II.Amount = 1.000;
                        }
                        II.price = (decimal)II.Amount * II.ItemType.price;
                        if (inst.PayedAmount != null)
                        {
                            II.price -= Convert.ToDecimal(inst.PayedAmount);
                        }
                        II.Days = 1;
                        II.Install_date = inst.TimeStamp.Date;
                        II.Invoice_date = inst.InvoiceDate.Date;
                        items.Add(II);
                        if (modelin.CheckInconsistensies == true)
                        {
                            inconsistentItems.Add(II);
                        }
                        if (II.Discounts_Installation.Count > 0)
                        {
                            InvoiceItem DiscountItem = new InvoiceItem();
                            DiscountItem.SubProjectId = II.SubProjectId;
                            DiscountItem.Install = inst;
                            DiscountItem.SubProjectId = inst.SubProjectId;
                            DiscountItem.Install = inst;
                            DiscountItem.Item_Name = inst.ItemType.Item_Type;
                            DiscountItem.ItemTypeId = inst.ItemType.Id;
                            DiscountItem.ItemType = inst.ItemType;
                            DiscountItem.BoQNr = inst.ItemType.BoQnr;
                            DiscountItem.BoQNr_Rental = inst.ItemType.BoQnr_Rental;
                            DiscountItem.InstallationId = inst.Id;
                            DiscountItem.location = inst.Location;
                            DiscountItem.Days = 1;
                            DiscountItem.Install_date = II.Install_date;
                            DiscountItem.Total_Discount_Installation = (decimal)0.00;
                            DiscountItem.Invoice_date = II.Invoice_date;
                            foreach (var item in II.Discounts_Installation)
                            {
                                DiscountItem.Total_Discount_Installation += II.price * item.Rate;
                            }
                            items.Add(DiscountItem);
                        }
                        else
                        {
                            II.Total_Discount_Installation = (decimal)0.00;
                        }
                    }



                    InvoiceItem II2 = new InvoiceItem();
                    InvoiceItem II3 = new InvoiceItem();
                    //II.SubProjectId = inst.SubProjectId;
                    //II.Install = inst;
                    //II.Item_Name = inst.ItemType.Item_Type;
                    //II.ItemTypeId = inst.ItemType.Id;
                    //II.ItemType = inst.ItemType;
                    //II.BoQNr = inst.ItemType.BoQnr;
                    //II.BoQNr_Rental = inst.ItemType.BoQnr_Rental;
                    //II.InstallationId = inst.Id;
                    //II.location = inst.Location;
                    //II.Discounts_Installation = inst.ItemType.Discounts_Installation.Where(x => x.StartDate.Date <= model.endtime).ToList();
                    //if (inst.Amount != null)
                    //{
                    //    II.Amount = Convert.ToDouble(inst.Amount);
                    //}
                    //else
                    //{
                    //    II.Amount = 1.000;
                    //}



                    //// still installed (no deinstall calculated)
                    //if (inst.isInstalled.Equals(true))
                    //{
                    //    //installed before invoice period
                    //    if (inst.RentalStartDate.Date < starttime) //rentalst
                    //    {
                    //        II.price = (decimal)0.00;
                    //        II.Days = (endtime - starttime).Days + 1;
                    //    }
                    //    //installed within invoice period
                    //    else
                    //    {
                    //        //var discount = await _context.ItemTypes.Where(x => x.ProjectId.Equals(inst.ProjectId) && x.Item_Type.Contains("Discount") && x.Item_Type.Contains(inst.ItemType.Item_Type) && x.BoQnr >= inst.ItemType.BoQnr).FirstOrDefaultAsync();
                    //        var discount = discounts.Where(x => x.Item_Type.Contains(inst.ItemType.Item_Type) && x.BoQnr >= inst.ItemType.BoQnr).FirstOrDefault();
                    //        if (discount != null)
                    //        {
                    //            if (inst.ItemType.Item_Type.Contains("Horizontal Drain Pipe") && (modelin.ProjectId.Equals(40) || modelin.ProjectId.Equals(48)))
                    //            {
                    //                if (inst.TimeStamp >= new DateTime(2020, 09, 01, 0, 0, 0))
                    //                {
                    //                    II.price = Convert.ToDecimal(inst.ItemType.price) * (decimal)II.Amount;
                    //                    II.Days = (endtime - inst.RentalStartDate.Date).Days + 1;
                    //                }
                    //                else
                    //                {
                    //                    II.price = Convert.ToDecimal(inst.ItemType.price) * (decimal)II.Amount;
                    //                    II.Days = (endtime - inst.RentalStartDate.Date).Days + 1;
                    //                    II2.InstallationId = II.InstallationId;
                    //                    II2.Install = inst;
                    //                    II2.SubProjectId = II.SubProjectId;
                    //                    II2.location = II.location;
                    //                    II2.Days = II.Days;
                    //                    II2.Amount = II.Amount;
                    //                    II2.BoQNr = discount.BoQnr;
                    //                    II2.ItemTypeId = discount.Id;
                    //                    II2.ItemType = discount;
                    //                    II2.Item_Name = discount.Item_Type;
                    //                    II2.price = Convert.ToDecimal(discount.price) * (decimal)II2.Amount;
                    //                }
                    //            }
                    //            else
                    //            {
                    //                II.price = Convert.ToDecimal(inst.ItemType.price) * (decimal)II.Amount;
                    //                II.Days = (endtime - inst.RentalStartDate.Date).Days + 1;
                    //                II2.InstallationId = II.InstallationId;
                    //                II2.Install = inst;
                    //                II2.SubProjectId = II.SubProjectId;
                    //                II2.location = II.location;
                    //                II2.Days = II.Days;
                    //                II2.Amount = II.Amount;
                    //                II2.BoQNr = discount.BoQnr;
                    //                II2.ItemTypeId = discount.Id;
                    //                II2.ItemType = discount;
                    //                II2.Item_Name = discount.Item_Type;
                    //                II2.price = Convert.ToDecimal(discount.price) * (decimal)II2.Amount;
                    //            }
                    //        }
                    //        else
                    //        {
                    //            II.price = Convert.ToDecimal(inst.ItemType.price) * (decimal)II.Amount;
                    //            II.Days = (endtime - inst.RentalStartDate.Date).Days + 1;
                    //        }
                    //    }
                    //}
                    ////deinstalled!
                    //else
                    //{
                    //    //Deinstalled after invoice period

                    //    if (Convert.ToDateTime(inst.DeinstallDate).Date >= endtime)
                    //    {
                    //        //installed before invoice period
                    //        if (inst.RentalStartDate.Date < starttime)
                    //        {
                    //            II.price = (decimal)0.00;
                    //            II.Days = (endtime - starttime).Days + 1;
                    //        }
                    //        //installed within invoice period
                    //        else
                    //        {
                    //            II.price = Convert.ToDecimal(inst.ItemType.price) * (decimal)II.Amount;
                    //            II.Days = (endtime - inst.RentalStartDate.Date).Days + 1;
                    //        }
                    //    }
                    //    //deinstalled within invoice period
                    //    else
                    //    {
                    //        //installed before invoice period
                    //        if (inst.RentalStartDate.Date < starttime)
                    //        {
                    //            II.price = (decimal)0.00;
                    //            II.Days = (Convert.ToDateTime(inst.DeinstallDate).Date - starttime).Days + 1;
                    //        }
                    //        //installed within invoice period
                    //        else
                    //        {
                    //            //var discount = await _context.ItemTypes.Where(x => x.ProjectId.Equals(inst.ProjectId) && x.Item_Type.Contains("Discount") && x.Item_Type.Contains(inst.ItemType.Item_Type) && x.BoQnr >= inst.ItemType.BoQnr).FirstOrDefaultAsync();
                    //            var discount = discounts.Where(x => x.Item_Type.Contains(inst.ItemType.Item_Type) && x.BoQnr >= inst.ItemType.BoQnr).FirstOrDefault();
                    //            if (discount != null)
                    //            {
                    //                if (inst.ItemType.Item_Type.Contains("Horizontal Drain Pipe") && (modelin.ProjectId.Equals(40) || modelin.ProjectId.Equals(48)))
                    //                {
                    //                    if (inst.RentalStartDate >= new DateTime(2020, 09, 01, 0, 0, 0))
                    //                    {
                    //                        II.price = Convert.ToDecimal(inst.ItemType.price) * (decimal)II.Amount;
                    //                        II.Days = (Convert.ToDateTime(inst.DeinstallDate) - inst.RentalStartDate.Date).Days + 1;
                    //                    }
                    //                    else
                    //                    {
                    //                        II.price = Convert.ToDecimal(inst.ItemType.price) * (decimal)II.Amount;
                    //                        II.Days = (Convert.ToDateTime(inst.DeinstallDate) - inst.RentalStartDate.Date).Days + 1;
                    //                        II2.InstallationId = II.InstallationId;
                    //                        II2.Install = inst;
                    //                        II2.SubProjectId = II.SubProjectId;
                    //                        II2.Days = II.Days;
                    //                        II2.Amount = II.Amount;
                    //                        II2.BoQNr = discount.BoQnr;
                    //                        II2.ItemTypeId = discount.Id;
                    //                        II2.ItemType = discount;
                    //                        II2.Item_Name = discount.Item_Type;
                    //                        II2.price = Convert.ToDecimal(discount.price) * (decimal)II2.Amount;
                    //                    }
                    //                }
                    //                else
                    //                {
                    //                    II.price = Convert.ToDecimal(inst.ItemType.price) * (decimal)II.Amount;
                    //                    II.Days = (Convert.ToDateTime(inst.DeinstallDate) - inst.RentalStartDate.Date).Days + 1;
                    //                    II2.InstallationId = II.InstallationId;
                    //                    II2.Install = inst;
                    //                    II2.SubProjectId = II.SubProjectId;
                    //                    II2.Days = II.Days;
                    //                    II2.Amount = II.Amount;
                    //                    II2.BoQNr = discount.BoQnr;
                    //                    II2.ItemTypeId = discount.Id;
                    //                    II2.ItemType = discount;
                    //                    II2.Item_Name = discount.Item_Type;
                    //                    II2.price = Convert.ToDecimal(discount.price) * (decimal)II2.Amount;
                    //                }
                    //            }
                    //            else
                    //            {
                    //                II.price = Convert.ToDecimal(inst.ItemType.price) * (decimal)II.Amount;
                    //                II.Days = (Convert.ToDateTime(inst.DeinstallDate) - inst.RentalStartDate.Date).Days + 1;
                    //            }

                    //        }
                    //    }
                    //}
                    //II.Install_date = inst.TimeStamp.Date;
                    //II2.Install_date = inst.TimeStamp.Date;
                    //// has rental price
                    //if (inst.ItemType.rental_price != null)
                    //{
                    //    // calender day (no amount)
                    //    if (inst.ItemType.rental_price > 0)
                    //    {
                    //        if (inst.ItemType.Rental_Unit.TheUnit.ToLower().Equals("pr. calender day"))
                    //        {
                    //            II.rental_price = inst.ItemType.rental_price * (decimal)II.Days;
                    //            II2.rental_price = II.rental_price;
                    //        }
                    //        else if (inst.ItemType.Rental_UnitId.Equals(11) || inst.ItemType.Rental_UnitId.Equals(12))
                    //        {
                    //            double tempdays = II.Days;
                    //            II.Days = GetOperationalDaysInstall(ItemActivities, inst, starttime, endtime);
                    //            II.rental_price = inst.ItemType.rental_price * (decimal)II.Days;
                    //            II2.rental_price = II.rental_price;
                    //            //var idleitem = IdleItems.Where(x => x.Item_Type.ToLower().Contains(arr.ItemType.Item_Type.ToLower())).SingleOrDefault();
                    //            string idleitemname = String.Concat(inst.ItemType.Item_Type, " - Idle");
                    //            var idleitem = IdleItems.Where(x => x.Item_Type.Equals(idleitemname)).SingleOrDefault();
                    //            if (idleitem != null)
                    //            {
                    //                II3.Item_Name = idleitem.Item_Type;
                    //                II3.Install = II.Install;
                    //                II3.InstallationId = II.InstallationId;
                    //                II3.Install_date = II.Install_date;
                    //                II3.BoQNr = idleitem.BoQnr;
                    //                II3.BoQNr_Rental = idleitem.BoQnr_Rental;
                    //                II3.Days = tempdays - II.Days;
                    //                II3.ItemTypeId = idleitem.Id;
                    //                II3.ItemType = idleitem;
                    //                II3.location = II.location;
                    //                II3.Amount = II.Amount;
                    //                II3.price = idleitem.price * (decimal)II3.Amount;
                    //                II3.rental_price = idleitem.rental_price * (decimal)II3.Days * (decimal)II3.Amount;
                    //                II3.Discounts_Installation = idleitem.Discounts_Installation.Where(x => x.StartDate.Date <= model.endtime).ToList();
                    //            }
                    //        }
                    //        else if (inst.ItemType.Rental_UnitId.Equals(13) || inst.ItemType.Rental_UnitId.Equals(14))
                    //        {
                    //            double tempdays = II.Days;
                    //            II.Days = GetInstalledDaysInstall(installations, inst, starttime, endtime);
                    //            II.rental_price = inst.ItemType.rental_price * (decimal)II.Days;
                    //            II2.rental_price = II.rental_price;
                    //            //var idleitem = IdleItems.Where(x => x.Item_Type.ToLower().Contains(arr.ItemType.Item_Type.ToLower())).SingleOrDefault();
                    //            string idleitemname = String.Concat(inst.ItemType.Item_Type, " - Idle");
                    //            var idleitem = IdleItems.Where(x => x.Item_Type.Equals(idleitemname)).SingleOrDefault();
                    //            if (idleitem != null)
                    //            {
                    //                II3.Item_Name = idleitem.Item_Type;
                    //                II3.Install = II.Install;
                    //                II3.InstallationId = II.InstallationId;
                    //                II3.Install_date = II.Install_date;
                    //                II3.BoQNr = idleitem.BoQnr;
                    //                II3.BoQNr_Rental = idleitem.BoQnr_Rental;
                    //                II3.Days = tempdays - II.Days;
                    //                II3.ItemTypeId = idleitem.Id;
                    //                II3.ItemType = idleitem;
                    //                II3.location = II.location;
                    //                II3.Amount = II.Amount;
                    //                II3.price = idleitem.price * (decimal)II3.Amount;
                    //                II3.rental_price = idleitem.rental_price * (decimal)II3.Days * (decimal)II3.Amount;
                    //                II3.Discounts_Installation = idleitem.Discounts_Installation.Where(x => x.StartDate.Date <= model.endtime).ToList();
                    //            }
                    //        }
                    //        else
                    //        {
                    //            II.rental_price = inst.ItemType.rental_price * (decimal)II.Days * (decimal)inst.Amount;
                    //            II2.rental_price = II.rental_price;
                    //        }
                    //    }
                    //    else
                    //    {
                    //        II.rental_price = (decimal)0.00;
                    //        II2.rental_price = II.rental_price;
                    //    }
                    //}
                    //// does not have rental price
                    //else
                    //{
                    //    II.rental_price = (decimal)0.00;
                    //    II2.rental_price = II.rental_price;
                    //}
                    //if (inst.ToBePaid == false)
                    //{
                    //    II.price = 0;
                    //    II.Total_Discount_Installation = 0;
                    //    II2.price = 0;
                    //    II2.Total_Discount_Installation = 0;
                    //}
                    //items.Add(II);
                    //if (II2.ItemType != null)
                    //{
                    //    items.Add(II2);
                    //}
                    //if (II.Item_Name.Contains("Horizontal Drain Pipe") && (modelin.ProjectId.Equals(40) || modelin.ProjectId.Equals(48)))
                    //{
                    //    InvoiceItem II4 = new InvoiceItem(II);
                    //    var itemtype = await _context.ItemTypes.Where(x => x.ProjectId.Equals(model.ProjectId) && x.Item_Type.Equals("Horizontal Drain Pipe - Incl. Filter Sand")).SingleOrDefaultAsync();
                    //    II4.ItemTypeId = itemtype.Id;
                    //    II4.ItemType = itemtype;
                    //    II4.BoQNr = itemtype.BoQnr;
                    //    II4.Item_Name = itemtype.Item_Type;
                    //    if (II.price > (decimal)0.00)
                    //    {
                    //        II4.price = itemtype.price * (decimal)II.Amount;
                    //    }
                    //    else
                    //    {
                    //        II4.price = (decimal)0.00;
                    //    }
                    //    II4.rental_price = (decimal)0.0;
                    //    items.Add(II4);
                    //}
                    //if (II.Discounts_Installation.Count > 0)
                    //{

                    //    II.Total_Discount_Installation = (decimal)0.0;
                    //    foreach (Discount_Installation d in II.Discounts_Installation)
                    //    {
                    //        II.Total_Discount_Installation += d.Total_Discount2(II.Install_date, Convert.ToDecimal(II.price), 1);
                    //    }
                    //}
                    //else
                    //{
                    //    II.Total_Discount_Installation = (decimal)0.0;
                    //}
                    //if (II3.InstallationId != null)
                    //{
                    //    if (II3.Discounts_Installation.Count > 0)
                    //    {
                    //        II3.Total_Discount_Installation = (decimal)0.0;
                    //        foreach (Discount_Installation d in II3.Discounts_Installation)
                    //        {
                    //            II3.Total_Discount_Installation += d.Total_Discount2(II3.Install_date, Convert.ToDecimal(II3.price), 1);
                    //        }
                    //    }
                    //    else
                    //    {
                    //        II3.Total_Discount_Installation = (decimal)0.0;
                    //    }
                    //    if (inst.ToBePaid == false)
                    //    {
                    //        II3.price = 0;
                    //        II3.Total_Discount_Installation = 0;
                    //    }
                    //    items.Add(II3);
                    //}




                }
                DateTime FirstJanuary2023 = new DateTime(2023, 01, 01, 00, 00, 01);
                var nighttime = await _context.ItemTypes.Where(x => x.Item_Type.ToLower().Contains("night") && x.Rental_UnitId.Equals(19) && x.ProjectId.Equals(model.ProjectId)).FirstOrDefaultAsync();
                var weekendtime = await _context.ItemTypes.Where(x => x.Item_Type.ToLower().Contains("weekend") && x.Rental_UnitId.Equals(19) && x.ProjectId.Equals(model.ProjectId)).FirstOrDefaultAsync();

                foreach (Daily_Report_2 DR in dailyreports)
                {
                    if (DR.tobepaid.Equals(1) || (DR.tobepaid != 1 && DR.StandingTime.Value.TotalMinutes > 0 && modelin.PayDownTime.Equals(true)))
                    {
                        InvoiceItem II = new InvoiceItem();
                        II.Item_Name = DR.Title.TheTitle;
                        II.SubProjectId = DR.SubProjectId;
                        II.Daily_Report_2Id = DR.Id;
                        II.Daily_Report_2 = DR;
                        II.Days = 0;
                        II.Install_date = DR.Report_Date;
                        II.Invoice_date = Convert.ToDateTime(DR.InvoiceDate);
                        II.Discounts = DR.Title.ItemType.Discounts.Where(x => x.StartDate.Date <= model.endtime).ToList();
                        if (DR.Hours.Hours > 0 || (DR.Hours.Hours.Equals(0) && DR.Hours.Minutes > 0))
                        {
                            II.Days = (DR.EndHour - DR.StartHour).TotalHours;
                            II.Amount = DR.Amount;
                        }
                        else
                        {
                            II.Days = 24 - DR.StartHour.Hours + DR.EndHour.Hours;
                            II.Amount = DR.Amount;
                        }
                        decimal nighthours = (decimal)0.0;
                        decimal weekendhours = (decimal)0.0;
                        var itemtype = DR.Title.ItemType;
                        if (weekendtime != null)
                        {
                            weekendhours = CalculateWeekendHours(DR);
                        }
                        if (nighttime != null)
                        {
                            nighthours = CalculateNightTime(DR, DR.StartHour, DR.EndHour, nighttime, itemtype);
                        }

                        II.BoQNr = itemtype.BoQnr;
                        II.ItemTypeId = itemtype.Id;
                        II.ItemType = itemtype;
                        if (DR.Project.ImplementBreakTime.Equals(true))
                        {
                            if (II.Days >= 6.0)
                            {
                                if (DR.Title.Worker.Equals(true))
                                {
                                    II.Days = (II.Days - 1.0) * DR.Amount; //break time worker (1hour)
                                }
                                else
                                {
                                    II.Days = (II.Days - 0.5) * DR.Amount; //Break time funktionær(½ hour)
                                }
                            }
                        }
                        else
                        {
                            II.Days = (II.Days * DR.Amount);
                        }
                        II.rental_price = itemtype.rental_price * (decimal)II.Days;
                        InvoiceItem II2 = new InvoiceItem();
                        if (nighthours < (decimal)0.01 && weekendhours < (decimal)0.01)
                        {
                            II.rental_price = itemtype.rental_price * (decimal)II.Days;
                        }
                        else if (weekendhours > (decimal)0.00)
                        {
                            II2.Amount = DR.Amount;
                            II2.ItemType = weekendtime;
                            II2.ItemTypeId = weekendtime.Id;
                            II2.Item_Name = II.Item_Name + " (Surcharge Weekend)";
                            II2.Install_date = II.Install_date;
                            II2.rental_price = weekendhours * II.ItemType.rental_price * weekendtime.rental_price * DR.Amount;
                            II2.price = (decimal)0.00;
                            II2.SubProjectId = II.SubProjectId;
                            II2.BoQNr = II.BoQNr;
                            II2.BoQNr_Rental = II.BoQNr_Rental == null ? II.BoQNr : II.BoQNr_Rental; //II2.BoQNr_Rental
                            II2.Daily_Report_2Id = DR.Id;
                            II2.Daily_Report_2 = DR;
                            II2.Days = Convert.ToDouble(weekendhours * Convert.ToDecimal(DR.Amount));
                            II2.Invoice_date = II.Invoice_date;
                            if (Convert.ToInt32(II2.rental_price) == 1584)
                            {
                                double miauw = 2.54;
                            }
                        }
                        else if (nighthours > (decimal)0.00)
                        {
                            II2.Amount = DR.Amount;
                            II2.ItemType = nighttime;
                            II2.ItemTypeId = nighttime.Id;
                            II2.Item_Name = II.Item_Name + " (Surcharge Night)";
                            II2.Install_date = II.Install_date;
                            II2.rental_price = nighthours * II.ItemType.rental_price * nighttime.rental_price * DR.Amount;
                            II2.price = (decimal)0.00;
                            II2.SubProjectId = II.SubProjectId;
                            II2.BoQNr = II.BoQNr;
                            II2.BoQNr_Rental = II.BoQNr_Rental == null ? II.BoQNr : II.BoQNr_Rental;
                            II2.Daily_Report_2Id = DR.Id;
                            II2.Daily_Report_2 = DR;
                            II2.Days = Convert.ToDouble(nighthours * Convert.ToDecimal(DR.Amount));
                            II2.Invoice_date = II.Invoice_date;

                        }



                        if (DR.tobepaid != 1 && DR.StandingTime.Value.TotalMinutes > 0 && modelin.PayDownTime.Equals(true))
                        {
                            II.Days = DR.StandingTime.Value.TotalMinutes / 60.0 * Convert.ToDouble(DR.Amount);
                            II.rental_price = (decimal)II.Days * II.ItemType.rental_price;
                        }
                        //Discount added here
                        II.Total_Discount = (decimal)0.0;
                        if (II.Discounts.Count > 0)
                        {

                            var currentdiscount = II.Discounts.SingleOrDefault(x => x.StartDate.Date <= DR.Report_Date.Date && x.EndDate >= DR.Report_Date.Date);
                            if (currentdiscount != null)
                            {
                                II.Total_Discount = II.rental_price * currentdiscount.Rate;
                            }
                        }
                        //
                        items.Add(II);
                        if (modelin.CheckInconsistensies == true)
                        {
                            inconsistentItems.Add(II);
                        }
                        if (II2.Daily_Report_2Id != null)
                        {
                            items.Add(II2);
                        }

                        if (DR.Machinery != null)
                        {
                            string[] machinerylist = DR.Machinery.Split(",");
                            //int count_servicecar = 0;
                            List<ItemType> donemachines = new List<ItemType>();
                            foreach (string s in machinerylist)
                            {

                                var themachine = MachineryItems.SingleOrDefault(x => x.Item_Type.ToLower().Equals(s.Trim().ToLower())
                                || _SharedLocalizer.GetLocalizedHtmlString(x.Item_Type).Value.ToLower().Equals(s.Trim().ToLower())
                                || _SharedLocalizer.GetLocalizedHtmlString(s.Trim().ToLower()).Value.Equals(x.Item_Type.ToLower())
                                || _SharedLocalizer.GetLocalizedHtmlString(s.Trim()).Value.Equals(x.Item_Type));
                                if (themachine != null && donemachines.IndexOf(themachine) == -1)
                                {
                                    int count_machine = machinerylist.Count(x => x.Trim().ToLower().Equals(s.Trim().ToLower()));
                                    InvoiceItem machine = new InvoiceItem();
                                    machine.Amount = count_machine;
                                    machine.ItemType = themachine;
                                    machine.ItemTypeId = themachine.Id;
                                    machine.Item_Name = _SharedLocalizer.GetLocalizedHtmlString(themachine.Item_Type).Value;
                                    machine.Install_date = II.Install_date;
                                    machine.price = (decimal)0.00;
                                    machine.SubProjectId = II.SubProjectId;
                                    machine.BoQNr = themachine.BoQnr;
                                    machine.BoQNr_Rental = servicecar.BoQnr_Rental;
                                    machine.Daily_Report_2Id = DR.Id;
                                    machine.Daily_Report_2 = DR;
                                    machine.Days = II.Days;
                                    machine.rental_price = Convert.ToDecimal(II.Days) * themachine.rental_price * Convert.ToDecimal(machine.Amount);
                                    machine.Discounts = themachine.Discounts.Where(x => x.StartDate.Date <= model.endtime).ToList();
                                    machine.Total_Discount = (decimal)0.00;
                                    if (machine.Discounts.Count > 0)
                                    {
                                        var currentdiscount = machine.Discounts.SingleOrDefault(x => x.StartDate.Date <= DR.Report_Date.Date && x.EndDate >= DR.Report_Date.Date);
                                        if (currentdiscount != null)
                                        {
                                            machine.Total_Discount = machine.rental_price * currentdiscount.Rate;
                                        }
                                    }
                                    items.Add(machine);
                                    donemachines.Add(themachine);

                                }
                            }
                        }
                    }

                }

                var invoiceitemsmob = (from m in mobilizations2
                                       select new InvoiceItem
                                       {
                                           Item_Name = m.ItemType.Item_Type,
                                           SubProjectId = m.SubProjectId,
                                           ItemTypeId = m.ItemTypeId,
                                           ItemType = m.ItemType,
                                           BoQNr = m.ItemType.BoQnr,
                                           MobilizationId = m.Id,
                                           Mobilize = m,
                                           Amount = Convert.ToDouble(m.Amount),
                                           price = Convert.ToDecimal(m.ItemType.price) * Convert.ToDecimal(m.Amount),
                                           Install_date = m.TimeStamp.Date,
                                           Days = (m.TimeStamp.Date <= starttime) ? (endtime - m.TimeStamp.Date).Days + 1 : 0
                                       }).ToList();

                foreach (var II in invoiceitemsmob)
                {
                    allItems.Add(II);

                    if (modelin.CheckInconsistensies == true)
                    {
                        allInconsistentItems.Add(II);
                    }
                    var discount = discounts.Where(x => x.Item_Type.Contains(II.ItemType.Item_Type) && x.BoQnr >= II.ItemType.BoQnr).FirstOrDefault();
                    if (discount != null)
                    {
                        InvoiceItem II2 = new InvoiceItem();
                        II2.MobilizationId = II.MobilizationId;
                        II2.Mobilize = II.Mobilize;
                        II2.Install_date = II.Install_date;
                        II2.location = II.location;
                        II2.price = discount.price;
                        II2.SubProjectId = II.SubProjectId;
                        II2.Days = II.Days;
                        II2.Amount = II.Amount;
                        II2.BoQNr = discount.BoQnr;
                        II2.ItemTypeId = discount.Id;
                        II2.ItemType = discount;
                        II2.Item_Name = discount.Item_Type;
                        II2.price = Convert.ToDecimal(discount.price) * (decimal)II2.Amount;
                        if (II2.ItemType != null)
                        {
                            allItems.Add(II2);
                        }
                    }

                }

                foreach (Arrival arr in arrivals2)
                {
                    if (arr.UniqueID == null)
                    {
                        arr.UniqueID = "";
                    }
                    if (arr.UniqueID.Contains("#"))
                    {
                        List<Install> installs = new List<Install>();
                        if (arr.EndStamp != null)
                        {
                            installs = installations2.Where(x => x.UniqueID.Equals(arr.UniqueID) && x.ItemTypeId.Equals(arr.ItemTypeId) && x.RentalStartDate >= arr.TimeStamp && x.RentalStartDate <= arr.EndStamp).OrderBy(x => x.TimeStamp).ToList();
                        }
                        else
                        {
                            //installs = installations2.Where(x => x.UniqueID.Equals(arr.UniqueID) && x.ItemTypeId.Equals(arr.ItemTypeId) && x.RentalStartDate >= arr.TimeStamp).OrderBy(x => x.TimeStamp).ToList();
                            try
                            {
                                installs = installations2.Where(x => x.UniqueID.Equals(arr.UniqueID) && x.ItemTypeId.Equals(arr.ItemTypeId) && x.RentalStartDate >= arr.TimeStamp).OrderBy(x => x.TimeStamp).ToList();
                            }
                            catch
                            {
                                //installs = installations.Where(x => x.UniqueID.Equals(arr.UniqueID) && x.ItemTypeId.Equals(arr.ItemTypeId) && x.RentalStartDate >= arr.TimeStamp).OrderBy(x => x.TimeStamp).ToList();
                            }
                        }
                        int i = 1;
                        foreach (var item in installs)
                        {
                            InvoiceItem II = new InvoiceItem();

                            //if (installs.Count() > 1)
                            //{
                            if (item.Location != null && item.Location != "" && item.Location != "N/A")
                            {
                                if (i == 1)
                                {
                                    II.location += "(1): " + item.Location;
                                }
                                else
                                {
                                    II.location += "(" + i.ToString() + "): " + item.Location;
                                }
                            }
                            //}
                            //else
                            //{
                            //    II.location = item.Location;
                            //}
                            i += 1;
                            InvoiceItem II2 = new InvoiceItem();
                            Arrival arr_new = new Arrival(arr);
                            II.SubProjectId = arr.SubProjectId;
                            II.Item_Name = arr.ItemType.Item_Type;
                            II.ItemTypeId = arr.ItemType.Id;
                            II.ItemType = arr.ItemType;
                            II.BoQNr = Convert.ToDecimal(arr.ItemType.BoQnr_Rental);
                            II.BoQNr_Rental = Convert.ToDecimal(arr.ItemType.BoQnr_Rental);
                            II.ArrivalId = arr.Id;
                            II.Arrival = arr_new;
                            II.Discounts = arr.ItemType.Discounts.Where(x => x.StartDate.Date <= model.endtime).ToList();
                            arr_new.TimeStamp = item.RentalStartDate;
                            if (item.DeinstallDate < arr_new.TimeStamp)
                            {

                            }
                            else
                            {
                                arr_new.EndStamp = item.DeinstallDate;
                            }

                            if (arr_new.Amount != null)
                            {
                                II.Amount = Convert.ToDouble(arr_new.Amount);
                            }
                            else
                            {
                                II.Amount = 1;
                            }
                            II.price = (decimal)0.00;
                            if (arr_new.EndStamp != null)
                            {
                                if (arr_new.EndStamp >= endtime)
                                {
                                    II.Days = (endtime - arr_new.TimeStamp.Date).Days + 1;
                                }
                                else
                                {
                                    II.Days = (Convert.ToDateTime(arr_new.EndStamp) - arr_new.TimeStamp.Date).Days + 1;
                                }
                            }
                            else
                            {
                                II.Days = (endtime - arr_new.TimeStamp.Date).Days + 1;
                            }
                            II.Install_date = arr_new.TimeStamp.Date;
                            // has rental price
                            if (arr_new.ItemType.rental_price != null)
                            {
                                // calender day (no amount)
                                if (arr_new.ItemType.Rental_Unit.TheUnit.ToLower().Equals("pr. calender day"))
                                {
                                    II.rental_price = arr_new.ItemType.rental_price * (decimal)II.Days * (decimal)arr_new.Amount;
                                }
                                else if (arr_new.ItemType.Rental_UnitId.Equals(11) || arr_new.ItemType.Rental_UnitId.Equals(12))
                                {
                                    double tempdays = II.Days;
                                    II.Days = GetOperationalDaysArrival(ItemActivities, arr_new, starttime, endtime);
                                    II.rental_price = arr_new.ItemType.rental_price * (decimal)II.Days * (decimal)arr_new.Amount;
                                    //var idleitem = IdleItems.Where(x => x.Item_Type.ToLower().Contains(arr.ItemType.Item_Type.ToLower())).SingleOrDefault();
                                    string idleitemname = String.Concat(arr_new.ItemType.Item_Type, " - Idle");
                                    var idleitem = IdleItems.Where(x => x.Item_Type.Equals(idleitemname)).SingleOrDefault();
                                    if (idleitem != null)
                                    {
                                        II2.Item_Name = idleitem.Item_Type;
                                        II2.Arrival = II.Arrival;
                                        II2.ArrivalId = II.ArrivalId;
                                        II2.Install_date = II.Install_date;
                                        II2.Invoice_date = II.Invoice_date;
                                        II2.BoQNr = idleitem.BoQnr;
                                        II2.BoQNr_Rental = idleitem.BoQnr_Rental;
                                        II2.Days = tempdays - II.Days;
                                        if ((i - 1) != installs.Count)
                                        {
                                            int moredays = (Convert.ToInt32((installs.ElementAt(i - 1).RentalStartDate - Convert.ToDateTime(arr_new.EndStamp)).TotalDays) - 1);
                                            if (moredays < 0)
                                            {
                                                moredays = 0;
                                            }
                                            II2.Days += moredays;
                                            if (arr_new.EndStamp != null)
                                            {
                                                arr_new.EndStamp = arr_new.EndStamp.Value.AddDays(moredays);
                                            }

                                        }
                                        else if ((i - 1) == installs.Count)
                                        {
                                            //if arr_new endstamp is null, continue till end of invoice period.
                                            if (installs.Last().DeinstallDate == null) //if null it works already.
                                            {

                                            }
                                            else
                                            {
                                                var nextinstall = InstallIdleAll.Where(x => x.TimeStamp >= installs.Last().DeinstallDate && x.TimeStamp <= endtime && x.UniqueID.Equals(installs.Last().UniqueID)).OrderBy(x => x.TimeStamp).FirstOrDefault();
                                                if (nextinstall != null)
                                                {
                                                    int moredays = (Convert.ToInt32((nextinstall.TimeStamp - Convert.ToDateTime(installs.Last().DeinstallDate)).TotalDays) - 1);
                                                    if (moredays < 0)
                                                    {
                                                        moredays = 0;
                                                    }
                                                    II2.Days += moredays;
                                                    if (arr_new.EndStamp != null)
                                                    {
                                                        arr_new.EndStamp = arr_new.EndStamp.Value.AddDays(moredays);
                                                    }
                                                }
                                                //else
                                                //{
                                                //    int moredays = (Convert.ToInt32((endtime - Convert.ToDateTime(installs.ElementAt(i - 1).DeinstallDate)).TotalDays) - 1);
                                                //    II2.Days += moredays;
                                                //}
                                            }
                                            //else continue till next install
                                        }
                                        II2.ItemTypeId = idleitem.Id;
                                        II2.ItemType = idleitem;
                                        II2.location = II.location;
                                        II2.Amount = II.Amount;
                                        II2.rental_price = idleitem.rental_price * (decimal)II2.Days * (decimal)II2.Amount;
                                        II2.Discounts = idleitem.Discounts.Where(x => x.StartDate.Date <= model.endtime).ToList();
                                    }
                                }
                                else if (arr_new.ItemType.Rental_UnitId.Equals(13) || arr_new.ItemType.Rental_UnitId.Equals(14))
                                {
                                    double tempdays = II.Days;
                                    //II.Days = GetInstalledDaysArrival(installations2, arr, arr.TimeStamp, endtime);
                                    //ArrivalReturn arrreturn = GetInstalledDaysArrival(installations2, arr, arr.TimeStamp, endtime);
                                    II.Days = GetInstalledDaysArrival(installations2, arr_new, arr_new.TimeStamp, endtime);
                                    //II.Days = arrreturn.days;
                                    //II.Arrival.EndStamp = arrreturn.arr.EndStamp;
                                    II.rental_price = arr_new.ItemType.rental_price * (decimal)II.Days * (decimal)arr_new.Amount;
                                    if (arr_new.PayedAmount != null && arr_new.InvoiceDate.Date >= starttime && arr_new.InvoiceDate.Date <= endtime)
                                    {
                                        II.rental_price -= Convert.ToDecimal(arr_new.PayedAmount);
                                    }

                                    //var idleitem = IdleItems.Where(x => x.Item_Type.ToLower().Contains(arr.ItemType.Item_Type.ToLower())).SingleOrDefault();
                                    string idleitemname = String.Concat(arr_new.ItemType.Item_Type, " - Idle");
                                    var idleitem = IdleItems.Where(x => x.Item_Type.Equals(idleitemname)).SingleOrDefault();
                                    if (idleitem != null)
                                    {
                                        //mangler at give idle time op til SLUTdato hvis i - 1 == installs.count!
                                        II2.Item_Name = idleitem.Item_Type;
                                        II2.Arrival = II.Arrival;
                                        II2.ArrivalId = II.ArrivalId;
                                        II2.Install_date = II.Install_date;
                                        II2.BoQNr = idleitem.BoQnr;
                                        II2.BoQNr_Rental = idleitem.BoQnr_Rental;
                                        II2.Days = tempdays - II.Days;

                                        if ((i - 1) != installs.Count)
                                        {
                                            int moredays = (Convert.ToInt32((installs.ElementAt(i - 1).RentalStartDate - Convert.ToDateTime(arr_new.EndStamp)).TotalDays) - 1);
                                            if (moredays < 0)
                                            {
                                                moredays = 0;
                                            }
                                            II2.Days += moredays;
                                            if (arr_new.EndStamp != null)
                                            {
                                                arr_new.EndStamp = arr_new.EndStamp.Value.AddDays(moredays);
                                            }
                                        }
                                        else if ((i - 1) == installs.Count)
                                        {
                                            //if arr_new endstamp is null, continue till end of invoice period.
                                            if (installs.Last().DeinstallDate == null) //if null it works already.
                                            {

                                            }
                                            else
                                            {
                                                try
                                                {


                                                    var nextinstall = InstallIdleAll.Where(x => x.TimeStamp >= installs.Last().DeinstallDate && x.TimeStamp <= endtime && x.UniqueID.Equals(installs.Last().UniqueID)).OrderBy(x => x.TimeStamp).FirstOrDefault();
                                                    if (nextinstall != null)
                                                    {
                                                        int moredays = (Convert.ToInt32((nextinstall.TimeStamp - Convert.ToDateTime(installs.Last().DeinstallDate)).TotalDays) - 1);
                                                        if (moredays < 0)
                                                        {
                                                            moredays = 0;
                                                        }
                                                        II2.Days += moredays;
                                                        if (arr_new.EndStamp != null)
                                                        {
                                                            arr_new.EndStamp = arr_new.EndStamp.Value.AddDays(moredays);
                                                        }
                                                    }
                                                }
                                                catch
                                                {

                                                }
                                                //else
                                                //{
                                                //    int moredays = (Convert.ToInt32((endtime - Convert.ToDateTime(installs.ElementAt(i - 1).DeinstallDate)).TotalDays) - 1);
                                                //    II2.Days += moredays;
                                                //}
                                            }
                                            //else continue till next install
                                        }
                                        II2.ItemTypeId = idleitem.Id;
                                        II2.ItemType = idleitem;
                                        II2.location = II.location;
                                        II2.Amount = II.Amount;
                                        II2.rental_price = idleitem.rental_price * (decimal)II2.Days * (decimal)II2.Amount;
                                        II2.Discounts = idleitem.Discounts.Where(x => x.StartDate.Date <= model.endtime).ToList();
                                    }
                                }
                                else if (arr_new.ItemType.Rental_UnitId.Equals(16))
                                {
                                    //II.Days = CalculateRentalMonths(arr_new, arr_new.TimeStamp.Date, endtime.Date);//binh 07.04.2025 correct
                                    II.Days = (endtime.Year - arr_new.TimeStamp.Year) * 12 + endtime.Month - arr_new.TimeStamp.Month;
                                    II.rental_price = arr_new.ItemType.rental_price * (decimal)II.Days * (decimal)arr_new.Amount;
                                }
                                else
                                {
                                    II.rental_price = arr_new.ItemType.rental_price * (decimal)II.Days * (decimal)arr_new.Amount;
                                }
                            }
                            else
                            {
                                II.rental_price = (decimal)0.00;
                            }
                            if (II.Discounts.Count > 0)
                            {
                                II.Total_Discount = (decimal)0.0;
                                foreach (Discount d in II.Discounts)
                                {
                                    DateTime start;
                                    DateTime end;
                                    if (d.StartDate < arr_new.TimeStamp)
                                    {
                                        start = arr_new.TimeStamp.Date;
                                    }
                                    else
                                    {
                                        start = d.StartDate;
                                    }
                                    if (arr_new.TimeStamp.Date > start)
                                    {
                                        start = arr_new.TimeStamp.Date;
                                    }
                                    if (d.EndDate == null)
                                    {
                                        if (arr_new.EndStamp != null)
                                        {
                                            if (arr_new.EndStamp < endtime)
                                            {
                                                end = Convert.ToDateTime(arr_new.EndStamp).Date;
                                            }
                                            else
                                            {
                                                end = endtime;
                                            }
                                        }
                                        else
                                        {
                                            end = endtime;
                                        }

                                    }
                                    else
                                    {
                                        if (arr_new.EndStamp != null)
                                        {
                                            if (arr_new.EndStamp < d.EndDate)
                                            {
                                                end = Convert.ToDateTime(arr_new.EndStamp).Date;
                                            }
                                            else
                                            {
                                                end = Convert.ToDateTime(d.EndDate);
                                            }
                                        }
                                        else
                                        {
                                            if (d.EndDate > endtime)
                                            {
                                                end = endtime;
                                            }
                                            else
                                            {
                                                end = Convert.ToDateTime(d.EndDate);
                                            }
                                        }

                                    }
                                    if (II2.ArrivalId == null)
                                    {
                                        for (DateTime dt = start.Date; dt <= end.Date; dt = dt.AddDays(1).Date)
                                        {
                                            II.Total_Discount += d.ItemType.rental_price * d.Rate * (decimal)II.Amount;
                                        }
                                    }
                                    else
                                    {
                                        foreach (DateTime dt in GetListOperationalDaysArrival(ItemActivities, arr_new, start.Date, end.Date))
                                        {
                                            II.Total_Discount += d.ItemType.rental_price * d.Rate * (decimal)II2.Amount;
                                        }
                                    }

                                }
                            }
                            else
                            {
                                II.Total_Discount = (decimal)0.0;
                            }
                            if (arr_new.ToBePaid == false)
                            {
                                II.rental_price = 0;
                                II.Total_Discount = 0;
                            }
                            allItems.Add(II);
                            if (modelin.CheckInconsistensies == true)
                            {
                                allInconsistentItems.Add(II);
                            }
                            if (II2.ArrivalId != null)
                            {
                                if (II2.Discounts.Count > 0)
                                {

                                    II2.Total_Discount = (decimal)0.0;
                                    foreach (Discount d in II2.Discounts)
                                    {
                                        DateTime start;
                                        DateTime end;
                                        if (d.StartDate < arr_new.TimeStamp)
                                        {
                                            start = arr_new.TimeStamp.Date;
                                        }
                                        else
                                        {
                                            start = d.StartDate;
                                        }
                                        if (arr_new.TimeStamp.Date > start)
                                        {
                                            start = arr_new.TimeStamp.Date;
                                        }
                                        if (d.EndDate == null)
                                        {
                                            if (arr_new.EndStamp != null)
                                            {
                                                if (arr_new.EndStamp < endtime)
                                                {
                                                    end = Convert.ToDateTime(arr_new.EndStamp).Date;
                                                }
                                                else
                                                {
                                                    end = endtime;
                                                }
                                            }
                                            else
                                            {
                                                end = endtime;
                                            }

                                        }
                                        else
                                        {
                                            if (arr_new.EndStamp != null)
                                            {
                                                if (arr_new.EndStamp < d.EndDate)
                                                {
                                                    end = Convert.ToDateTime(arr_new.EndStamp).Date;
                                                }
                                                else
                                                {
                                                    end = Convert.ToDateTime(d.EndDate);
                                                }
                                            }
                                            else
                                            {
                                                if (d.EndDate > endtime)
                                                {
                                                    end = endtime;
                                                }
                                                else
                                                {
                                                    end = Convert.ToDateTime(d.EndDate);
                                                }
                                            }
                                        }
                                        foreach (DateTime dt in GetListNOTOperationalDaysArrival(ItemActivities, arr_new, start.Date, end.Date))
                                        {
                                            II2.Total_Discount += d.ItemType.rental_price * d.Rate * (decimal)II2.Amount;
                                        }
                                    }
                                }
                                else
                                {
                                    II2.Total_Discount = (decimal)0.0;
                                }
                                if (arr_new.ToBePaid == false)
                                {
                                    II2.rental_price = 0;
                                    II2.Total_Discount = 0;
                                }
                                allItems.Add(II2);
                            }
                        }
                    }
                    else
                    {
                        InvoiceItem II = new InvoiceItem();
                        InvoiceItem II2 = new InvoiceItem();
                        II.Item_Name = arr.ItemType.Item_Type;
                        II.SubProjectId = arr.SubProjectId;
                        II.ItemTypeId = arr.ItemType.Id;
                        II.ItemType = arr.ItemType;
                        II.BoQNr = arr.ItemType.BoQnr;
                        II.BoQNr_Rental = arr.ItemType.BoQnr_Rental;
                        II.ArrivalId = arr.Id;
                        II.Arrival = arr;
                        II.Discounts = arr.ItemType.Discounts.Where(x => x.StartDate.Date <= model.endtime).ToList();
                        if (arr.Amount != null)
                        {
                            II.Amount = Convert.ToDouble(arr.Amount);
                        }
                        else
                        {
                            II.Amount = 1;
                        }
                        II.price = (decimal)0.00;
                        if (arr.EndStamp != null)
                        {
                            if (arr.EndStamp >= endtime)
                            {
                                II.Days = (endtime - arr.TimeStamp.Date).Days + 1;
                            }
                            else
                            {
                                II.Days = (Convert.ToDateTime(arr.EndStamp) - arr.TimeStamp.Date).Days + 1;
                            }
                        }
                        else
                        {
                            II.Days = (endtime - arr.TimeStamp.Date).Days + 1;
                        }
                        //if (arr.ItemType.Rental_Unit.TheUnit.ToLower().Equals("pr. week"))
                        //{
                        //    var previousdays = 0; Math.Max(Math.Ceiling((starttime.AddDays(-1) - arr.TimeStamp.Date).TotalDays / 7), 0);
                        //    var alldays = Math.Ceiling((endtime - arr.TimeStamp.Date).TotalDays / 7);
                        //    II.Days = Convert.ToDouble(alldays - previousdays);
                        //    //II.Days = Convert.ToDouble(Convert.ToInt32(II.Days / 7));
                        //}
                        if (arr?.ItemType?.Rental_Unit?.TheUnit?.ToLower() == "pr. week")
                        {
                            var previousdays = Math.Max(Math.Ceiling((starttime.AddDays(-1) - arr.TimeStamp.Date).TotalDays / 7), 0);
                            var alldays = Math.Ceiling((endtime - arr.TimeStamp.Date).TotalDays / 7);
                            II.Days = Convert.ToDouble(alldays - previousdays);
                        }

                        //else if (arr.ItemType.Rental_Unit.TheUnit.ToLower().Equals("pr. month"))
                        //{
                        //    II.Days = CalculateRentalMonths(arr, arr.TimeStamp.Date, endtime.Date);
                        //    //II.Days = modelin.endtime.Month - arr.TimeStamp.Month + (modelin.endtime.Year - arr.TimeStamp.Year) * 12;
                        //    //II.Days += 1;      
                        //}
                        else if (arr?.ItemType?.Rental_Unit?.TheUnit?.ToLower() == "pr. month" && arr?.TimeStamp != null)
                        {
                            II.Days = CalculateRentalMonths(arr, arr.TimeStamp.Date, endtime.Date);
                        }

                        II.Install_date = arr.TimeStamp.Date;
                        // has rental price
                        if (arr.ItemType.rental_price != null)
                        {
                            // calender day (no amount)
                            if (arr.ItemType.Rental_Unit?.TheUnit?.ToLower() == "pr. calender day")
                            {
                                II.rental_price = arr.ItemType.rental_price * (decimal)II.Days * (decimal)arr.Amount;
                            }
                            else if (arr.ItemType.Rental_UnitId.Equals(11) || arr.ItemType.Rental_UnitId.Equals(12))
                            {
                                double tempdays = II.Days;
                                II.Days = GetOperationalDaysArrival(ItemActivities, arr, starttime, endtime);
                                II.rental_price = arr.ItemType.rental_price * (decimal)II.Days * (decimal)arr.Amount;
                                if (arr.PayedAmount != null && arr.InvoiceDate.Date >= starttime && arr.InvoiceDate.Date <= endtime)
                                {

                                    II.rental_price -= Convert.ToDecimal(arr.PayedAmount);
                                }
                                string idleitemname = String.Concat(arr.ItemType.Item_Type, " - Idle");
                                var idleitem = IdleItems.Where(x => x.Item_Type.Equals(idleitemname)).SingleOrDefault();
                                if (idleitem != null)
                                {
                                    II2.Item_Name = idleitem.Item_Type;
                                    II2.Arrival = II.Arrival;
                                    II2.ArrivalId = II.ArrivalId;
                                    II2.Install_date = II.Install_date;
                                    II2.BoQNr = idleitem.BoQnr;
                                    II2.BoQNr_Rental = idleitem.BoQnr_Rental;
                                    II2.Days = tempdays - II.Days;
                                    II2.ItemTypeId = idleitem.Id;
                                    II2.ItemType = idleitem;
                                    II2.location = II.location;
                                    II2.Amount = II.Amount;
                                    II2.rental_price = idleitem.rental_price * (decimal)II2.Days * (decimal)II2.Amount;
                                    II2.Discounts = idleitem.Discounts.Where(x => x.StartDate.Date <= model.endtime).ToList();
                                }
                            }
                            else if (arr.ItemType.Rental_UnitId.Equals(13) || arr.ItemType.Rental_UnitId.Equals(14))
                            {
                                double tempdays = II.Days;
                                //II.Days = GetInstalledDaysArrival(installations2, arr, arr.TimeStamp, endtime);
                                //ArrivalReturn arrreturn = GetInstalledDaysArrival(installations2, arr, arr.TimeStamp, endtime);
                                II.Days = GetInstalledDaysArrival(installations2, arr, arr.TimeStamp, endtime);
                                //II.Days = arrreturn.days;
                                //II.Arrival.EndStamp = arrreturn.arr.EndStamp;
                                II.rental_price = arr.ItemType.rental_price * (decimal)II.Days * (decimal)arr.Amount;
                                if (arr.PayedAmount != null && arr.InvoiceDate.Date >= starttime && arr.InvoiceDate.Date <= endtime)
                                {

                                    II.rental_price -= Convert.ToDecimal(arr.PayedAmount);
                                }
                                string idleitemname = String.Concat(arr.ItemType.Item_Type, " - Idle");
                                var idleitem = IdleItems.Where(x => x.Item_Type.Equals(idleitemname)).SingleOrDefault();
                                if (idleitem != null)
                                {
                                    II2.Item_Name = idleitem.Item_Type;
                                    II2.Arrival = II.Arrival;
                                    II2.ArrivalId = II.ArrivalId;
                                    II2.Install_date = II.Install_date;
                                    II2.BoQNr = idleitem.BoQnr;
                                    II2.BoQNr_Rental = idleitem.BoQnr_Rental;
                                    II2.Days = tempdays - II.Days;
                                    II2.ItemTypeId = idleitem.Id;
                                    II2.ItemType = idleitem;
                                    II2.location = II.location;
                                    II2.Amount = II.Amount;
                                    II2.rental_price = idleitem.rental_price * (decimal)II2.Days * (decimal)II2.Amount;
                                    II2.Discounts = idleitem.Discounts.Where(x => x.StartDate.Date <= model.endtime).ToList();
                                }
                            }
                            else
                            {
                                II.rental_price = arr.ItemType.rental_price * (decimal)II.Days * (decimal)arr.Amount;
                            }
                        }
                        else
                        {
                            II.rental_price = (decimal)0.00;
                        }
                        if (II.Discounts.Count > 0)
                        {
                            II.Total_Discount = (decimal)0.0;
                            foreach (Discount d in II.Discounts)
                            {
                                DateTime start;
                                DateTime end;
                                if (d.StartDate < arr.TimeStamp)
                                {
                                    start = arr.TimeStamp.Date;
                                }
                                else
                                {
                                    start = d.StartDate;
                                }
                                if (arr.TimeStamp.Date > start)
                                {
                                    start = arr.TimeStamp.Date;
                                }
                                if (d.EndDate == null)
                                {
                                    if (arr.EndStamp != null)
                                    {
                                        if (arr.EndStamp < endtime)
                                        {
                                            end = Convert.ToDateTime(arr.EndStamp).Date;
                                        }
                                        else
                                        {
                                            end = endtime;
                                        }
                                    }
                                    else
                                    {
                                        end = endtime;
                                    }

                                }
                                else
                                {
                                    if (arr.EndStamp != null)
                                    {
                                        if (arr.EndStamp < d.EndDate)
                                        {
                                            end = Convert.ToDateTime(arr.EndStamp).Date;
                                        }
                                        else
                                        {
                                            end = Convert.ToDateTime(d.EndDate);
                                        }
                                    }
                                    else
                                    {
                                        if (d.EndDate > endtime)
                                        {
                                            end = endtime;
                                        }
                                        else
                                        {
                                            end = Convert.ToDateTime(d.EndDate);
                                        }
                                    }

                                }
                                if (II2.ArrivalId == null)
                                {
                                    for (DateTime dt = start.Date; dt <= end.Date; dt = dt.AddDays(1).Date)
                                    {
                                        II.Total_Discount += d.ItemType.rental_price * d.Rate * (decimal)II.Amount;
                                    }
                                }
                                else
                                {
                                    foreach (DateTime dt in GetListOperationalDaysArrival(ItemActivities, arr, start.Date, end.Date))
                                    {
                                        II.Total_Discount += d.ItemType.rental_price * d.Rate * (decimal)II2.Amount;
                                    }
                                }

                            }
                        }
                        else
                        {
                            II.Total_Discount = (decimal)0.0;
                        }
                        if (arr.ToBePaid == false)
                        {
                            II.rental_price = 0;
                            II.Total_Discount = 0;
                        }
                        allItems.Add(II);
                        if (modelin.CheckInconsistensies == true)
                        {
                            allInconsistentItems.Add(II);
                        }
                        if (II2.ArrivalId != null)
                        {
                            if (II2.Discounts.Count > 0)
                            {

                                II2.Total_Discount = (decimal)0.0;
                                foreach (Discount d in II2.Discounts)
                                {
                                    DateTime start;
                                    DateTime end;
                                    if (d.StartDate < arr.TimeStamp)
                                    {
                                        start = arr.TimeStamp.Date;
                                    }
                                    else
                                    {
                                        start = d.StartDate;
                                    }
                                    if (arr.TimeStamp.Date > start)
                                    {
                                        start = arr.TimeStamp.Date;
                                    }
                                    if (d.EndDate == null)
                                    {
                                        if (arr.EndStamp != null)
                                        {
                                            if (arr.EndStamp < endtime)
                                            {
                                                end = Convert.ToDateTime(arr.EndStamp).Date;
                                            }
                                            else
                                            {
                                                end = endtime;
                                            }
                                        }
                                        else
                                        {
                                            end = endtime;
                                        }

                                    }
                                    else
                                    {
                                        if (arr.EndStamp != null)
                                        {
                                            if (arr.EndStamp < d.EndDate)
                                            {
                                                end = Convert.ToDateTime(arr.EndStamp).Date;
                                            }
                                            else
                                            {
                                                end = Convert.ToDateTime(d.EndDate);
                                            }
                                        }
                                        else
                                        {
                                            if (d.EndDate > endtime)
                                            {
                                                end = endtime;
                                            }
                                            else
                                            {
                                                end = Convert.ToDateTime(d.EndDate);
                                            }
                                        }
                                    }
                                    foreach (DateTime dt in GetListNOTOperationalDaysArrival(ItemActivities, arr, start.Date, end.Date))
                                    {
                                        II2.Total_Discount += d.ItemType.rental_price * d.Rate * (decimal)II2.Amount;
                                    }
                                }
                            }
                            else
                            {
                                II2.Total_Discount = (decimal)0.0;
                            }
                            if (arr.ToBePaid == false)
                            {
                                II2.rental_price = 0;
                                II2.Total_Discount = 0;
                            }
                            allItems.Add(II2);
                        }
                    }

                }

                foreach (ExtraWork ew in extraworks2)
                {
                    InvoiceItem II = new InvoiceItem();
                    II.ExtraWorkId = ew.Id;
                    II.SubProjectId = ew.SubProjectId;
                    II.ExtraWork = ew;
                    II.Amount = 1;
                    II.Item_Name = ew.Description;
                    if (ew.EndStamp == null || ew.EndStamp < DateTime.Now.AddDays(-10000))
                    {
                        if (ew.TimeStamp.Date < starttime)
                        {
                            II.price = ew.Price;//(decimal)0.00; This was commented out because on the "always" items, the price should not be neglected.
                            II.Days = (endtime - starttime).Days + 1;
                        }                    //installed within invoice period
                        else
                        {
                            II.price = ew.Price;
                            II.Days = (endtime - ew.TimeStamp.Date).Days + 1;
                        }
                    }
                    else
                    {
                        //Deinstalled after invoice period

                        if (Convert.ToDateTime(ew.EndStamp).Date >= endtime)
                        {
                            if (ew.TimeStamp.Date < starttime)
                            {
                                II.price = (decimal)0.00;
                                II.Days = (endtime - starttime).Days + 1;
                            }
                            //installed within invoice period
                            else
                            {
                                II.price = Convert.ToDecimal(ew.Price) * (decimal)II.Amount;
                                II.Days = (endtime - ew.TimeStamp.Date).Days + 1;
                            }
                        }
                        //deinstalled within invoice period
                        else
                        {
                            //installed before invoice period
                            if (ew.TimeStamp.Date < starttime)
                            {
                                II.price = Convert.ToDecimal(ew.Price) * (decimal)II.Amount;
                                II.Days = (Convert.ToDateTime(ew.EndStamp).Date - ew.TimeStamp.Date).Days + 1;
                            }
                            //installed within invoice period
                            else
                            {

                                II.price = Convert.ToDecimal(ew.Price) * (decimal)II.Amount;
                                II.Days = (Convert.ToDateTime(ew.EndStamp).Date - ew.TimeStamp.Date).Days + 1;
                            }
                        }
                    }

                    II.Install_date = ew.TimeStamp.Date;
                    // has rental price
                    if (ew.Rental_Price >= (decimal)0.001 || ew.Rental_Price <= (decimal)-0.001)
                    {
                        II.rental_price = ew.Rental_Price * (decimal)II.Days;
                    }
                    else
                    {
                        II.rental_price = (decimal)0.00;
                    }

                    allItems.Add(II);
                    if (modelin.CheckInconsistensies == true)
                    {
                        allInconsistentItems.Add(II);
                    }
                }

                foreach (Install inst in installations2)
                {
                    if (inst.InvoiceDate.Date <= model.endtime.Date && inst.ToBePaid == true)
                    {
                        InvoiceItem II = new InvoiceItem();
                        II.SubProjectId = inst.SubProjectId;
                        II.Install = inst;
                        II.Item_Name = inst.ItemType.Item_Type;
                        II.ItemTypeId = inst.ItemType.Id;
                        II.ItemType = inst.ItemType;
                        II.BoQNr = inst.ItemType.BoQnr;
                        II.BoQNr_Rental = inst.ItemType.BoQnr_Rental;
                        II.InstallationId = inst.Id;
                        II.location = inst.Location;
                        //II.Discounts_Installation = inst.ItemType.Discounts_Installation.Where(x => x.StartDate.Date <= model.endtime).ToList();
                        II.Discounts_Installation = inst.ItemType.Discounts_Installation.Where(x => (x.StartDate.Date <= inst.TimeStamp.Date && x.EndDate == null) || (x.StartDate.Date <= inst.TimeStamp.Date && x.EndDate >= inst.TimeStamp.Date)).ToList();
                        if (inst.Amount != null)
                        {
                            II.Amount = Convert.ToDouble(inst.Amount);
                        }
                        else
                        {
                            II.Amount = 1.000;
                        }
                        II.price = (decimal)II.Amount * II.ItemType.price;
                        II.Days = 1;
                        II.Install_date = inst.TimeStamp.Date;
                        II.Invoice_date = inst.InvoiceDate.Date;
                        allItems.Add(II);
                        if (modelin.CheckInconsistensies == true)
                        {
                            allInconsistentItems.Add(II);
                        }
                        if (II.Discounts_Installation.Count > 0)
                        {
                            InvoiceItem DiscountItem = new InvoiceItem();
                            DiscountItem.SubProjectId = II.SubProjectId;
                            DiscountItem.Install = inst;
                            DiscountItem.SubProjectId = inst.SubProjectId;
                            DiscountItem.Install = inst;
                            DiscountItem.Item_Name = inst.ItemType.Item_Type;
                            DiscountItem.ItemTypeId = inst.ItemType.Id;
                            DiscountItem.ItemType = inst.ItemType;
                            DiscountItem.BoQNr = inst.ItemType.BoQnr;
                            DiscountItem.BoQNr_Rental = inst.ItemType.BoQnr_Rental;
                            DiscountItem.InstallationId = inst.Id;
                            DiscountItem.location = inst.Location;
                            DiscountItem.Days = 1;
                            DiscountItem.Install_date = II.Install_date;
                            DiscountItem.Total_Discount_Installation = (decimal)0.00;
                            DiscountItem.Invoice_date = II.Invoice_date;
                            foreach (var item in II.Discounts_Installation)
                            {
                                DiscountItem.Total_Discount_Installation += II.price * item.Rate;
                            }
                            allItems.Add(DiscountItem);
                        }
                        else
                        {
                            II.Total_Discount_Installation = (decimal)0.00;
                        }

                    }


                }

                foreach (Daily_Report_2 DR in dailyreports2)
                {
                    if (DR.tobepaid.Equals(1) || (DR.tobepaid != 1 && DR.StandingTime.Value.TotalMinutes > 0 && modelin.PayDownTime.Equals(true)))
                    {
                        InvoiceItem II = new InvoiceItem();
                        II.Item_Name = DR.Title.TheTitle;
                        II.SubProjectId = DR.SubProjectId;
                        II.Daily_Report_2Id = DR.Id;
                        II.Daily_Report_2 = DR;
                        II.Days = 0;
                        II.Invoice_date = Convert.ToDateTime(DR.InvoiceDate);
                        II.Install_date = DR.Report_Date;

                        if (DR.Hours.Hours > 0 || (DR.Hours.Hours.Equals(0) && DR.Hours.Minutes > 0))
                        {
                            II.Days = (DR.EndHour - DR.StartHour).TotalHours;
                            II.Amount = DR.Amount;
                        }
                        else
                        {
                            II.Days = (24 - DR.StartHour.Hours + DR.EndHour.Hours);
                            II.Amount = DR.Amount;
                        }
                        decimal nighthours = (decimal)0.0;
                        decimal weekendhours = (decimal)0.0;
                        var itemtype = DR.Title.ItemType;
                        if (weekendtime != null)
                        {
                            weekendhours = CalculateWeekendHours(DR);
                        }
                        if (nighttime != null)
                        {
                            nighthours = CalculateNightTime(DR, DR.StartHour, DR.EndHour, nighttime, itemtype);
                        }


                        II.BoQNr = itemtype.BoQnr;
                        II.ItemTypeId = itemtype.Id;
                        II.ItemType = itemtype;
                        if (DR.Project.ImplementBreakTime.Equals(true))
                        {
                            if (II.Days >= 6.0)
                            {
                                if (DR.Title.Worker.Equals(true))
                                {
                                    II.Days = (II.Days - 1.0) * DR.Amount; //break time worker (1hour)
                                }
                                else
                                {
                                    II.Days = (II.Days - 0.5) * DR.Amount; //Break time funktionær(½ hour)
                                }
                            }
                        }
                        else
                        {
                            II.Days = II.Days * DR.Amount;
                        }
                        II.rental_price = itemtype.rental_price * (decimal)II.Days;
                        InvoiceItem II2 = new InvoiceItem();
                        if (nighthours < (decimal)0.01 && weekendhours < (decimal)0.01)
                        {
                            II.rental_price = itemtype.rental_price * (decimal)II.Days;
                        }
                        else if (weekendhours > (decimal)0.00)
                        {
                            II2.Amount = DR.Amount;
                            II2.ItemType = weekendtime;
                            II2.ItemTypeId = weekendtime.Id;
                            II2.Item_Name = II.Item_Name + " (Surcharge Weekend)";
                            II2.Install_date = II.Install_date;
                            II2.rental_price = weekendhours * II.ItemType.rental_price * weekendtime.rental_price * DR.Amount;
                            II2.price = (decimal)0.00;
                            II2.SubProjectId = II.SubProjectId;
                            II2.BoQNr = II.BoQNr;
                            II2.BoQNr_Rental = II.BoQNr_Rental == null ? II.BoQNr : II.BoQNr_Rental;
                            II2.Daily_Report_2Id = DR.Id;
                            II2.Daily_Report_2 = DR;
                            II2.Days = Convert.ToDouble(weekendhours * Convert.ToDecimal(DR.Amount));
                            II2.Invoice_date = II.Invoice_date;
                            if (Convert.ToInt32(II2.rental_price) == 1584)
                            {
                                double muuuuh = 3.40;
                            }

                        }
                        else if (nighthours > (decimal)0.00)
                        {
                            II2.Amount = DR.Amount;
                            II2.ItemType = nighttime;
                            II2.ItemTypeId = nighttime.Id;
                            II2.Item_Name = II.Item_Name + " (Surcharge Night)";
                            II2.Install_date = II.Install_date;
                            II2.rental_price = nighthours * II.ItemType.rental_price * nighttime.rental_price * DR.Amount;
                            II2.price = (decimal)0.00;
                            II2.SubProjectId = II.SubProjectId;
                            II2.BoQNr = II.BoQNr;
                            II2.BoQNr_Rental = II.BoQNr_Rental == null ? II.BoQNr : II.BoQNr_Rental;
                            II2.Daily_Report_2Id = DR.Id;
                            II2.Daily_Report_2 = DR;
                            II2.Days = Convert.ToDouble(nighthours * Convert.ToDecimal(DR.Amount));
                            II2.Invoice_date = II.Invoice_date;

                        }

                        if (DR.tobepaid != 1 && DR.StandingTime.Value.TotalMinutes > 0 && modelin.PayDownTime.Equals(true))
                        {
                            II.Days = DR.StandingTime.Value.TotalMinutes / 60.0 * Convert.ToDouble(DR.Amount);
                            II.rental_price = (decimal)II.Days * II.ItemType.rental_price;
                        }
                        II.Discounts = DR.Title.ItemType.Discounts.Where(x => x.StartDate.Date <= model.endtime).ToList();
                        II.Total_Discount = (decimal)0.00;
                        if (II.Discounts.Count > 0)
                        {
                            var currentdiscount = II.Discounts.SingleOrDefault(x => x.StartDate.Date <= DR.Report_Date.Date && x.EndDate >= DR.Report_Date.Date);
                            if (currentdiscount != null)
                            {
                                II.Total_Discount = II.rental_price * currentdiscount.Rate;
                            }
                        }

                        allItems.Add(II);
                        if (modelin.CheckInconsistensies == true)
                        {
                            allInconsistentItems.Add(II);
                        }
                        if (II2.Daily_Report_2Id != null)
                        {
                            allItems.Add(II2);
                        }
                        if (DR.Machinery != null)
                        {
                            string[] machinerylist = DR.Machinery.Split(",");
                            //int count_servicecar = 0;
                            List<ItemType> donemachines = new List<ItemType>();
                            foreach (string s in machinerylist)
                            {
                                var themachine = MachineryItems.SingleOrDefault(x => x.Item_Type.ToLower().Equals(s.Trim().ToLower())
                               || _SharedLocalizer.GetLocalizedHtmlString(x.Item_Type).Value.ToLower().Equals(s.Trim().ToLower())
                               || _SharedLocalizer.GetLocalizedHtmlString(s.Trim().ToLower()).Value.Equals(x.Item_Type.ToLower())
                               || _SharedLocalizer.GetLocalizedHtmlString(s.Trim()).Value.Equals(x.Item_Type));
                                if (themachine != null && donemachines.IndexOf(themachine) == -1)
                                {
                                    int count_machine = machinerylist.Count(x => x.Trim().ToLower().Equals(s.Trim().ToLower()));
                                    InvoiceItem machine = new InvoiceItem();
                                    machine.Amount = count_machine;
                                    machine.ItemType = themachine;
                                    machine.ItemTypeId = themachine.Id;
                                    machine.Item_Name = _SharedLocalizer.GetLocalizedHtmlString(themachine.Item_Type).Value;
                                    machine.Install_date = II.Install_date;
                                    machine.price = (decimal)0.00;
                                    machine.SubProjectId = II.SubProjectId;
                                    machine.BoQNr = themachine.BoQnr;
                                    machine.BoQNr_Rental = servicecar.BoQnr_Rental;
                                    machine.Daily_Report_2Id = DR.Id;
                                    machine.Daily_Report_2 = DR;
                                    machine.Days = II.Days;
                                    machine.rental_price = Convert.ToDecimal(II.Days) * themachine.rental_price * Convert.ToDecimal(machine.Amount);
                                    machine.Discounts = themachine.Discounts.Where(x => x.StartDate.Date <= model.endtime).ToList();
                                    machine.Total_Discount = (decimal)0.00;
                                    if (machine.Discounts.Count > 0)
                                    {
                                        var currentdiscount = machine.Discounts.SingleOrDefault(x => x.StartDate.Date <= DR.Report_Date.Date && x.EndDate >= DR.Report_Date.Date);
                                        if (currentdiscount != null)
                                        {
                                            machine.Total_Discount = machine.rental_price * currentdiscount.Rate;
                                        }
                                    }
                                    allItems.Add(machine);
                                    donemachines.Add(themachine);

                                }
                            }
                        }
                    }


                }

                if (model.SubProjectId != null)
                {
                    model.Invoices = await _context.Invoices.Where(x => x.TimeStampStart.Date >= starttime && x.TimeStampEnd.Date <= endtime && x.ProjectId.Equals(model.ProjectId) && x.SubProjectId.Equals(model.SubProjectId)).ToListAsync();
                    model.AllInvoices = await _context.Invoices.Where(x => x.ProjectId.Equals(model.ProjectId) && x.SubProjectId.Equals(model.SubProjectId) && x.TimeStampEnd.Date <= endtime.Date).ToListAsync();
                    model.Payments = await _context.Payments.Where(x => x.TimeStamp.Date >= starttime && x.TimeStamp.Date <= endtime && x.ProjectId.Equals(model.ProjectId) && x.SubProjectId.Equals(model.SubProjectId)).ToListAsync();
                    model.AllPayments = await _context.Payments.Where(x => x.ProjectId.Equals(model.ProjectId) && x.SubProjectId.Equals(model.SubProjectId) && x.TimeStamp.Date <= endtime.Date).ToListAsync();
                    //if (model.AllInvoices== null)
                    //{
                    //    model.AllInvoices = await _context.Invoices.Where(x => x.ProjectId.Equals(model.ProjectId) && x.SubProjectId.Equals(model.SubProjectId) && x.TimeStampEnd.Date <= endtime.Date).ToListAsync();
                    //}
                    //else
                    //{
                    //    var newinvoices = await _context.Invoices.Where(x => x.ProjectId.Equals(model.ProjectId) && x.SubProjectId.Equals(model.SubProjectId) && x.TimeStampEnd.Date <= endtime.Date).ToListAsync();
                    //    foreach (var newinvoice in newinvoices)
                    //    {
                    //        model.AllInvoices.Add(newinvoice);
                    //    }

                    //}
                    //if(model.AllPayments == null)
                    //{
                    //    model.AllPayments = await _context.Payments.Where(x => x.ProjectId.Equals(model.ProjectId) && x.SubProjectId.Equals(model.SubProjectId) && x.TimeStamp.Date <= endtime.Date).ToListAsync();
                    //}
                    //else
                    //{
                    //    var newpaymentsall = await _context.Payments.Where(x => x.ProjectId.Equals(model.ProjectId) && x.SubProjectId.Equals(model.SubProjectId) && x.TimeStamp.Date <= endtime.Date).ToListAsync();
                    //    foreach(var newpayment in newpaymentsall)
                    //    {
                    //        model.AllPayments.Add(newpayment);
                    //    }
                    //}

                    model.SubProject = await _context.SubProjects.Where(x => x.Id.Equals(model.SubProjectId)).SingleOrDefaultAsync();
                }
                else
                {
                    model.Invoices = await _context.Invoices.Where(x => x.TimeStampStart.Date >= starttime && x.TimeStampEnd.Date <= endtime.Date && x.ProjectId.Equals(model.ProjectId)).ToListAsync();
                    model.AllInvoices = await _context.Invoices.Where(x => x.ProjectId.Equals(model.ProjectId) && x.TimeStampEnd.Date <= endtime.Date).ToListAsync();
                    model.Payments = await _context.Payments.Where(x => x.TimeStamp.Date >= starttime && x.TimeStamp.Date <= endtime && x.ProjectId.Equals(model.ProjectId)).ToListAsync();
                    model.AllPayments = await _context.Payments.Where(x => x.ProjectId.Equals(model.ProjectId) && x.TimeStamp.Date <= endtime.Date).ToListAsync();
                    //if (model.AllInvoices == null)
                    //{
                    //    model.AllInvoices = await _context.Invoices.Where(x => x.ProjectId.Equals(model.ProjectId) && x.TimeStampEnd.Date <= endtime.Date).ToListAsync();
                    //}
                    //else
                    //{
                    //    var newinvoices = await _context.Invoices.Where(x => x.ProjectId.Equals(model.ProjectId) && x.TimeStampEnd.Date <= endtime.Date).ToListAsync();
                    //    foreach (var newinvoice in newinvoices)
                    //    {
                    //        model.AllInvoices.Add(newinvoice);
                    //    }

                    //}
                    //if (model.AllPayments == null)
                    //{
                    //    model.AllPayments = await _context.Payments.Where(x => x.ProjectId.Equals(model.ProjectId) && x.TimeStamp.Date <= endtime.Date).ToListAsync();
                    //}
                    //else
                    //{
                    //    var newpaymentsall = await _context.Payments.Where(x => x.ProjectId.Equals(model.ProjectId)  && x.TimeStamp.Date <= endtime.Date).ToListAsync();
                    //    foreach (var newpayment in newpaymentsall)
                    //    {
                    //        model.AllPayments.Add(newpayment);
                    //    }
                    //}
                }
                if (modelin.Tax.Equals(true))
                {
                    model.Payments = model.Payments.Where(x => x.Taxes.Equals(true)).ToList();
                    model.AllPayments = model.AllPayments.Where(x => x.Taxes.Equals(true)).ToList();
                    model.Invoices = model.Invoices.Where(x => x.Taxes.Equals(true)).ToList();
                    model.AllInvoices = model.AllInvoices.Where(x => x.Taxes.Equals(true)).ToList();
                }
                else
                {
                    model.Payments = model.Payments.Where(x => x.Taxes.Equals(false)).ToList();
                    model.AllPayments = model.AllPayments.Where(x => x.Taxes.Equals(false)).ToList();
                    model.Invoices = model.Invoices.Where(x => x.Taxes.Equals(false)).ToList();
                    model.AllInvoices = model.AllInvoices.Where(x => x.Taxes.Equals(false)).ToList();
                }
                model.items = items;
                model.allItems = allItems;
                model.items.RemoveAll(item => item.ArrivalId == 10000);

                //var headlineList = model.headlines.Where(hl => hl.HeadLine == "6.0 Rental, Reporting and Sampling Costs (Rental)").ToList();
                //var debugList = model.allItems.Where(item => item.Item_Name.Trim() == "Pressurized active carbon filter stand-by").ToList();
                //var debugList1 = model.items.Where(x =>  x?.Install?.ItemType?.Item_Type?.Trim() == "Mobilisation of the 10 active carbon filters")
                //                                .ToList();

                //foreach (var ii in model.allItems)
                //{
                //    if (//ii.Item_Name.Trim().Contains("Recharge well equipment 4\" <= 50m3/h" ||
                //        ii.Item_Name.Trim().Contains("Monitoring well equipment (data logger)"))
                //    {
                //        Debug.WriteLine($"Allitem: BoQnr: {ii.BoQNr_Rental}, name: {ii.Item_Name}, arrivalId:{ii.ArrivalId}, arrival: {ii.Arrival?.ItemType?.Item_Type},invoice date: {ii.Arrival?.TimeStamp}, days: {ii.Days}, amount: {ii.Amount}, uniqueId: {ii.Arrival?.UniqueID}");

                //    }
                //}


                if (modelin.CheckInconsistensies == true)
                {
                    foreach (var item in inconsistentItems)
                    {

                        //find corresponding item in all items
                        InvoiceItem allItem = new InvoiceItem();
                        try
                        {
                            allItem = allInconsistentItems.Where(x => x.ExtraWorkId == item.ExtraWorkId &&
                           x.InstallationId == item.InstallationId && (x.ArrivalId == item.ArrivalId && x.ArrivalId != 10000)
                           && x.MobilizationId == item.MobilizationId && x.Daily_Report_2Id == item.Daily_Report_2Id).SingleOrDefault();
                        }
                        catch
                        {
                            var mew = allInconsistentItems.Where(x => x.ExtraWorkId == item.ExtraWorkId &&
                          x.InstallationId == item.InstallationId && (x.ArrivalId == item.ArrivalId && x.ArrivalId != 10000)
                          && x.MobilizationId == item.MobilizationId && x.Daily_Report_2Id == item.Daily_Report_2Id).ToList();
                            double miewawa = 2.0;
                        }

                        if (allItem == null)
                        {
                            //something is horribly wrong
                        }
                        else
                        {
                            //this part takes care of PaidAmount differences
                            if (allItem.price != item.price)
                            {
                                model.inconsistentItems.Add(item);
                                model.allInconsistentItems.Add(allItem);
                            }
                            else if (allItem.ItemTypeId != item.ItemTypeId)
                            {
                                model.inconsistentItems.Add(item);
                                model.allInconsistentItems.Add(allItem);
                            }
                            else if (allItem.rental_price != item.rental_price)
                            {
                                if (item.Days != 0 && item.rental_price > 0)
                                {
                                    if (Convert.ToInt32(Math.Floor(allItem.Days / item.Days)) != Convert.ToInt32(Math.Floor((decimal)allItem.rental_price / (decimal)item.rental_price)))
                                    {
                                        model.inconsistentItems.Add(item);
                                        model.allInconsistentItems.Add(allItem);
                                    }
                                }


                            }
                            //here we check the change-log for relevant information
                            /* if (item.InstallationId != null)
                             {
                                 var itemlogs = model.Logs.Where(x => x.Description.Contains("Install") && x.Description.Contains(item.InstallationId.ToString())).OrderByDescending(x => x.Id).ToList();
                                 foreach (var before_log in itemlogs.Where(x => x.Description.Contains("Before")))
                                 {
                                     var after_log = itemlogs[itemlogs.IndexOf(before_log) - 1];
                                     string invoiceDatebefore = before_log.otherinfo.Substring(before_log.otherinfo.IndexOf("Invoicedate: ") + 13).Split(".")[0];
                                     string invoiceDateafter = after_log.otherinfo.Substring(after_log.otherinfo.IndexOf("Invoicedate: ") + 13).Split(".")[0];
                                     DateTime InvoiceDateBefore = Convert.ToDateTime(invoiceDatebefore);
                                     DateTime InvoiceDateAfter = Convert.ToDateTime(invoiceDateafter);
                                     //check moving of invoicedates
                                     // if this was previously invoiced!
                                     if (InvoiceDateBefore < starttime)
                                     {
                                         if (InvoiceDateAfter >= starttime)
                                         {
                                             model.inconsistentItems.Add(item);
                                             model.allInconsistentItems.Add(item);
                                         }
                                     }
                                     else if (InvoiceDateBefore >= starttime && InvoiceDateAfter < starttime)
                                     {
                                         model.inconsistentItems.Add(item);
                                         model.allInconsistentItems.Add(item);
                                     }

                                 }
                             }*/
                            // ... existing code ...

                            //here we check the change-log for relevant information
                            if (item.InstallationId != null && model.Logs != null)
                            {
                                var itemlogs = model.Logs
                                    .Where(x => x != null &&
                                                x.Description != null &&
                                                x.Description.Contains("Install") &&
                                                x.Description.Contains(item.InstallationId.ToString()))
                                    .OrderByDescending(x => x.Id)
                                    .ToList();

                                if (itemlogs != null && itemlogs.Any())
                                {
                                    foreach (var before_log in itemlogs.Where(x => x != null &&
                                                                                x.Description != null &&
                                                                                x.Description.Contains("Before")))
                                    {
                                        try
                                        {
                                            var after_log = itemlogs[itemlogs.IndexOf(before_log) - 1];
                                            if (after_log != null &&
                                                before_log.otherinfo != null &&
                                                after_log.otherinfo != null)
                                            {
                                                string invoiceDatebefore = before_log.otherinfo.Substring(before_log.otherinfo.IndexOf("Invoicedate: ") + 13).Split(".")[0];
                                                string invoiceDateafter = after_log.otherinfo.Substring(after_log.otherinfo.IndexOf("Invoicedate: ") + 13).Split(".")[0];

                                                DateTime InvoiceDateBefore = Convert.ToDateTime(invoiceDatebefore);
                                                DateTime InvoiceDateAfter = Convert.ToDateTime(invoiceDateafter);

                                                //check moving of invoicedates
                                                // if this was previously invoiced!
                                                if (InvoiceDateBefore < starttime)
                                                {
                                                    if (InvoiceDateAfter >= starttime)
                                                    {
                                                        model.inconsistentItems.Add(item);
                                                        model.allInconsistentItems.Add(item);
                                                    }
                                                }
                                                else if (InvoiceDateBefore >= starttime && InvoiceDateAfter < starttime)
                                                {
                                                    model.inconsistentItems.Add(item);
                                                    model.allInconsistentItems.Add(item);
                                                }
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            // Optionally log the error
                                            // _logger.LogError(ex, "Error processing installation log entries");
                                            continue; // Skip this iteration if there's an error
                                        }
                                    }
                                }
                            }

                            // ... existing code ...
                            else if (item.ArrivalId != null)
                            {
                                /*var itemlogs = model.Logs.Where(x => x.Description.Contains("Arrival") && x.Description.Contains(item.ArrivalId.ToString())).OrderByDescending(x => x.Id).ToList();
                                foreach (var before_log in itemlogs.Where(x => x.Description.Contains("Before")))
                                {
                                    var after_log = itemlogs[itemlogs.IndexOf(before_log) - 1];
                                    string invoiceDatebefore = before_log.otherinfo.Substring(before_log.otherinfo.IndexOf("Invoicedate: ") + 13).Split(".")[0];
                                    string invoiceDateafter = after_log.otherinfo.Substring(after_log.otherinfo.IndexOf("Invoicedate: ") + 13).Split(".")[0];
                                    DateTime InvoiceDateBefore = Convert.ToDateTime(invoiceDatebefore);
                                    DateTime InvoiceDateAfter = Convert.ToDateTime(invoiceDateafter);
                                    //check moving of invoicedates
                                    // if this was previously invoiced!
                                    if (InvoiceDateBefore < starttime)
                                    {
                                        if (InvoiceDateAfter >= starttime)
                                        {
                                            model.inconsistentItems.Add(item);
                                            model.allInconsistentItems.Add(item);
                                        }
                                    }
                                    else if (InvoiceDateBefore >= starttime && InvoiceDateAfter < starttime)
                                    {
                                        model.inconsistentItems.Add(item);
                                        model.allInconsistentItems.Add(item);
                                    }

                                }*/


                                // ... existing code ...

                                if (model.Logs != null) // Add null check for Logs collection
                                {
                                    var itemlogs = model.Logs
                                        .Where(x => x != null &&
                                                    x.Description != null &&
                                                    item.ArrivalId != null &&
                                                    x.Description.Contains("Arrival") &&
                                                    x.Description.Contains(item.ArrivalId.ToString()))
                                        .OrderByDescending(x => x.Id)
                                        .ToList();

                                    if (itemlogs != null && itemlogs.Any())
                                    {
                                        foreach (var before_log in itemlogs.Where(x => x != null &&
                                                                                    x.Description != null &&
                                                                                    x.Description.Contains("Before")))
                                        {
                                            try
                                            {
                                                var after_log = itemlogs[itemlogs.IndexOf(before_log) - 1];
                                                if (after_log != null &&
                                                    before_log.otherinfo != null &&
                                                    after_log.otherinfo != null)
                                                {
                                                    string invoiceDatebefore = before_log.otherinfo.Substring(before_log.otherinfo.IndexOf("Invoicedate: ") + 13).Split(".")[0];
                                                    string invoiceDateafter = after_log.otherinfo.Substring(after_log.otherinfo.IndexOf("Invoicedate: ") + 13).Split(".")[0];

                                                    DateTime InvoiceDateBefore = Convert.ToDateTime(invoiceDatebefore);
                                                    DateTime InvoiceDateAfter = Convert.ToDateTime(invoiceDateafter);

                                                    //check moving of invoicedates
                                                    // if this was previously invoiced!
                                                    if (InvoiceDateBefore < starttime)
                                                    {
                                                        if (InvoiceDateAfter >= starttime)
                                                        {
                                                            model.inconsistentItems.Add(item);
                                                            model.allInconsistentItems.Add(item);
                                                        }
                                                    }
                                                    else if (InvoiceDateBefore >= starttime && InvoiceDateAfter < starttime)
                                                    {
                                                        model.inconsistentItems.Add(item);
                                                        model.allInconsistentItems.Add(item);
                                                    }
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                // Optionally log the error
                                                // _logger.LogError(ex, "Error processing log entries");
                                                continue; // Skip this iteration if there's an error
                                            }
                                        }
                                    }
                                }

                                // ... existing code ...






                            }
                        }
                    }
                    //model.inconsistentItems = inconsistentItems;
                    //model.allInconsistentItems = allInconsistentItems;
                }
                // SnapShotCreation
                if (modelin.GenerateSnapShot.Equals(true))
                {
                    InvoiceSnapShot InvoiceSS = new InvoiceSnapShot(modelin.starttime.Date, modelin.endtime.Date, Convert.ToInt32(modelin.ProjectId), modelin.SubProjectId);
                    if (model.SubProjectId == null)
                    {
                        InvoiceSS.SnapShotName = model.Project.Abbreviation + "_" + DateTime.Now.ToShortDateString() + " : " + InvoiceSS.SnapShotStartDate.ToShortDateString() + "_" + InvoiceSS.SnapShotEndDate.ToShortDateString();
                    }
                    else
                    {
                        InvoiceSS.SnapShotName = model.Project.Abbreviation + "_" + model.SubProject.Name + "_" + DateTime.Now.ToShortDateString() + " : " + InvoiceSS.SnapShotStartDate.ToShortDateString() + "_" + InvoiceSS.SnapShotEndDate.ToShortDateString();
                    }
                    _context.Add(InvoiceSS);
                    await _context.SaveChangesAsync();
                    var iiSS = await _context.SnapShots.LastAsync();
                    int iiSSId = Convert.ToInt32(iiSS.Id);
                    foreach (var item in model.items.Where(x => x.price > 0 || x.price < 0 || x.rental_price > 0 || x.rental_price < 0))
                    {
                        if (item.Item_Name.ToLower().Contains("idle"))
                        {
                            InvoiceItemDB iidb = new InvoiceItemDB(item, iiSSId, false, true);
                            _context.Add(iidb);
                        }
                        else
                        {
                            InvoiceItemDB iidb = new InvoiceItemDB(item, iiSSId, false, false);
                            _context.Add(iidb);
                        }


                    }
                    foreach (var item in model.allItems.Where(x => x.price > 0 || x.price < 0 || x.rental_price > 0 || x.rental_price < 0))
                    {
                        if (item.Item_Name.ToLower().Contains("idle"))
                        {
                            InvoiceItemDB iidb = new InvoiceItemDB(item, iiSSId, true, true);
                            _context.Add(iidb);
                        }
                        else
                        {
                            InvoiceItemDB iidb = new InvoiceItemDB(item, iiSSId, true, false);
                            _context.Add(iidb);
                        }
                    }
                    await _context.SaveChangesAsync();
                }
                if (modelin.SubProjectId != null)
                {
                    ViewData["SnapShotId"] = new SelectList(_context.SnapShots.Where(x => x.ProjectId.Equals(modelin.ProjectId) && x.SubProjectId.Equals(modelin.SubProjectId)), "Id", "ShapShotName");
                }
                else
                {
                    ViewData["SnapShotId"] = new SelectList(_context.SnapShots.Where(x => x.ProjectId.Equals(modelin.ProjectId) && x.SubProjectId == null), "Id", "ShapShotName");
                }


                model.ReportDate = DateTime.Now;

                if (modelin.GenerateAkonto || modelin.GenerateAkontoBackGround)
                {
                    InvoiceModel pdfmodel = new InvoiceModel(model);
                    if (modelin.SplitSubProjects)
                    {
                        if (modelin.GenerateAkontoBackGround)
                        {
                            await SaveAsPdfBackGround(pdfmodel, true, model.GenerationTime); // Not awaited
                        }
                        else
                        {
                            await SaveAsPdf(pdfmodel, model.GenerationTime, true);
                        }

                    }
                    else
                    {
                        if (modelin.GenerateAkontoBackGround)
                        {
                            await SaveAsPdfBackGround(pdfmodel, false, model.GenerationTime); // Not awaited
                        }
                        else
                        {
                            await SaveAsPdf(pdfmodel, model.GenerationTime, false);
                        }

                    }

                }
                if (modelin.ZipItAll)
                {
                    AllDocumentation docmodel;

                    if (modelin.PayDownTime)
                    {
                        docmodel = await DownloadDocumentation2(starttime, endtime, model.ProjectId, model.SubProjectId, dailyreports.Where(x => x.tobepaid.Equals(1) || x.StandingTime.Value.TotalMinutes > 0).ToList(), mobilizations, installations, arrivals, extraworks, modelin.HidePhotos);

                    }
                    else
                    {
                        docmodel = await DownloadDocumentation2(starttime, endtime, model.ProjectId, model.SubProjectId, dailyreports, mobilizations, installations, arrivals, extraworks, modelin.HidePhotos);
                    }
                    docmodel.Project = model.Project;
                    docmodel.logopath = "~/images/Divisions/Photos/" + model.Project.DivisionId.ToString() + "/" + model.Project.Division.LogoPath;
                    if (modelin.AddDocumentationBackGround)
                    {
                        await SaveDocumentationAsPdfsBackGround(docmodel, model); // Not awaited
                    }
                    else
                    {
                        await SaveDocumentationAsPdfs(docmodel, model);
                    }
                }
                else if (modelin.AddDocumentation || modelin.ShowDocumentation || modelin.AddDocumentationBackGround)
                {
                    //AllDocumentation docmodel = await DownloadDocumentation(model.starttime, model.endtime, model.ProjectId, model.SubProjectId,modelin.HidePhotos);
                    AllDocumentation docmodel;
                    if (modelin.PayDownTime)
                    {
                        docmodel = await DownloadDocumentation2(starttime, endtime, model.ProjectId, model.SubProjectId, dailyreports.Where(x => x.tobepaid.Equals(1) || x.StandingTime.Value.TotalMinutes > 0).ToList(), mobilizations, installations, arrivals, extraworks, modelin.HidePhotos);

                    }
                    else
                    {
                        docmodel = await DownloadDocumentation2(starttime, endtime, model.ProjectId, model.SubProjectId, dailyreports, mobilizations, installations, arrivals, extraworks, modelin.HidePhotos);
                    }
                    if (modelin.SubProjectId != null)
                    {
                        var subproj = await _context.SubProjects.SingleOrDefaultAsync(x => x.Id.Equals(modelin.SubProjectId));
                        model.SubProject = subproj;
                    }
                    docmodel.Project = model.Project;
                    docmodel.logopath = "~/images/Divisions/Photos/" + model.Project.DivisionId.ToString() + "/" + model.Project.Division.LogoPath;
                    if (modelin.AddDocumentation)
                    {

                        if (modelin.SplitSubProjects)
                        {

                            await SaveDocumentationAsPdf2(docmodel, true, model.GenerationTime);
                        }
                        else
                        {
                            await SaveDocumentationAsPdf2(docmodel, false, model.GenerationTime);
                        }
                    }
                    else if (modelin.AddDocumentationBackGround)
                    {
                        if (modelin.SplitSubProjects)
                        {
                            await SaveDocumenationAsPdfBackGround(docmodel, true, model.GenerationTime); // Not awaited
                        }
                        else
                        {
                            await SaveDocumenationAsPdfBackGround(docmodel, false, model.GenerationTime); // Not awaited
                        }
                    }
                    if (modelin.ShowDocumentation)
                    {

                        return View("Reports/AllDocumentation", docmodel);
                    }
                }

                if (modelin.DownloadExcel)
                {
                    StringBuilder sb = DownloadExcel(model);
                    var directory = _env.WebRootPath + "\\AHAK\\akonto\\Excel\\";
                    if (!Directory.Exists(directory))
                    {
                        Directory.CreateDirectory(directory);
                    }
                    string path = directory + model.Project.Abbreviation + "_" + model.GenerationTime.ToString("yyyy-MM-dd_HHmmss") + "_" + starttime.ToString("yyyy-MM-dd") + "_" + endtime.ToString("yyyy-MM-dd") + ".csv";
                    System.IO.File.WriteAllText(path, sb.ToString(), System.Text.Encoding.UTF8);
                    //File(System.Text.Encoding.ASCII.GetBytes(sb.ToString()), "text/csv", "InvoiceData.csv");
                }
                if (modelin.DownloadSimpleExcel)
                {
                    StringBuilder sb = DownloadSimpleExcel(model);
                    var directory = _env.WebRootPath + "\\AHAK\\akonto\\Excel\\";
                    if (!Directory.Exists(directory))
                    {
                        Directory.CreateDirectory(directory);
                    }
                    string path = directory + model.Project.Abbreviation + "_" + model.GenerationTime.ToString("yyyy-MM-dd_HHmmss") + "_" + starttime.ToString("yyyy-MM-dd") + "_" + endtime.ToString("yyyy-MM-dd") + "_simple" + ".csv";
                    System.IO.File.WriteAllText(path, sb.ToString(), System.Text.Encoding.UTF8);
                    //File(System.Text.Encoding.ASCII.GetBytes(sb.ToString()), "text/csv", "InvoiceData.csv");
                }

                model.AllInvoicesSent = AreAllInvoicesBeforeSent(model.starttime.AddDays(-1), modelin, model);
                if (modelin.SplitSubProjects)
                {
                    return View("Invoice_all", model);
                }

                stopwatch.Stop();
                ViewBag.ProcessingTime = stopwatch.ElapsedMilliseconds; // time in ms

                return View("Invoice", model);
            }
            else
            {
                return NotFound();
            }
        }

        public StringBuilder DownloadSimpleExcel(InvoiceModel Model)
        {
            StringBuilder sb = new StringBuilder();
            List<string> fillerrow = new List<string>(new string[] { "", "", "", "", "", "", "","","" });
            string delimiter = ";";
            string thevaluta;
            var firstitem = Model.allItems.Where(x => x.ItemTypeId != 0 && x.ItemTypeId != null).FirstOrDefault();

            if (firstitem != null)
            {
                try
                {
                    if (firstitem.ItemType.Valuta.Equals("EURO"))
                    {
                        thevaluta = "€";
                    }
                    else
                    {
                        thevaluta = "DKK";
                    }
                }
                catch
                {
                    thevaluta = "DKK";
                }

            }
            else
            {
                var firstextraitem = Model.allItems.Where(x => x.ExtraWorkId != null).FirstOrDefault();
                if (firstextraitem != null)
                {
                    thevaluta = firstextraitem.ExtraWork.Valuta;
                }
                else
                {
                    thevaluta = "DKK";
                }

            }
            fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString("This Period");
            fillerrow[1] = _SharedLocalizer.GetLocalizedHtmlString("");
            fillerrow[2] = _SharedLocalizer.GetLocalizedHtmlString("");
            fillerrow[3] = _SharedLocalizer.GetLocalizedHtmlString("");
            fillerrow[4] = _SharedLocalizer.GetLocalizedHtmlString("");
            fillerrow[5] = _SharedLocalizer.GetLocalizedHtmlString("");
            fillerrow[6] = _SharedLocalizer.GetLocalizedHtmlString("");
            fillerrow[7] = _SharedLocalizer.GetLocalizedHtmlString("");
            sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
            fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString("Item Name");
            fillerrow[1] = _SharedLocalizer.GetLocalizedHtmlString("Start Date");
            fillerrow[2] = _SharedLocalizer.GetLocalizedHtmlString("End Date");
            fillerrow[3] = _SharedLocalizer.GetLocalizedHtmlString("Period units");
            fillerrow[4] = _SharedLocalizer.GetLocalizedHtmlString("Amount");
            fillerrow[5] = _SharedLocalizer.GetLocalizedHtmlString("Unit Price");
            fillerrow[6] = _SharedLocalizer.GetLocalizedHtmlString("Unit");
            fillerrow[7] = _SharedLocalizer.GetLocalizedHtmlString("Subtotal");
            fillerrow[8] = _SharedLocalizer.GetLocalizedHtmlString("VariationOrder");
            sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
            string addonstoname = "";
            foreach (var item in Model.items.OrderBy(x => x.Install_date))
            {
                if(item.Install != null)
                {
                    if(item.Install.VariationOrder != null)
                    {
                        fillerrow[8] = item.Install.VariationOrder.HeadLine;
                    }
                    else
                    {
                        fillerrow[8] = "";
                    }
                }
                else if (item.Daily_Report_2 != null)
                {
                    if (item.Daily_Report_2.VariationOrder != null)
                    {
                        fillerrow[8] = item.Daily_Report_2.VariationOrder.HeadLine;
                    }
                    else
                    {
                        fillerrow[8] = "";
                    }
                }
                else if (item.ExtraWork != null)
                {
                    if (item.ExtraWork.BoQHeadLine != null)
                    {
                        fillerrow[8] = item.ExtraWork.BoQHeadLine.HeadLine;
                    }
                    else
                    {
                        fillerrow[8] = "";
                    }
                }
                else
                {
                    fillerrow[8] = "";
                }
                
                fillerrow[1] = item.Install_date.ToString("yyyy-MM-dd");
                fillerrow[3] = "0";
                fillerrow[4] = String.Format("{0:N2}", item.Amount);
                
                if (item.location != null && item.location != "")
                {
                    addonstoname = " : " + item.location;
                }
                else
                {
                    addonstoname = "";
                }
                if (item.Install != null)
                {
                    if (item.Install.UniqueID != "N/A" && item.Install.UniqueID != "" && item.Install.UniqueID != null)
                    {
                        addonstoname += " (" + item.Install.UniqueID + ")";
                    }
                }
                if (item.Arrival != null)
                {
                    if (item.Arrival.UniqueID != "N/A" && item.Arrival.UniqueID != "" && item.Arrival.UniqueID != null)
                    {
                        addonstoname += " (" + item.Arrival.UniqueID + ")";
                    }
                }
                if (item.ExtraWorkId != null)
                {
                    if (item.ExtraWork.Rental_Price > 0 && item.ExtraWork.Price > 0)
                    {
                        addonstoname += ". Rental pr. calendar day: " + String.Format("{0:N2}", item.ExtraWork.Rental_Price) + ". Initial Price: " + String.Format("{0:N2}", item.ExtraWork.Price);
                        fillerrow[5] = String.Concat(String.Format("{0:N2}€",item.price)," + ",String.Format("{0:N2}€/calendar day", item.rental_price));
                    }
                    else if (item.ExtraWork.Price > 0)
                    {
                        fillerrow[5] = String.Format("{0:N2}€", item.price);
                    }
                    else if (item.ExtraWork.Rental_Price > 0)
                    {
                        addonstoname += ". Rental pr. calendar day: " + String.Format("{0:N2}", item.ExtraWork.Rental_Price) + "€/calendar day";
                        String.Format("{0:N2}€/calendar day", item.rental_price);
                    }

                }
                //if (item.rental_price > 0 && item.price > 0 && item.ExtraWorkId != null) // extra work special
                //{
                //    fillerrow[0] = String.Format("{0:N2}", item.BoQNr) + " : " + item.Item_Name + addonstoname;
                //    if (item.ExtraWork.EndStamp != null)
                //    {
                //        fillerrow[2] = Convert.ToDateTime(item.ExtraWork.EndStamp).ToString("yyyy-MM-dd");
                //    }
                //    else
                //    {
                //        fillerrow[2] = Model.endtime.Date.ToString("yyyy-MM-dd");
                //    }
                //    fillerrow[3] = String.Format("{0:N2}", 0);                 
                //    fillerrow[6] = _SharedLocalizer.GetLocalizedHtmlString("pcs");
                //    fillerrow[7] = String.Format("{0:N2}€", (item.price + item.rental_price));
                //}
                else if(item.InstallationId != null)
                //else if (item.rental_price > 0 && item.price > 0) //both there - use price (install)
                {
                    fillerrow[0] = String.Format("{0:N2}", item.BoQNr) + " : " + item.Item_Name + addonstoname;
                    
                    if (item.Install.DeinstallDate != null)
                    {
                        fillerrow[2] = Convert.ToDateTime(item.Install.DeinstallDate).ToString("yyyy-MM-dd");
                    }
                    else
                    {
                        fillerrow[2] = "";
                    }
                    fillerrow[3] = String.Format("{0:N2}", 0);
                    fillerrow[5] = String.Format("{0:N2}€", item.ItemType.price);
                    fillerrow[6] = item.ItemType.Install_Unit.TheUnit;
                    fillerrow[7] = String.Format("{0:N2}€", item.price);
                   
                }
                else if (item.MobilizationId != null)
                //else if (item.rental_price > 0 && item.price > 0) //both there - use price (install)
                {
                    fillerrow[0] = String.Format("{0:N2}", item.BoQNr) + " : " + item.Item_Name + addonstoname;
                    fillerrow[2] = "";
                    fillerrow[3] = String.Format("{0:N2}", 0);
                    fillerrow[5] = String.Format("{0:N2}€", item.ItemType.price);
                    fillerrow[6] = item.ItemType.Install_Unit.TheUnit;
                    fillerrow[7] = String.Format("{0:N2}€", item.price);

                }
                else if(item.ArrivalId != null)
                //else if (item.rental_price > 0 && !(item.price > 0))  //no price - use rental
                {
                    fillerrow[0] = String.Format("{0:N2}", item.BoQNr_Rental) + " : " + item.Item_Name + addonstoname;
                    if (item.Arrival.EndStamp != null)
                    {
                        fillerrow[2] = Convert.ToDateTime(item.Install.DeinstallDate).ToString("yyyy-MM-dd");
                    }
                    else
                    {
                        fillerrow[2] = Model.endtime.ToString("yyyy-MM-dd"); //maybe use ""
                    }
                    fillerrow[3] = String.Format("{0:N2}",item.Days);
                    fillerrow[5] = String.Format("{0:N2}€", item.ItemType.rental_price);
                    fillerrow[6] = item.ItemType.Rental_Unit.TheUnit;
                    fillerrow[7] = String.Format("{0:N2}€", item.rental_price);
                }
                else if (item.Daily_Report_2Id != null)
                //else if (item.rental_price > 0 && !(item.price > 0))  //no price - use rental
                {
                    fillerrow[0] = String.Format("{0:N2}", item.BoQNr_Rental) + " : " + item.Item_Name + addonstoname;
                    fillerrow[2] = "";
                    fillerrow[3] = String.Format("{0:N2}", item.Days);
                    fillerrow[5] = String.Format("{0:N2}€", item.ItemType.rental_price);
                    fillerrow[6] = "pr. hour";
                    fillerrow[7] = String.Format("{0:N2}€", item.rental_price);
                }
                sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
            }
            for(int i = 0; i < 10; i++)
            {
                fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString("");
                fillerrow[1] = _SharedLocalizer.GetLocalizedHtmlString("");
                fillerrow[2] = _SharedLocalizer.GetLocalizedHtmlString("");
                fillerrow[3] = _SharedLocalizer.GetLocalizedHtmlString("");
                fillerrow[4] = _SharedLocalizer.GetLocalizedHtmlString("");
                fillerrow[5] = _SharedLocalizer.GetLocalizedHtmlString("");
                fillerrow[6] = _SharedLocalizer.GetLocalizedHtmlString("");
                fillerrow[7] = _SharedLocalizer.GetLocalizedHtmlString("");
                fillerrow[8] = _SharedLocalizer.GetLocalizedHtmlString("");
                sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
            }
            fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString("All Time");
            fillerrow[1] = _SharedLocalizer.GetLocalizedHtmlString("");
            fillerrow[2] = _SharedLocalizer.GetLocalizedHtmlString("");
            fillerrow[3] = _SharedLocalizer.GetLocalizedHtmlString("");
            fillerrow[4] = _SharedLocalizer.GetLocalizedHtmlString("");
            fillerrow[5] = _SharedLocalizer.GetLocalizedHtmlString("");
            fillerrow[6] = _SharedLocalizer.GetLocalizedHtmlString("");
            fillerrow[7] = _SharedLocalizer.GetLocalizedHtmlString("");
            fillerrow[8] = _SharedLocalizer.GetLocalizedHtmlString("");
            sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
            fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString("Item Name");
            fillerrow[1] = _SharedLocalizer.GetLocalizedHtmlString("Start Date");
            fillerrow[2] = _SharedLocalizer.GetLocalizedHtmlString("End Date");
            fillerrow[3] = _SharedLocalizer.GetLocalizedHtmlString("Period units");
            fillerrow[4] = _SharedLocalizer.GetLocalizedHtmlString("Amount");
            fillerrow[5] = _SharedLocalizer.GetLocalizedHtmlString("Unit Price");
            fillerrow[6] = _SharedLocalizer.GetLocalizedHtmlString("Unit");
            fillerrow[7] = _SharedLocalizer.GetLocalizedHtmlString("Subtotal");
            fillerrow[8] = _SharedLocalizer.GetLocalizedHtmlString("VariationOrder");
            sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
            addonstoname = "";
            foreach (var item in Model.allItems.OrderBy(x => x.Install_date))
            {
                if (item.Install != null)
                {
                    if (item.Install.VariationOrder != null)
                    {
                        fillerrow[8] = item.Install.VariationOrder.HeadLine;
                    }
                }
                else if (item.Daily_Report_2 != null)
                {
                    if (item.Daily_Report_2.VariationOrder != null)
                    {
                        fillerrow[8] = item.Daily_Report_2.VariationOrder.HeadLine;
                    }
                }
                else if (item.ExtraWork != null)
                {
                    if (item.ExtraWork.BoQHeadLine != null)
                    {
                        fillerrow[8] = item.ExtraWork.BoQHeadLine.HeadLine;
                    }
                }
                else
                {
                    fillerrow[8] = "";
                }
                fillerrow[1] = item.Install_date.ToString("yyyy-MM-dd");
                fillerrow[3] = "0";
                fillerrow[4] = String.Format("{0:N2}", item.Amount);

                if (item.location != null && item.location != "")
                {
                    addonstoname = " : " + item.location;
                }
                else
                {
                    addonstoname = "";
                }
                if (item.Install != null)
                {
                    if (item.Install.UniqueID != "N/A" && item.Install.UniqueID != "" && item.Install.UniqueID != null)
                    {
                        addonstoname += " (" + item.Install.UniqueID + ")";
                    }
                }
                if (item.Arrival != null)
                {
                    if (item.Arrival.UniqueID != "N/A" && item.Arrival.UniqueID != "" && item.Arrival.UniqueID != null)
                    {
                        addonstoname += " (" + item.Arrival.UniqueID + ")";
                    }
                }
                if (item.ExtraWorkId != null)
                {
                    if (item.ExtraWork.Rental_Price > 0 && item.ExtraWork.Price > 0)
                    {
                        addonstoname += ". Rental pr. calendar day: " + String.Format("{0:N2}", item.ExtraWork.Rental_Price) + ". Initial Price: " + String.Format("{0:N2}", item.ExtraWork.Price);
                        fillerrow[5] = String.Concat(String.Format("{0:N2}€", item.price), " + ", String.Format("{0:N2}€/calendar day", item.rental_price));
                    }
                    else if (item.ExtraWork.Price > 0)
                    {
                        fillerrow[5] = String.Format("{0:N2}€", item.price);
                    }
                    else if (item.ExtraWork.Rental_Price > 0)
                    {
                        addonstoname += ". Rental pr. calendar day: " + String.Format("{0:N2}", item.ExtraWork.Rental_Price) + "€/calendar day";
                        String.Format("{0:N2}€/calendar day", item.rental_price);
                    }

                }
                else if (item.InstallationId != null) //both there - use price (install)
                {
                    fillerrow[0] = String.Format("{0:N2}", item.BoQNr) + " : " + item.Item_Name + addonstoname;

                    if (item.Install.DeinstallDate != null)
                    {
                        fillerrow[2] = Convert.ToDateTime(item.Install.DeinstallDate).ToString("yyyy-MM-dd");
                    }
                    else
                    {
                        fillerrow[2] = "";
                    }
                    fillerrow[3] = String.Format("{0:N2}", 0);
                    fillerrow[5] = String.Format("{0:N2}€", item.ItemType.price);
                    fillerrow[6] = item.ItemType.Install_Unit.TheUnit;
                    fillerrow[7] = String.Format("{0:N2}€", item.price);
                }
                
                else if (item.ArrivalId != null)  //no price - use rental
                {
                    fillerrow[0] = String.Format("{0:N2}", item.BoQNr_Rental) + " : " + item.Item_Name + addonstoname;
                    if (item.Arrival.EndStamp != null)
                    {
                        //fillerrow[2] = Convert.ToDateTime(item.Install.DeinstallDate).ToString("yyyy-MM-dd");
                        fillerrow[2] = Convert.ToDateTime(item.Arrival.EndStamp).ToString("yyyy-MM-dd");
                    }
                    else
                    {
                        fillerrow[2] = Model.endtime.ToString("yyyy-MM-dd"); //maybe use ""
                    }
                    fillerrow[3] = String.Format("{0:N2}", item.Days);
                    fillerrow[5] = String.Format("{0:N2}€", item.ItemType.rental_price);
                    fillerrow[6] = item.ItemType.Rental_Unit.TheUnit;
                    fillerrow[7] = String.Format("{0:N2}€", item.rental_price);
                }
                else if (item.MobilizationId != null)  //no price - use rental
                {
                    fillerrow[0] = String.Format("{0:N2}", item.BoQNr) + " : " + item.Item_Name + addonstoname;
                    fillerrow[2] = "";
                    fillerrow[3] = String.Format("{0:N2}", 0);
                    fillerrow[5] = String.Format("{0:N2}€", item.ItemType.price);
                    fillerrow[6] = item.ItemType.Install_Unit.TheUnit;
                    fillerrow[7] = String.Format("{0:N2}€", item.price);
                }
                else if (item.Daily_Report_2Id != null)
                //else if (item.rental_price > 0 && !(item.price > 0))  //no price - use rental
                {
                    fillerrow[0] = String.Format("{0:N2}", item.BoQNr_Rental) + " : " + item.Item_Name + addonstoname;
                    fillerrow[2] = "";
                    fillerrow[3] = String.Format("{0:N2}", item.Days);
                    fillerrow[5] = String.Format("{0:N2}€", item.ItemType.rental_price);
                    fillerrow[6] = fillerrow[6] = "pr. hour";
                    fillerrow[7] = String.Format("{0:N2}€", item.rental_price);
                }
                sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
            }
            return sb;

        }
        public StringBuilder DownloadExcel(InvoiceModel Model)
        {
            StringBuilder sb = new StringBuilder();
            List<string> fillerrow = new List<string>(new string[] { "", "", "", "", "", "", "" });
            int numRecords = 0;
            string delimiter = ";";
            string thevaluta;
            decimal totaltotalcost = (decimal)0.0;
            var firstitem = Model.allItems.Where(x => x.ItemTypeId != 0 && x.ItemTypeId != null).FirstOrDefault();
            if (firstitem != null)
            {
                try
                {
                    if (firstitem.ItemType.Valuta.Equals("EURO"))
                    {
                        thevaluta = "€";
                    }
                    else
                    {
                        thevaluta = "DKK";
                    }
                }
                catch
                {
                    thevaluta = "DKK";
                }

            }
            else
            {
                var firstextraitem = Model.allItems.Where(x => x.ExtraWorkId != null).FirstOrDefault();
                if (firstextraitem != null)
                {
                    thevaluta = firstextraitem.ExtraWork.Valuta;
                }
                else
                {
                    thevaluta = "DKK";
                }

            }
            foreach (var boqheadline in Model.headlines.OrderBy(x => x.BoQnum).ThenBy(x => x.HeadLine))
            {
                if (boqheadline.Type.Equals("Mobilization"))
                {
                    numRecords = Model.items.Where(x => x.MobilizationId != null && x.BoQNr >= boqheadline.BoQnum && x.BoQNr < (boqheadline.BoQnum + (decimal)1.0)).Count();
                    if (numRecords > 0)
                    {
                        fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString(boqheadline.HeadLine);
                        fillerrow[1] = "";
                        fillerrow[2] = "";
                        fillerrow[3] = "";
                        fillerrow[4] = "";
                        fillerrow[5] = "";
                        fillerrow[6] = "";
                        sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                        fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString("Item Name");
                        fillerrow[1] = _SharedLocalizer.GetLocalizedHtmlString("Start Date");
                        fillerrow[2] = _SharedLocalizer.GetLocalizedHtmlString("End Date");
                        fillerrow[3] = _SharedLocalizer.GetLocalizedHtmlString("Unit Price");
                        fillerrow[4] = _SharedLocalizer.GetLocalizedHtmlString("Rental Price");
                        fillerrow[5] = _SharedLocalizer.GetLocalizedHtmlString("Amount");
                        fillerrow[6] = _SharedLocalizer.GetLocalizedHtmlString("Subtotal");
                        sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                        decimal cost = (decimal)0.0;
                        foreach (var item in Model.items.Where(x => x.MobilizationId != null && x.BoQNr >= boqheadline.BoQnum && x.BoQNr < (boqheadline.BoQnum + (decimal)1.0)).OrderBy(x => x.BoQNr).ThenBy(x => x.Install_date))
                        {
                            decimal subtotal = Convert.ToDecimal(item.price);
                            fillerrow[0] = String.Format("{0:N2}", item.BoQNr) + " : " + item.Item_Name;
                            fillerrow[1] = item.Install_date.ToString("yyyy-MM-dd");
                            fillerrow[2] = item.Install_date.ToString("yyyy-MM-dd");
                            fillerrow[3] = String.Format("{0:N2}", item.ItemType.price) + thevaluta;
                            fillerrow[4] = String.Format("{0:N2}", 0.00) + thevaluta;
                            fillerrow[5] = item.Amount.ToString();
                            fillerrow[6] = String.Format("{0:N2}", subtotal) + thevaluta;
                            cost += subtotal;
                            totaltotalcost += subtotal;
                            sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                        }
                        fillerrow[0] = "Total " + _SharedLocalizer.GetLocalizedHtmlString(boqheadline.HeadLine);
                        fillerrow[1] = "";
                        fillerrow[2] = "";
                        fillerrow[3] = "";
                        fillerrow[4] = "";
                        fillerrow[5] = "";
                        fillerrow[6] = String.Format("{0:N2} ", cost) + thevaluta;
                        sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                    }
                }
                else if (boqheadline.Type.Equals("Installation"))
                {
                    numRecords = Model.items.Where(x => x.InstallationId != null && x.Install.VariationOrderId == null && x.Invoice_date.Date >= Model.starttime.Date && x.Invoice_date.Date <= Model.endtime.Date && x.BoQNr >= boqheadline.BoQnum && x.BoQNr < (decimal)(boqheadline.BoQnum + 1) && (x.price > (decimal)0.0 || x.price < (decimal)0.0)).Count();
                    if (numRecords > 0)
                    {
                        fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString(boqheadline.HeadLine);
                        fillerrow[1] = "";
                        fillerrow[2] = "";
                        fillerrow[3] = "";
                        fillerrow[4] = "";
                        fillerrow[5] = "";
                        fillerrow[6] = "";
                        sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                        fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString("Item Name");
                        fillerrow[1] = _SharedLocalizer.GetLocalizedHtmlString("Start Date");
                        fillerrow[2] = _SharedLocalizer.GetLocalizedHtmlString("End Date");
                        fillerrow[3] = _SharedLocalizer.GetLocalizedHtmlString("Unit Price");
                        fillerrow[4] = _SharedLocalizer.GetLocalizedHtmlString("Rental Price");
                        fillerrow[5] = _SharedLocalizer.GetLocalizedHtmlString("Amount");
                        fillerrow[6] = _SharedLocalizer.GetLocalizedHtmlString("Subtotal");
                        sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                        decimal cost = (decimal)0.0;
                        foreach (var item in Model.items.Where(x => x.InstallationId != null && x.Install.VariationOrderId == null && x.Invoice_date.Date >= Model.starttime.Date && x.Invoice_date.Date <= Model.endtime.Date && x.BoQNr >= boqheadline.BoQnum && x.BoQNr < (decimal)(boqheadline.BoQnum + 1) && (x.price > (decimal)0.0 || x.price < (decimal)0.0)).OrderBy(x => x.BoQNr).ThenBy(x => x.Install_date).ThenBy(x => x.Install.UniqueID))
                        {
                            decimal subtotal = Convert.ToDecimal(item.price);
                            if (item.Install.UniqueID != null && item.Install.UniqueID != "N/A" && item.Install.UniqueID != "")
                            {
                                fillerrow[0] = String.Format("{0:N2}", item.BoQNr) + " : " + item.Item_Name + "(" + item.Install.UniqueID + ")" + " : " + item.location;
                            }
                            else
                            {
                                fillerrow[0] = String.Format("{0:N2}", item.BoQNr) + " : " + item.Item_Name + " : " + item.location;
                            }

                            fillerrow[1] = item.Install_date.ToString("yyyy-MM-dd");
                            if (item.Install.DeinstallDate != null)
                            {
                                fillerrow[2] = Convert.ToDateTime(item.Install.DeinstallDate).ToString("yyyy-MM-dd");
                            }
                            else
                            {
                                fillerrow[2] = "";
                            }
                            if (item.ItemType.Install_Unit.TheUnit != "pcs")
                            {
                                fillerrow[3] = String.Format("{0:N2}", item.ItemType.price) + thevaluta + " " + item.ItemType.Install_Unit.TheUnit;
                            }
                            else
                            {
                                fillerrow[3] = String.Format("{0:N2}", item.ItemType.price) + thevaluta + "/" + item.ItemType.Install_Unit.TheUnit;
                            }
                            fillerrow[4] = String.Format("{0:N2}", 0.00) + thevaluta;
                            fillerrow[5] = String.Format("{0:N2}", item.Amount);
                            fillerrow[6] = String.Format("{0:N2}", subtotal) + thevaluta;
                            cost += subtotal;
                            totaltotalcost += subtotal;
                            sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                            if (item.Total_Discount_Installation > (decimal)0.01)
                            {
                                fillerrow[0] = "Discount:";
                                fillerrow[1] = "";
                                fillerrow[2] = "";
                                fillerrow[3] = "";
                                fillerrow[4] = String.Format("{0:N2}", 0.00) + thevaluta;
                                fillerrow[5] = String.Format("{0:N2}", item.Amount);
                                fillerrow[6] = String.Format("{0:N2}", -item.Total_Discount_Installation) + thevaluta;
                                cost -= (decimal)item.Total_Discount_Installation;
                                totaltotalcost -= (decimal)item.Total_Discount_Installation;
                                sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                            }
                        }
                        fillerrow[0] = "Total " + _SharedLocalizer.GetLocalizedHtmlString(boqheadline.HeadLine);
                        fillerrow[1] = "";
                        fillerrow[2] = "";
                        fillerrow[3] = "";
                        fillerrow[4] = "";
                        fillerrow[5] = "";
                        fillerrow[6] = String.Format("{0:N2} ", cost) + thevaluta;
                        sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                    }
                }
                else if (boqheadline.Type.Equals("Rental"))
                {
                    numRecords = Model.items.Where(x => x.ArrivalId != null && (x.BoQNr_Rental >= boqheadline.BoQnum && x.BoQNr_Rental < (boqheadline.BoQnum + (decimal)1.0)) && (x.rental_price > (decimal)0.0 || x.rental_price < (decimal)0.0)).Count();
                    if (numRecords > 0)
                    {
                        fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString(boqheadline.HeadLine);
                        fillerrow[1] = "";
                        fillerrow[2] = "";
                        fillerrow[3] = "";
                        fillerrow[4] = "";
                        fillerrow[5] = "";
                        fillerrow[6] = "";
                        sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                        fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString("Item Name");
                        fillerrow[1] = _SharedLocalizer.GetLocalizedHtmlString("Start Date");
                        fillerrow[2] = _SharedLocalizer.GetLocalizedHtmlString("End Date");
                        fillerrow[3] = _SharedLocalizer.GetLocalizedHtmlString("Rental Price Unit");
                        fillerrow[4] = _SharedLocalizer.GetLocalizedHtmlString("Days");
                        fillerrow[5] = _SharedLocalizer.GetLocalizedHtmlString("Amount");
                        fillerrow[6] = _SharedLocalizer.GetLocalizedHtmlString("Subtotal");
                        sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                        decimal cost = (decimal)0.0;
                        try
                        {
                            foreach(var item in Model.items.Where(x => x.ArrivalId != null && (x.BoQNr_Rental >= boqheadline.BoQnum && x.BoQNr_Rental < (boqheadline.BoQnum + (decimal)1.0)) && (x.rental_price > (decimal)0.0 || x.rental_price < (decimal)0.0)).OrderBy(x => x.BoQNr).ThenBy(x => x.location.Split(":")[1]).ThenBy(x => x.Install_date).ThenBy(x => x.Arrival.UniqueID))
                            {
                                decimal subtotal = Convert.ToDecimal(item.rental_price);
                                var period = _SharedLocalizer.GetLocalizedHtmlString("Days");
                                if (item.ItemType.Rental_UnitId.Equals(16) || item.ItemType.Rental_UnitId.Equals(18))
                                {
                                    period = _SharedLocalizer.GetLocalizedHtmlString("Months");
                                }
                                else if (item.ItemType.Rental_UnitId.Equals(17))
                                {
                                    period = _SharedLocalizer.GetLocalizedHtmlString("Weeks");
                                }
                                if (item.Arrival.UniqueID != null && item.Arrival.UniqueID != "" && item.Arrival.UniqueID != "N/A")
                                {
                                    fillerrow[0] = String.Format("{0:N2}", item.BoQNr) + "(" + item.Arrival.UniqueID + ")" + " : " + item.Item_Name;
                                }
                                else
                                {
                                    fillerrow[0] = String.Format("{0:N2}", item.BoQNr) + " : " + item.Item_Name;
                                }

                                fillerrow[1] = item.Install_date.ToString("yyyy-MM-dd");
                                if (item.Arrival != null)
                                {
                                    if (item.Arrival.EndStamp != null)
                                    {
                                        fillerrow[2] = Convert.ToDateTime(item.Arrival.EndStamp).ToString("yyyy-MM-dd");
                                    }
                                    else
                                    {
                                        fillerrow[2] = "";
                                    }
                                }
                                else
                                {
                                    fillerrow[2] = "";
                                }

                                if (item.ItemType.Rental_Unit.TheUnit.Equals("pr. m pr. calender day"))
                                {
                                    fillerrow[3] = String.Format("{0:N2}", item.ItemType.rental_price) + thevaluta + " " + item.ItemType.Rental_Unit.TheUnit;
                                }

                                else
                                {
                                    fillerrow[3] = String.Format("{0:N2}", item.ItemType.rental_price) + thevaluta + "/pcs" + " " + item.ItemType.Rental_Unit.TheUnit;
                                }
                                fillerrow[4] = item.Days + " Days";
                                if (item.ItemType.Install_Unit.TheUnit.Equals("pr. m"))
                                {
                                    fillerrow[5] = String.Format("{0:N2}", item.Amount) + " m";
                                }
                                else
                                {
                                    fillerrow[5] = String.Format("{0:N2}", item.Amount) + " " + period;
                                }
                                fillerrow[6] = String.Format("{0:N2}", subtotal) + thevaluta;
                                cost += subtotal;
                                totaltotalcost += subtotal;
                                sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                                if (item.Total_Discount > (decimal)0.01)
                                {
                                    fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString("Discount");
                                    fillerrow[1] = "";
                                    fillerrow[2] = "";
                                    fillerrow[3] = "";
                                    fillerrow[4] = "";
                                    fillerrow[5] = "";
                                    fillerrow[6] = String.Format("{0:N2} ", -item.Total_Discount) + thevaluta;
                                    sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                                    cost -= (decimal)item.Total_Discount;
                                    totaltotalcost -= (decimal)item.Total_Discount;
                                }
                            }
                        }
                        catch
                        {
                            foreach (var item in Model.items.Where(x => x.ArrivalId != null && (x.BoQNr_Rental >= boqheadline.BoQnum && x.BoQNr_Rental < (boqheadline.BoQnum + (decimal)1.0)) && (x.rental_price > (decimal)0.0 || x.rental_price < (decimal)0.0)).OrderBy(x => x.BoQNr).ThenBy(x => x.Install_date))
                            {
                                decimal subtotal = Convert.ToDecimal(item.rental_price);
                                var period = _SharedLocalizer.GetLocalizedHtmlString("Days");
                                if (item.ItemType.Rental_UnitId.Equals(16) || item.ItemType.Rental_UnitId.Equals(18))
                                {
                                    period = _SharedLocalizer.GetLocalizedHtmlString("Months");
                                }
                                else if (item.ItemType.Rental_UnitId.Equals(17))
                                {
                                    period = _SharedLocalizer.GetLocalizedHtmlString("Weeks");
                                }
                                if (item.Arrival.UniqueID != null && item.Arrival.UniqueID != "" && item.Arrival.UniqueID != "N/A")
                                {
                                    fillerrow[0] = String.Format("{0:N2}", item.BoQNr) + "(" + item.Arrival.UniqueID + ")" + " : " + item.Item_Name;
                                }
                                else
                                {
                                    fillerrow[0] = String.Format("{0:N2}", item.BoQNr) + " : " + item.Item_Name;
                                }

                                fillerrow[1] = item.Install_date.ToString("yyyy-MM-dd");
                                if (item.Arrival != null)
                                {
                                    if (item.Arrival.EndStamp != null)
                                    {
                                        fillerrow[2] = Convert.ToDateTime(item.Arrival.EndStamp).ToString("yyyy-MM-dd");
                                    }
                                    else
                                    {
                                        fillerrow[2] = "";
                                    }
                                }
                                else
                                {
                                    fillerrow[2] = "";
                                }

                                if (item.ItemType.Rental_Unit.TheUnit.Equals("pr. m pr. calender day"))
                                {
                                    fillerrow[3] = String.Format("{0:N2}", item.ItemType.rental_price) + thevaluta + " " + item.ItemType.Rental_Unit.TheUnit;
                                }

                                else
                                {
                                    fillerrow[3] = String.Format("{0:N2}", item.ItemType.rental_price) + thevaluta + "/pcs" + " " + item.ItemType.Rental_Unit.TheUnit;
                                }
                                fillerrow[4] = item.Days + " Days";
                                if (item.ItemType.Install_Unit.TheUnit.Equals("pr. m"))
                                {
                                    fillerrow[5] = String.Format("{0:N2}", item.Amount) + " m";
                                }
                                else
                                {
                                    fillerrow[5] = String.Format("{0:N2}", item.Amount) + " " + period;
                                }
                                fillerrow[6] = String.Format("{0:N2}", subtotal) + thevaluta;
                                cost += subtotal;
                                totaltotalcost += subtotal;
                                sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                                if (item.Total_Discount > (decimal)0.01)
                                {
                                    fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString("Discount");
                                    fillerrow[1] = "";
                                    fillerrow[2] = "";
                                    fillerrow[3] = "";
                                    fillerrow[4] = "";
                                    fillerrow[5] = "";
                                    fillerrow[6] = String.Format("{0:N2} ", -item.Total_Discount) + thevaluta;
                                    sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                                    cost -= (decimal)item.Total_Discount;
                                    totaltotalcost -= (decimal)item.Total_Discount;
                                }
                            }
                        }
                        fillerrow[0] = "Total " + _SharedLocalizer.GetLocalizedHtmlString(boqheadline.HeadLine);
                        fillerrow[1] = "";
                        fillerrow[2] = "";
                        fillerrow[3] = "";
                        fillerrow[4] = "";
                        fillerrow[5] = "";
                        fillerrow[6] = String.Format("{0:N2} ", cost) + thevaluta;
                        sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                    }
                }
                else if (boqheadline.Type.Equals("Hours"))
                {
                    numRecords = Model.items.Where(x => x.Daily_Report_2Id != null && x.Daily_Report_2.VariationOrderId == null && x.BoQNr >= boqheadline.BoQnum && x.BoQNr < (decimal)(boqheadline.BoQnum + 1)).Count();
                    if (numRecords > 0)
                    {
                        fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString(boqheadline.HeadLine);
                        fillerrow[1] = "";
                        fillerrow[2] = "";
                        fillerrow[3] = "";
                        fillerrow[4] = "";
                        fillerrow[5] = "";
                        fillerrow[6] = "";
                        sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                        fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString("Item Name");
                        fillerrow[1] = _SharedLocalizer.GetLocalizedHtmlString("Start Date");
                        fillerrow[2] = _SharedLocalizer.GetLocalizedHtmlString("End Date");
                        fillerrow[3] = _SharedLocalizer.GetLocalizedHtmlString("Hour Rate");
                        fillerrow[4] = _SharedLocalizer.GetLocalizedHtmlString("People");
                        fillerrow[5] = _SharedLocalizer.GetLocalizedHtmlString("Hours(excl. Break)");
                        fillerrow[6] = _SharedLocalizer.GetLocalizedHtmlString("Subtotal");
                        sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                        decimal cost = (decimal)0.0;
                        foreach (var item in Model.items.Where(x => x.Daily_Report_2Id != null && x.Daily_Report_2.VariationOrderId == null && x.BoQNr >= boqheadline.BoQnum && x.BoQNr < (decimal)(boqheadline.BoQnum + 1)).OrderBy(x => x.BoQNr).ThenBy(x => x.Install_date))
                        {
                            decimal subtotal = (decimal)0.0;
                            if (item.rental_price != null && item.price != null)
                            {
                                subtotal = Convert.ToDecimal(item.rental_price) + Convert.ToDecimal(item.price);
                            }
                            else
                            {
                                if (item.rental_price != null)
                                {
                                    subtotal = Convert.ToDecimal(item.rental_price);
                                }
                                else
                                {
                                    subtotal = Convert.ToDecimal(item.price);
                                }
                            }
                            fillerrow[0] = String.Format("{0:N2}", item.BoQNr) + " : " + item.Item_Name;
                            fillerrow[1] = item.Install_date.ToString("yyyy-MM-dd");
                            fillerrow[2] = item.Install_date.ToString("yyyy-MM-dd");
                            fillerrow[3] = String.Format("{0:N2}", item.ItemType.rental_price) + thevaluta + "/" + _SharedLocalizer.GetLocalizedHtmlString("Hour");
                            fillerrow[4] = String.Format("{0:N2}", item.Amount) + " People";
                            fillerrow[5] = item.Days + " Hours";
                            fillerrow[6] = String.Format("{0:N2}", subtotal) + thevaluta;
                            cost += subtotal;
                            totaltotalcost += subtotal;
                            sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                        }
                        fillerrow[0] = "Total " + _SharedLocalizer.GetLocalizedHtmlString(boqheadline.HeadLine);
                        fillerrow[1] = "";
                        fillerrow[2] = "";
                        fillerrow[3] = "";
                        fillerrow[4] = "";
                        fillerrow[5] = "";
                        fillerrow[6] = String.Format("{0:N2} ", cost) + thevaluta;
                        sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                    }
                }
                else if (boqheadline.Type.Equals("ExtraWork"))
                {
                    numRecords = Model.items.Where(x => (x.ExtraWorkId != null && x.ExtraWork.BoQHeadLineId.Equals(boqheadline.Id)) || (x.InstallationId != null && x.Install.VariationOrderId.Equals(boqheadline.Id)) || (x.Daily_Report_2Id != null && x.Daily_Report_2.VariationOrderId.Equals(boqheadline.Id))).Count();
                    if (numRecords > 0)
                    {
                        var cost = (decimal)0.0;
                        fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString(boqheadline.HeadLine);
                        fillerrow[1] = "";
                        fillerrow[2] = "";
                        fillerrow[3] = "";
                        fillerrow[4] = "";
                        fillerrow[5] = "";
                        fillerrow[6] = "";
                        sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                        fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString("Item Name");
                        fillerrow[1] = _SharedLocalizer.GetLocalizedHtmlString("Start Date");
                        fillerrow[2] = _SharedLocalizer.GetLocalizedHtmlString("End Date");
                        fillerrow[3] = _SharedLocalizer.GetLocalizedHtmlString("Amount");
                        fillerrow[4] = _SharedLocalizer.GetLocalizedHtmlString("Price");
                        fillerrow[5] = _SharedLocalizer.GetLocalizedHtmlString("Rental");
                        fillerrow[6] = _SharedLocalizer.GetLocalizedHtmlString("Subtotal");
                        sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                        foreach (var item in Model.items.Where(x => (x.ExtraWorkId != null && x.ExtraWork.BoQHeadLineId.Equals(boqheadline.Id)) || (x.InstallationId != null && x.Install.VariationOrderId.Equals(boqheadline.Id)) || (x.Daily_Report_2Id != null && x.Daily_Report_2.VariationOrderId.Equals(boqheadline.Id))))
                        {
                            decimal subtotal = (decimal)0.0;
                            if (item.rental_price != null && item.price != null)
                            {
                                subtotal = Convert.ToDecimal(item.rental_price) + Convert.ToDecimal(item.price);
                            }
                            else
                            {
                                if (item.rental_price != null)
                                {
                                    subtotal = Convert.ToDecimal(item.rental_price);
                                }
                                else
                                {
                                    subtotal = Convert.ToDecimal(item.price);
                                }
                            }
                            if (item.InstallationId == null && item.Daily_Report_2Id == null)
                            {
                                fillerrow[0] = item.Item_Name;
                                fillerrow[1] = item.ExtraWork.TimeStamp.ToString("yyyy-MM-dd");
                                if (item.ExtraWork.EndStamp != null)
                                {
                                    fillerrow[2] = Convert.ToDateTime(item.ExtraWork.EndStamp).ToString("yyyy-MM-dd");
                                }
                                else
                                {
                                    fillerrow[2] = "";
                                }
                                fillerrow[3] = "1";
                            }
                            else if (item.InstallationId != null)
                            {
                                if (item.Install.UniqueID != null && item.Install.UniqueID != "N/A")
                                {
                                    fillerrow[0] = item.Item_Name + " (" + item.Install.UniqueID + ")";
                                }
                                else
                                {
                                    fillerrow[0] = item.Item_Name;
                                }
                                fillerrow[1] = item.Install.TimeStamp.ToString("yyyy-MM-dd");
                                if (item.Install.DeinstallDate != null)
                                {
                                    fillerrow[2] = Convert.ToDateTime(item.Install.DeinstallDate).ToString("yyyy-MM-dd");
                                }
                                else
                                {
                                    fillerrow[2] = "";
                                }
                                fillerrow[3] = String.Format("{0:N2}", item.Install.Amount);
                            }
                            else
                            {
                                if (item.Daily_Report_2.short_Description != null && item.Daily_Report_2.short_Description != "")
                                {
                                    fillerrow[0] = item.Item_Name + " (" + item.Daily_Report_2.short_Description + ")";
                                }
                                else
                                {
                                    fillerrow[0] = item.Item_Name;
                                }
                                fillerrow[1] = item.Daily_Report_2.Report_Date.ToString("yyyy-MM-dd");
                                fillerrow[2] = item.Daily_Report_2.Report_Date.ToString("yyyy-MM-dd");
                                fillerrow[3] = String.Format("{0:N2}", item.Daily_Report_2.Amount);
                            }
                            if (item.price != null)
                            {
                                fillerrow[4] = String.Format("{0:N2}", (decimal)item.price) + thevaluta;
                            }
                            else
                            {
                                fillerrow[4] = String.Format("{0:N2}", 0) + thevaluta;
                            }

                            if (item.rental_price != null)
                            {
                                fillerrow[5] = String.Format("{0:N2}", (decimal)item.rental_price) + thevaluta;
                            }
                            else
                            {
                                fillerrow[5] = String.Format("{0:N2}", 0) + thevaluta;
                            }
                            fillerrow[6] = String.Format("{0:N2}", (decimal)subtotal) + thevaluta;
                            sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                            cost += subtotal;
                            totaltotalcost += subtotal;
                        }
                        fillerrow[0] = "Total " + _SharedLocalizer.GetLocalizedHtmlString(boqheadline.HeadLine);
                        fillerrow[1] = "";
                        fillerrow[2] = "";
                        fillerrow[3] = "";
                        fillerrow[4] = "";
                        fillerrow[5] = "";
                        fillerrow[6] = String.Format("{0:N2} ", cost) + thevaluta;
                        sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                    }
                }
            }
            if (Model.items.Where(x => x.ExtraWorkId != null && x.ExtraWork.BoQHeadLineId == null).Count() > 0)
            {
                fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString("Extra Works");
                fillerrow[1] = "";
                fillerrow[2] = "";
                fillerrow[3] = "";
                fillerrow[4] = "";
                fillerrow[5] = "";
                fillerrow[6] = "";
                sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString("Item Name");
                fillerrow[1] = _SharedLocalizer.GetLocalizedHtmlString("Date Span");
                fillerrow[2] = _SharedLocalizer.GetLocalizedHtmlString("Price");
                fillerrow[3] = _SharedLocalizer.GetLocalizedHtmlString("Rental");
                fillerrow[4] = _SharedLocalizer.GetLocalizedHtmlString("Days");
                fillerrow[5] = _SharedLocalizer.GetLocalizedHtmlString("Rental Total");
                fillerrow[6] = _SharedLocalizer.GetLocalizedHtmlString("Subtotal");
                sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                decimal cost = (decimal)0.0;
                foreach (var item in Model.items.Where(x => x.ExtraWorkId != null && x.ExtraWork.BoQHeadLineId == null))
                {
                    decimal subtotal = (decimal)0.0;
                    if (item.rental_price != null && item.price != null)
                    {
                        subtotal = Convert.ToDecimal(item.rental_price) + Convert.ToDecimal(item.price);
                    }
                    else
                    {
                        if (item.rental_price != null)
                        {
                            subtotal = Convert.ToDecimal(item.rental_price);
                        }
                        else
                        {
                            subtotal = Convert.ToDecimal(item.price);
                        }
                    }
                    fillerrow[0] = item.Item_Name.Replace("\r\n", "");
                    if (item.ExtraWork.EndStamp != null)
                    {
                        fillerrow[1] = item.ExtraWork.TimeStamp.ToString("yyyy-MM-dd") + " - " + Convert.ToDateTime(item.ExtraWork.EndStamp).ToString("yyyy-MM-dd");
                    }
                    else
                    {
                        fillerrow[1] = item.ExtraWork.TimeStamp.ToString("yyyy-MM-dd");
                    }
                    if (item.price != null)
                    {
                        fillerrow[2] = item.rental_price + thevaluta;
                    }
                    else
                    {
                        fillerrow[2] = "0.00" + thevaluta;
                    }
                    if (item.rental_price > (decimal)0.0)
                    {
                        fillerrow[3] = item.ExtraWork.Rental_Price + thevaluta + "/" + _SharedLocalizer.GetLocalizedHtmlString("calender day");
                    }
                    else
                    {
                        fillerrow[3] = "0.00" + thevaluta + "/" + _SharedLocalizer.GetLocalizedHtmlString("calender day");
                    }
                    fillerrow[4] = item.Days.ToString();
                    fillerrow[5] = String.Format("{0:N2}", item.rental_price) + thevaluta;
                    fillerrow[6] = String.Format("{0:N2}", subtotal) + thevaluta;
                    cost += subtotal;
                    totaltotalcost += subtotal;
                    sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                }
                fillerrow[0] = "Total " + _SharedLocalizer.GetLocalizedHtmlString("Extra work");
                fillerrow[1] = "";
                fillerrow[2] = "";
                fillerrow[3] = "";
                fillerrow[4] = "";
                fillerrow[5] = "";
                fillerrow[6] = String.Format("{0:N2} ", cost) + thevaluta;
                sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
            }
            fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString("Total (excl. VAT)");
            fillerrow[1] = "";
            fillerrow[2] = "";
            fillerrow[3] = "";
            fillerrow[4] = "";
            fillerrow[5] = "";
            fillerrow[6] = String.Format("{0:N2} ", totaltotalcost) + thevaluta;
            sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
            fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString("Previously Applied (excl. VAT)");
            fillerrow[1] = "";
            fillerrow[2] = "";
            fillerrow[3] = "";
            fillerrow[4] = "";
            fillerrow[5] = "";
            fillerrow[6] = String.Format("{0:N2} ", Model.Payments.Sum(x => x.Amount)) + thevaluta;
            sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
            fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString("Remainder to be paid (excl. VAT)");
            fillerrow[1] = "";
            fillerrow[2] = "";
            fillerrow[3] = "";
            fillerrow[4] = "";
            fillerrow[5] = "";
            fillerrow[6] = String.Format("{0:N2} ", totaltotalcost - Model.Payments.Sum(x => x.Amount)) + thevaluta;
            sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
            fillerrow[0] = "";
            fillerrow[1] = "";
            fillerrow[2] = "";
            fillerrow[3] = "";
            fillerrow[4] = "";
            fillerrow[5] = "";
            fillerrow[6] = "";
            sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
            fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString("Sumary Table");
            fillerrow[1] = "";
            fillerrow[2] = "";
            fillerrow[3] = "";
            fillerrow[4] = "";
            fillerrow[5] = "";
            fillerrow[6] = "";
            sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
            decimal totalalways = (decimal)0.0;
            decimal totalthis = (decimal)0.0;
            fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString("Item Name");
            fillerrow[1] = "";
            fillerrow[2] = "";
            fillerrow[3] = _SharedLocalizer.GetLocalizedHtmlString("Total Cumulative Amount");
            fillerrow[4] = _SharedLocalizer.GetLocalizedHtmlString("Total Cumulative Cost");
            fillerrow[5] = _SharedLocalizer.GetLocalizedHtmlString("Total This Period");
            fillerrow[6] = _SharedLocalizer.GetLocalizedHtmlString("Total This Period Cost");
            sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
            foreach (var boqheadline in Model.headlines.OrderBy(x => x.BoQnum).ThenBy(x => x.HeadLine))
            {
                if (boqheadline.Type.Equals("Mobilization"))
                {
                    numRecords = Model.allItems.Where(x => x.MobilizationId != null && x.BoQNr >= boqheadline.BoQnum && x.BoQNr < (boqheadline.BoQnum + (decimal)1.0)).GroupBy(x => x.Item_Name).Count();
                    if (numRecords > 0)
                    {
                        fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString(boqheadline.HeadLine);
                        fillerrow[1] = "";
                        fillerrow[2] = "";
                        fillerrow[3] = "";
                        fillerrow[4] = "";
                        fillerrow[5] = "";
                        fillerrow[6] = "";
                        sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                        foreach (var itemtype in Model.allItems.Where(x => x.MobilizationId != null && x.BoQNr >= boqheadline.BoQnum && x.BoQNr < (boqheadline.BoQnum + (decimal)1.0)).OrderBy(x => x.BoQNr).GroupBy(x => x.Item_Name))
                        {
                            var totalamountmobilized = Model.items.Where(x => x.ItemTypeId.Equals(itemtype.First().ItemTypeId)).Sum(x => x.Amount);
                            var totalamountmobilizedalways = Model.allItems.Where(x => x.ItemTypeId.Equals(itemtype.First().ItemTypeId)).Sum(x => x.Amount);
                            var totalcostMobilizedalways = Model.allItems.Where(x => x.Item_Name.Equals(itemtype.First().Item_Name) && x.MobilizationId != null).Sum(x => x.price);
                            var totalcostMobilized = Model.items.Where(x => x.Item_Name.Equals(itemtype.First().Item_Name) && x.MobilizationId != null).Sum(x => x.price);
                            totalalways += (decimal)totalcostMobilizedalways;
                            totalthis += (decimal)totalcostMobilized;
                            fillerrow[0] = itemtype.First().Item_Name;
                            fillerrow[1] = "";
                            fillerrow[2] = "";
                            fillerrow[3] = String.Format("{0:N2}", totalamountmobilizedalways);
                            fillerrow[4] = String.Format("{0:N2}", totalcostMobilizedalways) + thevaluta;
                            fillerrow[5] = String.Format("{0:N2}", totalamountmobilized);
                            fillerrow[6] = String.Format("{0:N2}", totalcostMobilized) + thevaluta;
                            sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                        }
                    }
                }
                else if (boqheadline.Type.Equals("Installation"))
                {
                    numRecords = Model.allItems.Where(x => x.InstallationId != null && x.Install.VariationOrderId == null && x.BoQNr >= boqheadline.BoQnum && x.BoQNr < (decimal)(boqheadline.BoQnum + 1) && (x.price > (decimal)0.0 || x.price < (decimal)0.0)).Count();
                    if (numRecords > 0)
                    {
                        fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString(boqheadline.HeadLine);
                        fillerrow[1] = "";
                        fillerrow[2] = "";
                        fillerrow[3] = "";
                        fillerrow[4] = "";
                        fillerrow[5] = "";
                        fillerrow[6] = "";
                        sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                        foreach (var itemtype in Model.allItems.Where(x => x.InstallationId != null && x.Install.VariationOrderId == null && x.BoQNr >= boqheadline.BoQnum && x.BoQNr < (decimal)(boqheadline.BoQnum + 1)).OrderBy(x => x.BoQNr).GroupBy(x => x.Item_Name))
                        {
                            var totalamountinstalled = Model.items.Where(x => x.InstallationId != null && x.Install.VariationOrderId == null && x.Invoice_date.Date >= Model.starttime.Date && x.Invoice_date.Date <= Model.endtime.Date && x.ItemTypeId.Equals(itemtype.First().ItemTypeId) && x.BoQNr >= boqheadline.BoQnum && x.BoQNr < (decimal)(boqheadline.BoQnum + 1)).Sum(x => x.Amount);
                            var totalamountinstalledalways = Model.allItems.Where(x => x.ItemTypeId.Equals(itemtype.First().ItemTypeId) && x.InstallationId != null && x.Install.VariationOrderId == null && x.BoQNr >= boqheadline.BoQnum && x.BoQNr < (decimal)(boqheadline.BoQnum + 1)).Sum(x => x.Amount);
                            var totalcostInstalledalways = Model.allItems.Where(x => x.Item_Name.Equals(itemtype.First().Item_Name) && x.InstallationId != null && x.Install.VariationOrderId == null && x.BoQNr >= boqheadline.BoQnum && x.BoQNr < (decimal)(boqheadline.BoQnum + 1)).Sum(x => x.price - x.Total_Discount_Installation);
                            var totalcostInstalled = Model.items.Where(x => x.Item_Name.Equals(itemtype.First().Item_Name) && x.InstallationId != null && x.Install.VariationOrderId == null && x.BoQNr >= boqheadline.BoQnum && x.BoQNr < (decimal)(boqheadline.BoQnum + 1)).Sum(x => x.price - x.Total_Discount_Installation);
                            totalalways += (decimal)totalcostInstalledalways;
                            totalthis += (decimal)totalcostInstalled;
                            fillerrow[0] = itemtype.First().Item_Name;
                            fillerrow[1] = "";
                            fillerrow[2] = "";
                            fillerrow[3] = String.Format("{0:N2}", totalamountinstalledalways);
                            fillerrow[4] = String.Format("{0:N2}", totalcostInstalledalways) + thevaluta;
                            fillerrow[5] = String.Format("{0:N2}", totalamountinstalled);
                            fillerrow[6] = String.Format("{0:N2}", totalcostInstalled) + thevaluta;
                            sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                        }
                    }
                }
                else if (boqheadline.Type.Equals("Rental"))
                {
                    numRecords = Model.allItems.Where(x => x.ArrivalId != null && (x.BoQNr_Rental >= boqheadline.BoQnum && (x.BoQNr_Rental < (boqheadline.BoQnum + (decimal)1.0))) && (x.rental_price > (decimal)0.0 || x.rental_price < (decimal)0.0)).Count();
                    if (numRecords > 0)
                    {
                        fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString(boqheadline.HeadLine);
                        fillerrow[1] = "";
                        fillerrow[2] = "";
                        fillerrow[3] = "";
                        fillerrow[4] = "";
                        fillerrow[5] = "";
                        fillerrow[6] = "";
                        sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                        foreach (var itemtype in Model.allItems.Where(x => x.ArrivalId != null && (x.BoQNr_Rental >= boqheadline.BoQnum && (x.BoQNr_Rental < (boqheadline.BoQnum + (decimal)1.0))) && (x.rental_price > (decimal)0.0 || x.rental_price < (decimal)0.0)).OrderBy(x => x.BoQNr_Rental).GroupBy(x => x.Item_Name))
                        {
                            var totalamountarrived = Model.items.Where(x => x.ItemTypeId.Equals(itemtype.First().ItemTypeId) && x.ArrivalId != null && (x.Days > 0 || x.rental_price < 0) && x.BoQNr_Rental >= boqheadline.BoQnum && (x.BoQNr_Rental < (boqheadline.BoQnum + (decimal)1.0))).Sum(x => x.Amount * x.Days);
                            var totalamountarrivedalways = Model.allItems.Where(x => x.ItemTypeId.Equals(itemtype.First().ItemTypeId) && x.ArrivalId != null && (x.Days > 0 || x.rental_price < 0) && x.BoQNr_Rental >= boqheadline.BoQnum && (x.BoQNr_Rental < (boqheadline.BoQnum + (decimal)1.0))).Sum(x => x.Amount * x.Days);
                            var totalcostarrivedalways = Model.allItems.Where(x => x.ItemTypeId.Equals(itemtype.First().ItemTypeId) && x.ArrivalId != null && (x.Days > 0 || x.rental_price < 0) && x.BoQNr_Rental >= boqheadline.BoQnum && (x.BoQNr_Rental < (boqheadline.BoQnum + (decimal)1.0))).Sum(x => x.Arrival == null ? x.rental_price - (decimal)x.Total_Discount : x.Item_Name.ToLower().Contains("idle") ? x.rental_price - (decimal)x.Total_Discount : x.rental_price - (decimal)x.Total_Discount + Convert.ToDecimal(x.Arrival.PayedAmount));
                            var totalcostarrived = Model.items.Where(x => x.Item_Name.Equals(itemtype.First().Item_Name) && (x.Days > 0 || x.rental_price < 0) && x.ArrivalId != null && x.Install_date.Date <= Model.endtime.Date && (x.Arrival.EndStamp == null || x.Arrival.EndStamp >= Model.starttime) && x.BoQNr_Rental >= boqheadline.BoQnum && (x.BoQNr_Rental < (boqheadline.BoQnum + (decimal)1.0))).Sum(x => x.rental_price - (decimal)x.Total_Discount);
                            totalalways += (decimal)totalcostarrivedalways;
                            totalthis += (decimal)totalcostarrived;
                            fillerrow[0] = itemtype.First().Item_Name;
                            fillerrow[1] = "";
                            fillerrow[2] = "";
                            fillerrow[3] = String.Format("{0:N2}", totalamountarrivedalways);
                            fillerrow[4] = String.Format("{0:N2}", totalcostarrivedalways) + thevaluta;
                            fillerrow[5] = String.Format("{0:N2}", totalamountarrived);
                            fillerrow[6] = String.Format("{0:N2}", totalcostarrived) + thevaluta;
                            sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                        }
                    }
                }
                else if (boqheadline.Type.Equals("Hours"))
                {
                    numRecords = Model.allItems.Where(x => x.Daily_Report_2Id != null && x.Daily_Report_2.VariationOrderId == null && x.BoQNr >= boqheadline.BoQnum && x.BoQNr < (decimal)(boqheadline.BoQnum + 1)).GroupBy(x => x.Item_Name).Count();
                    if (numRecords > 0)
                    {
                        fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString(boqheadline.HeadLine);
                        fillerrow[1] = "";
                        fillerrow[2] = "";
                        fillerrow[3] = "";
                        fillerrow[4] = "";
                        fillerrow[5] = "";
                        fillerrow[6] = "";
                        sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                        foreach (var itemtype in Model.allItems.Where(x => x.Daily_Report_2Id != null && x.Daily_Report_2.VariationOrderId == null && x.BoQNr >= boqheadline.BoQnum && x.BoQNr < (decimal)(boqheadline.BoQnum + 1)).GroupBy(x => x.Item_Name))
                        {
                            var totalamounthours = Model.items.Where(x => x.ItemTypeId.Equals(itemtype.First().ItemTypeId) && x.InstallationId == null && x.MobilizationId == null && x.ArrivalId == null && x.Daily_Report_2Id != null && x.Daily_Report_2.VariationOrderId == null).Sum(x => x.Days);
                            var totalamounthoursalways = Model.allItems.Where(x => x.ItemTypeId.Equals(itemtype.First().ItemTypeId) && x.InstallationId == null && x.MobilizationId == null && x.ArrivalId == null && x.Daily_Report_2Id != null && x.Daily_Report_2.VariationOrderId == null).Sum(x => x.Days);
                            var totalcostHoursalways = Model.allItems.Where(x => x.ItemTypeId.Equals(itemtype.First().ItemTypeId) && x.ArrivalId == null && x.InstallationId == null && x.MobilizationId == null && x.Daily_Report_2Id != null && x.Daily_Report_2.VariationOrderId == null).Sum(x => x.Total_Discount == null ? x.rental_price : x.rental_price - x.Total_Discount);
                            var totalcostHours = Model.items.Where(x => x.ItemTypeId.Equals(itemtype.First().ItemTypeId) && x.ArrivalId == null && x.InstallationId == null && x.MobilizationId == null && x.Daily_Report_2Id != null && x.Daily_Report_2.VariationOrderId == null).Sum(x => x.Total_Discount == null ? x.rental_price : x.rental_price - x.Total_Discount);
                            totalalways += (decimal)totalcostHoursalways;
                            totalthis += (decimal)totalcostHours;
                            fillerrow[0] = itemtype.First().Item_Name;
                            fillerrow[1] = "";
                            fillerrow[2] = "";
                            fillerrow[3] = String.Format("{0:N2}", totalamounthoursalways);
                            fillerrow[4] = String.Format("{0:N2}", totalcostHoursalways) + thevaluta;
                            fillerrow[5] = String.Format("{0:N2}", totalamounthours);
                            fillerrow[6] = String.Format("{0:N2}", totalcostHours) + thevaluta;
                            sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                        }
                    }
                }
                else if (boqheadline.Type.Equals("ExtraWork"))
                {
                    numRecords = Model.allItems.Where(x => (x.ExtraWorkId != null && x.ExtraWork.BoQHeadLineId.Equals(boqheadline.Id)) || (x.InstallationId != null && x.Install.VariationOrderId.Equals(boqheadline.Id)) || (x.Daily_Report_2Id != null && x.Daily_Report_2.VariationOrderId.Equals(boqheadline.Id))).Count();
                    if (numRecords > 0)
                    {
                        fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString(boqheadline.HeadLine);
                        fillerrow[1] = "";
                        fillerrow[2] = "";
                        fillerrow[3] = "";
                        fillerrow[4] = "";
                        fillerrow[5] = "";
                        fillerrow[6] = "";
                        sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                        foreach (var itemtype in Model.allItems.Where(x => (x.ExtraWorkId != null && x.ExtraWork.BoQHeadLineId.Equals(boqheadline.Id)) || (x.InstallationId != null && x.Install.VariationOrderId.Equals(boqheadline.Id)) || (x.Daily_Report_2Id != null && x.Daily_Report_2.VariationOrderId.Equals(boqheadline.Id))).GroupBy(x => x.Item_Name))
                        {
                            var totalamountExtraWork = Model.items.Where(x => x.Item_Name.Equals(itemtype.First().Item_Name) && ((x.ExtraWorkId != null && x.ExtraWork.BoQHeadLineId.Equals(boqheadline.Id)) || (x.InstallationId != null && x.Install.VariationOrderId.Equals(boqheadline.Id)) || (x.Daily_Report_2Id != null && x.Daily_Report_2.VariationOrderId.Equals(boqheadline.Id)))).Sum(x => x.Amount);
                            var totalamountExtraWorkalways = Model.allItems.Where(x => x.Item_Name.Equals(itemtype.First().Item_Name) && ((x.ExtraWorkId != null && x.ExtraWork.BoQHeadLineId.Equals(boqheadline.Id)) || (x.InstallationId != null && x.Install.VariationOrderId.Equals(boqheadline.Id)) || (x.Daily_Report_2Id != null && x.Daily_Report_2.VariationOrderId.Equals(boqheadline.Id)))).Sum(x => x.Amount);
                            if (itemtype.First().Daily_Report_2Id != null)
                            {
                                totalamountExtraWork = Model.items.Where(x => x.Item_Name.Equals(itemtype.First().Item_Name) && ((x.ExtraWorkId != null && x.ExtraWork.BoQHeadLineId.Equals(boqheadline.Id)) || (x.InstallationId != null && x.Install.VariationOrderId.Equals(boqheadline.Id)) || (x.Daily_Report_2Id != null && x.Daily_Report_2.VariationOrderId.Equals(boqheadline.Id)))).Sum(x => x.Days); // x.Amount * x.Days
                                totalamountExtraWorkalways = Model.allItems.Where(x => x.Item_Name.Equals(itemtype.First().Item_Name) && ((x.ExtraWorkId != null && x.ExtraWork.BoQHeadLineId.Equals(boqheadline.Id)) || (x.InstallationId != null && x.Install.VariationOrderId.Equals(boqheadline.Id)) || (x.Daily_Report_2Id != null && x.Daily_Report_2.VariationOrderId.Equals(boqheadline.Id)))).Sum(x => x.Days); // x.Amount * x.Days
                            }
                            var totalcostExtraWorkalways = Model.allItems.Where(x => x.Item_Name.Equals(itemtype.First().Item_Name) && ((x.ExtraWorkId != null && x.ExtraWork.BoQHeadLineId.Equals(boqheadline.Id)) || (x.InstallationId != null && x.Install.VariationOrderId.Equals(boqheadline.Id)) || (x.Daily_Report_2Id != null && x.Daily_Report_2.VariationOrderId.Equals(boqheadline.Id)))).Sum(x => x.rental_price == null ? x.price : x.price == null ? x.rental_price : x.rental_price + x.price);
                            var totalcostExtraWorkalwaysrental = Model.allItems.Where(x => x.Item_Name.Equals(itemtype.First().Item_Name) && ((x.ExtraWorkId != null && x.ExtraWork.BoQHeadLineId.Equals(boqheadline.Id)) || (x.InstallationId != null && x.Install.VariationOrderId.Equals(boqheadline.Id)) || (x.Daily_Report_2Id != null && x.Daily_Report_2.VariationOrderId.Equals(boqheadline.Id)))).Sum(x => x.rental_price);
                            var totalcostExtraWork = Model.items.Where(x => x.Item_Name.Equals(itemtype.First().Item_Name) && ((x.ExtraWorkId != null && x.ExtraWork.BoQHeadLineId.Equals(boqheadline.Id)) || (x.InstallationId != null && x.Install.VariationOrderId.Equals(boqheadline.Id)) || (x.Daily_Report_2Id != null && x.Daily_Report_2.VariationOrderId.Equals(boqheadline.Id)))).Sum(x => x.rental_price == null ? x.price : x.price == null ? x.rental_price : x.rental_price + x.price);
                            var totalcostExtraWorkrental = Model.items.Where(x => x.Item_Name.Equals(itemtype.First().Item_Name) && ((x.ExtraWorkId != null && x.ExtraWork.BoQHeadLineId.Equals(boqheadline.Id)) || (x.InstallationId != null && x.Install.VariationOrderId.Equals(boqheadline.Id)) || (x.Daily_Report_2Id != null && x.Daily_Report_2.VariationOrderId.Equals(boqheadline.Id)))).Sum(x => x.rental_price);
                            totalalways += (decimal)totalcostExtraWorkalways;
                            totalthis += (decimal)totalcostExtraWork;
                            fillerrow[0] = itemtype.First().Item_Name;
                            fillerrow[1] = "";
                            fillerrow[2] = "";
                            fillerrow[3] = String.Format("{0:N2}", totalamountExtraWorkalways);
                            fillerrow[4] = String.Format("{0:N2}", totalcostExtraWorkalways) + thevaluta;
                            fillerrow[5] = String.Format("{0:N2}", totalamountExtraWork);
                            fillerrow[6] = String.Format("{0:N2}", totalcostExtraWork) + thevaluta;
                            sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                        }
                    }
                }


            }
            numRecords = Model.allItems.Where(x => x.ExtraWorkId != null && x.ExtraWork.BoQHeadLineId == null).Count();
            if (numRecords > 0)
            {
                fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString("Extra Works");
                fillerrow[1] = "";
                fillerrow[2] = "";
                fillerrow[3] = "";
                fillerrow[4] = "";
                fillerrow[5] = "";
                fillerrow[6] = "";
                sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                foreach (var itemtype in Model.allItems.Where(x => x.ExtraWorkId != null && x.ExtraWork.BoQHeadLineId == null).GroupBy(x => x.Item_Name))
                {
                    var totalamountExtraWork = Model.items.Where(x => x.Item_Name.Equals(itemtype.First().Item_Name) && x.ExtraWorkId != null).Sum(x => x.Amount);
                    var totalamountExtraWorkalways = Model.allItems.Where(x => x.Item_Name.Equals(itemtype.First().Item_Name) && x.ExtraWorkId != null).Sum(x => x.Amount);
                    var totalcostExtraWorkalways = Model.allItems.Where(x => x.Item_Name.Equals(itemtype.First().Item_Name) && x.ExtraWorkId != null).Sum(x => x.rental_price == null ? x.price : x.price == null ? x.rental_price : x.rental_price + x.price);
                    var totalcostExtraWorkalwaysrental = Model.allItems.Where(x => x.Item_Name.Equals(itemtype.First().Item_Name) && x.ExtraWorkId != null).Sum(x => x.rental_price);
                    var totalcostExtraWork = Model.items.Where(x => x.Item_Name.Equals(itemtype.First().Item_Name) && x.ExtraWorkId != null).Sum(x => x.rental_price == null ? x.price : x.price == null ? x.rental_price : x.rental_price + x.price);
                    var totalcostExtraWorkrental = Model.items.Where(x => x.Item_Name.Equals(itemtype.First().Item_Name) && x.ExtraWorkId != null).Sum(x => x.rental_price);
                    totalalways += (decimal)totalcostExtraWorkalways;
                    totalthis += (decimal)totalcostExtraWork;
                    fillerrow[0] = itemtype.First().Item_Name.Replace("\r\n", "");
                    fillerrow[1] = "";
                    fillerrow[2] = "";
                    fillerrow[3] = String.Format("{0:N2}", totalamountExtraWorkalways);
                    fillerrow[4] = String.Format("{0:N2}", totalcostExtraWorkalways) + thevaluta;
                    fillerrow[5] = String.Format("{0:N2}", totalamountExtraWork);
                    fillerrow[6] = String.Format("{0:N2}", totalcostExtraWork) + thevaluta;
                    sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
                }
            }
            fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString("Total (excl. VAT)");
            fillerrow[1] = "";
            fillerrow[2] = "";
            fillerrow[3] = "";
            fillerrow[4] = String.Format("{0:N2} ", totalalways) + thevaluta;
            fillerrow[5] = "";
            fillerrow[6] = String.Format("{0:N2} ", totalthis) + thevaluta;
            sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
            fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString("Previously Applied (excl. VAT)");
            fillerrow[1] = "";
            fillerrow[2] = "";
            fillerrow[3] = "";
            fillerrow[4] = String.Format("{0:N2} ", Model.AllPayments.Sum(x => x.Amount)) + thevaluta;
            fillerrow[5] = "";
            fillerrow[6] = String.Format("{0:N2} ", Model.Payments.Sum(x => x.Amount)) + thevaluta;
            sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));
            fillerrow[0] = _SharedLocalizer.GetLocalizedHtmlString("Remainder to be paid (excl. VAT)");
            fillerrow[1] = "";
            fillerrow[2] = "";
            fillerrow[3] = "";
            fillerrow[4] = String.Format("{0:N2} ", (totalalways - Model.AllPayments.Sum(x => x.Amount))) + thevaluta;
            fillerrow[5] = "";
            fillerrow[6] = String.Format("{0:N2} ", totalthis - Model.Payments.Sum(x => x.Amount)) + thevaluta;
            sb.AppendLine(string.Join(delimiter, fillerrow.ToArray()));


            return sb;
        }
        public decimal CalculateWeekendHours(Daily_Report_2 DR)
        {
            if (DR.ProjectId.Equals(437))
            {
                if (DR.Report_Date.Date.DayOfWeek == DayOfWeek.Saturday || DR.Report_Date.Date.DayOfWeek == DayOfWeek.Sunday)
                {
                    if (DR.StartHour.TotalHours < DR.EndHour.TotalHours)
                    {
                        return (decimal)(DR.EndHour - DR.StartHour).TotalHours;
                    }
                    else
                    {
                        return (decimal)(DR.EndHour.TotalHours + 24.0 - DR.StartHour.TotalHours);
                    }
                }
                else
                {
                    return (decimal)0.0;
                }
            }
            else
            {
                return (decimal)0.0;
            }
        }
        public decimal CalculateNightTime(Daily_Report_2 DR, TimeSpan starttime, TimeSpan endtime, ItemType nighttime, ItemType itemtype)
        {
            
            if (DR.StartHour.TotalHours >= 6.0 && DR.StartHour.TotalHours <= 18.0 && DR.EndHour.TotalHours >= 6.0 && DR.EndHour.TotalHours <= 18.0)
            {
                if (DR.StartHour > DR.EndHour)
                {
                    return (decimal)13.0;
                }
                else
                {
                    return (decimal)0.0;
                }

            }
            //if start hour outside work hours
            else if (DR.StartHour.TotalHours >= 18)
            {
                //if ends before midnight
                if (DR.EndHour.TotalHours < 24)
                {
                    return (decimal)(DR.EndHour - DR.StartHour).TotalHours;
                }
                if (DR.EndHour.TotalHours < 7)
                {
                    return (decimal)24.00 - (decimal)(DR.StartHour + DR.EndHour).TotalHours;
                }
                else
                {
                    return (decimal)24.00 - (decimal)(DR.StartHour).TotalHours + (decimal)7.00;
                }
            }
            //if start hour before work hours
            else if (DR.StartHour.TotalHours < 6)
            {
                if (DR.EndHour.TotalHours < 6)
                {
                    //var itemtype = await _context.ItemTypes.FindAsync(DR.Title.ItemTypeId);
                    //var nighttime = await _context.ItemTypes.Where(x => x.Item_Type.ToLower().Contains("night")).FirstAsync();
                    //int nighthours = DR.EndHour.Hours - DR.StartHour.Hours;
                    return (decimal)(DR.EndHour - DR.StartHour).TotalHours;
                }
                if (DR.EndHour.TotalHours >= 6 && DR.EndHour.TotalHours < 18)
                {
                    return (decimal)6.00 - (decimal)(DR.StartHour).TotalHours;
                }
                if (DR.EndHour.TotalHours >= 18)
                {
                    return (decimal)(DR.EndHour).TotalHours - (decimal)18.00 + (decimal)6.0 - (decimal)(DR.StartHour).TotalHours;
                }
                else
                {
                    return (decimal)6.00 - (decimal)(DR.StartHour).TotalHours;
                }
            }
            //starttime within normal hours
            else
            {
                //endtime before midnight
                if (DR.EndHour.Hours >= 18)
                {
                    return (decimal)(DR.EndHour).TotalHours - (decimal)18.00;
                }
                //endtime after midnight
                else if (DR.EndHour.Hours < 6)
                {
                    return (decimal)6.00 + (decimal)(DR.EndHour).TotalHours;
                }
                else
                {
                    return (decimal)0.0;
                }
            }
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> UploadGroutTestData(int? id)
        {
            if (id != null)
            {
                var test = await _context.Groutings.FindAsync(id);
                GroutTestDataUploadVM model = new GroutTestDataUploadVM();
                model.GroutingId = test.Id;
                return View("UploadGroutTestData", model);
            }
            else { return NotFound(); }

        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> UploadGroutTestData(GroutTestDataUploadVM model, IFormFile postedFile)
        {
            if (postedFile != null)
            {
                string fileExtension = Path.GetExtension(postedFile.FileName);

                //Validate uploaded file and return error.
                if (fileExtension != ".csv")
                {
                    return NotFound();
                }
                using (var sreader = new StreamReader(postedFile.OpenReadStream()))
                {
                    while (!sreader.EndOfStream)
                    {
                        GroutTestDataDevice datapoint = new GroutTestDataDevice();
                        string[] rows = sreader.ReadLine().Split(',');
                        if (rows[0] != "")
                        {
                            datapoint.TimeStamp = Convert.ToDateTime(rows[0]);
                            datapoint.FlowData = Convert.ToDouble(rows[1].Trim());
                            datapoint.GroutingId = model.GroutingId;
                            _context.Add(datapoint);
                        }
                    }
                    await _context.SaveChangesAsync();
                }
            }

            //return RedirectToAction("Groutings");
            return RedirectToAction("Groutings");
        }
        [HttpGet]
        public async Task<IActionResult> GroutChart(int? id)
        {
            if (id != null)
            {
                var grout = await _context.Groutings.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject)
                    .Include(x => x.Data).Include(x => x.Before_Photos).Include(x => x.Grout_Photos).Include(x => x.After_Photos)
                    .Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                return View("Reports/_GroutingPicture", grout);
            }
            else { return NotFound(); }
        }
        [HttpGet]
        public async Task<IActionResult> Edit_Grouting(int? id)
        {
            if (id != null)
            {
                var user = await _userManager.GetUserAsync(User);
                var grout = await _context.Groutings.FindAsync(id);
                ViewData["ProjectId"] = await GetProjectList();
                ViewData["SubProjectId"] = new SelectList(_context.SubProjects.Include(x => x.Project).Where(x => x.Project.DivisionId.Equals(user.DivisionId)), "Id", "Name");
                return View("Reports/Edit_Grouting", grout);
            }
            else
            {
                return NotFound();
            }
        }
        [HttpPost]
        [RequestSizeLimit(900000000)]
        public async Task<IActionResult> Edit_Grouting(Grouting model, IFormFile photo1, IFormFile photo2, IFormFile photo3, IFormFile photo4, IFormFile photo5)
        {
            if (ModelState.IsValid)
            {
                var user = await _userManager.GetUserAsync(User);
                //model.DoneBy = user.full_name();
                //model.ReportChecked = false;
                _context.Update(model);
                await _context.SaveChangesAsync();
                var potentialinstall = await _context.Installations.SingleOrDefaultAsync(x => x.Install_Text.Equals("Grouting: " + model.Id.ToString()));
                if (potentialinstall != null)
                {
                    potentialinstall.Amount = model.Totalm3 * 1000.0;
                    _context.Update(potentialinstall);
                    await _context.SaveChangesAsync();
                }
                if (photo1 != null || photo2 != null || photo3 != null || photo4 != null || photo5 != null)
                {
                    if (photo1 != null)
                    {
                        var directory = _env.WebRootPath + "\\AHAK\\Grouting\\Before\\" + model.Id.ToString() + "\\";
                        if (!Directory.Exists(directory) && photo1 != null)
                        {
                            Directory.CreateDirectory(directory);
                        }
                        var path = Path.Combine(directory, photo1.FileName);
                        GroutBeforePhoto pic = new GroutBeforePhoto { GroutingId = model.Id, TimeStamp = DateTime.Now, path = path };
                        _context.Add(pic);
                        using (var stream = new FileStream(path, FileMode.Create))
                        {
                            await photo1.CopyToAsync(stream);
                        };
                        if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                        {
                            PhotoExtensions.SaveAndCompressJpeg(path, 95);
                        }
                    }
                    if (photo2 != null)
                    {
                        var directory = _env.WebRootPath + "\\AHAK\\Grouting\\Grouted\\" + model.Id.ToString() + "\\";
                        if (!Directory.Exists(directory) && photo2 != null)
                        {
                            Directory.CreateDirectory(directory);
                        }
                        var path = Path.Combine(directory, photo2.FileName);
                        GroutGroutPhoto pic = new GroutGroutPhoto { GroutingId = model.Id, TimeStamp = DateTime.Now, path = path };
                        _context.Add(pic);
                        using (var stream = new FileStream(path, FileMode.Create))
                        {
                            await photo2.CopyToAsync(stream);
                        };
                        if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                        {
                            PhotoExtensions.SaveAndCompressJpeg(path, 95);
                        }
                    }
                    if (photo3 != null)
                    {
                        var directory = _env.WebRootPath + "\\AHAK\\Grouting\\After\\" + model.Id.ToString() + "\\";
                        if (!Directory.Exists(directory) && photo3 != null)
                        {
                            Directory.CreateDirectory(directory);
                        }
                        var path = Path.Combine(directory, photo3.FileName);
                        GroutAfterPhoto pic = new GroutAfterPhoto { GroutingId = model.Id, TimeStamp = DateTime.Now, path = path };
                        _context.Add(pic);
                        using (var stream = new FileStream(path, FileMode.Create))
                        {
                            await photo3.CopyToAsync(stream);
                        };
                        if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                        {
                            PhotoExtensions.SaveAndCompressJpeg(path, 95);
                        }
                    }
                    if (photo4 != null)
                    {
                        var directory = _env.WebRootPath + "\\AHAK\\Grouting\\WMBefore\\" + model.Id.ToString() + "\\";
                        if (!Directory.Exists(directory) && photo4 != null)
                        {
                            Directory.CreateDirectory(directory);
                        }
                        var path = Path.Combine(directory, photo4.FileName);
                        GroutWMBeforePhoto pic = new GroutWMBeforePhoto { GroutingId = model.Id, TimeStamp = DateTime.Now, path = path };
                        _context.Add(pic);
                        using (var stream = new FileStream(path, FileMode.Create))
                        {
                            await photo4.CopyToAsync(stream);
                        };
                        if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                        {
                            PhotoExtensions.SaveAndCompressJpeg(path, 95);
                        }
                    }
                    if (photo5 != null)
                    {
                        var directory = _env.WebRootPath + "\\AHAK\\Grouting\\WMAfter\\" + model.Id.ToString() + "\\";
                        if (!Directory.Exists(directory) && photo5 != null)
                        {
                            Directory.CreateDirectory(directory);
                        }
                        var path = Path.Combine(directory, photo5.FileName);
                        GroutWMAfterPhoto pic = new GroutWMAfterPhoto { GroutingId = model.Id, TimeStamp = DateTime.Now, path = path };
                        _context.Add(pic);
                        using (var stream = new FileStream(path, FileMode.Create))
                        {
                            await photo5.CopyToAsync(stream);
                        };
                        if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                        {
                            PhotoExtensions.SaveAndCompressJpeg(path, 95);
                        }
                    }
                    await _context.SaveChangesAsync();
                }
                return RedirectToAction("Groutings");
            }
            else
            {
                return View(model);
            }
        }
        [HttpGet]
        public async Task<IActionResult> Grouting()
        {
            ViewData["ProjectId"] = await GetProjectList();
            return View();
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Groutings()
        {
            var user = await _userManager.GetUserAsync(User);
            var grouts = await _context.Groutings.Include(x => x.Project).Include(x => x.SubProject).Include(x => x.Data).Where(x => x.Project.DivisionId.Equals(user.DivisionId) && x.StartTime.Date >= DateTime.Now.AddDays(-100)).OrderBy(x => x.StartTime).ThenBy(x => x.EndTime).ToListAsync();
            return View("Reports/Groutings", grouts);
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        [RequestSizeLimit(900000000)]
        public async Task<IActionResult> Grouting(Grouting model, IFormFile photo1, IFormFile photo2, IFormFile photo3, IFormFile photo4, IFormFile photo5)
        {
            if (ModelState.IsValid)
            {
                var user = await _userManager.GetUserAsync(User);
                model.DoneBy = user.full_name();
                try
                {
                    model.Location = FindNearestKM(model.ProjectId, model.Latitude, model.Longitude);
                }
                catch
                {

                }
                _context.Add(model);
                await _context.SaveChangesAsync();
                var lastadded = await _context.Groutings.LastAsync();
                var directory1 = _env.WebRootPath + "\\AHAK\\Grouting\\Before\\" + lastadded.Id.ToString() + "\\";
                if (!Directory.Exists(directory1) && photo1 != null)
                {
                    Directory.CreateDirectory(directory1);
                }
                var directory2 = _env.WebRootPath + "\\AHAK\\Grouting\\Grouted\\" + lastadded.Id.ToString() + "\\";
                if (!Directory.Exists(directory2) && photo2 != null)
                {
                    Directory.CreateDirectory(directory2);
                }
                var directory3 = _env.WebRootPath + "\\AHAK\\Grouting\\After\\" + lastadded.Id.ToString() + "\\";
                if (!Directory.Exists(directory3) && photo3 != null)
                {
                    Directory.CreateDirectory(directory3);
                }
                var directory4 = _env.WebRootPath + "\\AHAK\\Grouting\\WMBefore\\" + lastadded.Id.ToString() + "\\";
                if (!Directory.Exists(directory4) && photo4 != null)
                {
                    Directory.CreateDirectory(directory4);
                }
                var directory5 = _env.WebRootPath + "\\AHAK\\Grouting\\WMAfter\\" + lastadded.Id.ToString() + "\\";
                if (!Directory.Exists(directory5) && photo5 != null)
                {
                    Directory.CreateDirectory(directory5);
                }
                if (photo1 != null)
                {
                    var path1 = Path.Combine(directory1, photo1.FileName);
                    GroutBeforePhoto pic = new GroutBeforePhoto { GroutingId = lastadded.Id, TimeStamp = DateTime.Now, path = path1 };
                    _context.Add(pic);
                    using (var stream = new FileStream(path1, FileMode.Create))
                    {
                        await photo1.CopyToAsync(stream);
                    };
                    if (path1.ToLower().Contains(".jpg") || path1.ToLower().Contains(".jpeg"))
                    {
                        PhotoExtensions.SaveAndCompressJpeg(path1, 95);
                    }
                }
                if (photo2 != null)
                {
                    var path2 = Path.Combine(directory2, photo2.FileName);
                    GroutGroutPhoto pic = new GroutGroutPhoto { GroutingId = lastadded.Id, TimeStamp = DateTime.Now, path = path2 };
                    _context.Add(pic);
                    using (var stream = new FileStream(path2, FileMode.Create))
                    {
                        await photo2.CopyToAsync(stream);
                    };
                    if (path2.ToLower().Contains(".jpg") || path2.ToLower().Contains(".jpeg"))
                    {
                        PhotoExtensions.SaveAndCompressJpeg(path2, 95);
                    }
                }
                if (photo3 != null)
                {
                    var path3 = Path.Combine(directory3, photo3.FileName);
                    GroutAfterPhoto pic = new GroutAfterPhoto { GroutingId = lastadded.Id, TimeStamp = DateTime.Now, path = path3 };
                    _context.Add(pic);
                    using (var stream = new FileStream(path3, FileMode.Create))
                    {
                        await photo3.CopyToAsync(stream);
                    };
                    if (path3.ToLower().Contains(".jpg") || path3.ToLower().Contains(".jpeg"))
                    {
                        PhotoExtensions.SaveAndCompressJpeg(path3, 95);
                    }
                }
                if (photo4 != null)
                {
                    var path4 = Path.Combine(directory4, photo4.FileName);
                    GroutWMBeforePhoto pic = new GroutWMBeforePhoto { GroutingId = lastadded.Id, TimeStamp = DateTime.Now, path = path4 };
                    _context.Add(pic);
                    using (var stream = new FileStream(path4, FileMode.Create))
                    {
                        await photo4.CopyToAsync(stream);
                    };
                    if (path4.ToLower().Contains(".jpg") || path4.ToLower().Contains(".jpeg"))
                    {
                        PhotoExtensions.SaveAndCompressJpeg(path4, 95);
                    }
                }
                if (photo5 != null)
                {
                    var path5 = Path.Combine(directory5, photo5.FileName);
                    GroutWMAfterPhoto pic = new GroutWMAfterPhoto { GroutingId = lastadded.Id, TimeStamp = DateTime.Now, path = path5 };
                    _context.Add(pic);
                    using (var stream = new FileStream(path5, FileMode.Create))
                    {
                        await photo5.CopyToAsync(stream);
                    };
                    if (path5.ToLower().Contains(".jpg") || path5.ToLower().Contains(".jpeg"))
                    {
                        PhotoExtensions.SaveAndCompressJpeg(path5, 95);
                    }
                }
                await _context.SaveChangesAsync();
                return RedirectToAction("Groutings");
            }
            else
            {
                return View(model);
            }
        }
        [HttpPost]
        public async Task<IActionResult> Grouting_PDF(int? id, string theimage)
        {
            if (id != null)
            {
                var grout = await _context.Groutings.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject)
                    .Include(x => x.Data).Include(x => x.Before_Photos).Include(x => x.Grout_Photos).Include(x => x.After_Photos)
                    .Include(x => x.WM_Before_Photos).Include(x => x.WM_After_Photos)
                    .Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                grout.imagepath = theimage;
                _context.Update(grout);
                await _context.SaveChangesAsync();
                string customSwitches = string.Format("--debug-javascript --no-stop-slow-scripts --javascript-delay 10000");
                return new ViewAsPdf("Reports/_GroutingPDF", grout)
                {
                    CustomSwitches = customSwitches
                };
                //return View("Reports/_Grouting", grout);
            }
            else
            {
                return RedirectToAction(nameof(Index));
            }
        }
        [HttpGet]
        public async Task<IActionResult> Grouting_PDF(int? id)
        {
            if (id != null)
            {
                var grout = await _context.Groutings.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject)
                    .Include(x => x.Data).Include(x => x.Before_Photos).Include(x => x.Grout_Photos).Include(x => x.After_Photos)
                    .Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                string customSwitches = string.Format("--debug-javascript --no-stop-slow-scripts --javascript-delay 10000");
                return new ViewAsPdf("Reports/_GroutingPDF", grout)
                {
                    CustomSwitches = customSwitches
                };
                //return View("Reports/_Grouting", grout);
            }
            else
            {
                return RedirectToAction(nameof(Index));
            }
        }
        [HttpGet]
        public async Task<IActionResult> GroutingReport(int? id)
        {
            if (id != null)
            {
                var grout = await _context.Groutings.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject)
                    .Include(x => x.Data).Include(x => x.Before_Photos).Include(x => x.Grout_Photos).Include(x => x.After_Photos)
                    .Include(x => x.WM_Before_Photos).Include(x => x.WM_After_Photos)
                    .Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();

                return View("Reports/_Grouting", grout);
            }
            else
            {
                return RedirectToAction(nameof(Index));
            }
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> UploadClearPumpTestData(int? id)
        {
            if (id != null)
            {
                var test = await _context.ClearPumpTests.FindAsync(id);
                PumpTestDataUploadVM model = new PumpTestDataUploadVM();
                model.ThreeStepTestId = test.Id;
                return View("UploadClearPumpTestData", model);
            }
            else { return NotFound(); }

        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> UploadClearPumpTestData(PumpTestDataUploadVM model, IFormFile postedFile)
        {
            if (postedFile != null)
            {
                string fileExtension = Path.GetExtension(postedFile.FileName);

                //Validate uploaded file and return error.
                if (fileExtension != ".csv")
                {
                    return NotFound();
                }
                using (var sreader = new StreamReader(postedFile.OpenReadStream()))
                {
                    if(model.WasysData == true)
                    {
                        var header = sreader.ReadLine();
                    }
                    while (!sreader.EndOfStream)
                    {
                        ClearPumpTestDataDevice datapoint = new ClearPumpTestDataDevice();
                        if(model.WasysData == true)
                        {
                            string[] rows = sreader.ReadLine().Split(';');
                            try
                            {
                                datapoint.TimeStamp = Convert.ToDateTime(rows[0]); //expects yyyy-MM-dd HH:mm:ss.ffffff (local time)
                            }
                            catch
                            {
                                try
                                {
                                    datapoint.TimeStamp = DateTime.ParseExact(rows[0].Replace(",", "."), "yyyy-MM-dd HH:mm:ss.ffffff zzz", null);
                                }
                                catch
                                {
                                    try
                                    {
                                        datapoint.TimeStamp = DateTime.ParseExact(rows[0].Replace(",", "."), "dd-MM-yyyy HH:mm:ss.fff", null);
                                    }
                                    catch
                                    {
                                        try
                                        {
                                            datapoint.TimeStamp = DateTime.ParseExact(rows[0].Replace(",", "."), "dd-MM-yy HH:mm:ss", null);
                                        }
                                        catch
                                        {
                                            RedirectToAction("ErrorMessage", "Home", new { text = "Please provide the date time in one of the following formats {yyyy-MM-dd HH:mm:ss.ffffff ; yyyy-MM-dd HH:mm:ss.ffffff zzz ; dd-MM-yyyy HH:mm:ss.fff ; dd-MM-yy HH:mm:ss" });
                                        }

                                    }
                                }

                            }


                            datapoint.PumpLevelData = -1.0*Convert.ToDouble(rows[1].Replace(",", ".").Trim());
                            datapoint.FlowData = Convert.ToDouble(rows[2].Replace(",", ".").Trim());
                            datapoint.ClearPumpTestId = model.ThreeStepTestId;
                            _context.Add(datapoint);
                            
                            
                        }
                        else {
                            string[] rows = sreader.ReadLine().Split(',');

                            if(rows.Length < 2)
                            {
                                rows = rows[0].Split(";");
                            }
                            if(rows[0] != "")
                            {
                                try
                                {
                                    datapoint.TimeStamp = Convert.ToDateTime(rows[0]); //expects yyyy-MM-dd HH:mm:ss.ffffff (local time)
                                }
                                catch
                                {
                                    try
                                    {
                                        datapoint.TimeStamp = DateTime.ParseExact(rows[0].Replace(",", "."), "yyyy-MM-dd HH:mm:ss.ffffff zzz", null);
                                    }
                                    catch
                                    {
                                        try
                                        {
                                            datapoint.TimeStamp = DateTime.ParseExact(rows[0].Replace(",", "."), "dd-MM-yyyy HH:mm:ss.fff", null);
                                        }
                                        catch
                                        {
                                            try
                                            {
                                                datapoint.TimeStamp = DateTime.ParseExact(rows[0].Replace(",", "."), "dd-MM-yy HH:mm:ss", null);
                                            }
                                            catch
                                            {
                                                RedirectToAction("ErrorMessage", "Home", new { text = "Please provide the date time in one of the following formats {yyyy-MM-dd HH:mm:ss.ffffff ; yyyy-MM-dd HH:mm:ss.ffffff zzz ; dd-MM-yyyy HH:mm:ss.fff ; dd-MM-yy HH:mm:ss" });
                                            }

                                        }
                                    }

                                }

                            }
                            if (rows[0] != "" && rows.Length > 4)
                            {
                                //datapoint.TimeStamp = Convert.ToDateTime(rows[0]);
                                datapoint.PumpLevelData = Convert.ToDouble(rows[1].Trim());
                                datapoint.Moni1LevelData = Convert.ToDouble(rows[2].Trim());
                                datapoint.Moni2LevelData = Convert.ToDouble(rows[3].Trim());
                                datapoint.FlowData = Convert.ToDouble(rows[4].Trim());
                                datapoint.ClearPumpTestId = model.ThreeStepTestId;
                                _context.Add(datapoint);
                            }
                            else if (rows[0] != "" && rows.Length > 3)
                            {
                                //datapoint.TimeStamp = Convert.ToDateTime(rows[0]);
                                datapoint.PumpLevelData = Convert.ToDouble(rows[1].Trim());
                                datapoint.Moni1LevelData = Convert.ToDouble(rows[2].Trim());
                                datapoint.FlowData = Convert.ToDouble(rows[3].Trim());
                                datapoint.ClearPumpTestId = model.ThreeStepTestId;
                                _context.Add(datapoint);
                            }
                            else if (rows[0] != "" && rows.Length > 2)
                            {
                                //datapoint.TimeStamp = Convert.ToDateTime(rows[0]);
                                datapoint.PumpLevelData = Convert.ToDouble(rows[1].Trim());
                                datapoint.FlowData = Convert.ToDouble(rows[2].Trim());
                                datapoint.ClearPumpTestId = model.ThreeStepTestId;
                                _context.Add(datapoint);
                            }
                            else if(rows[0] != "" && rows.Length > 1)
                            {
                                //datapoint.TimeStamp = Convert.ToDateTime(rows[0]);
                                datapoint.PumpLevelData = Convert.ToDouble(rows[1].Trim());
                                datapoint.ClearPumpTestId = model.ThreeStepTestId;
                                datapoint.FlowData = null;
                                _context.Add(datapoint);
                            }
                         }
                    }
                    await _context.SaveChangesAsync();
                }
            }
            return RedirectToAction("ClearPumptests");
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> UploadTestData(int? id)
        {
            if (id != null)
            {
                var test = await _context.ThreeStepTests.FindAsync(id);
                PumpTestDataUploadVM model = new PumpTestDataUploadVM();
                model.ThreeStepTestId = test.Id;
                return View("UploadPumpTestData", model);
            }
            else { return NotFound(); }

        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> UploadPumpTestData(PumpTestDataUploadVM model, IFormFile postedFile)
        {
            if (postedFile != null)
            {
                string fileExtension = Path.GetExtension(postedFile.FileName);

                //Validate uploaded file and return error.
                if (fileExtension != ".csv")
                {
                    return NotFound();
                }
                using (var sreader = new StreamReader(postedFile.OpenReadStream()))
                {
                    while (!sreader.EndOfStream)
                    {
                        PumpTestDataDevice datapoint = new PumpTestDataDevice();
                        string[] rows = sreader.ReadLine().Split(',');
                        if(rows[0] != "")
                        {
                            try
                            {
                                datapoint.TimeStamp = Convert.ToDateTime(rows[0]); //expects yyyy-MM-dd HH:mm:ss.ffffff (local time)
                            }
                            catch
                            {
                                try
                                {
                                    datapoint.TimeStamp = DateTime.ParseExact(rows[0].Replace(",", "."), "yyyy-MM-dd HH:mm:ss.ffffff zzz", null);
                                }
                                catch
                                {
                                    try
                                    {
                                        datapoint.TimeStamp = DateTime.ParseExact(rows[0].Replace(",", "."), "dd-MM-yyyy HH:mm:ss.fff", null);
                                    }
                                    catch
                                    {
                                        try
                                        {
                                            datapoint.TimeStamp = DateTime.ParseExact(rows[0].Replace(",", "."), "dd-MM-yy HH:mm:ss", null);
                                        }
                                        catch
                                        {
                                            RedirectToAction("ErrorMessage", "Home", new { text = "Please provide the date time in one of the following formats {yyyy-MM-dd HH:mm:ss.ffffff ; yyyy-MM-dd HH:mm:ss.ffffff zzz ; dd-MM-yyyy HH:mm:ss.fff ; dd-MM-yy HH:mm:ss" });
                                        }

                                    }
                                }

                            }
                        }
                        if (rows[0] != "" && rows.Length > 6)
                        {
                            //datapoint.TimeStamp = Convert.ToDateTime(rows[0]);
                            datapoint.PumpLevelData = Convert.ToDouble(rows[1].Trim());
                            datapoint.Moni1LevelData = Convert.ToDouble(rows[2].Trim());
                            datapoint.Moni2LevelData = Convert.ToDouble(rows[3].Trim());
                            datapoint.Moni3LevelData = Convert.ToDouble(rows[4].Trim());
                            datapoint.Moni4LevelData = Convert.ToDouble(rows[5].Trim());
                            datapoint.FlowData = Convert.ToDouble(rows[6].Trim());
                            datapoint.ThreeStepTestId = model.ThreeStepTestId;
                            _context.Add(datapoint);
                        }
                        else if (rows[0] != "" && rows.Length > 5)
                        {
                            //datapoint.TimeStamp = Convert.ToDateTime(rows[0]);
                            datapoint.PumpLevelData = Convert.ToDouble(rows[1].Trim());
                            datapoint.Moni1LevelData = Convert.ToDouble(rows[2].Trim());
                            datapoint.Moni2LevelData = Convert.ToDouble(rows[3].Trim());
                            datapoint.Moni3LevelData = Convert.ToDouble(rows[4].Trim());
                            datapoint.FlowData = Convert.ToDouble(rows[5].Trim());
                            datapoint.ThreeStepTestId = model.ThreeStepTestId;
                            _context.Add(datapoint);
                        }
                        else if (rows[0] != "" && rows.Length > 4)
                        {
                            //datapoint.TimeStamp = Convert.ToDateTime(rows[0]);
                            datapoint.PumpLevelData = Convert.ToDouble(rows[1].Trim());
                            datapoint.Moni1LevelData = Convert.ToDouble(rows[2].Trim());
                            datapoint.Moni2LevelData = Convert.ToDouble(rows[3].Trim());
                            datapoint.FlowData = Convert.ToDouble(rows[4].Trim());
                            datapoint.ThreeStepTestId = model.ThreeStepTestId;
                            _context.Add(datapoint);
                        }
                        else if (rows[0] != "" && rows.Length > 3)
                        {
                            //datapoint.TimeStamp = Convert.ToDateTime(rows[0]);
                            datapoint.PumpLevelData = Convert.ToDouble(rows[1].Trim());
                            datapoint.Moni1LevelData = Convert.ToDouble(rows[2].Trim());
                            datapoint.FlowData = Convert.ToDouble(rows[3].Trim());
                            datapoint.ThreeStepTestId = model.ThreeStepTestId;
                            _context.Add(datapoint);
                        }
                        else if (rows[0] != "" && rows.Length > 2)
                        {
                            //datapoint.TimeStamp = Convert.ToDateTime(rows[0]);
                            datapoint.PumpLevelData = Convert.ToDouble(rows[1].Trim());
                            datapoint.FlowData = Convert.ToDouble(rows[2].Trim());
                            datapoint.ThreeStepTestId = model.ThreeStepTestId;
                            _context.Add(datapoint);
                        }
                    }
                    await _context.SaveChangesAsync();
                }
            }
            return RedirectToAction("Pumptests");
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> ClearPumpTests()
        {
            var user = await _userManager.GetUserAsync(User);
            var pumptests = await _context.ClearPumpTests.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.Project.DivisionId.Equals(user.DivisionId)).OrderByDescending(x => x.Report_Date).ToListAsync();
            return View("Reports/ClearPumpTests", pumptests);
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> PumpTests()
        {
            var user = await _userManager.GetUserAsync(User);
            var pumptests = await _context.ThreeStepTests.Include(x => x.Project).ThenInclude(x => x.Division).Where(x => x.Project.DivisionId.Equals(user.DivisionId)).OrderByDescending(x => x.Report_Date).ToListAsync();
            return View("Reports/PumpTests", pumptests);
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager")]
        public async Task<IActionResult> DeleteDataPumpTest(int? id)
        {
            if (id != null)
            {
                var testdata = await _context.PumpTestDatasDevice.Where(x => x.ThreeStepTestId.Equals(id)).ToListAsync();
                foreach (var item in testdata)
                {
                    _context.Remove(item);

                }
                await _context.SaveChangesAsync();
                return RedirectToAction("PumpTests");
            }
            else
            {
                return NotFound();
            }
        }
        [HttpGet]
        [AllowAnonymous]
        public async Task<JsonResult> JsonDataPumpTest(int id)
        {
            var datalist = new List<PumpTestDataDevice>();
            var datas_device = await _context.PumpTestDatasDevice.Where(x => x.ThreeStepTestId.Equals(id)
            //&& x.PumpLevelData > -10000 && x.PumpLevelData < 10000
            //&& x.Moni1LevelData > -10000 && x.Moni1LevelData < 10000
            //&& x.Moni2LevelData > -10000 && x.Moni2LevelData < 10000
            )
            .ToListAsync();
            foreach (var item in datas_device)
            {
                PumpTestDataDevice dat = new PumpTestDataDevice();
                dat.Id = item.Id;
                dat.TimeStamp = item.TimeStamp;
                dat.PumpLevelData = item.PumpLevelData;
                dat.Moni1LevelData = item.Moni1LevelData;
                dat.Moni2LevelData = item.Moni2LevelData;
                dat.Moni3LevelData = item.Moni3LevelData;
                dat.Moni4LevelData = item.Moni4LevelData;
                dat.FlowData = item.FlowData;

                datalist.Add(dat);
            }
            //var data = datalist.ToArray();
            return Json(datalist.OrderBy(x => x.TimeStamp));
        }
        [HttpGet]
        [AllowAnonymous]
        public async Task<JsonResult> JsonDataClearPumpTest_2(int id)
        {
            var datalist = new List<ClearPumpTestDataDevice>();
            var datas_device = await _context.ClearPumpTestDatasDevice.Where(x => x.ClearPumpTestId.Equals(id)
            //&& x.PumpLevelData > -10000 && x.PumpLevelData < 10000
            //&& x.Moni1LevelData > -10000 && x.Moni1LevelData < 10000
            //&& x.Moni2LevelData > -10000 && x.Moni2LevelData < 10000
            )
            .ToListAsync();
            foreach (var item in datas_device)
            {
                ClearPumpTestDataDevice dat = new ClearPumpTestDataDevice();
                dat.Id = item.Id;
                dat.TimeStamp = item.TimeStamp;
                dat.PumpLevelData = item.PumpLevelData;
                dat.Moni1LevelData = item.Moni1LevelData;
                dat.Moni2LevelData = item.Moni2LevelData;
                dat.FlowData = item.FlowData;

                datalist.Add(dat);
            }
            //var data = datalist.ToArray();
            return Json(datalist.OrderBy(x => x.TimeStamp));
        }
        [HttpGet]
        [AllowAnonymous]
        public async Task<JsonResult> JsonDataClearPumpTest(int id)
        {
            var test = await _context.ClearPumpTests.Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
            var datalist = new List<ClearPumpTestDataVM>();
            var datas_device = await _context.ClearPumpTestDatas.Where(x => x.ClearPumpTestId.Equals(id))
            .ToListAsync();
            foreach (var d in datas_device)
            {
                ClearPumpTestDataVM dat = new ClearPumpTestDataVM();
                dat.TimeStamp = test.Report_Date.Date + d.TimeStamp;
                if (d.Dip != null)
                {
                    dat.Dip = test.Ref_Level - d.Dip;
                }
                else
                {
                    dat.Dip = 0;
                }
                if (d.Flow != null)
                {
                    dat.Flow = d.Flow;
                }
                else
                {
                    dat.Flow = 0;
                }
                dat.m3 = d.m3;
                datalist.Add(dat);
            }
            return Json(datalist.OrderBy(x => x.TimeStamp));
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager")]
        public async Task<IActionResult> DeleteDataGrouting(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }
            var data = await _context.GroutDataDevice.Where(x => x.GroutingId.Equals(id)).ToListAsync();
            foreach (GroutTestDataDevice datapoint in data)
            {
                _context.Remove(datapoint);
            }
            await _context.SaveChangesAsync();
            return RedirectToAction("Groutings");
        }
        [HttpPost]
        [Authorize(Roles = "DivisionAdmin,Admin,Manager")]
        public async Task<IActionResult> DeleteDataPoint(int id, int selectedRow, int selectedCol)
        {
            var test = await _context.ThreeStepTests.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
            var datas_dips = await _context.PumpTestDatas.Where(x => x.ThreeStepTestId.Equals(id)).ToListAsync();
            var datas_device1 = await _context.PumpTestDatasDevice.Where(x => x.ThreeStepTestId.Equals(id)
            && ((x.PumpLevelData > -10000 && x.PumpLevelData < 10000) || x.PumpLevelData == null)
            && ((x.Moni1LevelData > -10000 && x.Moni1LevelData < 10000) || x.Moni1LevelData == null)
            && ((x.Moni2LevelData > -10000 && x.Moni2LevelData < 10000) || x.Moni2LevelData == null)).ToListAsync();
            var photos = await _context.PumpTestPhotos.Where(x => x.ThreeStepTestId.Equals(id)).ToListAsync();

            //return new ViewAsPdf("Reports/_PumpTest",report);

            var orderedlist = datas_device1.OrderBy(x => x.TimeStamp);
            int i = 0;
            foreach (var da in orderedlist)
            {
                if (i.Equals(selectedRow))
                {
                    if (selectedCol.Equals(1))
                    {
                        da.PumpLevelData = null;
                    }
                    if (selectedCol.Equals(2))
                    {
                        da.Moni1LevelData = null;
                    }
                    if (selectedCol.Equals(3))
                    {
                        da.Moni2LevelData = null;
                    }
                    if (selectedCol.Equals(4))
                    {
                        da.FlowData = 0;
                    }
                    _context.Update(da);
                    await _context.SaveChangesAsync();
                }
                i += 1;
            }
            var datas_device = await _context.PumpTestDatasDevice.Where(x => x.ThreeStepTestId.Equals(id)
            && x.PumpLevelData > -10000 && x.PumpLevelData < 10000
            && x.Moni1LevelData > -10000 && x.Moni1LevelData < 10000
            && x.Moni2LevelData > -10000 && x.Moni2LevelData < 10000).ToListAsync();
            ThreeStepTestReport report = new ThreeStepTestReport(test, datas_dips, datas_device, photos);
            return View("Reports/_PumpTest", report);
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager")]
        public async Task<IActionResult> DeleteDataPoint2(int id, int selectedRow, int selectedCol)
        {
            var test = await _context.ClearPumpTests.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
            var datas_dips = await _context.ClearPumpTestDatas.Where(x => x.ClearPumpTestId.Equals(id)).ToListAsync();
            var datas_device1 = await _context.ClearPumpTestDatasDevice.Where(x => x.ClearPumpTestId.Equals(id)
            && x.PumpLevelData > -10000 && x.PumpLevelData < 10000
            && x.Moni1LevelData > -10000 && x.Moni1LevelData < 10000
            && x.Moni2LevelData > -10000 && x.Moni2LevelData < 10000).ToListAsync();
            var photos = await _context.ClearPumpTestPhotos.Where(x => x.ClearPumpTestId.Equals(id)).ToListAsync();

            //return new ViewAsPdf("Reports/_PumpTest",report);

            var orderedlist = datas_device1.OrderBy(x => x.TimeStamp);
            int i = 0;
            foreach (var da in orderedlist)
            {
                if (i.Equals(selectedRow))
                {
                    if (selectedCol.Equals(1))
                    {
                        da.PumpLevelData = null;
                    }
                    if (selectedCol.Equals(2))
                    {
                        da.Moni1LevelData = null;
                    }
                    if (selectedCol.Equals(3))
                    {
                        da.Moni2LevelData = null;
                    }
                    if (selectedCol.Equals(4))
                    {
                        da.FlowData = null;
                    }
                    _context.Update(da);
                    await _context.SaveChangesAsync();
                }
                i += 1;
            }
            var datas_device = await _context.ClearPumpTestDatasDevice.Where(x => x.ClearPumpTestId.Equals(id)
            && x.PumpLevelData > -10000 && x.PumpLevelData < 10000
            && x.Moni1LevelData > -10000 && x.Moni1LevelData < 10000
            && x.Moni2LevelData > -10000 && x.Moni2LevelData < 10000).ToListAsync();
            ClearPumpTestReport report = new ClearPumpTestReport(test, datas_dips, datas_device, photos);
            return View("Reports/_ClearPumpTest2", report);
        }
        [HttpGet]
        [AllowAnonymous]
        public async Task<IActionResult> StepTestReport(int? id)
        {
            if (id != null)
            {
                var test = await _context.ThreeStepTests.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                var datas_dips = await _context.PumpTestDatas.Where(x => x.ThreeStepTestId.Equals(id)).ToListAsync();
                var datas_device = await _context.PumpTestDatasDevice.Where(x => x.ThreeStepTestId.Equals(id)).ToListAsync();
                var photos = await _context.PumpTestPhotos.Where(x => x.ThreeStepTestId.Equals(id)).ToListAsync();
                ThreeStepTestReport report = new ThreeStepTestReport(test, datas_dips, datas_device, photos);
                //return new ViewAsPdf("Reports/_PumpTest",report);
                return View("Reports/_PumpTest", report);
            }
            else { return NotFound(); }
        }
        [HttpGet]
        [AllowAnonymous]
        public async Task<IActionResult> ClearPumpTestReport(int? id)
        {
            if (id != null)
            {
                var test = await _context.ClearPumpTests.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                var datas_dips = await _context.ClearPumpTestDatas.Where(x => x.ClearPumpTestId.Equals(id)).ToListAsync();
                var datas_device = await _context.ClearPumpTestDatasDevice.Where(x => x.ClearPumpTestId.Equals(id)).ToListAsync();
                var photos = await _context.ClearPumpTestPhotos.Where(x => x.ClearPumpTestId.Equals(id)).ToListAsync();
                ClearPumpTestReport report = new ClearPumpTestReport(test, datas_dips, datas_device, photos);
                if (datas_device.Count > 0)
                {
                    return View("Reports/_ClearPumpTest2", report);
                }
                return View("Reports/_ClearPumpTest", report);
            }
            else { return NotFound(); }
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> ClearPumpTestReport_PDF(int? id, string theimage)
        {
            if (id != null)
            {
                var test = await _context.ClearPumpTests.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                test.imagepath = theimage;
                _context.Update(test);
                await _context.SaveChangesAsync();
                var datas_dips = await _context.ClearPumpTestDatas.Where(x => x.ClearPumpTestId.Equals(id)).ToListAsync();
                var datas_device = await _context.ClearPumpTestDatasDevice.Where(x => x.ClearPumpTestId.Equals(id)).ToListAsync();
                var photos = await _context.ClearPumpTestPhotos.Where(x => x.ClearPumpTestId.Equals(id)).ToListAsync();
                ClearPumpTestReport report = new ClearPumpTestReport(test, datas_dips, datas_device, photos);
                report.imagepath = theimage;
                //return new ViewAsPdf("Reports/_PumpTest",report);
                if (datas_device.Count > 0)
                {
                    return new ViewAsPdf("Reports/_ClearPumpTestPDF2", report);
                }
                return new ViewAsPdf("Reports/_ClearPumpTestPDF", report);
            }
            else { return NotFound(); }
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> ClearPumpReport_PDF(int? id)
        {
            if (id != null)
            {
                var test = await _context.ClearPumpTests.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                var datas_dips = await _context.ClearPumpTestDatas.Where(x => x.ClearPumpTestId.Equals(id)).OrderBy(x => x.TimeStamp).ToListAsync();
                var datas_device = await _context.ClearPumpTestDatasDevice.Where(x => x.ClearPumpTestId.Equals(id)).ToListAsync();
                var photos = await _context.ClearPumpTestPhotos.Where(x => x.ClearPumpTestId.Equals(id)).ToListAsync();
                ClearPumpTestReport report = new ClearPumpTestReport(test, datas_dips, datas_device, photos);
                report.imagepath = test.imagepath;
                //return new ViewAsPdf("Reports/_PumpTest",report);
                if (datas_device.Count > 0)
                {
                    return new ViewAsPdf("Reports/_ClearPumpTestPDF2", report);
                }
                return new ViewAsPdf("Reports/_ClearPumpTestPDF", report);
            }
            else { return NotFound(); }
        }
        [HttpGet]
        [Authorize(Roles = "Admin,Supervisor,ProjectMember")]
        public async Task<IActionResult> HourRegistration_PDF(int? id)
        {
            if (id != null)
            {
                var user = await _userManager.GetUserAsync(User);
                if (User.IsInRole("ProjectMember") && !User.IsInRole("Supervisor"))
                {

                    var hr = await _context.HourRegistrations.Include(x => x.Rows).ThenInclude(x => x.Project).Where(x => x.Id.Equals(id) && x.FullName.Equals(user.full_name())).SingleOrDefaultAsync();
                    if (hr != null)
                    {
                        HourRegistrationVM newvm = new HourRegistrationVM(hr);
                        return new ViewAsPdf("Reports/_HourRegistration", newvm)
                        {
                            FileName = "TimeRegistrering_" + newvm.HourRegistration.FullName.Replace("ø","oe").Replace("æ","ae").Replace("Ø","OE").Replace("Æ","AE").Replace("å","aa").Replace("Å","AA") + "_WK" + newvm.HourRegistration.Week1 + "_" + newvm.HourRegistration.Week2 + ".pdf",
                            PageOrientation = Rotativa.AspNetCore.Options.Orientation.Landscape,
                            PageSize = Rotativa.AspNetCore.Options.Size.A4
                        };
                    }
                    else
                    {
                        return RedirectToAction("ErrorMessage", "Home", new { text = "You do not have access to this report" });
                    }

                }
                else
                {
                    if (User.IsInRole("Supervisor") || User.IsInRole("Admin"))
                    {
                        if (User.IsInRole("Admin"))
                        {
                            var hr = await _context.HourRegistrations.Include(x => x.Rows).ThenInclude(x => x.Project).Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                            HourRegistrationVM newvm = new HourRegistrationVM(hr);
                            return new ViewAsPdf("Reports/_HourRegistration", newvm)
                            {
                                FileName = "TimeRegistrering_" + newvm.HourRegistration.FullName.Replace("ø", "oe").Replace("æ", "ae").Replace("Ø", "OE").Replace("Æ", "AE").Replace("å", "aa").Replace("Å", "AA") + "_WK" + newvm.HourRegistration.Week1 + "_" + newvm.HourRegistration.Week2 + ".pdf",
                                PageOrientation = Rotativa.AspNetCore.Options.Orientation.Landscape,
                                PageSize = Rotativa.AspNetCore.Options.Size.A4
                            };
                        }
                        else
                        {
                            var hr = await _context.HourRegistrations.Include(x => x.Rows).ThenInclude(x => x.Project).Where(x => x.Id.Equals(id) && x.Supervisor_Name.Equals(user.full_name())).SingleOrDefaultAsync();
                            HourRegistrationVM newvm = new HourRegistrationVM(hr);
                            return new ViewAsPdf("Reports/_HourRegistration", newvm)
                            {
                                FileName = "TimeRegistrering_" + newvm.HourRegistration.FullName.Replace("ø", "oe").Replace("æ", "ae").Replace("Ø", "OE").Replace("Æ", "AE").Replace("å", "aa").Replace("Å", "AA") + "_WK" + newvm.HourRegistration.Week1 + "_" + newvm.HourRegistration.Week2 + ".pdf",
                                PageOrientation = Rotativa.AspNetCore.Options.Orientation.Landscape,
                                PageSize = Rotativa.AspNetCore.Options.Size.A4
                            };
                        }

                    }
                    else
                    {
                        return RedirectToAction("ErrorMessage", "Home", new { text = "You do not have access to this report" });
                    }
                }

            }
            else
            {
                return NotFound();
            }
        }

        [HttpPost]
        [Authorize(Roles = "Admin,Supervisor")]
        public async Task<IActionResult> RedoHourSheet(int? id,string comment)
        {
            var hourregistration = await _context.HourRegistrations.SingleOrDefaultAsync(x => x.Id.Equals(id));
            if(hourregistration == null)
            {
                return NotFound();
            }
            string usedemail = "";
            var supervisor = await _userManager.GetUserAsync(User);
            await CheckUser(supervisor);
            //var user = await _context.Users.FirstOrDefaultAsync(x => x.full_name().Equals(hourregistration.FullName) && x.DivisionId.Equals(supervisor.DivisionId));
            var user = await _context.Users.SingleOrDefaultAsync(x => x.Id.Equals(hourregistration.userid));
            if (user.full_name().Contains("Friederike"))
            {
                usedemail = "ofw@hj-as.dk";
            }
            else
            {
                usedemail = user.Email;
            }
            var code = await _userManager.GenerateUserTokenAsync(user, "AccountTotpProvider", "passwordless-auth");
            var callbackUrl = Url.RedoHourSheetCallbackLink(user.Id, code,hourregistration.Id.ToString(), Request.Scheme);
            await _emailSender.SendRedoHourRegistrationAsync(usedemail, callbackUrl, user, comment);
            return RedirectToAction("HourRegistrations");
        }
        public async Task<IActionResult> RedoHourSheetUser(string userId, string code, string HourRegistrationId)
        {
            if (userId == null || code == null || HourRegistrationId == null)
            {
                return RedirectToAction("Index", "Home");
            }
            int hourid = Convert.ToInt32(HourRegistrationId);
            var theuser = await _userManager.GetUserAsync(User);
            var user = await _userManager.FindByIdAsync(userId);
            if (user == null || user.Id != theuser.Id)
            {
                throw new ApplicationException($"Wrong user '{userId}'.");
            }
            var isValid = await _userManager.VerifyUserTokenAsync(
                  user, "AccountTotpProvider", "passwordless-auth", code);


            if (isValid)
            {
                var hourregistration = await _context.HourRegistrations.Include(x => x.Rows).Include(x => x.Division).SingleOrDefaultAsync(x => x.Id.Equals(hourid));
                var users = await (from userz in _context.Users
                                   join userRole in _context.UserRoles
                                   on userz.Id equals userRole.UserId
                                   join role in _context.Roles on userRole.RoleId
                                   equals role.Id
                                   where userRole.UserId == userz.Id && role.Name.Equals("Supervisor") && userz.DivisionId.Equals(theuser.DivisionId)
                                   select new
                                   {
                                       userz.Id,
                                       FullName = userz.full_name()
                                   }).ToListAsync();

                ViewData["HourSchedules"] = new SelectList(_context.HourSchedules, "Id", "Name");
                ViewData["SupervisorId"] = new SelectList(users, "FullName", "FullName");
                ViewData["ProjectId"] = await GetProjectListNoChoice();
                HourRegistrationVM model = new HourRegistrationVM(hourregistration,true);
                return View("HourRegistration", model);

            }
            else
            {
                return RedirectToAction("Index", "Home");
            }
        }
        [HttpPost]
        [Authorize(Roles = "Admin,Supervisor")]
        public async Task<IActionResult> Edit_HourRegistration(HourRegistrationVM model)
        {
            if (ModelState.IsValid)
            {
                var theuser = await _context.Users.Include(x => x.Division).SingleOrDefaultAsync(x => x.Id.Equals(model.HourRegistration.userid));
                string theuserid = "0";
                if(theuser != null)
                {
                    theuserid = theuser.Id.ToLower();
                }
                //model.HourRegistration.userid = theuser.Id;
                HourRegistration new_hr = new HourRegistration(model);
                _context.HourRegistrations.Add(new_hr);
                await _context.SaveChangesAsync();
                var newreg = await _context.HourRegistrations.LastAsync();
                foreach (RowHours row in model.Rows.Where(x => x.ProjectId != null))
                {
                    RowHours row_new = new RowHours(row, newreg.Id);
                    _context.Add(row_new);
                }
                await _context.SaveChangesAsync();
                newreg = null;
                var newest = await _context.HourRegistrations.Include(x => x.Rows).ThenInclude(x => x.Project).LastAsync();
                HourRegistrationVM newvm = new HourRegistrationVM(newest);
                var pdf = new ViewAsPdf("Reports/_HourRegistration", newvm)
                {
                    FileName = "TimeRegistrering_" + newvm.HourRegistration.FullName + "_WK" + newvm.HourRegistration.Week1 + "_" + newvm.HourRegistration.Week2 + ".pdf",
                    PageOrientation = Rotativa.AspNetCore.Options.Orientation.Landscape,
                    PageSize = Rotativa.AspNetCore.Options.Size.A4
                };
                byte[] pdfData = await pdf.BuildFile(ControllerContext);
                var file = Convert.ToBase64String(pdfData);
                string footerstringHTML = "<br />Hölscher Jensen A/S<br />Fabriksparken 37<br />2600 Glostrup<br />Denmark";
                string footerstringPLAIN = "\r\n\r\nHölscher Jensen A/S \r\nFabriksparken 37\r\n2600 Glostrup\r\nDenmark";
                //await _emailSender.SendEmailAsync2("rml@hj-as.dk", "Time Registrering",
                //    "<strong>Hej HR</strong><br />Vedhaeftet finder du timeregistrering for " + newvm.HourRegistration.FullName + " for uge " + newvm.HourRegistration.Week1 + " og uge " + newvm.HourRegistration.Week2 + "."
                //    , footerstringHTML, footerstringPLAIN, pdf.FileName, file);

                await _emailSender.SendEmailAsync2("bin@hj-as.dk", "Time Registrering",
                    "<strong>Hej HR!</strong><br />Vedhaeftet finder du timeregistrering for " + newvm.HourRegistration.FullName + " for uge " + newvm.HourRegistration.Week1 + " og uge " + newvm.HourRegistration.Week2 + "."
                    , footerstringHTML, footerstringPLAIN, pdf.FileName, file);
                                
                if (theuser.Division.HourSheetEmail != null && theuser.Division.HourSheetEmail != "")
                {
                    await _emailSender.SendEmailAsync2("jav@hj-as.dk", "Time Registrering",
                  "<strong>Hej HR!</strong><br />Vedhaeftet finder du timeregistrering for " + newvm.HourRegistration.FullName + " for uge " + newvm.HourRegistration.Week1 + " og uge " + newvm.HourRegistration.Week2 + "."
                  , footerstringHTML, footerstringPLAIN, pdf.FileName, file);
                    await _emailSender.SendEmailAsync2(theuser.Division.HourSheetEmail, "Time Registrering",
                  "<strong>Hej HR!</strong><br />Vedhaeftet finder du timeregistrering for " + newvm.HourRegistration.FullName + " for uge " + newvm.HourRegistration.Week1 + " og uge " + newvm.HourRegistration.Week2 + "."
                  , footerstringHTML, footerstringPLAIN, pdf.FileName, file);
                }
              
                List<DateTime> daysmissing = new List<DateTime>();
                List<string> projectnames = new List<string>();
                List<double> hours = new List<double>();
                List<string> types = new List<string>();
                string fullname = model.HourRegistration.FullName;
                string fullname2 = model.HourRegistration.FullName;
                if (fullname.Split(" ").Length > 2)
                {
                    fullname2 = fullname.Split(" ")[0] + " " + fullname.Split(" ")[fullname.Split(" ").Length - 1];
                }
                foreach (RowHours row in model.Rows)
                {
                    var project = await _context.Projects.Where(x => x.Id.Equals(row.ProjectId)).SingleOrDefaultAsync();
                    DateTime dateMonday_week1;

                    if (row.day1 > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1;
                        var thedailyreport = await _context.Daily_Report_2s.Where(x => x.Report_Date.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2) || x.OtherPeople.Contains(fullname) || x.OtherPeopleIDs.ToLower().Contains(theuserid))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day1));
                            types.Add("Daily Report");
                        }
                    }
                    if (row.day2 > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(1);
                        var thedailyreport = await _context.Daily_Report_2s.Where(x => x.Report_Date.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2) || x.OtherPeople.Contains(fullname) || x.OtherPeopleIDs.ToLower().Contains(theuserid))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day2));
                            types.Add("Daily Report");
                        }
                    }
                    if (row.day3 > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(2);
                        var thedailyreport = await _context.Daily_Report_2s.Where(x => x.Report_Date.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2) || x.OtherPeople.Contains(fullname) || x.OtherPeopleIDs.ToLower().Contains(theuserid))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day3));
                            types.Add("Daily Report");
                        }
                    }
                    if (row.day4 > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(3);
                        var thedailyreport = await _context.Daily_Report_2s.Where(x => x.Report_Date.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2) || x.OtherPeople.Contains(fullname) || x.OtherPeopleIDs.ToLower().Contains(theuserid))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day4));
                            types.Add("Daily Report");
                        }
                    }
                    if (row.day5 > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(4);
                        var thedailyreport = await _context.Daily_Report_2s.Where(x => x.Report_Date.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2) || x.OtherPeople.Contains(fullname) || x.OtherPeopleIDs.ToLower().Contains(theuserid))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day5));
                            types.Add("Daily Report");
                        }
                    }
                    if (row.day6 > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(5);
                        var thedailyreport = await _context.Daily_Report_2s.Where(x => x.Report_Date.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2) || x.OtherPeople.Contains(fullname) || x.OtherPeopleIDs.ToLower().Contains(theuserid))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day6));
                            types.Add("Daily Report");
                        }
                    }
                    if (row.day7 > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(6);
                        var thedailyreport = await _context.Daily_Report_2s.Where(x => x.Report_Date.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2) || x.OtherPeople.Contains(fullname) || x.OtherPeopleIDs.ToLower().Contains(theuserid))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day7));
                            types.Add("Daily Report");
                        }
                    }
                    if (row.day8 > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(7);
                        var thedailyreport = await _context.Daily_Report_2s.Where(x => x.Report_Date.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2) || x.OtherPeople.Contains(fullname) || x.OtherPeopleIDs.ToLower().Contains(theuserid))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day8));
                            types.Add("Daily Report");
                        }
                    }
                    if (row.day9 > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(8);
                        var thedailyreport = await _context.Daily_Report_2s.Where(x => x.Report_Date.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2) || x.OtherPeople.Contains(fullname) || x.OtherPeopleIDs.ToLower().Contains(theuserid))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day9));
                            types.Add("Daily Report");
                        }
                    }
                    if (row.day10 > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(9);
                        var thedailyreport = await _context.Daily_Report_2s.Where(x => x.Report_Date.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2) || x.OtherPeople.Contains(fullname) || x.OtherPeopleIDs.ToLower().Contains(theuserid))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day10));
                            types.Add("Daily Report");
                        }
                    }
                    if (row.day11 > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(10);
                        var thedailyreport = await _context.Daily_Report_2s.Where(x => x.Report_Date.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2) || x.OtherPeople.Contains(fullname) || x.OtherPeopleIDs.ToLower().Contains(theuserid))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day11));
                            types.Add("Daily Report");
                        }
                    }
                    if (row.day12 > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(11);
                        var thedailyreport = await _context.Daily_Report_2s.Where(x => x.Report_Date.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2) || x.OtherPeople.Contains(fullname) || x.OtherPeopleIDs.ToLower().Contains(theuserid))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day12));
                            types.Add("Daily Report");
                        }
                    }
                    if (row.day13 > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(12);
                        var thedailyreport = await _context.Daily_Report_2s.Where(x => x.Report_Date.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2) || x.OtherPeople.Contains(fullname) || x.OtherPeopleIDs.ToLower().Contains(theuserid))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day13));
                            types.Add("Daily Report");
                        }
                    }
                    if (row.day14 > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(13);
                        var thedailyreport = await _context.Daily_Report_2s.Where(x => x.Report_Date.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2) || x.OtherPeople.Contains(fullname) || x.OtherPeopleIDs.ToLower().Contains(theuserid))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day14));
                            types.Add("Daily Report");
                        }
                    }
                    if (row.day1_Alarm > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1;
                        var thedailyreport = await _context.AlarmCalls.Where(x => x.TimeStamp.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day1_Alarm));
                            types.Add("Alarm Report");
                        }
                    }
                    if (row.day2_Alarm > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(1);
                        var thedailyreport = await _context.AlarmCalls.Where(x => x.TimeStamp.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day2_Alarm));
                            types.Add("Alarm Report");
                        }
                    }
                    if (row.day3_Alarm > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(2);
                        var thedailyreport = await _context.AlarmCalls.Where(x => x.TimeStamp.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day3_Alarm));
                            types.Add("Alarm Report");
                        }
                    }
                    if (row.day4_Alarm > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(3);
                        var thedailyreport = await _context.AlarmCalls.Where(x => x.TimeStamp.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day4_Alarm));
                            types.Add("Alarm Report");
                        }
                    }
                    if (row.day5_Alarm > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(4);
                        var thedailyreport = await _context.AlarmCalls.Where(x => x.TimeStamp.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day5_Alarm));
                            types.Add("Alarm Report");
                        }
                    }
                    if (row.day6_Alarm > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(5);
                        var thedailyreport = await _context.AlarmCalls.Where(x => x.TimeStamp.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day6_Alarm));
                            types.Add("Alarm Report");
                        }
                    }
                    if (row.day7_Alarm > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(6);
                        var thedailyreport = await _context.AlarmCalls.Where(x => x.TimeStamp.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day7_Alarm));
                            types.Add("Alarm Report");
                        }
                    }
                    if (row.day8_Alarm > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(7);
                        var thedailyreport = await _context.AlarmCalls.Where(x => x.TimeStamp.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day8_Alarm));
                            types.Add("Alarm Report");
                        }
                    }
                    if (row.day9_Alarm > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(8);
                        var thedailyreport = await _context.AlarmCalls.Where(x => x.TimeStamp.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day9_Alarm));
                            types.Add("Alarm Report");
                        }
                    }
                    if (row.day10_Alarm > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(9);
                        var thedailyreport = await _context.AlarmCalls.Where(x => x.TimeStamp.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day10_Alarm));
                            types.Add("Alarm Report");
                        }
                    }
                    if (row.day11_Alarm > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(10);
                        var thedailyreport = await _context.AlarmCalls.Where(x => x.TimeStamp.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day11_Alarm));
                            types.Add("Alarm Report");
                        }
                    }
                    if (row.day12_Alarm > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(11);
                        var thedailyreport = await _context.AlarmCalls.Where(x => x.TimeStamp.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day12_Alarm));
                            types.Add("Alarm Report");
                        }
                    }
                    if (row.day13_Alarm > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(12);
                        var thedailyreport = await _context.AlarmCalls.Where(x => x.TimeStamp.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day13_Alarm));
                            types.Add("Alarm Report");
                        }
                    }
                    if (row.day14_Alarm > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(13);
                        var thedailyreport = await _context.AlarmCalls.Where(x => x.TimeStamp.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day14_Alarm));
                            types.Add("Alarm Report");
                        }
                    }

                }
                string emailtext = "<strong>Hi Supervisor!</strong>,<br />According to filled out timesheet of " + model.HourRegistration.FullName + ", the following Daily reports and Alarm Call reports are missing from MainOps: <br /> You can forward the attached file to Accounting <br />";
                if (hours.Count > 0)
                {
                    for (int i = 0; i < hours.Count(); i++)
                    {
                        emailtext += "<br />" + types[i] + " Date: " + daysmissing[i].ToString("yyyy-MM-dd") + " Project: " + projectnames[i] + " hours: " + hours[i].ToString();
                    }
                    var supervisor = await _context.Users.Where(x => x.full_name().Equals(model.HourRegistration.Supervisor_Name)).FirstAsync();
                    await _emailSender.SendEmailAsync2(supervisor.Email, "Timesheet for " + model.HourRegistration.FullName + " and missing reports", emailtext, footerstringHTML, footerstringPLAIN, pdf.FileName, file);

                }
                return RedirectToAction("HourRegistrations");
            }
            else
            {
                return NotFound();
            }
        }

        [HttpGet]
        [Authorize(Roles = "Admin,Supervisor")]
        public async Task<IActionResult> Delete_HourRegistration(int? id)
        {
            if (id!=null)
            { 
                // Find the entry in HourRegistrations
                var hourRegistration = await _context.HourRegistrations.FindAsync(id);

                if (hourRegistration == null)
                {
                    return NotFound(); // No record with this ID
                }

                // Get all related rows in RowHours
                var relatedRows = _context.RowHours.Where(r => r.HourRegistrationId == id);

                // Remove related rows
                _context.RowHours.RemoveRange(relatedRows);

                // Remove parent row
                _context.HourRegistrations.Remove(hourRegistration);
                await _context.SaveChangesAsync();

                return RedirectToAction("HourRegistrations");
            }
            else
            {
                return NotFound();
            }
        }

        [HttpGet]
        [Authorize(Roles = "Admin,Supervisor,DivisionAdmin,ProjectMember")]
        public async Task<IActionResult> HourRegistrations()
        {
            var user = await _userManager.GetUserAsync(User);
            var receiverDiv = await _context.Divisions.SingleOrDefaultAsync(x => x.Id.Equals(user.DivisionId));
            var receiverEmail = receiverDiv.HourSheetEmail;
            ViewData["ReceiverEmail"] = receiverEmail;
            ViewData["DivisionId"] = user.DivisionId;

            List<HourRegistration> hours = new List<HourRegistration>();
            if (User.IsInRole("Admin") || User.IsInRole("DivisionAdmin") || User.IsInRole("Supervisor"))
            {
                if (User.IsInRole("Admin"))
                {
                    var hoursheets = await _context.HourRegistrations.Include(x => x.Rows).ThenInclude(y => y.Project).ToListAsync();
                    foreach (HourRegistration hr in hoursheets)
                    {
                        if (hr.Edited.Equals(false))
                        {
                            if (hoursheets.Where(x => x.FullName.Equals(hr.FullName) && x.Week1.Equals(hr.Week1) && x.Week2.Equals(hr.Week2) && x.HourSheetYear.Equals(hr.HourSheetYear) && x.Edited.Equals(true) && x.Id >= hr.Id).FirstOrDefault() == null)
                            {
                                if (hr.Rows.Count > 0)
                                {
                                    if (hr.Rows?.FirstOrDefault()?.Project?.DivisionId == (user.DivisionId) && hr.Supervisor_Name == (user.full_name()) || User.IsInRole("Admin"))
                                    {
                                        hours.Add(hr);
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (hr.Rows.Count > 0)
                            {
                                if (hr.Rows.First().Project.DivisionId.Equals(user.DivisionId))
                                {
                                    hours.Add(hr);
                                }
                            }
                        }

                    }
                    return View("HourRegistrations", hours);
                }
                else if (User.IsInRole("DivisionAdmin"))
                {
                    var hoursheets = await _context.HourRegistrations.Include(x => x.Rows).ThenInclude(y => y.Project).Where(x => x.DivisionId.Equals(user.DivisionId)).ToListAsync();
                    foreach (HourRegistration hr in hoursheets)
                    {
                        if (hr.Edited.Equals(false))
                        {
                            if (hoursheets.Where(x => x.FullName.Equals(hr.FullName) && x.Week1.Equals(hr.Week1) && x.Week2.Equals(hr.Week2) && x.Edited.Equals(true) && x.HourSheetYear.Equals(hr.HourSheetYear) && x.Id >= hr.Id).FirstOrDefault() == null)
                            {
                                if (hr.Rows.Count > 0)
                                {
                                    if (hr.Rows.First().Project.DivisionId.Equals(user.DivisionId) && hr.Supervisor_Name.Equals(user.full_name()) || User.IsInRole("Admin"))
                                    {
                                        hours.Add(hr);
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (hr.Rows.Count > 0)
                            {
                                if (hr.Rows.First().Project.DivisionId.Equals(user.DivisionId))
                                {
                                    hours.Add(hr);
                                }
                            }
                        }

                    }
                    return View("HourRegistrations", hours);
                }
                else
                {
                    var hoursheets = await _context.HourRegistrations.Include(x => x.Rows).ThenInclude(y => y.Project).Where(x => x.DivisionId.Equals(user.DivisionId)).ToListAsync();
                    foreach (HourRegistration hr in hoursheets)
                    {
                        if (hr.Edited.Equals(false))
                        {
                            if (hoursheets.Where(x => x.FullName.Equals(hr.FullName) && x.Week1.Equals(hr.Week1) && x.Week2.Equals(hr.Week2) && x.HourSheetYear.Equals(hr.HourSheetYear) && x.Edited.Equals(true) && x.Id >= hr.Id).FirstOrDefault() == null)
                            {
                                if (hr.Rows.Count > 0)
                                {
                                    if (hr.Rows.First().Project.DivisionId.Equals(user.DivisionId) && hr.Supervisor_Name.Equals(user.full_name()))
                                    {
                                        hours.Add(hr);
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (hr.Rows.Count > 0)
                            {
                                if (hr.Rows.First().Project.DivisionId.Equals(user.DivisionId) && (hr.Supervisor_Name.Equals(user.full_name()) || hr.FullName.Equals(user.full_name())))
                                {
                                    hours.Add(hr);
                                }
                            }
                        }

                    }
                    return View("HourRegistrations", hours);
                }

            }
            else if (User.IsInRole("ProjectMember") && !User.IsInRole("Supervisor"))
            {
                var hoursheets = await _context.HourRegistrations.Include(x => x.Rows).ThenInclude(y => y.Project)
                    .Where(x => x.FullName.Equals(user.full_name()) && x.DivisionId.Equals(user.DivisionId))
                    .ToListAsync();
                foreach (var hr in hoursheets)
                {
                    if (hr.Edited.Equals(false))
                    {
                        if (hoursheets.Where(x => x.FullName.Equals(hr.FullName) && x.Week1.Equals(hr.Week1) && x.Week2.Equals(hr.Week2) && x.Edited.Equals(true) && x.Id >= hr.Id).FirstOrDefault() == null)
                        {
                            hours.Add(hr);
                        }
                    }
                    else
                    {
                        hours.Add(hr);
                    }
                }
                return View("HourRegistrations", hours);
            }
            else
            {

                return View("HourRegistrations", hours);
            }
        }

        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin")]
        public async Task<IActionResult> Edit_Receiver(int Id, string ReceiverEmail)
        {
            Debug.WriteLine("Edit reveiver.....email: " + ReceiverEmail);

            var division = await _context.Divisions.FindAsync(Id);            
            if (division == null)
            {
                return NotFound();
            }

            division.HourSheetEmail = ReceiverEmail;
            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateException)
            {
                return StatusCode(500, "Error updating database");
            }

            return RedirectToAction("HourRegistrations");
        }

        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Supervisor")]
        public async Task<IActionResult> Edit_HourRegistration(int? id)
        {
            if (id != null)
            {
                var user = await _userManager.GetUserAsync(User);
                HourRegistration hr;
                if (User.IsInRole("Admin"))
                {
                    hr = await _context.HourRegistrations.Include(x => x.Rows).ThenInclude(x => x.Project).Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                    if (hr == null)
                    {
                        return NotFound();
                    }
                }
                else
                {
                    hr = await _context.HourRegistrations.Include(x => x.Rows).ThenInclude(x => x.Project).Where(x => x.Id.Equals(id) && x.DivisionId.Equals(user.DivisionId)).SingleOrDefaultAsync();
                    if (hr == null)
                    {
                        return RedirectToAction("ErrorMessage", "Home", new { text = "You do not have access to this item" });
                    }
                }
                int rowcount = hr.Rows.Count(); // figure out how many more rows to add
                for (int i = 0; i < 10 - rowcount; i++)
                {
                    RowHours row = new RowHours();
                    row.HourRegistrationId = hr.Id;
                    hr.Rows.Add(row);
                }
                int rownrmostoverhours_50 = 0;
                int rownrmostoverhours_100 = 0;
                int counter = 0;
                double excessoverhours50 = 0.0;
                double excessoverhours100 = 0.0;
                foreach (var row in hr.Rows)
                {
                    if (row.OverHours_50 > hr.Rows.ElementAt(rownrmostoverhours_50).OverHours_50)
                    {
                        rownrmostoverhours_50 = counter;
                    }
                    if (row.OverHours_100 > hr.Rows.ElementAt(rownrmostoverhours_100).OverHours_100)
                    {
                        rownrmostoverhours_100 = counter;
                    }

                    if (row.OverHours_50 > 0)
                    {
                        double remainder_50 = Math.IEEERemainder(Convert.ToDouble(row.OverHours_50), 0.25);
                        excessoverhours50 += remainder_50;
                        row.OverHours_50 -= remainder_50;
                    }
                    if (row.OverHours_100 > 0)
                    {
                        double remainder_100 = Math.IEEERemainder(Convert.ToDouble(row.OverHours_100), 0.25);
                        excessoverhours100 += remainder_100;
                        row.OverHours_100 -= remainder_100;
                    }
                    counter += 1;
                }
                hr.Rows.ElementAt(rownrmostoverhours_50).OverHours_50 += excessoverhours50;
                hr.Rows.ElementAt(rownrmostoverhours_100).OverHours_100 += excessoverhours100;
                HourRegistrationVM vm = new HourRegistrationVM(hr);
                if (user.full_name().Contains("Maris") || user.full_name().Contains("Janis") || user.full_name().Contains("Arnis") || User.IsInRole("Admin") || User.IsInRole("Supervisor"))
                {
                    ViewData["HourSchedules"] = new SelectList(_context.HourSchedules, "Id", "Name");
                }
                else
                {
                    ViewData["HourSchedules"] = new SelectList(_context.HourSchedules.Where(x => !x.Name.Contains("Maris") && !x.Name.Contains("Janis")), "Id", "Name");
                }
                ViewData["ProjectId"] = await GetProjectListNoChoice();
                return View(vm);
            }
            else
            {
                return NotFound();
            }
        }
        //[HttpGet]
        //[Authorize(Roles = "Admin,Supervisor")]
        //public async Task<IActionResult> Edit_HourRegistration2(int? id)
        //{
        //    if (id != null)
        //    {
        //        var hr = await _context.HourRegistrations.Include(x => x.Rows).ThenInclude(x => x.Project).Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
        //        int rownrmostoverhours_50 = 0;
        //        int rownrmostoverhours_100 = 0;
        //        int counter = 0;
        //        double excessoverhours50 = 0.0;
        //        double excessoverhours100 = 0.0;
        //        foreach (var row in hr.Rows)
        //        {
        //            if (row.OverHours_50 > hr.Rows.ElementAt(rownrmostoverhours_50).OverHours_50)
        //            {
        //                rownrmostoverhours_50 = counter;
        //            }
        //            if (row.OverHours_100 > hr.Rows.ElementAt(rownrmostoverhours_100).OverHours_100)
        //            {
        //                rownrmostoverhours_100 = counter;
        //            }

        //            if (row.OverHours_50 > 0)
        //            {
        //                double remainder_50 = Math.IEEERemainder(Convert.ToDouble(row.OverHours_50), 0.25);
        //                excessoverhours50 += remainder_50;
        //                row.OverHours_50 -= remainder_50;
        //            }
        //            if (row.OverHours_100 > 0)
        //            {
        //                double remainder_100 = Math.IEEERemainder(Convert.ToDouble(row.OverHours_100), 0.25);
        //                excessoverhours100 += remainder_100;
        //                row.OverHours_100 -= remainder_100;
        //            }
        //            counter += 1;
        //        }
        //        hr.Rows.ElementAt(rownrmostoverhours_50).OverHours_50 += excessoverhours50;
        //        hr.Rows.ElementAt(rownrmostoverhours_100).OverHours_100 += excessoverhours100;
        //        HourRegistrationVM vm = new HourRegistrationVM(hr);
        //        var user = await _userManager.GetUserAsync(User);
        //        if (user.full_name().Contains("Maris") || user.full_name().Contains("Janis") || user.full_name().Contains("Arnis") || User.IsInRole("Admin") || User.IsInRole("Supervisor"))
        //        {
        //            ViewData["HourSchedules"] = new SelectList(_context.HourSchedules, "Id", "Name");
        //        }
        //        else
        //        {
        //            ViewData["HourSchedules"] = new SelectList(_context.HourSchedules.Where(x => !x.Name.Contains("Maris") && !x.Name.Contains("Janis")), "Id", "Name");
        //        }
        //        ViewData["ProjectId"] = await GetProjectList();
        //        return View(vm);
        //    }
        //    else
        //    {
        //        return NotFound();
        //    }
        //}
        [HttpGet]
        [Authorize(Roles = "ProjectMember,Member,Admin,DivisionAdmin,Manager,Supervisor")]
        public async Task<IActionResult> Load_HourRegistration()
        {
            var theuser = await _userManager.GetUserAsync(User);
            var lastsaved = await _context.HourRegistrations_Ongoing.Include(x => x.Rows).Where(x => x.FullName.Equals(theuser.full_name())).LastOrDefaultAsync();
            var users = await (from user in _context.Users
                               join userRole in _context.UserRoles
                               on user.Id equals userRole.UserId
                               join role in _context.Roles on userRole.RoleId
                               equals role.Id
                               where userRole.UserId == user.Id && role.Name.Equals("Supervisor") && user.DivisionId.Equals(theuser.DivisionId)
                               select new
                               {
                                   user.Id,
                                   FullName = user.full_name()
                               }).ToListAsync();
            if (theuser.full_name().Contains("Maris") || theuser.full_name().Contains("Janis") || theuser.full_name().Contains("Arnis") || User.IsInRole("Admin") || User.IsInRole("Supervisor"))
            {
                ViewData["HourSchedules"] = new SelectList(_context.HourSchedules, "Id", "Name");
            }
            else
            {
                ViewData["HourSchedules"] = new SelectList(_context.HourSchedules.Where(x => !x.Name.Contains("Maris") && !x.Name.Contains("Janis")), "Id", "Name");
            }
            ViewData["SupervisorId"] = new SelectList(users, "FullName", "FullName");
            ViewData["ProjectId"] = await GetProjectListNoChoice();
            if (lastsaved == null)
            {
                HourRegistrationVM HourRegistrationVM = new HourRegistrationVM(theuser);
                var previous = await _context.HourRegistrations.Include(x => x.Rows).Where(x => x.FullName.Equals(theuser.full_name())).LastOrDefaultAsync();
                if (previous != null)
                {
                    HourRegistrationVM.HourRegistration.PaymentNr = previous.PaymentNr;
                    HourRegistrationVM.HourRegistration.FullName = previous.FullName;
                    HourRegistrationVM.HourRegistration.LicensePlate = previous.LicensePlate;
                    HourRegistrationVM.HourRegistration.weektype = previous.weektype;
                    HourRegistrationVM.HourRegistration.Supervisor_Name = previous.Supervisor_Name;
                    if (previous.Week1 < 51)
                    {
                        HourRegistrationVM.HourRegistration.Week1 = previous.Week1 + 2;
                        HourRegistrationVM.HourRegistration.Week2 = previous.Week2 + 2;
                    }
                    for (int i = 0; i < previous.Rows.Count() - 1; i++)
                    {
                        if (previous.Rows.ElementAt(i).AddOns > 0)
                        {
                            //HourRegistrationVM.Rows.ElementAt(i).AddOns = previous.Rows.ElementAt(i).AddOns;
                            HourRegistrationVM.Rows.ElementAt(i).AddOns = 0;
                            HourRegistrationVM.Rows.ElementAt(i).AddOns_Amount = previous.Rows.ElementAt(i).AddOns_Amount;
                        }
                    }
                }
                else
                {
                    HourRegistrationVM.HourRegistration.weektype = "2";
                }
                return View("HourRegistration", HourRegistrationVM);
            }
            HourRegistrationVM model = new HourRegistrationVM(lastsaved);
            return View("HourRegistration", model);
        }
        [HttpGet]
        public async Task<IActionResult> Load_HourRegistrationIndivisual(int? id)
        {

            var theuser = await _userManager.GetUserAsync(User);

            var lastsaved = await _context.HourRegistrations_Ongoing.Include(x => x.Rows).Where(x => x.Id.Equals(id)).LastOrDefaultAsync();
            if (User.IsInRole("Admin") || lastsaved.FullName.Equals(theuser.full_name()))
            {

                var users = await (from user in _context.Users
                                   join userRole in _context.UserRoles
                                   on user.Id equals userRole.UserId
                                   join role in _context.Roles on userRole.RoleId
                                   equals role.Id
                                   where userRole.UserId == user.Id && role.Name.Equals("Supervisor") && user.DivisionId.Equals(theuser.DivisionId)
                                   select new
                                   {
                                       user.Id,
                                       FullName = user.full_name()
                                   }).ToListAsync();
                if (theuser.full_name().Contains("Maris") || theuser.full_name().Contains("Janis") || theuser.full_name().Contains("Arnis") || theuser.full_name().Contains("Sentis") || User.IsInRole("Admin") || User.IsInRole("Supervisor"))
                {
                    ViewData["HourSchedules"] = new SelectList(_context.HourSchedules, "Id", "Name");
                }
                else
                {
                    ViewData["HourSchedules"] = new SelectList(_context.HourSchedules.Where(x => !x.Name.Contains("Maris") && !x.Name.Contains("Janis")), "Id", "Name");
                }
                ViewData["SupervisorId"] = new SelectList(users, "FullName", "FullName");
                ViewData["ProjectId"] = await GetProjectListNoChoice();

                HourRegistrationVM model = new HourRegistrationVM(lastsaved);
                return View("HourRegistration", model);
            }
            else
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You do not have access to this content" });
            }
        }
        [HttpPost]
        [Authorize(Roles = "ProjectMember,Member,Admin,DivisionAdmin,Manager,Supervisor")]
        public async Task<JsonResult> Save_HourRegistration(HourRegistrationVM model)
        {
            if (ModelState.IsValid)
            {
                var user = await _userManager.GetUserAsync(User);
                model.HourRegistration.DivisionId = user.DivisionId;
                //HourRegistrationVM model = (HourRegistrationVM)JsonConvert.DeserializeObject(data);
                HourRegistration_Ongoing ongoing = new HourRegistration_Ongoing(model.HourRegistration, model.Rows);
                _context.HourRegistrations_Ongoing.Add(ongoing);
                await _context.SaveChangesAsync();
                var lastadded = await _context.HourRegistrations_Ongoing.LastAsync();
                foreach (RowHours r in model.Rows)
                {
                    RowHours_Ongoing r_new = new RowHours_Ongoing(r);
                    r_new.HourRegistration_OngoingId = lastadded.Id;
                    _context.RowHours_Ongoing.Add(r_new);
                }
                await _context.SaveChangesAsync();
                return Json("success");
            }
            return Json("failure");
        }
        [HttpPost]
        [Authorize(Roles = "ProjectMember,Member,Admin,DivisionAdmin,Manager,Supervisor")]
        public async Task<IActionResult> HourRegistration(HourRegistrationVM model)
        {
            if (ModelState.IsValid)
            {
                var user = await _userManager.GetUserAsync(User);
                model.HourRegistration.userid = user.Id;
                if (model.HourRegistration.Week1 > 50 && DateTime.Now.Month == 1)
                {
                    model.HourRegistration.HourSheetYear = DateTime.Now.Year - 1;
                }
                else
                {
                    model.HourRegistration.HourSheetYear = DateTime.Now.Year;
                }
                model.HourRegistration.DivisionId = user.DivisionId;
                _context.HourRegistrations.Add(model.HourRegistration);
                await _context.SaveChangesAsync();
                var lastadded = await _context.HourRegistrations.LastAsync();
                foreach (var row in model.Rows)
                {
                    if (row.ProjectId != null)
                    {
                        row.HourRegistrationId = lastadded.Id;
                        _context.RowHours.Add(row);
                    }
                }
                await _context.SaveChangesAsync();
                //check reports and see if all documentation is done:
                List<DateTime> daysmissing = new List<DateTime>();
                List<string> projectnames = new List<string>();
                List<double> hours = new List<double>();
                List<string> types = new List<string>();
                string fullname = model.HourRegistration.FullName;
                string fullname2 = model.HourRegistration.FullName;
                string theuserid = model.HourRegistration.userid.ToLower();
                if (fullname.Split(" ").Length > 2)
                {
                    fullname2 = fullname.Split(" ")[0] + " " + fullname.Split(" ")[fullname.Split(" ").Length - 1];
                }
                foreach (RowHours row in model.Rows)
                {
                    var project = await _context.Projects.Where(x => x.Id.Equals(row.ProjectId)).SingleOrDefaultAsync();
                    DateTime dateMonday_week1;

                    if (row.day1 > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1;
                        var thedailyreport = await _context.Daily_Report_2s.Where(x => x.Report_Date.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2) || x.OtherPeople.Contains(fullname) || x.OtherPeople.Contains(fullname2) || x.OtherPeopleIDs.ToLower().Contains(theuserid)) ).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day1));
                            types.Add("Daily Report");
                        }
                    }
                    if (row.day2 > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(1);
                        var thedailyreport = await _context.Daily_Report_2s.Where(x => x.Report_Date.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2) || x.OtherPeople.Contains(fullname) || x.OtherPeople.Contains(fullname2) || x.OtherPeopleIDs.ToLower().Contains(theuserid))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day2));
                            types.Add("Daily Report");
                        }
                    }
                    if (row.day3 > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(2);
                        var thedailyreport = await _context.Daily_Report_2s.Where(x => x.Report_Date.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2) || x.OtherPeople.Contains(fullname) || x.OtherPeople.Contains(fullname2) || x.OtherPeopleIDs.ToLower().Contains(theuserid))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day3));
                            types.Add("Daily Report");
                        }
                    }
                    if (row.day4 > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(3);
                        var thedailyreport = await _context.Daily_Report_2s.Where(x => x.Report_Date.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2) || x.OtherPeople.Contains(fullname) || x.OtherPeople.Contains(fullname2) || x.OtherPeopleIDs.ToLower().Contains(theuserid))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day4));
                            types.Add("Daily Report");
                        }
                    }
                    if (row.day5 > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(4);
                        var thedailyreport = await _context.Daily_Report_2s.Where(x => x.Report_Date.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2) || x.OtherPeople.Contains(fullname) || x.OtherPeople.Contains(fullname2) || x.OtherPeopleIDs.ToLower().Contains(theuserid))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day5));
                            types.Add("Daily Report");
                        }
                    }
                    if (row.day6 > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(5);
                        var thedailyreport = await _context.Daily_Report_2s.Where(x => x.Report_Date.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2) || x.OtherPeople.Contains(fullname) || x.OtherPeople.Contains(fullname2) || x.OtherPeopleIDs.ToLower().Contains(theuserid))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day6));
                            types.Add("Daily Report");
                        }
                    }
                    if (row.day7 > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(6);
                        var thedailyreport = await _context.Daily_Report_2s.Where(x => x.Report_Date.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2) || x.OtherPeople.Contains(fullname) || x.OtherPeople.Contains(fullname2) || x.OtherPeopleIDs.ToLower().Contains(theuserid))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day7));
                            types.Add("Daily Report");
                        }
                    }
                    if (row.day8 > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(7);
                        var thedailyreport = await _context.Daily_Report_2s.Where(x => x.Report_Date.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2) || x.OtherPeople.Contains(fullname) || x.OtherPeople.Contains(fullname2) || x.OtherPeopleIDs.ToLower().Contains(theuserid))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day8));
                            types.Add("Daily Report");
                        }
                    }
                    if (row.day9 > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(8);
                        var thedailyreport = await _context.Daily_Report_2s.Where(x => x.Report_Date.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2) || x.OtherPeople.Contains(fullname) || x.OtherPeople.Contains(fullname2) || x.OtherPeopleIDs.ToLower().Contains(theuserid))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day9));
                            types.Add("Daily Report");
                        }
                    }
                    if (row.day10 > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(9);
                        var thedailyreport = await _context.Daily_Report_2s.Where(x => x.Report_Date.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2) || x.OtherPeople.Contains(fullname) || x.OtherPeople.Contains(fullname2) || x.OtherPeopleIDs.ToLower().Contains(theuserid))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day10));
                            types.Add("Daily Report");
                        }
                    }
                    if (row.day11 > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(10);
                        var thedailyreport = await _context.Daily_Report_2s.Where(x => x.Report_Date.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2) || x.OtherPeople.Contains(fullname) || x.OtherPeople.Contains(fullname2) || x.OtherPeopleIDs.ToLower().Contains(theuserid))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day11));
                            types.Add("Daily Report");
                        }
                    }
                    if (row.day12 > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(11);
                        var thedailyreport = await _context.Daily_Report_2s.Where(x => x.Report_Date.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2) || x.OtherPeople.Contains(fullname) || x.OtherPeople.Contains(fullname2) || x.OtherPeopleIDs.ToLower().Contains(theuserid))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day12));
                            types.Add("Daily Report");
                        }
                    }
                    if (row.day13 > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(12);
                        var thedailyreport = await _context.Daily_Report_2s.Where(x => x.Report_Date.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2) || x. OtherPeople.Contains(fullname) || x.OtherPeople.Contains(fullname2) || x.OtherPeopleIDs.ToLower().Contains(theuserid))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day13));
                            types.Add("Daily Report");
                        }
                    }
                    if (row.day14 > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(13);
                        var thedailyreport = await _context.Daily_Report_2s.Where(x => x.Report_Date.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2) || x.OtherPeople.Contains(fullname) || x.OtherPeople.Contains(fullname2) || x.OtherPeopleIDs.ToLower().Contains(theuserid))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day14));
                            types.Add("Daily Report");
                        }
                    }
                    if (row.day1_Alarm > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1;
                        var thedailyreport = await _context.AlarmCalls.Where(x => x.TimeStamp.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day1));
                            types.Add("Alarm Report");
                        }
                    }
                    if (row.day2_Alarm > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(1);
                        var thedailyreport = await _context.AlarmCalls.Where(x => x.TimeStamp.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day2));
                            types.Add("Alarm Report");
                        }
                    }
                    if (row.day3_Alarm > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(2);
                        var thedailyreport = await _context.AlarmCalls.Where(x => x.TimeStamp.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day3));
                            types.Add("Alarm Report");
                        }
                    }
                    if (row.day4_Alarm > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(3);
                        var thedailyreport = await _context.AlarmCalls.Where(x => x.TimeStamp.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day4));
                            types.Add("Alarm Report");
                        }
                    }
                    if (row.day5_Alarm > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(4);
                        var thedailyreport = await _context.AlarmCalls.Where(x => x.TimeStamp.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day5));
                            types.Add("Alarm Report");
                        }
                    }
                    if (row.day6_Alarm > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(5);
                        var thedailyreport = await _context.AlarmCalls.Where(x => x.TimeStamp.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day6));
                            types.Add("Alarm Report");
                        }
                    }
                    if (row.day7_Alarm > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(6);
                        var thedailyreport = await _context.AlarmCalls.Where(x => x.TimeStamp.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day7));
                            types.Add("Alarm Report");
                        }
                    }
                    if (row.day8_Alarm > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(7);
                        var thedailyreport = await _context.AlarmCalls.Where(x => x.TimeStamp.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day8));
                            types.Add("Alarm Report");
                        }
                    }
                    if (row.day9_Alarm > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(8);
                        var thedailyreport = await _context.AlarmCalls.Where(x => x.TimeStamp.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day9));
                            types.Add("Alarm Report");
                        }
                    }
                    if (row.day10_Alarm > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(9);
                        var thedailyreport = await _context.AlarmCalls.Where(x => x.TimeStamp.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day10));
                            types.Add("Alarm Report");
                        }
                    }
                    if (row.day11_Alarm > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(10);
                        var thedailyreport = await _context.AlarmCalls.Where(x => x.TimeStamp.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day11));
                            types.Add("Alarm Report");
                        }
                    }
                    if (row.day12_Alarm > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(11);
                        var thedailyreport = await _context.AlarmCalls.Where(x => x.TimeStamp.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day12));
                            types.Add("Alarm Report");
                        }
                    }
                    if (row.day13_Alarm > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(12);
                        var thedailyreport = await _context.AlarmCalls.Where(x => x.TimeStamp.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day13));
                            types.Add("Alarm Report");
                        }
                    }
                    if (row.day14_Alarm > 0)
                    {
                        dateMonday_week1 = StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, model.HourRegistration.Week1);
                        DateTime theday = dateMonday_week1.AddDays(13);
                        var thedailyreport = await _context.AlarmCalls.Where(x => x.TimeStamp.Date.Equals(theday.Date) && x.ProjectId.Equals(row.ProjectId) && (x.DoneBy.Equals(fullname) || x.DoneBy.Equals(fullname2))).FirstOrDefaultAsync();
                        if (thedailyreport == null)
                        {
                            daysmissing.Add(theday);
                            projectnames.Add(project.Name);
                            hours.Add(Convert.ToDouble(row.day14));
                            types.Add("Alarm Report");
                        }
                    }

                }
                string emailtext = "<strong>Hi " + model.HourRegistration.FullName + "!</strong>,<br />According to your filled out timesheet, the following Daily reports and Alarm Call reports are missing from MainOps. Please make sure to create these reports.<br />Your supervisor will also be notified.: <br />";
                string footerstringHTML = "<br />Hölscher Jensen A/S<br />Fabriksparken 37<br />2600 Glostrup<br />Denmark";
                string footerstringPLAIN = "\r\n\r\nHölscher Jensen A/S \r\nFabriksparken 37\r\n2600 Glostrup\r\nDenmark";
                var newest = await _context.HourRegistrations.Include(x => x.Rows).ThenInclude(x => x.Project).LastAsync();
                HourRegistrationVM newvm = new HourRegistrationVM(newest);
                var pdf = new ViewAsPdf("Reports/_HourRegistration", newvm)
                {
                    FileName = "TimeRegistrering_" + newvm.HourRegistration.FullName + "_WK" + newvm.HourRegistration.Week1 + "_" + newvm.HourRegistration.Week2 + ".pdf",
                    PageOrientation = Rotativa.AspNetCore.Options.Orientation.Landscape,
                    PageSize = Rotativa.AspNetCore.Options.Size.A4
                };
                byte[] pdfData = await pdf.BuildFile(ControllerContext);
                var file = Convert.ToBase64String(pdfData);
                if (hours.Count > 0)
                {
                    for (int i = 0; i < hours.Count(); i++)
                    {
                        emailtext += "<br />" + types[i] + " Date: " + daysmissing[i].ToString("yyyy-MM-dd") + " Project: " + projectnames[i] + " hours: " + hours[i].ToString();
                    }

                    await _emailSender.SendEmailAsync2(user.Email, "User Missing Reports", emailtext, footerstringHTML, footerstringPLAIN, pdf.FileName, file);
                }
                //notify supervisor of hours being filled in:
                emailtext = "<strong>Hi Supervisor!</strong>,<br />Timesheet is filled out by " + model.HourRegistration.FullName + ", the following Daily reports and Alarm Call reports are missing from MainOps: <br /> <br />";
                if (hours.Count > 0)
                {
                    for (int i = 0; i < hours.Count(); i++)
                    {
                        emailtext += "<br />" + types[i] + " Date: " + daysmissing[i].ToString("yyyy-MM-dd") + " Project: " + projectnames[i] + " hours: " + hours[i].ToString();
                    }

                }
                var supervisor = await _context.Users.Where(x => x.full_name().Equals(model.HourRegistration.Supervisor_Name)).FirstAsync();
                await _emailSender.SendEmailAsync2(supervisor.Email, "Timesheet for " + model.HourRegistration.FullName + " and missing reports", emailtext, footerstringHTML, footerstringPLAIN, pdf.FileName, file);
                return RedirectToAction("MainMenu");
            }
            else
            {
                return RedirectToAction("HourRegistration");
            }
        }
        [HttpGet]
        [Authorize(Roles = "ProjectMember,Admin,DivisionAdmin,Manager,Member,Supervisor")]
        public async Task<IActionResult> HourRegistration()//\Views\\MeasPoints\\Index.cshtml:line 218
        {
            var theuser = await _userManager.GetUserAsync(User);
            var users = await (from user in _context.Users
                               join userRole in _context.UserRoles
                               on user.Id equals userRole.UserId
                               join role in _context.Roles on userRole.RoleId
                               equals role.Id
                               where userRole.UserId == user.Id && role.Name.Equals("Supervisor") && user.DivisionId.Equals(theuser.DivisionId)
                               select new
                               {
                                   user.Id,
                                   FullName = user.full_name()
                               }).ToListAsync();

            HourRegistrationVM HourRegistrationVM = new HourRegistrationVM(theuser);
            var previous = await _context.HourRegistrations
                .Include(x => x.Rows)
                .Where(x => x.FullName == theuser.full_name()).OrderByDescending(x => x.Id)
                .FirstOrDefaultAsync();

            if (previous != null)
            {
                HourRegistrationVM.HourRegistration.PaymentNr = previous.PaymentNr;
                HourRegistrationVM.HourRegistration.FullName = previous.FullName;
                HourRegistrationVM.HourRegistration.LicensePlate = previous.LicensePlate;
                HourRegistrationVM.HourRegistration.weektype = previous.weektype;
                HourRegistrationVM.HourRegistration.Supervisor_Name = previous.Supervisor_Name;
                if (previous.Week1 < 51)
                {
                    HourRegistrationVM.HourRegistration.Week1 = previous.Week1 + 2;
                    HourRegistrationVM.HourRegistration.Week2 = previous.Week2 + 2;
                }
                for (int i = 0; i < previous.Rows.Count() - 1; i++)
                {
                    if (previous.Rows.ElementAt(i).AddOns > 0)
                    {
                        //HourRegistrationVM.Rows.ElementAt(i).AddOns = previous.Rows.ElementAt(i).AddOns;
                        HourRegistrationVM.Rows.ElementAt(i).AddOns = 0;
                        HourRegistrationVM.Rows.ElementAt(i).AddOns_Amount = previous.Rows.ElementAt(i).AddOns_Amount;
                    }
                }
            }
            else
            {
                HourRegistrationVM.HourRegistration.weektype = "2";
            }

            
            ViewData["HourSchedules"] = new SelectList(_context.HourSchedules, "Id", "Name");
            ViewData["SupervisorId"] = new SelectList(users, "FullName", "FullName");
            ViewData["ProjectId"] = await GetProjectListNoChoice();
            return View("HourRegistration", HourRegistrationVM);
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> SensorsCheck()
        {
            ViewData["ProjectId"] = await GetProjectList();
            return View();
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> SensorsChecks()
        {
            var user = await _userManager.GetUserAsync(User);
            if (User.IsInRole("Admin"))
            {
                var checksAdmin = await _context.SensorsChecks.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).OrderByDescending(x => x.TimeStamp).ToListAsync();
                return View("Reports/SensorsChecks", checksAdmin);
            }

            var checks = await _context.SensorsChecks.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.Project.DivisionId.Equals(user.DivisionId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
            return View("Reports/SensorsChecks", checks);
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> SensorsCheckReport(int? id)
        {
            if (id != null)
            {
                var check = await _context.SensorsChecks.Where(x => x.Id.Equals(id))
                    .Include(x => x.Photos)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject).SingleOrDefaultAsync();
                return View("Reports/_SensorsCheck", check);
            }
            else
            {
                return NotFound();
            }
        }
        [HttpGet]
        [AllowAnonymous]
        public async Task<IActionResult> SensorsCheckReport_PDF(int? id)
        {
            if (id != null)
            {
                var check = await _context.SensorsChecks.Where(x => x.Id.Equals(id))
                    .Include(x => x.Photos)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject).SingleOrDefaultAsync();
                return new ViewAsPdf("Reports/_SensorsCheck", check);
            }
            else
            {
                return NotFound();
            }
        }
        [Authorize(Roles = "Admin,DivisionAdmin,Manager")]
        public async Task<IActionResult> DeleteClearPumpTestData(int? id)
        {
            if(id != null)
            {
                var user = await _userManager.GetUserAsync(User);
                await CheckUser(user);
                var cp = await _context.ClearPumpTests.Include(x => x.Project).SingleOrDefaultAsync(x => x.Id.Equals(id));
                if(cp.Project.DivisionId.Equals(user.DivisionId) || User.IsInRole("Admin")) { 
                    var datas = await _context.ClearPumpTestDatasDevice.Where(x => x.ClearPumpTestId.Equals(id)).ToListAsync();
                    foreach(var dat in datas)
                    {
                        _context.Remove(dat);
                    }
                }
                await _context.SaveChangesAsync();
            }
            return RedirectToAction("ClearPumpTests");
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        [RequestSizeLimit(900000000)]
        public async Task<IActionResult> SensorsCheck(SensorsCheck model, IFormFile[] files)
        {
            if (ModelState.IsValid)
            {
                var user = await _userManager.GetUserAsync(User);
                model.DoneBy = user.full_name();
                model.EnteredIntoDataBase = DateTime.Now;
                _context.Add(model);
                await _context.SaveChangesAsync();
                var lastadded = await _context.SensorsChecks.Include(x => x.Project).LastAsync();
                var directory = _env.WebRootPath + "\\AHAK\\SensorsChecks\\" + lastadded.Id.ToString() + "\\";
                if (!Directory.Exists(directory) && files != null)
                {
                    Directory.CreateDirectory(directory);
                }
                foreach (IFormFile photo in files)
                {
                    var path = Path.Combine(directory, photo.FileName);
                    var path2 = Path.Combine(directory, photo.FileName.Split(".")[0] + "_edit." + photo.FileName.Split(".")[1]);
                    PhotoFileSensorsCheck checkphoto = new PhotoFileSensorsCheck { Path = path, TimeStamp = model.TimeStamp, SensorsCheckId = lastadded.Id, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                    _context.Add(checkphoto);

                    using (var stream = new FileStream(path, FileMode.Create))
                    {
                        await photo.CopyToAsync(stream);
                    };
                    if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                    {
                        PhotoExtensions.SaveAndCompressJpeg(path, 80);
                    }

                }
                await _context.SaveChangesAsync();
                return RedirectToAction("MainMenu");
            }
            else
            {
                return NotFound();
            }
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> ConstructionSiteInspection()
        {
            ViewData["ProjectId"] = await GetProjectList();
            return View();
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> ConstructionSiteInspections()//Controllers\\SummaryReportsController.cs:line 38
        {
            var user = await _userManager.GetUserAsync(User);
            if (User.IsInRole("Admin"))
            {
                var checksAdmin = await _context.ConstructionSiteInspections.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).OrderByDescending(x => x.TimeStamp).ToListAsync();
                return View("Reports/ConstructionSiteInspections", checksAdmin);
            }

            var checks = await _context.ConstructionSiteInspections.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.Project.DivisionId.Equals(user.DivisionId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
            return View("Reports/ConstructionSiteInspections", checks);
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> ConstructionSiteInspectionReport(int? id)
        {
            if (id != null)
            {
                var check = await _context.ConstructionSiteInspections.Where(x => x.Id.Equals(id))
                    .Include(x => x.Photos)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject).SingleOrDefaultAsync();
                return View("Reports/_ConstructionSiteInspection", check);
            }
            else
            {
                return NotFound();
            }
        }
        [HttpGet]
        [AllowAnonymous]
        public async Task<IActionResult> ConstructionSiteInspectionReport_PDF(int? id)
        {
            if (id != null)
            {
                var check = await _context.ConstructionSiteInspections.Where(x => x.Id.Equals(id))
                    .Include(x => x.Photos)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject).SingleOrDefaultAsync();
                return new ViewAsPdf("Reports/_ConstructionSiteInspection", check);
            }
            else
            {
                return NotFound();
            }
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Edit_ConstructionSiteInspection(int? id)
        {
            if (id != null)
            {
                var csi = await _context.ConstructionSiteInspections.FindAsync(id);
                ViewData["ProjectId"] = await GetProjectList();
                return View(csi);
            }
            else
            {
                return NotFound();
            }
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        [RequestSizeLimit(900000000)]
        public async Task<IActionResult> Edit_ConstructionSiteInspection(ConstructionSiteInspection model, IFormFile[] files)
        {
            if (ModelState.IsValid)
            {
                var user = await _userManager.GetUserAsync(User);
                _context.Update(model);
                await _context.SaveChangesAsync();
                int modelId = model.Id;
                var directory = _env.WebRootPath + "\\AHAK\\ConstructionSiteInspections\\" + modelId.ToString() + "\\";
                if (!Directory.Exists(directory) && files.Count() > 0)
                {
                    Directory.CreateDirectory(directory);
                }
                if (files.Count() > 0)
                {
                    foreach (IFormFile photo in files)
                    {
                        var path = Path.Combine(directory, photo.FileName);
                        var path2 = Path.Combine(directory, photo.FileName.Split(".")[0] + "_edit." + photo.FileName.Split(".")[1]);
                        PhotoFileConstructionSiteInspection checkphoto = new PhotoFileConstructionSiteInspection { Path = path, TimeStamp = model.TimeStamp, ConstructionSiteInspectionId = model.Id, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                        _context.Add(checkphoto);
                        using (var stream = new FileStream(path, FileMode.Create))
                        {
                            await photo.CopyToAsync(stream);
                        };
                        if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                        {
                            PhotoExtensions.SaveAndCompressJpeg(path, 80);
                        }

                    }
                    await _context.SaveChangesAsync();
                }
                model = null;
                var lastadded2 = await _context.ConstructionSiteInspections.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Include(x => x.Photos).SingleOrDefaultAsync(x => x.Id.Equals(modelId));

                ViewAsPdf pdf = new ViewAsPdf("Reports/_ConstructionSiteInspection", lastadded2)
                {
                    FileName = "ConstructionSiteInspection_" + lastadded2.Project.Abbreviation + "_" + lastadded2.TimeStamp.ToString("yyyy-MM-dd") + ".pdf",
                };
                byte[] pdfData = await pdf.BuildFile(ControllerContext);

                var file = Convert.ToBase64String(pdfData);
                string footerstringHTML = "<br />Hölscher Jensen A/S<br />Fabriksparken 37<br />2600 Glostrup<br />Denmark";
                string footerstringPLAIN = "\r\n\r\nHölscher Jensen A/S \r\nFabriksparken 37\r\n2600 Glostrup\r\nDenmark";
                await _emailSender.SendEmailAsync2(user.Email, "Construction Site Inspection",
                   "Attached the report you just did on: " + lastadded2.TimeStamp.ToString() + ". On Project: " + lastadded2.Project.Name
                    , footerstringHTML, footerstringPLAIN, pdf.FileName, file);
                return RedirectToAction("MainMenu");
            }
            else
            {
                return NotFound();
            }
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        [RequestSizeLimit(900000000)]
        public async Task<IActionResult> ConstructionSiteInspection(ConstructionSiteInspection model, IFormFile[] files)
        {
            if (ModelState.IsValid)
            {
                var user = await _userManager.GetUserAsync(User);
                model.DoneBy = user.full_name();
                model.EnteredIntoDataBase = DateTime.Now;
                _context.Add(model);
                await _context.SaveChangesAsync();
                var lastadded = await _context.ConstructionSiteInspections.Include(x => x.Project).LastAsync();
                int modelId = lastadded.Id;
                var directory = _env.WebRootPath + "\\AHAK\\ConstructionSiteInspections\\" + lastadded.Id.ToString() + "\\";
                if (!Directory.Exists(directory) && files != null)
                {
                    Directory.CreateDirectory(directory);
                }
                foreach (IFormFile photo in files)
                {
                    var path = Path.Combine(directory, photo.FileName);
                    var path2 = Path.Combine(directory, photo.FileName.Split(".")[0] + "_edit." + photo.FileName.Split(".")[1]);
                    PhotoFileConstructionSiteInspection checkphoto = new PhotoFileConstructionSiteInspection { Path = path, TimeStamp = model.TimeStamp, ConstructionSiteInspectionId = lastadded.Id, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                    _context.Add(checkphoto);

                    using (var stream = new FileStream(path, FileMode.Create))
                    {
                        await photo.CopyToAsync(stream);
                    };
                    if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                    {
                        PhotoExtensions.SaveAndCompressJpeg(path, 80);
                    }

                }
                await _context.SaveChangesAsync();
                lastadded = null;
                var lastadded2 = await _context.ConstructionSiteInspections.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Include(x => x.Photos).SingleOrDefaultAsync(x => x.Id.Equals(modelId));

                ViewAsPdf pdf = new ViewAsPdf("Reports/_ConstructionSiteInspection", lastadded2)
                {
                    FileName = "ConstructionSiteInspection_" + lastadded2.Project.Abbreviation + "_" + lastadded2.TimeStamp.ToString("yyyy-MM-dd") + ".pdf",
                };
                byte[] pdfData = await pdf.BuildFile(ControllerContext);

                var file = Convert.ToBase64String(pdfData);
                string footerstringHTML = "<br />Hölscher Jensen A/S<br />Fabriksparken 37<br />2600 Glostrup<br />Denmark";
                string footerstringPLAIN = "\r\n\r\nHölscher Jensen A/S \r\nFabriksparken 37\r\n2600 Glostrup\r\nDenmark";
                await _emailSender.SendEmailAsync2(user.Email, "Construction Site Inspection",
                   "Attached the report you just did on: " + lastadded2.TimeStamp.ToString() + ". On Project: " + lastadded2.Project.Name
                    , footerstringHTML, footerstringPLAIN, pdf.FileName, file);
                return RedirectToAction("MainMenu");
            }
            else
            {
                return NotFound();
            }
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> SiteCheck()
        {
            ViewData["ProjectId"] = await GetProjectList();
            return View();
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> SiteChecks()
        {
            var user = await _userManager.GetUserAsync(User);
            if (User.IsInRole("Admin"))
            {
                var checksAdmin = await _context.SiteChecks.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).OrderByDescending(x => x.TimeStamp).ToListAsync();
                return View("Reports/SiteChecks", checksAdmin);
            }

            var checks = await _context.SiteChecks.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.Project.DivisionId.Equals(user.DivisionId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
            return View("Reports/SiteChecks", checks);
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> SiteCheckReport(int? id)
        {
            if (id != null)
            {
                var check = await _context.SiteChecks.Where(x => x.Id.Equals(id))
                    .Include(x => x.Photos)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject).SingleOrDefaultAsync();
                return View("Reports/_SiteCheck", check);
            }
            else
            {
                return NotFound();
            }
        }
        [HttpGet]
        [AllowAnonymous]
        public async Task<IActionResult> SiteCheckReport_PDF(int? id)
        {
            if (id != null)
            {
                var check = await _context.SiteChecks.Where(x => x.Id.Equals(id))
                    .Include(x => x.Photos)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject).SingleOrDefaultAsync();
                return new ViewAsPdf("Reports/_SiteCheck", check);
            }
            else
            {
                return NotFound();
            }
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        [RequestSizeLimit(900000000)]
        public async Task<IActionResult> SiteCheck(SiteCheck model, IFormFile[] files)
        {
            if (ModelState.IsValid)
            {
                var user = await _userManager.GetUserAsync(User);
                model.DoneBy = user.full_name();
                model.EnteredIntoDataBase = DateTime.Now;
                _context.Add(model);
                await _context.SaveChangesAsync();
                var lastadded = await _context.SiteChecks.Include(x => x.Project).LastAsync();
                var directory = _env.WebRootPath + "\\AHAK\\SiteChecks\\" + lastadded.Id.ToString() + "\\";
                if (!Directory.Exists(directory) && files != null)
                {
                    Directory.CreateDirectory(directory);
                }
                foreach (IFormFile photo in files)
                {
                    var path = Path.Combine(directory, photo.FileName);
                    var path2 = Path.Combine(directory, photo.FileName.Split(".")[0] + "_edit." + photo.FileName.Split(".")[1]);
                    PhotoFileSiteCheck checkphoto = new PhotoFileSiteCheck { Path = path, TimeStamp = model.TimeStamp, SiteCheckId = lastadded.Id, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                    _context.Add(checkphoto);

                    using (var stream = new FileStream(path, FileMode.Create))
                    {
                        await photo.CopyToAsync(stream);
                    };
                    if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                    {
                        PhotoExtensions.SaveAndCompressJpeg(path, 80);
                    }

                }
                await _context.SaveChangesAsync();
                return RedirectToAction("MainMenu");
            }
            else
            {
                return NotFound();
            }
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Decommission()
        {
            var user = await _userManager.GetUserAsync(User);
            ViewData["ProjectId"] = await GetProjectList();
            ViewData["MeasPointId"] = new SelectList(_context.MeasPoints.Include(x => x.Project).Include(x => x.MeasType).Where(x => x.Project.DivisionId.Equals(user.DivisionId) && x.Project.Active.Equals(true) && x.MeasType.Type.ToLower().Contains("level") && x.ToBeHidden.Equals(false)).OrderBy(x => x.Name), "Id", "Name");
            ViewData["SubProjectId"] = new SelectList(_context.SubProjects, "Id", "Name");
            
            return View();
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Decommissions()
        {
            var user = await _userManager.GetUserAsync(User);
            if (User.IsInRole("Admin"))
            {
                var checksAdmin = await _context.Decommissions.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).OrderByDescending(x => x.TimeStamp).ToListAsync();
                return View("Reports/Decommissions", checksAdmin);
            }

            var checks = await _context.Decommissions.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.Project.DivisionId.Equals(user.DivisionId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
            return View("Reports/Decommissions", checks);
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> DecommissionReport(int? id)
        {
            if (id != null)
            {
                var check = await _context.Decommissions.Where(x => x.Id.Equals(id))
                    .Include(x => x.Photos)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject).SingleOrDefaultAsync();
                return View("Reports/_Decommission", check);
            }
            else
            {
                return NotFound();
            }
        }
        [HttpGet]
        [AllowAnonymous]
        public async Task<IActionResult> DecommissionReport_PDF(int? id)
        {
            if (id != null)
            {
                var check = await _context.Decommissions.Where(x => x.Id.Equals(id))
                    .Include(x => x.Photos)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject).SingleOrDefaultAsync();
                return new ViewAsPdf("Reports/_Decommission", check);
            }
            else
            {
                return NotFound();
            }
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Upload_Photo_Decom(int? id, IFormFile[] files)
        {
            if (id != null)
            {
                var lastadded = await _context.Decommissions.Include(x => x.Project).Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                var directory = _env.WebRootPath + "\\AHAK\\Decommissions\\" + lastadded.Id.ToString() + "\\";
                if (!Directory.Exists(directory) && files != null)
                {
                    Directory.CreateDirectory(directory);
                }
                foreach (IFormFile photo in files)
                {
                    var path = Path.Combine(directory, photo.FileName);
                    var path2 = Path.Combine(directory, photo.FileName.Split(".")[0] + "_edit." + photo.FileName.Split(".")[1]);
                    PhotoFileDecommission checkphoto = new PhotoFileDecommission { Path = path, TimeStamp = lastadded.TimeStamp, DecommissionId = lastadded.Id, Latitude = Convert.ToDouble(lastadded.Latitude), Longitude = Convert.ToDouble(lastadded.Longitude) };
                    _context.Add(checkphoto);
                    await _context.SaveChangesAsync();
                    using (var stream = new FileStream(path, FileMode.Create))
                    {
                        await photo.CopyToAsync(stream);
                    };
                    if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                    {
                        PhotoExtensions.SaveAndCompressJpeg(path, 80);
                    }

                }

                return RedirectToAction("Decommissions");
            }
            else
            {
                return NotFound();
            }
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager")]
        [RequestSizeLimit(900000000)]
        public async Task<IActionResult> Edit_Decommission(int? id)
        {
            if (id != null)
            {
                var user = await _userManager.GetUserAsync(User);
                var decom = await _context.Decommissions.Include(x => x.Project).SingleOrDefaultAsync(x => x.Id.Equals(id));
                if (decom.Project.DivisionId != user.DivisionId && !User.IsInRole("Admin"))
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You do not have access to this item" });
                }
                else
                {
                    ViewData["ProjectId"] = await GetProjectList();
                    ViewData["SubProjectId"] = new SelectList(_context.SubProjects.Include(x => x.Project).Where(x => x.Project.DivisionId.Equals(user.Division)), "Id", "Name");
                    ViewData["MeasPointId"] = new SelectList(_context.MeasPoints.Include(x => x.Project).Where(x => x.Project.DivisionId.Equals(user.DivisionId)), "Id", "Name");
                    return View("Edit_Decommission", decom);
                }
            }
            else
            {
                return NotFound();
            }
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        [RequestSizeLimit(900000000)]
        public async Task<IActionResult> Edit_Decommission(Decommission model, IFormFile[] files)
        {
            if (ModelState.IsValid)
            {
                _context.Update(model);
                if (model.MeasPointId != null)
                {
                    var mp = await _context.MeasPoints.FindAsync(model.MeasPointId);
                    mp.ToBeHidden = true;
                    _context.Update(mp);
                }
                else
                {
                    var mp = await _context.MeasPoints.SingleOrDefaultAsync(x => x.Name.ToLower().Equals(model.Wellname.ToLower()));
                    if (mp != null)
                    {
                        mp.ToBeHidden = true;
                        _context.Update(mp);
                    }
                }
                await _context.SaveChangesAsync();
                var directory = _env.WebRootPath + "\\AHAK\\Decommissions\\" + model.Id.ToString() + "\\";
                if (files != null)
                {
                    if (!Directory.Exists(directory) && files.Count() > 0)
                    {
                        Directory.CreateDirectory(directory);
                    }
                    foreach (IFormFile photo in files)
                    {
                        var path = Path.Combine(directory, photo.FileName);
                        var path2 = Path.Combine(directory, photo.FileName.Split(".")[0] + "_edit." + photo.FileName.Split(".")[1]);
                        PhotoFileDecommission checkphoto = new PhotoFileDecommission { Path = path, TimeStamp = model.TimeStamp, DecommissionId = model.Id, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                        _context.Add(checkphoto);

                        using (var stream = new FileStream(path, FileMode.Create))
                        {
                            await photo.CopyToAsync(stream);
                        };
                        if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                        {
                            PhotoExtensions.SaveAndCompressJpeg(path, 80);
                        }

                    }
                    await _context.SaveChangesAsync();
                }
            }
            else
            {
                ViewData["ProjectId"] = await GetProjectList();
                ViewData["SubProjectId"] = new SelectList(_context.SubProjects.Where(x => x.ProjectId.Equals(model.ProjectId)), "Id", "Name");
                ViewData["MeasPointId"] = new SelectList(_context.MeasPoints.Where(x => x.ProjectId.Equals(model.ProjectId) && x.ToBeHidden.Equals(false)), "Id", "Name");
                return View("Edit_Decommission", model);
            }
            return RedirectToAction("MainMenu");
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        [RequestSizeLimit(900000000)]
        public async Task<IActionResult> Decommission(Decommission model, IFormFile[] files)
        {
            if (ModelState.IsValid)
            {
                var user = await _userManager.GetUserAsync(User);
                model.DoneBy = user.full_name();
                model.EnteredIntoDataBase = DateTime.Now;
                _context.Add(model);
                await _context.SaveChangesAsync();
                var lastadded = await _context.Decommissions.Include(x => x.Project).LastAsync();
                var directory = _env.WebRootPath + "\\AHAK\\Decommissions\\" + lastadded.Id.ToString() + "\\";
                if (!Directory.Exists(directory) && files != null)
                {
                    Directory.CreateDirectory(directory);
                }
                foreach (IFormFile photo in files)
                {
                    var path = Path.Combine(directory, photo.FileName);
                    var path2 = Path.Combine(directory, photo.FileName.Split(".")[0] + "_edit." + photo.FileName.Split(".")[1]);
                    PhotoFileDecommission checkphoto = new PhotoFileDecommission { Path = path, TimeStamp = model.TimeStamp, DecommissionId = lastadded.Id, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                    _context.Add(checkphoto);

                    using (var stream = new FileStream(path, FileMode.Create))
                    {
                        await photo.CopyToAsync(stream);
                    };
                    if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                    {
                        PhotoExtensions.SaveAndCompressJpeg(path, 80);
                    }

                }
                if (model.ItemTypeId != null)
                {
                    var itemtype = await _context.ItemTypes.Include(x => x.ReportType).Where(x => x.ProjectId.Equals(lastadded.ProjectId) && x.ReportType.Type.Equals("Decommission") && x.Id.Equals(model.ItemTypeId)).SingleOrDefaultAsync();
                    if (itemtype != null)
                    {
                        Install inst = new Install
                        {
                            ToBePaid = true,
                            ItemTypeId = itemtype.Id,
                            Latitude = Convert.ToDouble(lastadded.Latitude),
                            Longitude = Convert.ToDouble(lastadded.Longitude),
                            TimeStamp = lastadded.TimeStamp,
                            InvoiceDate = DateTime.Now.Date,
                            RentalStartDate = lastadded.TimeStamp,
                            Install_Text = lastadded.Wellname + " : " + lastadded.GeneralComments,
                            isInstalled = true,
                            Amount = 1,
                            ProjectId = lastadded.ProjectId,
                            SubProjectId = lastadded.SubProjectId,
                            EnteredIntoDataBase = DateTime.Now,
                            LastEditedInDataBase = DateTime.Now
                        };
                        _context.Installations.Add(inst);
                        await _context.SaveChangesAsync();
                        var lastinst = await _context.Installations.LastAsync();
                        var directory2 = _env.WebRootPath + "\\AHAK\\InstallPhotos\\" + lastinst.Id.ToString() + "\\";
                        if (!Directory.Exists(directory2))
                        {
                            Directory.CreateDirectory(directory2);
                        }
                        foreach (IFormFile photo in files)
                        {
                            var path = Path.Combine(directory2, photo.FileName);
                            var path2 = Path.Combine(directory2, photo.FileName.Split(".")[0] + "_edit." + photo.FileName.Split(".")[1]);
                            PhotoFileInstalled2 installphoto = new PhotoFileInstalled2 { Path = path, TimeStamp = model.TimeStamp, InstallId = lastinst.Id, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                            _context.Add(installphoto);
                            var stream = new FileStream(path, FileMode.Create);
                            await photo.CopyToAsync(stream);
                            stream.Close();
                            if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                            {
                                PhotoExtensions.SaveAndCompressJpeg(path, 75);
                            }
                        }
                        CoordTrack2 installCoords = new CoordTrack2 { InstallId = lastinst.Id, MobilizeId = null, MeasPointId = null, TypeCoord = "Installed", TimeStamp = model.TimeStamp, Latitude = model.Latitude, Longitude = model.Longitude };
                        _context.Add(installCoords);
                        Log2 newLog = new Log2 { ItemTypeId = lastinst.ItemTypeId, Description = _SharedLocalizer.GetLocalizedHtmlString("Item Installed.:") + " " + lastinst.Install_Text + " : " + lastinst.Id.ToString(), TimeStamp = model.TimeStamp, PhotoPath = directory2, TheUser = user.full_name() };
                        _context.Add(newLog);

                    }
                }
                await _context.SaveChangesAsync();


                return RedirectToAction("MainMenu");
            }
            else
            {
                return NotFound();
            }
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Edit_GeneratorCheck(int? id)
        {
            if (id != null)
            {
                var gentest = await _context.GeneratorChecks.FindAsync(id);
                ViewData["ProjectId"] = await GetProjectList();
                ViewData["SubProjectId"] = new SelectList(_context.SubProjects.Where(x => x.ProjectId.Equals(gentest.ProjectId)), "Id", "Name");

                return View(gentest);

            }
            else
            {
                return NotFound();
            }
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> GeneratorCheck()
        {
            ViewData["ProjectId"] = await GetProjectList();
            ViewData["Text"] = new List<SelectListItem>
                                {
                                    new SelectListItem { Text = "Generator Nr. 1 (Atlas Copco)", Value = "Svaneknoppen" },
                                    new SelectListItem { Text = "Generator Nr. 2 (Atlas Copco)", Value = "Svaneknoppen" },
                                    new SelectListItem { Text = "Generator Nr. 3 (Repto)", Value = "Svaneknoppen" },
                                    new SelectListItem { Text = "Generator Nr. 4 (Repto)", Value = "Færgehavnsvej" },
                                    new SelectListItem { Text = "Generator Nr. 5 (Atlas Copco)", Value = "Baltikavej" },
                                    new SelectListItem { Text = "Generator Nr. 6 (Atlas Copco)", Value = "Baltikavej" },
                                    new SelectListItem { Text = "Generator Nr. 7 (Atlas Copco)", Value = "Baltikavej" },
                                    new SelectListItem { Text = "Generator Nr. 8 (GSV)", Value = "Baltikavej" },
                                    new SelectListItem { Text = "Generator Nr. 9 (Repto)", Value = "Baltikavej" },
                                    new SelectListItem { Text = "Generator Nr. 10 (Repto)", Value = "Baltikavej" },
                                    new SelectListItem { Text = "Generator Nr. 11 (Repto)", Value = "Baltikavej" },
                                    new SelectListItem { Text = "Generator Nr. 12 (Repto)", Value = "Baltikavej" },
                                    new SelectListItem { Text = "Generator Nr. 13 (Repto)", Value = "Nordsøvej, Copenhagen" }
                                };


            return View();
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> GeneratorChecks()
        {
            var user = await _userManager.GetUserAsync(User);
            if (User.IsInRole("Admin"))
            {
                var checksAdmin = await _context.GeneratorChecks.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).OrderByDescending(x => x.TimeStamp).ToListAsync();
                return View("Reports/GeneratorChecks", checksAdmin);
            }

            var checks = await _context.GeneratorChecks.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.Project.DivisionId.Equals(user.DivisionId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
            return View("Reports/GeneratorChecks", checks);
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        [RequestSizeLimit(900000000)]
        public async Task<IActionResult> GeneratorCheck(GeneratorCheck model, IFormFile[] files)
        {
            if (ModelState.IsValid)
            {
                var user = await _userManager.GetUserAsync(User);
                model.DoneBy = user.full_name();
                model.EnteredIntoDataBase = DateTime.Now;
                _context.Add(model);
                await _context.SaveChangesAsync();
                var lastadded = await _context.GeneratorChecks.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).LastAsync();
                var directory = _env.WebRootPath + "\\AHAK\\GeneratorChecks\\" + lastadded.Id.ToString() + "\\";
                if (!Directory.Exists(directory) && files != null)
                {
                    Directory.CreateDirectory(directory);
                }
                foreach (IFormFile photo in files)
                {
                    var path = Path.Combine(directory, photo.FileName);
                    var path2 = Path.Combine(directory, photo.FileName.Split(".")[0] + "_edit." + photo.FileName.Split(".")[1]);
                    PhotoFileGeneratorCheck checkphoto = new PhotoFileGeneratorCheck { Path = path, TimeStamp = model.TimeStamp, GeneratorCheckId = lastadded.Id, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                    _context.Add(checkphoto);

                    using (var stream = new FileStream(path, FileMode.Create))
                    {
                        await photo.CopyToAsync(stream);
                    };
                    if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                    {
                        PhotoExtensions.SaveAndCompressJpeg(path, 80);
                    }
                }
                await _context.SaveChangesAsync();
                bool sendMail = false;
                if (lastadded.ProjectId == 437 || lastadded.ProjectId == 653)
                {
                    sendMail = (lastadded.Diesel_Level < 80
                        || lastadded.SpareTank_Level < 80
                        || !lastadded.Coolant
                        || !lastadded.Oil_Level
                        || lastadded.Generator_Started.Equals("No")
                        || (lastadded.Equipment_Started.Equals("No") && lastadded.Full_Load)
                        || lastadded.Generator_Stopped.Equals("No")
                        || (lastadded.Equipment_Started_After.Equals("No") && lastadded.Full_Load));

                }
                else
                {
                    sendMail = (lastadded.Diesel_Level < 50
                        || !lastadded.Coolant
                        || !lastadded.Oil_Level
                        || lastadded.Generator_Started.Equals("No")
                        || lastadded.Equipment_Started.Equals("No")
                        || lastadded.Generator_Stopped.Equals("No")
                        || lastadded.Equipment_Started_After.Equals("No"));
                }

                if (sendMail)
                {
                    ViewAsPdf pdf = new ViewAsPdf("Reports/_GeneratorCheck", lastadded)
                    {
                        FileName = "GeneratorCheck_" + lastadded.Project.Abbreviation + "_" + lastadded.TimeStamp.ToString("yyyy-MM-dd") + ".pdf",
                    };
                    byte[] pdfData = await pdf.BuildFile(ControllerContext);

                    var file = Convert.ToBase64String(pdfData);
                    string footerstringHTML = "<br />Hölscher Jensen A/S<br />Fabriksparken 37<br />2600 Glostrup<br />Denmark";
                    string footerstringPLAIN = "\r\n\r\nHölscher Jensen A/S \r\nFabriksparken 37\r\n2600 Glostrup\r\nDenmark";

                    var recipients = new List<string> { "ofw@hj-as.dk", "jaj@hj-as.dk", "dmm@hj-as.dk", "bin@hj-as.dk" };

                    string subject = "Generator Test Problem";
                    string message = "Problems during Generator test: " + lastadded.Id.ToString() +
                                     ". Test performed on: " + lastadded.TimeStamp.ToString() +
                                     ". On Project: " + lastadded.Project.Name;

                    if (lastadded.ProjectId == 437 || lastadded.ProjectId == 653)
                    {
                        recipients.Add("jonba@BESIX-MTH.com");//jonba@besix-mth.dk

                        if (lastadded.GeneratorName == "Generator Nr. 1 (Atlas Copco)"
                            || lastadded.GeneratorName == "Generator Nr. 2 (Atlas Copco)"
                            //|| lastadded.GeneratorName == "Generator Nr. 3 (Repto)"
                            || lastadded.GeneratorName == "Generator Nr. 5 (Atlas Copco)"
                            || lastadded.GeneratorName == "Generator Nr. 6 (Atlas Copco)"
                            || lastadded.GeneratorName == "Generator Nr. 7 (Atlas Copco)")
                        {
                            recipients.Add("jan.saltoft@atlascopco.com");
                            recipients.Add("erfan.danesh@atlascopco.com");
                        }
                        else if (lastadded.GeneratorName == "Generator Nr. 4 (Repto)"
                            || lastadded.GeneratorName == "Generator Nr. 3 (Repto)"
                            || lastadded.GeneratorName == "Generator Nr. 9 (Repto)"
                            || lastadded.GeneratorName == "Generator Nr. 10 (Repto)"
                            || lastadded.GeneratorName == "Generator Nr. 11 (Repto)"
                            || lastadded.GeneratorName == "Generator Nr. 12 (Repto)"
                            || lastadded.GeneratorName == "Generator Nr. 13 (Repto)")
                        {
                            recipients.Add("ml@repto.dk");
                            recipients.Add("lh@repto.dk");
                        }
                        else if (lastadded.GeneratorName == "Generator Nr. 8 (GSV)")
                        {
                            recipients.Add("bss@gsv.dk");
                        }
                    }

                    Debug.WriteLine($"Message: {message}");
                    foreach (var email in recipients)
                    {
                        Debug.WriteLine($"Send email to: {email}");
                        await _emailSender.SendEmailAsync2(email, subject, message, footerstringHTML, footerstringPLAIN, pdf.FileName, file);

                    }
                }

                /*if (lastadded.Diesel_Level < 50 || !lastadded.Coolant || !lastadded.Oil_Level || lastadded.Generator_Started.Equals("No") || lastadded.Equipment_Started.Equals("No") || lastadded.Generator_Stopped.Equals("No") || lastadded.Equipment_Started_After.Equals("No"))
                    {
                        ViewAsPdf pdf = new ViewAsPdf("Reports/_GeneratorCheck", lastadded)
                        {
                            FileName = "GeneratorCheck_" + lastadded.Project.Abbreviation + "_" + lastadded.TimeStamp.ToString("yyyy-MM-dd") + ".pdf",
                        };
                        byte[] pdfData = await pdf.BuildFile(ControllerContext);

                        var file = Convert.ToBase64String(pdfData);
                        string footerstringHTML = "<br />Hölscher Jensen A/S<br />Fabriksparken 37<br />2600 Glostrup<br />Denmark";
                        string footerstringPLAIN = "\r\n\r\nHölscher Jensen A/S \r\nFabriksparken 37\r\n2600 Glostrup\r\nDenmark";

                        var recipients = new[] { "bin@hj-as.dk" };                       

                        string subject = "Generator Test Problem";
                        string message = "Problems during Generator test: " + lastadded.Id.ToString() +
                                         ". Test performed on: " + lastadded.TimeStamp.ToString() +
                                         ". On Project: " + lastadded.Project.Name;

                        foreach (var email in recipients)
                        {
                           await _emailSender.SendEmailAsync2(email, subject, message, footerstringHTML, footerstringPLAIN, pdf.FileName, file);
                        }
                }*/

                return RedirectToAction("MainMenu");
            }
            else
            {
                foreach (var error in ModelState.Values.SelectMany(v => v.Errors))
                {
                    System.Diagnostics.Debug.WriteLine("Errors in GeneratorCheck: " + error.ErrorMessage);

                }
                return NotFound();
            }
        }
        [Authorize(Roles = "Admin")]
        [HttpGet]
        public async Task<IActionResult> CreateDecomEditPhotos()
        {
            var photos = await _context.PhotoFilesDecommission.ToListAsync();
            foreach (var photo in photos)
            {
                //@String.Concat("/AHAK/", @String.Concat(photo1.Path.Split(".")[0], "_edit.", photo1.Path.Split(".")[1]).Replace("\\", "/").Split("/AHAK/")[1])
                if (!photo.Path.Contains("edit"))
                {
                    string theeditpath = String.Concat(photo.Path.Split(".")[0], "_edit.", photo.Path.Split(".")[1]);

                    if (!System.IO.File.Exists(theeditpath) && System.IO.File.Exists(photo.Path))
                    {
                        if (photo.Path.ToLower().Contains(".jpg") || photo.Path.ToLower().Contains(".jpeg"))
                        {
                            PhotoExtensions.SaveAndCompressJpeg(photo.Path, 80);
                        }
                    }
                }
            }
            return RedirectToAction("MainMenu");
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        [RequestSizeLimit(900000000)]
        public async Task<IActionResult> Edit_GeneratorCheck(GeneratorCheck model, IFormFile[] files)
        {
            if (ModelState.IsValid)
            {
                _context.Update(model);
                var directory = _env.WebRootPath + "\\AHAK\\GeneratorChecks\\" + model.Id.ToString() + "\\";
                if (!Directory.Exists(directory) && files != null)
                {
                    Directory.CreateDirectory(directory);
                }
                foreach (IFormFile photo in files)
                {
                    var path = Path.Combine(directory, photo.FileName);
                    var path2 = Path.Combine(directory, photo.FileName.Split(".")[0] + "_edit." + photo.FileName.Split(".")[1]);
                    PhotoFileGeneratorCheck checkphoto = new PhotoFileGeneratorCheck { Path = path, TimeStamp = model.TimeStamp, GeneratorCheckId = model.Id, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                    _context.Add(checkphoto);
                    using (var stream = new FileStream(path, FileMode.Create))
                    {
                        await photo.CopyToAsync(stream);
                    };
                    if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                    {
                        PhotoExtensions.SaveAndCompressJpeg(path, 80);
                    }

                }
                await _context.SaveChangesAsync();
                return RedirectToAction("MainMenu");
            }
            else
            {
                return NotFound();
            }
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> GeneratorCheckReport(int? id)
        {
            if (id != null)
            {
                var check = await _context.GeneratorChecks.Where(x => x.Id.Equals(id))
                    .Include(x => x.Photos)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject).SingleOrDefaultAsync();
                return View("Reports/_GeneratorCheck", check);
            }
            else
            {
                return NotFound();
            }
        }
        [HttpGet]
        [AllowAnonymous]
        public async Task<IActionResult> GeneratorCheckReport_PDF(int? id)
        {
            if (id != null)
            {
                var check = await _context.GeneratorChecks.Where(x => x.Id.Equals(id))
                    .Include(x => x.Photos)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject).SingleOrDefaultAsync();
                return new ViewAsPdf("Reports/_GeneratorCheck", check);
            }
            else
            {
                return NotFound();
            }
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> WTPCheck()
        {
            ViewData["ProjectId"] = await GetProjectList();
            return View();
        }

        //WaterCare
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> WaterCareCheck()
        {
            ViewData["ProjectId"] = await GetProjectList();
            return View();
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> WTPChecks()
        {
            var user = await _userManager.GetUserAsync(User);
            if (User.IsInRole("Admin"))
            {
                var checksAdmin = await _context.WTPChecks.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).OrderByDescending(x => x.TimeStamp).ToListAsync();
                return View("Reports/WTPChecks", checksAdmin);
            }

            var checks = await _context.WTPChecks.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.Project.DivisionId.Equals(user.DivisionId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
            return View("Reports/WTPChecks", checks);
        }

        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> WatercareChecks()
        {
            var user = await _userManager.GetUserAsync(User);
            if (User.IsInRole("Admin"))
            {
                var checksAdmin = await _context.Wtc_Checks.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).OrderByDescending(x => x.TimeStamp).ToListAsync();
                return View("Reports/WatercareChecks", checksAdmin);
            }

            var checks = await _context.Wtc_Checks.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.Project.DivisionId.Equals(user.DivisionId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
            return View("Reports/WatercareChecks", checks);
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,ProjectMember")]
        [RequestSizeLimit(900000000)]
        public async Task<IActionResult> WTPCheck(WTPCheck model, IFormFile[] files)
        {
            if (ModelState.IsValid)
            {
                var user = await _userManager.GetUserAsync(User);
                model.DoneBy = user.full_name();
                model.EnteredIntoDataBase = DateTime.Now;
                _context.Add(model);
                await _context.SaveChangesAsync();
                var lastadded = await _context.WTPChecks.LastAsync();
                var directory = _env.WebRootPath + "\\AHAK\\WTPChecks\\" + lastadded.Id.ToString() + "\\";
                if (!Directory.Exists(directory) && files != null)
                {
                    Directory.CreateDirectory(directory);
                }
                foreach (IFormFile photo in files)
                {
                    var fileNameCleaned = photo.FileName.Replace(" ", ""); // Remove all spaces
                    var path = Path.Combine(directory, fileNameCleaned);
                    //var path2 = Path.Combine(directory, photo.FileName.Split(".")[0] + "_edit." + photo.FileName.Split(".")[1]);
                    PhotoFileWTPCheck checkphoto = new PhotoFileWTPCheck { Path = path, TimeStamp = model.TimeStamp, WTPCheckId = lastadded.Id, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                    _context.Add(checkphoto);
                    using (var stream = new FileStream(path, FileMode.Create))
                    {
                        await photo.CopyToAsync(stream);
                    }
                    ;
                    if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                    {
                        PhotoExtensions.SaveAndCompressJpeg(path, 80);
                    }

                }
                await _context.SaveChangesAsync();
                return RedirectToAction("MainMenu");
            }
            else
            {
                return NotFound();
            }
        }

        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,ProjectMember")]
        [RequestSizeLimit(900000000)]
        public async Task<IActionResult> WatercareCheck(WatercareCheck model, IFormFile[] files)
        {
            if (ModelState.IsValid)
            {
                var user = await _userManager.GetUserAsync(User);
                model.DoneBy = user.full_name();
                model.EnteredIntoDataBase = DateTime.Now;
                _context.Add(model);
                await _context.SaveChangesAsync();
                var lastadded = await _context.Wtc_Checks.LastAsync();
                var directory = _env.WebRootPath + "\\AHAK\\WatercareChecks\\" + lastadded.Id.ToString() + "\\";
                if (!Directory.Exists(directory) && files != null)
                {
                    Directory.CreateDirectory(directory);
                }
                foreach (IFormFile photo in files)
                {
                    var fileNameCleaned = photo.FileName.Replace(" ", ""); // Remove all spaces
                    var path = Path.Combine(directory, fileNameCleaned);

                    // var path2 = Path.Combine(directory, photo.FileName.Split(".")[0] + "_edit." + photo.FileName.Split(".")[1]);
                    PhotoFileWtcCheck checkphoto = new PhotoFileWtcCheck { Path = path, TimeStamp = model.TimeStamp, WaterCareCheckId = lastadded.Id, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                    _context.Add(checkphoto);
                    using (var stream = new FileStream(path, FileMode.Create))
                    {
                        await photo.CopyToAsync(stream);
                    }
                    ;
                    if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                    {
                        PhotoExtensions.SaveAndCompressJpeg(path, 80);
                    }

                }
                await _context.SaveChangesAsync();
                return RedirectToAction("MainMenu");
            }
            else
            {
                return NotFound();
            }
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> WTPCheckReport(int? id)
        {
            if (id != null)
            {
                var check = await _context.WTPChecks.Where(x => x.Id.Equals(id))
                    .Include(x => x.Photos)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject).SingleOrDefaultAsync();
                return View("Reports/_WTPCheck", check);
            }
            else
            {
                return NotFound();
            }
        }

        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> WatercareCheckReport(int? id)
        {
            if (id != null)
            {
                var check = await _context.Wtc_Checks.Where(x => x.Id.Equals(id))
                    .Include(x => x.Photos)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject).SingleOrDefaultAsync();
                return View("Reports/_WatercareCheck", check);
            }
            else
            {
                return NotFound();
            }
        }
        [HttpGet]
        [AllowAnonymous]
        public async Task<IActionResult> WTPCheckReport_PDF(int? id)
        {
            if (id != null)
            {
                var check = await _context.WTPChecks.Where(x => x.Id.Equals(id))
                    .Include(x => x.Photos)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject).SingleOrDefaultAsync();
                return new ViewAsPdf("Reports/_WTPCheck", check);
            }
            else
            {
                return NotFound();
            }
        }

        [HttpGet]
        [AllowAnonymous]
        public async Task<IActionResult> WatercareCheckReport_PDF(int? id)
        {
            if (id != null)
            {
                var check = await _context.Wtc_Checks.Where(x => x.Id.Equals(id))
                    .Include(x => x.Photos)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject).SingleOrDefaultAsync();
                return new ViewAsPdf("Reports/_WatercareCheck", check);
            }
            else
            {
                return NotFound();
            }
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> StepTestReport_PDF(int? id, string theimage)
        {
            if (id != null)
            {
                var test = await _context.ThreeStepTests.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                test.imagepath = theimage;
                _context.Update(test);
                await _context.SaveChangesAsync();
                var datas_dips = await _context.PumpTestDatas.Where(x => x.ThreeStepTestId.Equals(id)).ToListAsync();
                var datas_device = await _context.PumpTestDatasDevice.Where(x => x.ThreeStepTestId.Equals(id)).ToListAsync();
                var photos = await _context.PumpTestPhotos.Where(x => x.ThreeStepTestId.Equals(id)).ToListAsync();
                ThreeStepTestReport report = new ThreeStepTestReport(test, datas_dips, datas_device, photos);
                report.imagepath = theimage;
                //return new ViewAsPdf("Reports/_PumpTest",report);
                return new ViewAsPdf("Reports/_PumpTestPDF", report);
            }
            else { return NotFound(); }
        }

        //Sensor Calibration
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> SensorCalibration()
        {
            ViewData["ProjectId"] = await GetProjectList();
            return View("SensorCalibration");
        }
        
        [HttpPost]
        [RequestSizeLimit(900000000)]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> SensorCalibration(SensorCalibrationVM model, IFormFile[] files)
        {
            if (ModelState.IsValid)
            {
                var user = await _userManager.GetUserAsync(User);

                try
                {
                    SensorCalibration sensorCalibration = new SensorCalibration
                    {
                        EnteredIntoDataBase = DateTime.Now,
                        WellId = model.WellId,
                        RefLevel = model.RefLevel,
                        Hand_dip = model.Hand_dip,
                        ExpectedWaterlevel = model.ExpectedWaterlevel,
                        ScadaWaterlevel = model.ScadaWaterlevel,
                        SCADA_LevelMatch = model.SCADA_LevelMatch,
                        Comment = model.Comment,
                        TimeStamp = model.TimeStamp,
                        DoneBy = user.full_name(),
                        Signature = model.Signature,
                        ProjectId = model.ProjectId,
                        SubProjectId = model.SubProjectId
                    };
                    _context.Add(sensorCalibration);
                    await _context.SaveChangesAsync();

                    var itemadded = await _context.SensorCalibrations
                        .Include(x => x.Well)
                        .Include(x => x.Photos)
                        .Include(x => x.Project).ThenInclude(x => x.Division)
                        .LastAsync();

                    Debug.WriteLine($"Last item id: {itemadded.Id.ToString()}");

                    //var directory = _env.WebRootPath + "\\AHAK\\SsCPhotos\\" + itemadded.Id.ToString() + "\\";
                    //if (!Directory.Exists(directory) && files != null)
                    //{
                    //    Directory.CreateDirectory(directory);
                    //}
                    //foreach (IFormFile photo in files)
                    //{

                    //    var path = Path.Combine(directory, photo.FileName);

                    //    PhotoFileSensorCalibration scphoto = new PhotoFileSensorCalibration { Path = path, TimeStamp = model.TimeStamp, SensorCalibrationId = itemadded.Id };
                    //    _context.Add(scphoto);
                    //    var stream = new FileStream(path, FileMode.Create);
                    //    await photo.CopyToAsync(stream);
                    //    stream.Close();
                    //    if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                    //    {
                    //        PhotoExtensions.SaveAndCompressJpeg(path, 80);
                    //    }
                    //}
                    //await _context.SaveChangesAsync();

                    // send email
                    string file = "";
                    ViewAsPdf pdf = null;
                    try
                    {
                        pdf = new ViewAsPdf("Reports/_SensorCalibration", itemadded)
                        {
                            FileName = "SensorCalibration_" + itemadded.Project.Abbreviation + "_" + itemadded.TimeStamp.ToString("yyyy-MM-dd") + ".pdf",
                        };
                        byte[] pdfData = await pdf.BuildFile(ControllerContext);

                        file = Convert.ToBase64String(pdfData);
                    }
                    catch(Exception ex)
                    {
                        Debug.WriteLine($"Fail on creating Pdf: {ex.Message}");
                    }
                    

                    string footerstringHTML = "<br />Hölscher Jensen A/S<br />Fabriksparken 37<br />2600 Glostrup<br />Denmark";
                    string footerstringPLAIN = "\r\n\r\nHölscher Jensen A/S \r\nFabriksparken 37\r\n2600 Glostrup\r\nDenmark";

                    var recipients = new List<string> { "ofw@hj-as.dk", "bin@hj-as.dk" };// 
                    string subject = "Sensor Calibration";
                    string message = "Sensor Calibration for well: " + itemadded.Well.WellName +
                                     ". Performed on: " + itemadded.TimeStamp.ToString() +
                                     ". On Project: " + itemadded.Project.Name + "<br /><br />";

                    Debug.WriteLine($"Calibration Message: {message}");
                    foreach (var email in recipients)
                    {
                        Debug.WriteLine($"Send email to: {email}");
                        await _emailSender.SendEmailAsync2(email, subject, message, footerstringHTML, footerstringPLAIN, pdf.FileName, file);
                        //await _emailSender.TestSendEmailAsync(email, subject, message, footerstringHTML, footerstringPLAIN, pdf.FileName, file);

                    }
                    //done sending email
                }
                catch (Exception e)
                {
                    Debug.WriteLine($"Fail on sensor calibration: {e.Message}");
                    //return RedirectToAction("ErrorMessage", "Home", new { text = "Please take picture of this:" + Environment.NewLine +  e.ToString() });
                    return RedirectToAction("MainMenu", "TrackItems");
                }
            }
            return RedirectToAction("MainMenu", "TrackItems");
        }

        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> SensorCalibrations()
        {
            var user = await _userManager.GetUserAsync(User);
            //if (User.IsInRole("Admin"))
            //{
            //    var checksAdmin = await _context.GeneratorChecks.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).OrderByDescending(x => x.TimeStamp).ToListAsync();
            //    return View("Reports/GeneratorChecks", checksAdmin);
            //}

            var calibrations = await _context.SensorCalibrations.Include(x => x.Project).Include(x => x.SubProject).Include(x => x.Well).OrderByDescending(x => x.TimeStamp).ToListAsync();
            return View("Reports/SensorCalibrations", calibrations);
        }

        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Edit_SensorCalibration(int id)
        {
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            var model = await _context.SensorCalibrations.FindAsync(id);
            
            ViewData["ProjectId"] = await GetProjectList();
            ViewData["WellId"] = new SelectList(_context.Wells.Where(x => x.ProjectId.Equals(model.ProjectId)).OrderBy(x => x.WellName), "Id", "WellName", model.WellId);
            return View("Reports/Edit_SensorCalibration", model);
        }

        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Edit_SensorCalibration(SensorCalibration model, IFormFile[] files)
        {
            if (ModelState.IsValid)
            {
                _context.Update(model);
                await _context.SaveChangesAsync();

                //var directory = _env.WebRootPath + "\\AHAK\\MaintenancePhotos\\" + model.Id.ToString() + "\\";
                //if (!Directory.Exists(directory) && files != null)
                //{
                //    Directory.CreateDirectory(directory);
                //}
                //foreach (IFormFile photo in files)
                //{

                //    var path = Path.Combine(directory, photo.FileName);

                //    PhotoFileMaintenance maintenancephoto = new PhotoFileMaintenance { Path = path, TimeStamp = model.TimeStamp, MaintenanceId = model.Id, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                //    _context.Add(maintenancephoto);
                //    var stream = new FileStream(path, FileMode.Create);
                //    await photo.CopyToAsync(stream);
                //    stream.Close();
                //    if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                //    {
                //        PhotoExtensions.SaveAndCompressJpeg(path, 80);
                //    }
                //    await _context.SaveChangesAsync();
                //}
                return RedirectToAction("SensorCalibrations");
            }
            else
            {
                return NotFound();
            }
        }

        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Delete_SensorCalibration(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var ssCalibration = await _context.SensorCalibrations
                .FirstOrDefaultAsync(m => m.Id == id);
            if (ssCalibration == null)
            {
                return NotFound();
            }

            _context.Remove(ssCalibration);
            await _context.SaveChangesAsync();

            return RedirectToAction("SensorCalibrations", "TrackItems");
        }

        [HttpGet]
        [AllowAnonymous]
        public async Task<IActionResult> SensorCalibrationReport_PDF(int? id)
        {
            if (id != null)
            {
                var check = await _context.SensorCalibrations.Where(x => x.Id.Equals(id))
                    .Include(x => x.Well)
                    .Include(x => x.Photos)
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject).SingleOrDefaultAsync();
                return new ViewAsPdf("Reports/_SensorCalibration", check);
            }
            else
            {
                return NotFound();
            }
        }


        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> StepTestReport_PDF(int? id)
        {
            if (id != null)
            {
                var test = await _context.ThreeStepTests.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                var datas_dips = await _context.PumpTestDatas.Where(x => x.ThreeStepTestId.Equals(id)).ToListAsync();
                var datas_device = await _context.PumpTestDatasDevice.Where(x => x.ThreeStepTestId.Equals(id)).ToListAsync();
                var photos = await _context.PumpTestPhotos.Where(x => x.ThreeStepTestId.Equals(id)).ToListAsync();
                ThreeStepTestReport report = new ThreeStepTestReport(test, datas_dips, datas_device, photos);
                report.imagepath = test.imagepath;
                //return new ViewAsPdf("Reports/_PumpTest",report);
                return new ViewAsPdf("Reports/_PumpTestPDF", report);
            }
            else { return NotFound(); }
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> ClearPumpTest()
        {
            var user = await _userManager.GetUserAsync(User);
            ViewData["ProjectId"] = await GetProjectList();
            ViewData["MeasPointId"] = new SelectList(_context.MeasPoints.Include(x => x.Project).Include(x => x.MeasType).Where(x => x.Project.DivisionId.Equals(user.DivisionId) && x.Project.Active.Equals(true) && x.MeasType.Type.ToLower().Contains("level") && x.ToBeHidden.Equals(false)).OrderBy(x => x.Name), "Id", "Name");
            ViewData["SubProjectId"] = new SelectList(_context.SubProjects, "Id", "Name");
            return View();
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        [RequestSizeLimit(900000000)]
        public async Task<IActionResult> ClearPumpTest(ClearPumpTest model, string Times, string Flows, string M3s, string Dips, string Coms, IFormFile[] files)
        {
            var user = await _userManager.GetUserAsync(User);
            if (ModelState.IsValid)
            {
                model.DoneBy = user.full_name();
                if (model.Ref_Level == null)
                {
                    model.Ref_Level = 0.0;
                }
                _context.Add(model);
                await _context.SaveChangesAsync();
                var lastpumptest = await _context.ClearPumpTests.LastAsync();
                string[] times = Times.Split(",");
                string[] flows = Flows.Split(",");
                string[] m3s = M3s.Split(",");
                string[] dips = Dips.Split(",");
                string[] coms = Coms.Split(",");
                for (int i = 0; i < times.Length; i++)
                {
                    if (times[i] != "")
                    {
                        ClearPumpTestData PTD = new ClearPumpTestData();
                        PTD.TimeStamp = TimeSpan.Parse(times[i]);
                        try
                        {
                            PTD.Flow = Convert.ToDouble(flows[i]);
                        }
                        catch
                        {
                            PTD.Flow = 0.0;
                        }
                        try
                        {
                            PTD.m3 = Convert.ToDouble(m3s[i]);
                        }
                        catch
                        {
                            PTD.m3 = 0.0;
                        }
                        try
                        {
                            PTD.Dip = Convert.ToDouble(dips[i]);
                        }
                        catch
                        {
                            PTD.Dip = 0.0;
                        }
                        PTD.Comment = coms[i];
                        PTD.ClearPumpTestId = lastpumptest.Id;
                        _context.Add(PTD);

                    }
                    else
                    {
                        break;
                    }
                }
                await _context.SaveChangesAsync();
                var directory = _env.WebRootPath + "\\TrackItems\\ClearPumpTests\\" + lastpumptest.Wellname + "\\" + lastpumptest.Id.ToString() + "\\";
                if (!Directory.Exists(directory) && files != null)
                {
                    Directory.CreateDirectory(directory);
                }
                foreach (IFormFile photo in files)
                {
                    var path = Path.Combine(directory, photo.FileName);
                    ClearPumpTestPhoto pumptestphoto = new ClearPumpTestPhoto { Path = path, TimeStamp = lastpumptest.Report_Date, ClearPumpTestId = lastpumptest.Id };
                    _context.Add(pumptestphoto);
                    var stream = new FileStream(path, FileMode.Create);
                    await photo.CopyToAsync(stream);
                    //LOOK AT THIS!!!!!
                }

                var itemtype = await _context.ItemTypes.Include(x => x.ReportType).Where(x => x.ProjectId.Equals(lastpumptest.ProjectId) && x.ReportType.Type.Equals("ClearPumping")).SingleOrDefaultAsync();
                if (itemtype != null)
                {
                    Install inst = new Install
                    {
                        ToBePaid = true,
                        ItemTypeId = itemtype.Id,
                        Latitude = Convert.ToDouble(lastpumptest.Latitude),
                        Longitude = Convert.ToDouble(lastpumptest.Longitude),
                        TimeStamp = lastpumptest.Report_Date,
                        InvoiceDate = DateTime.Now.Date,
                        RentalStartDate = lastpumptest.Report_Date,
                        Install_Text = lastpumptest.Wellname,
                        UniqueID = "ClearPumping : " + lastpumptest.Wellname,
                        isInstalled = true,
                        Amount = 1,
                        ProjectId = lastpumptest.ProjectId,
                        SubProjectId = lastpumptest.SubProjectId,
                        EnteredIntoDataBase = DateTime.Now,
                        LastEditedInDataBase = DateTime.Now,
                        DoneBy = user.full_name()
                    };
                    _context.Installations.Add(inst);
                    await _context.SaveChangesAsync();
                    var lastinst = await _context.Installations.LastAsync();
                    var directory2 = _env.WebRootPath + "\\AHAK\\InstallPhotos\\" + lastinst.Id.ToString() + "\\";
                    if (!Directory.Exists(directory2) && files != null)
                    {
                        Directory.CreateDirectory(directory2);
                    }
                    foreach (IFormFile photo in files)
                    {
                        var path = Path.Combine(directory2, photo.FileName);
                        var path2 = Path.Combine(directory2, photo.FileName.Split(".")[0] + "_edit." + photo.FileName.Split(".")[1]);
                        PhotoFileInstalled2 installphoto = new PhotoFileInstalled2 { Path = path, TimeStamp = model.Report_Date, InstallId = lastinst.Id, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                        _context.Add(installphoto);
                        var stream = new FileStream(path, FileMode.Create);
                        await photo.CopyToAsync(stream);
                        stream.Close();
                        if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                        {
                            PhotoExtensions.SaveAndCompressJpeg(path, 85);
                        }
                    }
                    CoordTrack2 installCoords = new CoordTrack2 { InstallId = lastinst.Id, MobilizeId = null, MeasPointId = null, TypeCoord = "Installed", TimeStamp = model.Report_Date, Latitude = model.Latitude, Longitude = model.Longitude };
                    _context.Add(installCoords);
                    Log2 newLog = new Log2 { ItemTypeId = lastinst.ItemTypeId, Description = _SharedLocalizer.GetLocalizedHtmlString("Item Installed.:") + " " + lastinst.Install_Text + " : " + lastinst.Id.ToString(), TimeStamp = model.Report_Date, PhotoPath = directory2, TheUser = user.full_name() };
                    _context.Add(newLog);
                    await _context.SaveChangesAsync();
                }

                return RedirectToAction("MainMenu");
            }
            else { return NotFound(); }
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> ThreeStepTest()
        {
            var user = await _userManager.GetUserAsync(User);
            ViewData["ProjectId"] = await GetProjectList();
            ViewData["MeasPointId"] = new SelectList(_context.MeasPoints.Include(x => x.Project).Include(x => x.MeasType).Where(x => x.Project.DivisionId.Equals(user.DivisionId) && x.Project.Active.Equals(true) && x.MeasType.Type.ToLower().Contains("level") && x.ToBeHidden.Equals(false)).OrderBy(x => x.Name), "Id", "Name");
            ViewData["SubProjectId"] = new SelectList(_context.SubProjects, "Id", "Name");
            return View();
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        [RequestSizeLimit(900000000)]
        public async Task<IActionResult> ThreeStepTest(ThreeStepTestVM model, string Times, string Flows, string M3s, string Dips, string Coms, IFormFile[] files)
        {
            var user = await _userManager.GetUserAsync(User);
            if (ModelState.IsValid)
            {
                ThreeStepTest test = new ThreeStepTest();
                test.Bottom_well = model.Bottom_well;
                test.endtime = model.endtime;
                test.starttime = model.starttime;
                test.Water_level = model.Water_level;
                test.Water_Meter_After = model.Water_Meter_After;
                test.Water_Meter_Before = model.Water_Meter_Before;
                test.MeasPointId = model.MeasPointId;
                test.ProjectId = model.ProjectId;
                test.SubProjectId = model.SubProjectId;
                test.Wellname = model.Wellname;
                test.Report_Date = model.Report_Date;
                test.Ref_Level = model.Ref_Level;
                test.Init_Meas_Time = model.Init_Meas_Time;
                test.DoneBy = user.full_name();
                test.Latitude = model.Latitude;
                test.Longitude = model.Longitude;
                test.TestType = model.TestType;
                _context.Add(test);
                await _context.SaveChangesAsync();
            }
            string[] times = Times.Split(",");
            string[] flows = Flows.Split(",");
            string[] m3s = M3s.Split(",");
            string[] dips = Dips.Split(",");
            string[] coms = Coms.Split(",");
            var lastpumptest = await _context.ThreeStepTests.LastAsync();
            for (int i = 0; i < times.Length; i++)
            {
                if (times[i] != "")
                {
                  
                    PumpTestData PTD = new PumpTestData();
                    PTD.TimeStamp = TimeSpan.Parse(times[i]);
                    try
                    {
                        PTD.Flow = Convert.ToDouble(flows[i]);
                    }
                    catch
                    {
                        PTD.Flow = 0.0;
                    }
                    try
                    {
                        PTD.m3 = Convert.ToDouble(m3s[i]);
                    }
                    catch
                    {
                        PTD.m3 = 0.0;
                    }
                    try
                    {
                        PTD.Dip = Convert.ToDouble(dips[i]);
                    }
                    catch
                    {
                        PTD.Dip = 0.0;
                    }
                    PTD.Comment = coms[i];
                    PTD.ThreeStepTestId = lastpumptest.Id;
                    _context.Add(PTD);

                }
                else
                {
                    break;
                }
            }
            await _context.SaveChangesAsync();
            var directory = _env.WebRootPath + "\\TrackItems\\PumpTests\\" + lastpumptest.Wellname + "\\" + lastpumptest.Id.ToString() + "\\";
            if (!Directory.Exists(directory) && files != null)
            {
                Directory.CreateDirectory(directory);
            }
            foreach (IFormFile photo in files)
            {
                var path = Path.Combine(directory, photo.FileName);
                PumpTestPhoto pumptestphoto = new PumpTestPhoto { Path = path, TimeStamp = lastpumptest.Report_Date, ThreeStepTestId = lastpumptest.Id };
                _context.Add(pumptestphoto);
                var stream = new FileStream(path, FileMode.Create);
                await photo.CopyToAsync(stream);
            }
            if(model.TestType.Equals("Three Step Test")) { 
                var itemtype = await _context.ItemTypes.Include(x => x.ReportType).Where(x => x.ProjectId.Equals(lastpumptest.ProjectId) && x.ReportType.Type.Equals("ThreeStepTest")).SingleOrDefaultAsync();
                if (itemtype != null)
                {
                    Install inst = new Install
                    {
                        ToBePaid = true,
                        ItemTypeId = itemtype.Id,
                        Latitude = Convert.ToDouble(lastpumptest.Latitude),
                        Longitude = Convert.ToDouble(lastpumptest.Longitude),
                        TimeStamp = lastpumptest.Report_Date,
                        InvoiceDate = DateTime.Now.Date,
                        RentalStartDate = lastpumptest.Report_Date,
                        Install_Text = lastpumptest.Wellname,
                        isInstalled = true,
                        Amount = 1,
                        ProjectId = lastpumptest.ProjectId,
                        SubProjectId = lastpumptest.SubProjectId,
                        EnteredIntoDataBase = DateTime.Now,
                        LastEditedInDataBase = DateTime.Now,
                        DoneBy = user.full_name()
                    };
                    _context.Installations.Add(inst);
                    await _context.SaveChangesAsync();
                    var lastinst = await _context.Installations.LastAsync();
                    var directory2 = _env.WebRootPath + "\\AHAK\\InstallPhotos\\" + lastinst.Id.ToString() + "\\";
                    if (!Directory.Exists(directory2) && files != null)
                    {
                        Directory.CreateDirectory(directory2);
                    }
                    foreach (IFormFile photo in files)
                    {
                        var path = Path.Combine(directory2, photo.FileName);
                        var path2 = Path.Combine(directory2, photo.FileName.Split(".")[0] + "_edit." + photo.FileName.Split(".")[1]);
                        PhotoFileInstalled2 installphoto = new PhotoFileInstalled2 { Path = path, TimeStamp = model.Report_Date, InstallId = lastinst.Id, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                        _context.Add(installphoto);
                        var stream = new FileStream(path, FileMode.Create);
                        await photo.CopyToAsync(stream);
                        stream.Close();
                        if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                        {
                            PhotoExtensions.SaveAndCompressJpeg(path, 85);
                        }
                    }
                    CoordTrack2 installCoords = new CoordTrack2 { InstallId = lastinst.Id, MobilizeId = null, MeasPointId = null, TypeCoord = "Installed", TimeStamp = model.Report_Date, Latitude = model.Latitude, Longitude = model.Longitude };
                    _context.Add(installCoords);
                    Log2 newLog = new Log2 { ItemTypeId = lastinst.ItemTypeId, Description = _SharedLocalizer.GetLocalizedHtmlString("Item Installed.:") + " " + lastinst.Install_Text + " : " + lastinst.Id.ToString(), TimeStamp = model.Report_Date, PhotoPath = directory2, TheUser = user.full_name() };
                    _context.Add(newLog);
                    await _context.SaveChangesAsync();
                }
            }
            else if (model.TestType.Equals("Clear Pumping"))
            {
                var itemtype = await _context.ItemTypes.Include(x => x.ReportType).Where(x => x.ProjectId.Equals(lastpumptest.ProjectId) && x.ReportType.Type.Equals("ClearPumping")).SingleOrDefaultAsync();
                if (itemtype != null)
                {
                    Install inst = new Install
                    {
                        ToBePaid = true,
                        ItemTypeId = itemtype.Id,
                        Latitude = Convert.ToDouble(lastpumptest.Latitude),
                        Longitude = Convert.ToDouble(lastpumptest.Longitude),
                        TimeStamp = lastpumptest.Report_Date,
                        InvoiceDate = DateTime.Now.Date,
                        RentalStartDate = lastpumptest.Report_Date,
                        Install_Text = lastpumptest.Wellname,
                        isInstalled = true,
                        Amount = 1,
                        ProjectId = lastpumptest.ProjectId,
                        SubProjectId = lastpumptest.SubProjectId,
                        EnteredIntoDataBase = DateTime.Now,
                        LastEditedInDataBase = DateTime.Now,
                        DoneBy = user.full_name()
                    };
                    _context.Installations.Add(inst);
                    await _context.SaveChangesAsync();
                    var lastinst = await _context.Installations.LastAsync();
                    var directory2 = _env.WebRootPath + "\\AHAK\\InstallPhotos\\" + lastinst.Id.ToString() + "\\";
                    if (!Directory.Exists(directory2) && files != null)
                    {
                        Directory.CreateDirectory(directory2);
                    }
                    foreach (IFormFile photo in files)
                    {
                        var path = Path.Combine(directory2, photo.FileName);
                        var path2 = Path.Combine(directory2, photo.FileName.Split(".")[0] + "_edit." + photo.FileName.Split(".")[1]);
                        PhotoFileInstalled2 installphoto = new PhotoFileInstalled2 { Path = path, TimeStamp = model.Report_Date, InstallId = lastinst.Id, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                        _context.Add(installphoto);
                        var stream = new FileStream(path, FileMode.Create);
                        await photo.CopyToAsync(stream);
                        stream.Close();
                        if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                        {
                            PhotoExtensions.SaveAndCompressJpeg(path, 85);
                        }
                    }
                    CoordTrack2 installCoords = new CoordTrack2 { InstallId = lastinst.Id, MobilizeId = null, MeasPointId = null, TypeCoord = "Installed", TimeStamp = model.Report_Date, Latitude = model.Latitude, Longitude = model.Longitude };
                    _context.Add(installCoords);
                    Log2 newLog = new Log2 { ItemTypeId = lastinst.ItemTypeId, Description = _SharedLocalizer.GetLocalizedHtmlString("Item Installed.:") + " " + lastinst.Install_Text + " : " + lastinst.Id.ToString(), TimeStamp = model.Report_Date, PhotoPath = directory2, TheUser = user.full_name() };
                    _context.Add(newLog);
                    await _context.SaveChangesAsync();
                }
            }
            ViewData["ProjectId"] = await GetProjectList();
            ViewData["SubProjectId"] = new SelectList(_context.SubProjects, "Id", "Name");
            ViewData["MeasPointId"] = new SelectList(_context.MeasPoints.Include(x => x.Project).Where(x => x.Project.DivisionId.Equals(user.DivisionId) && x.Project.Active.Equals(true) && x.ToBeHidden.Equals(false)).OrderBy(x => x.Name), "Id", "Name");
            return View();
        }
        [HttpGet]
        [AllowAnonymous]
        public IActionResult ConvertLatLongToUTM()
        {
            return View();
        }
        [HttpPost]
        [AllowAnonymous]
        [Route("/TrackItems/ConvertLatLongToUTM/UTMCoords.csv")]
        [Produces("text/csv")]
        public IActionResult ConvertLatLongToUTM(IFormFile postedFile)
        {
            if (postedFile != null)
            {
                string fileExtension = Path.GetExtension(postedFile.FileName);

                //Validate uploaded file and return error.
                if (fileExtension != ".csv")
                {
                    return NotFound();
                }
                StringBuilder sb = new StringBuilder();
                List<LatLngUTMConverter.UTMResult> data = new List<LatLngUTMConverter.UTMResult>();
                LatLngUTMConverter ltUTMconv = new LatLngUTMConverter("WGS 84");
                LatLngUTMConverter.UTMResult utm;
                var headerrow = new List<string>(new string[] { "Easting", "Northing", "Zone" });
                sb.AppendLine(string.Join(";", headerrow.ToArray()));
                var fillerrow = new List<string>(new string[] { "", "", "" });
                using (var sreader = new StreamReader(postedFile.OpenReadStream(), System.Text.Encoding.GetEncoding("iso-8859-1")))
                {
                    while (!sreader.EndOfStream)
                    {
                        string[] rows = sreader.ReadLine().Split(';');
                        if (rows.Length < 2)
                        {
                            rows = sreader.ReadLine().Split(',');
                        }
                        if (rows[0] != "")
                        {
                            double thelat;
                            double thelng;
                            thelat = Convert.ToDouble(rows[0].Replace(",", ".").Replace("<", "").Trim());
                            thelng = Convert.ToDouble(rows[1].Replace(",", ".").Replace("<", "").Trim());
                            utm = ltUTMconv.convertLatLngToUtm(thelat, thelng);
                            data.Add(utm);
                        }
                    }
                }
                foreach (LatLngUTMConverter.UTMResult res in data)
                {
                    fillerrow[0] = res.Easting.ToString();
                    fillerrow[1] = res.Northing.ToString();
                    fillerrow[2] = res.ZoneNumber.ToString();
                    sb.AppendLine(string.Join(";", fillerrow.ToArray()));
                }
                return File(System.Text.Encoding.ASCII.GetBytes(sb.ToString()), "text/csv", "UTMCoords.csv");
            }
            else
            {
                return NotFound();
            }
        }
        public async Task<IActionResult> PipeCuts()
        {
            /* var user = await _userManager.GetUserAsync(User);
            if (User.IsInRole("Admin"))
            {
                var checksAdmin = await _context.WTPChecks.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).OrderByDescending(x => x.TimeStamp).ToListAsync();
                return View("Reports/WTPChecks", checksAdmin);
            }

            var checks = await _context.WTPChecks
            .Include(x => x.Project)
            .ThenInclude(x => x.Division)
            .Include(x => x.SubProject).Where(x => x.Project.DivisionId.Equals(user.DivisionId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
            return View("Reports/WTPChecks", checks);*/


            var user = await _userManager.GetUserAsync(User);
            var pipecuts = await _context.PipeCuts
               .Include(x => x.MeasPoint)
               .ThenInclude(x => x.Project)
               .Where(x => x.MeasPoint.Project.DivisionId.Equals(user.DivisionId))
               .OrderByDescending(x => x.TimeStamp) // Ensure "Date" is the correct property
               .ToListAsync();

            return View("Reports/PipeCuts", pipecuts);
        }

        [HttpPost]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Delete_PipeCuts(int? Id)
        {
            var pipeCut = await _context.PipeCuts
                .Include(pc => pc.Offset)
                .FirstOrDefaultAsync(pc => pc.Id == Id);
            if (pipeCut == null)
                return NotFound();

            int measPointId = pipeCut.MeasPointId ?? 0;
            DateTime deletedStartTime = pipeCut.Offset.starttime;
            // 2. Delete the PipeCut and its Offset
            _context.Offsets.Remove(pipeCut.Offset);
            await _context.SaveChangesAsync();

            // 3. Find the previous surviving Offset (the "anchor")
            var previousOffset = await _context.Offsets
                .Where(o => o.MeasPointId == measPointId && o.starttime < deletedStartTime)
                .OrderByDescending(o => o.starttime)
                .FirstOrDefaultAsync();

            if (previousOffset != null)
            {
                double currentOffsetValue = previousOffset.offset;

                // 4. Get later PipeCuts in order (they each have an Offset linked)
                var laterPipeCuts = await _context.PipeCuts
                    .Include(pc => pc.Offset)
                    .Where(pc => pc.MeasPointId == measPointId && pc.Offset.starttime > deletedStartTime)
                    .OrderBy(pc => pc.Offset.starttime)
                    .ToListAsync();

                foreach (var pCut in laterPipeCuts)
                {
                    // Recalculate the linked offset
                    currentOffsetValue = currentOffsetValue - pCut.Meters_Cut;

                    pCut.Offset.offset = currentOffsetValue;
                    _context.Offsets.Update(pCut.Offset);
                }

                await _context.SaveChangesAsync();
            }

            // Find related MeasPoint
            var mp = await _context.MeasPoints
                .FirstOrDefaultAsync(m => m.Id == pipeCut.MeasPointId);

            if (mp != null)
            {
                // Find the same ItemTypeId used in creation
                var lastOffset = await _context.Offsets
                .Where(o => o.MeasPointId == measPointId)
                .OrderByDescending(o => o.starttime)
                .FirstOrDefaultAsync();

                if (lastOffset != null)
                {
                    mp.Offset = lastOffset.offset;
                    _context.MeasPoints.Update(mp);
                    await _context.SaveChangesAsync();
                }


                var itemtype = await _context.ItemTypes
                    .FirstOrDefaultAsync(x => x.ProjectId == mp.ProjectId && x.ReportTypeId == 17);

                if (itemtype != null)
                {
                    var relatedInstall = await _context.Installations.FirstOrDefaultAsync(i => i.ProjectId == mp.ProjectId &&
                            i.SubProjectId == mp.SubProjectId &&
                            i.UniqueID == mp.Name &&
                            i.TimeStamp == pipeCut.TimeStamp &&
                            i.ItemTypeId == itemtype.Id);

                    if (relatedInstall != null)
                        _context.Installations.Remove(relatedInstall);
                }
            }

            _context.PipeCuts.Remove(pipeCut);

            await _context.SaveChangesAsync();
                      
            return RedirectToAction("PipeCuts", "TrackItems");
        }
        
        [HttpGet]
        public async Task<IActionResult> PipeCut_Details(int? id)
        {
            if (id != null)
            {
                var user = await _userManager.GetUserAsync(User);
                var pipecut = await _context.PipeCuts.Include(x => x.Photos).Include(x => x.MeasPoint).ThenInclude(x => x.Project).ThenInclude(x => x.Division)
                    .Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                if (pipecut == null)
                {
                    return NotFound();
                }
                else if (!pipecut.MeasPoint.Project.DivisionId.Equals(user.DivisionId) && !User.IsInRole("Admin"))
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You do not have access to this item" });
                }
                return new ViewAsPdf("Reports/_PipeCut", pipecut);
            }
            else
            {
                return NotFound();
            }
        }
        public async Task<List<SelectListItem>> CreateMeasPointList()
        {
            var theuser = await _userManager.GetUserAsync(User);
            List<Project> groups = new List<Project>();
            if (User.IsInRole("Admin"))
            {
                groups = await _context.Projects.OrderBy(x => x.Name).ToListAsync();
            }
            else
            {
                groups = await _context.Projects.Where(x => x.DivisionId.Equals(theuser.DivisionId)).OrderBy(x => x.Name).ToListAsync();
            }

            List<SelectListGroup> thegroups = new List<SelectListGroup>();
            List<SelectListItem> theList = new List<SelectListItem>();
            foreach (Project p in groups)
            {
                if (!thegroups.Any(x => x.Name == p.Name))
                {
                    thegroups.Add(new SelectListGroup() { Name = p.Name });
                }
            }
            List<MeasPoint> monpoints = new List<MeasPoint>();
            if (User.IsInRole("Admin"))
            {
                monpoints = await _context.MeasPoints.Include(x => x.Project)
                   .OrderBy(b => b.Project.Name).ThenBy(x => x.Name).ToListAsync();
            }
            else
            {
                monpoints = await _context.MeasPoints.Include(x => x.Project)
                .Where(x => x.Project.DivisionId.Equals(theuser.DivisionId))
                .OrderBy(b => b.Project.Name).ThenBy(x => x.Name).ToListAsync();
            }

            foreach (MeasPoint m in monpoints)
            {
                theList.Add(new SelectListItem()
                {
                    Value = m.Id.ToString(),
                    Text = m.Name,
                    Group = thegroups.Where(x => x.Name.Equals(m.Project.Name)).First()
                });
            }


            return theList;
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager")]
        public async Task<IActionResult> Edit_PipeCut(int? id)
        {
            if (id != null)
            {
                var user = await _userManager.GetUserAsync(User);
                var pipecut = await _context.PipeCuts.Include(x => x.MeasPoint).ThenInclude(x => x.Project).Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                if (!pipecut.MeasPoint.Project.DivisionId.Equals(user.DivisionId) && !User.IsInRole("Admin"))
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You do not have access to this item" });
                }
                List<SelectListItem> selList = await CreateMeasPointList();
                ViewData["MeasPointId"] = selList;
                return View("Reports/Edit_PipeCut", pipecut);
            }
            else
            {
                return NotFound();
            }
        }
        [HttpPost]
        public async Task<IActionResult> Edit_PipeCut(PipeCut model, IFormFile[] files)
        {
            if (ModelState.IsValid)
            {
                _context.PipeCuts.Update(model);
                await _context.SaveChangesAsync();
                if (files != null)
                {
                    var directory = _env.WebRootPath + "\\AHAK\\PipeCutPhotos\\" + model.Id.ToString() + "\\";
                    if (!Directory.Exists(directory) && files != null)
                    {
                        Directory.CreateDirectory(directory);
                    }
                    foreach (IFormFile photo in files)
                    {
                        var path = Path.Combine(directory, photo.FileName);
                        var path2 = Path.Combine(directory, photo.FileName.Split(".")[0] + "_edit." + photo.FileName.Split(".")[1]);
                        PipeCutPhoto cutphoto = new PipeCutPhoto { Path = path, TimeStamp = model.TimeStamp, PipeCutId = model.Id };
                        _context.Add(cutphoto);
                        var stream = new FileStream(path, FileMode.Create);
                        await photo.CopyToAsync(stream);
                        stream.Close();
                        if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                        {
                            PhotoExtensions.SaveAndCompressJpeg(path, 85);
                        }
                    }
                    await _context.SaveChangesAsync();
                }
                //
                var mp = await _context.MeasPoints.SingleOrDefaultAsync(x => x.Id.Equals(model.MeasPointId));
                var itemtype = await _context.ItemTypes.FirstOrDefaultAsync(x => x.ProjectId.Equals(mp.ProjectId) && x.ReportTypeId.Equals(17));
               
                if (itemtype != null)
                {
                    
                    var prev_inst = await _context.Installations.Where(x => x.ItemTypeId.Equals(itemtype.Id) && x.TimeStamp.Equals(model.TimeStamp) && x.UniqueID.Equals(mp.Name)).ToListAsync();

                    if (prev_inst.Count() < 1)
                    {
                        Install inst = new Install();
                        inst.TimeStamp = model.TimeStamp;
                        inst.ProjectId = mp.ProjectId;
                        inst.SubProjectId = mp.SubProjectId;
                        inst.RentalStartDate = model.TimeStamp;
                        inst.InvoiceDate = DateTime.Now;
                        inst.Install_Text = "Automatic Installation Report of Pipe Cut/Extension of" + model.Meters_Cut.ToString("F") + " meters";
                        inst.isInstalled = false;
                        inst.DeinstallDate = model.TimeStamp;
                        inst.EnteredIntoDataBase = DateTime.Now;
                        inst.LastEditedInDataBase = DateTime.Now;
                        inst.ItemTypeId = itemtype.Id;
                        inst.Latitude = 0;
                        inst.Longitude = 0;
                        inst.UniqueID = mp.Name;
                        inst.PayedAmount = 0;
                        inst.DoneBy = model.DoneBy;
                        inst.Amount = 1;
                        inst.ToBePaid = true;
                        _context.Add(inst);
                        await _context.SaveChangesAsync();
                    }
                }
                //
                return RedirectToAction("MainMenu");
            }
            else
            {
                return NotFound();
            }
        }


        [HttpPost]
        public async Task<IActionResult> Edit_PipeCut_Implementing(PipeCut model, IFormFile[] files)
        {
            if (ModelState.IsValid)
            {
                // 1. Load the PipeCut + Offset
                var pipeCutToEdit = await _context.PipeCuts
                    .Include(pc => pc.Offset)
                    .Where(pc => pc.Id == model.Id)
                    .FirstOrDefaultAsync();
                if (pipeCutToEdit == null)
                    return NotFound();

                int measPointId = pipeCutToEdit.MeasPointId ?? 0;
                DateTime editStartTime = pipeCutToEdit.Offset.starttime;



                // 2. Update the PipeCut with the new meters_cut value
                _context.PipeCuts.Update(model);
                await _context.SaveChangesAsync();                                                    

                // 3. Find the previous surviving Offset (the "anchor")
                var previousOffset = await _context.Offsets
                    .Where(o => o.MeasPointId == measPointId && o.starttime < editStartTime)
                    .OrderByDescending(o => o.starttime)
                    .FirstOrDefaultAsync();

                double currentOffsetValue = previousOffset?.offset ?? 0;

                // 4. Get this PipeCut and all later ones
                var affectedPipeCuts = await _context.PipeCuts
                    .Include(pc => pc.Offset)
                    .Where(pc => pc.MeasPointId == measPointId && pc.Offset.starttime >= editStartTime)
                    .OrderBy(pc => pc.Offset.starttime)
                    .ToListAsync();

                foreach (var pipeCut in affectedPipeCuts)
                {
                    // Recalculate the linked offset
                    currentOffsetValue = currentOffsetValue - pipeCut.Meters_Cut;

                    pipeCut.Offset.offset = currentOffsetValue;
                    _context.Offsets.Update(pipeCut.Offset);
                }

                await _context.SaveChangesAsync();

                // 5. Update MeasPoint.Offset to the last offset in chain
                var measPoint = await _context.MeasPoints.FirstOrDefaultAsync(mpt => mpt.Id == measPointId);
                if (measPoint != null)
                {
                    var lastOffset = await _context.Offsets
                        .Where(o => o.MeasPointId == measPointId)
                        .OrderByDescending(o => o.starttime)
                        .FirstOrDefaultAsync();

                    if (lastOffset != null)
                    {
                        measPoint.Offset = lastOffset.offset;
                        _context.MeasPoints.Update(measPoint);
                        await _context.SaveChangesAsync();
                    }
                }


                if (files != null)
                {
                    var directory = _env.WebRootPath + "\\AHAK\\PipeCutPhotos\\" + model.Id.ToString() + "\\";
                    if (!Directory.Exists(directory) && files != null)
                    {
                        Directory.CreateDirectory(directory);
                    }
                    foreach (IFormFile photo in files)
                    {
                        var path = Path.Combine(directory, photo.FileName);
                        var path2 = Path.Combine(directory, photo.FileName.Split(".")[0] + "_edit." + photo.FileName.Split(".")[1]);
                        PipeCutPhoto cutphoto = new PipeCutPhoto { Path = path, TimeStamp = model.TimeStamp, PipeCutId = model.Id };
                        _context.Add(cutphoto);
                        var stream = new FileStream(path, FileMode.Create);
                        await photo.CopyToAsync(stream);
                        stream.Close();
                        if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                        {
                            PhotoExtensions.SaveAndCompressJpeg(path, 85);
                        }
                    }
                    await _context.SaveChangesAsync();
                }

                //
                var mp = await _context.MeasPoints.SingleOrDefaultAsync(x => x.Id.Equals(model.MeasPointId));
                var itemtype = await _context.ItemTypes.FirstOrDefaultAsync(x => x.ProjectId.Equals(mp.ProjectId) && x.ReportTypeId.Equals(17));

                if (itemtype != null)
                {
                    var prev_inst = await _context.Installations.Where(x => x.ItemTypeId.Equals(itemtype.Id) && x.TimeStamp.Equals(model.TimeStamp) && x.UniqueID.Equals(mp.Name)).ToListAsync();

                    if (prev_inst.Count() < 1)
                    {
                        Install inst = new Install();
                        inst.TimeStamp = model.TimeStamp;
                        inst.ProjectId = mp.ProjectId;
                        inst.SubProjectId = mp.SubProjectId;
                        inst.RentalStartDate = model.TimeStamp;
                        inst.InvoiceDate = DateTime.Now;
                        inst.Install_Text = "Automatic Installation Report of Pipe Cut/Extension of " + model.Meters_Cut.ToString("F") + " meters";
                        inst.isInstalled = false;
                        inst.DeinstallDate = model.TimeStamp;
                        inst.EnteredIntoDataBase = DateTime.Now;
                        inst.LastEditedInDataBase = DateTime.Now;
                        inst.ItemTypeId = itemtype.Id;
                        inst.Latitude = 0;
                        inst.Longitude = 0;
                        inst.UniqueID = mp.Name;
                        inst.PayedAmount = 0;
                        inst.DoneBy = model.DoneBy;
                        inst.Amount = 1;
                        inst.ToBePaid = true;
                        _context.Add(inst);
                        await _context.SaveChangesAsync();
                    }
                }
                //
                return RedirectToAction("MainMenu");
            }
            else
            {
                return NotFound();
            }
        }


        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember,Guest,International,ExternalDriller")]
        public async Task<IActionResult> DailyReports()
        {
            var user = await _userManager.GetUserAsync(User);
            IEnumerable<SelectListItem> selList = await GetProjectList();
            IEnumerable<SelectListItem> selList2 = await CreateFilter2list();
            ViewData["Filterchoices"] = new SelectList(selList, "Value", "Text");
            ViewData["Filterchoices2"] = new SelectList(selList2, "Value", "Text");
            ViewData["ProjectId"] = await GetProjectList();
            List<Daily_Report_2> items = new List<Daily_Report_2>();
            if (User.IsInRole("Guest"))
            {
                items = await (from pu in _context.ProjectUsers
                               join dr in _context.Daily_Report_2s.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.Title)
                               on pu.projectId equals dr.ProjectId
                               where pu.userId.Equals(user.Id) && dr.Report_Date >= DateTime.Now.AddDays(-60) && dr.Report_Checked.Equals(true)
                               select dr).OrderByDescending(x => x.Report_Date).ToListAsync();
            }
            else if (User.IsInRole("ExternalDriller"))
            {
                items = await _context.Daily_Report_2s
               .Include(x => x.Project).ThenInclude(x => x.Division)
               .Include(x => x.Title)
               .Where(x => x.DoneBy.Equals(user.full_name()) && x.Project.Active.Equals(true))
               .OrderByDescending(x => x.Report_Date).ToListAsync();
            }
            else
            {
                items = await _context.Daily_Report_2s
                .Include(x => x.Project).ThenInclude(x => x.Division)
                .Include(x => x.Title)
                .Where(x => x.Project.DivisionId.Equals(user.DivisionId) && x.Report_Date >= DateTime.Now.AddDays(-60) && x.Project.Active.Equals(true))
                .OrderByDescending(x => x.Report_Date).Take(200).ToListAsync();
            }
            return View("Reports/DailyReports", items);
        }
        [Authorize(Roles = "Admin,International")]
        public async Task<IActionResult> Arrivals_HIH()
        {
            var user = await _userManager.GetUserAsync(User);
            ViewData["ItemTypeId"] = await CreateItemlist("arrival");
            ViewData["ProjectId"] = await GetProjectList2();
            List<Arrival> items = new List<Arrival>();
            if (User.IsInRole("Admin") || User.IsInRole("International"))
            {
                items = await _context.Arrivals
                .Include(x => x.ItemType)
                .Include(x => x.Project).ThenInclude(x => x.Division)
                .Include(x => x.SubProject)
                .Where(x => x.Project.Name.Contains("STOCK") && x.EndStamp == null)
                .OrderBy(x => x.ItemType.Item_Type)
                .ThenBy(x => x.Project.Name)
                .ThenByDescending(x => x.TimeStamp).ToListAsync();
            }
            else
            {
                return NotFound();
            }

            return View("Reports/Arrivals_HIH", items);
        }
        [Authorize(Roles = "Admin,International")]
        public IActionResult MainMenu_HIH()
        {
            if (User.IsInRole("International") || User.IsInRole("Admin"))
            {
                return View();
            }
            else
            {
                return NotFound();
            }

        }
        public async Task<IActionResult> Arrivals()
        {
            var user = await _userManager.GetUserAsync(User);
            ViewData["ItemTypeId"] = await CreateItemlist("arrival");
            ViewData["ProjectId"] = await GetProjectList();
            List<Arrival> items = new List<Arrival>();
            if (User.IsInRole("Guest"))
            {
                items = await (from pu in _context.ProjectUsers
                               join dr in _context.Arrivals.Include(x => x.ItemType).Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject) on pu.projectId equals dr.ProjectId
                               where pu.userId.Equals(user.Id) && dr.Project.DivisionId.Equals(user.DivisionId)
                               select dr).OrderByDescending(x => x.TimeStamp).Take(100).ToListAsync();
            }
            else
            {
                items = await _context.Arrivals.
                Include(x => x.ItemType).Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject)
                .Where(x => x.Project.DivisionId.Equals(user.DivisionId) && x.Project.Active.Equals(true))
                .OrderByDescending(x => x.TimeStamp).Take(100).ToListAsync();
            }

            return View("Reports/Arrivals", items);
        }
        public async Task<IActionResult> Installations()
        {
            var user = await _userManager.GetUserAsync(User);
            List<Install> items = new List<Install>();
            if (User.IsInRole("Guest"))
            {
                items = await (from pu in _context.ProjectUsers
                               join dr in _context.Installations.Include(x => x.ItemType).Include(x => x.SubProject).Include(x => x.Project).ThenInclude(x => x.Division) on pu.projectId equals dr.ProjectId
                               where pu.userId.Equals(user.Id) && dr.Project.DivisionId.Equals(user.DivisionId)
                               select dr).OrderByDescending(x => x.TimeStamp).Take(100).ToListAsync();
            }
            else
            {
                items = await _context.Installations.
                Include(x => x.ItemType).Include(x => x.SubProject).Include(x => x.Project).ThenInclude(x => x.Division)
                .Where(x => x.Project.DivisionId.Equals(user.DivisionId) && x.Project.Active.Equals(true))
                .OrderByDescending(x => x.TimeStamp).Take(100).ToListAsync();
            }
            ViewData["ItemTypeId"] = await CreateItemlist("install");
            ViewData["ProjectId"] = await GetProjectList();

            return View("Reports/Installations", items);
        }
        public async Task<IActionResult> DeInstallations()
        {
            var user = await _userManager.GetUserAsync(User);
            ViewData["ItemTypeId"] = await CreateItemlist("deinstall");
            ViewData["ProjectId"] = await GetProjectList();
            List<DeInstall> items = new List<DeInstall>();
            if (User.IsInRole("Guest"))
            {
                items = await (from pu in _context.ProjectUsers
                               join dr in _context.Deinstallations.Include(x => x.ItemType).Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.Install) on pu.projectId equals dr.ProjectId
                               where pu.userId.Equals(user.Id) && dr.Project.DivisionId.Equals(user.DivisionId)
                               select dr).OrderByDescending(x => x.TimeStamp).ToListAsync();
            }
            else
            {
                items = await _context.Deinstallations.
                Include(x => x.ItemType).Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.Install)
                .Where(x => x.Project.DivisionId.Equals(user.DivisionId))
                .OrderByDescending(x => x.TimeStamp).ToListAsync();
            }
            return View("Reports/DeInstallations", items);
        }
        public async Task<IActionResult> Mobilisations()
        {
            var user = await _userManager.GetUserAsync(User);
            ViewData["ItemTypeId"] = await CreateItemlist("mobilize");
            ViewData["ProjectId"] = await GetProjectList();
            List<Mobilize> items = new List<Mobilize>();
            if (User.IsInRole("Guest"))
            {
                items = await (from pu in _context.ProjectUsers
                               join dr in _context.Mobilisations.Include(x => x.ItemType).Include(x => x.Project).ThenInclude(x => x.Division) on pu.projectId equals dr.ProjectId
                               where pu.userId.Equals(user.Id) && dr.Project.DivisionId.Equals(user.DivisionId)
                               select dr).OrderByDescending(x => x.TimeStamp).ToListAsync();
            }
            else
            {
                items = await _context.Mobilisations.
                Include(x => x.ItemType).Include(x => x.Project).ThenInclude(x => x.Division)
                .Where(x => x.Project.DivisionId.Equals(user.DivisionId))
                .OrderByDescending(x => x.TimeStamp).ToListAsync();
            }

            return View("Reports/Mobilisations", items);
        }
        [Authorize(Roles ="Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Reports()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            return View("Reports/ReportTypes");
        }
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Safety()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            return View("Reports/Safety");
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> OpenAccidentReport(int? id)
        {
            if (id != null)
            {
                var AR = await _context.AccidentReports.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SafetyProblem).Where(x => x.SafetyProblemId.Equals(id)).LastOrDefaultAsync();
                string path = _env.WebRootPath + "/AHAK/SafetyProblems/" + AR.SafetyProblemId.ToString() + "/";
                List<string> pictures = new List<string>();
                if (Directory.Exists(path))
                {
                    var folder = Directory.EnumerateFiles(path)
                                     .Select(fn => Path.GetFileName(fn));

                    foreach (string file in folder)
                    {
                        if (file.Contains("_edit"))
                        {
                            pictures.Add(file);
                        }
                        else
                        {
                            string[] fileparts = file.Split(".");
                            if (!folder.Contains(fileparts[0] + "_edit." + fileparts[1]))
                            {
                                pictures.Add(file);
                            }
                        }
                    }
                }
                AR.SafetyProblem.pictures = pictures;

                return new ViewAsPdf("Reports/_AccidentReport", AR);
            }
            else
            {
                return NotFound();
            }
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        [RequestSizeLimit(900000000)]
        public async Task<IActionResult> GenerateAccidentReport(AccidentReport AR, IFormFile[] files)
        {
            if (ModelState.IsValid)
            {
                if (AR.Id == 0 || AR.Id == null)
                {
                    _context.Add(AR);
                    await _context.SaveChangesAsync();
                    var folderpath = _env.WebRootPath + "\\AHAK\\SafetyProblems\\" + AR.SafetyProblemId.ToString() + "\\";
                    if (!Directory.Exists(folderpath) && files != null)
                    {
                        Directory.CreateDirectory(folderpath);
                    }
                    if (files != null)
                    {
                        foreach (var file in files)
                        {
                            if (file.Length > 0)
                            {
                                //Getting FileName
                                var fileName = ContentDispositionHeaderValue.Parse(file.ContentDisposition).FileName.Trim('"');
                                fileName = folderpath + $@"\{fileName}";

                                using (FileStream fs = System.IO.File.Create(fileName))
                                {
                                    file.CopyTo(fs);
                                    fs.Flush();
                                }
                                if (fileName.Contains("jpg") || fileName.Contains("jpeg"))
                                {
                                    PhotoExtensions.SaveAndCompressJpeg(fileName, 80);
                                }
                            }
                        }
                        
                    }
                    return RedirectToAction("Index", "AccidentReports");
                }
                else
                {
                    _context.Update(AR);
                    await _context.SaveChangesAsync();
                    var folderpath = _env.WebRootPath + "\\AHAK\\SafetyProblems\\" + AR.SafetyProblemId.ToString() + "\\";
                    if (!Directory.Exists(folderpath) && files != null)
                    {
                        Directory.CreateDirectory(folderpath);
                    }
                    if (files != null)
                    {
                        foreach (var file in files)
                        {
                            if (file.Length > 0)
                            {
                                //Getting FileName
                                var fileName = ContentDispositionHeaderValue.Parse(file.ContentDisposition).FileName.Trim('"');
                                fileName = folderpath + $@"\{fileName}";

                                using (FileStream fs = System.IO.File.Create(fileName))
                                {
                                    file.CopyTo(fs);
                                    fs.Flush();
                                }
                                if (fileName.Contains("jpg") || fileName.Contains("jpeg"))
                                {
                                    PhotoExtensions.SaveAndCompressJpeg(fileName, 80);
                                }
                            }
                        }
                    }

                    return RedirectToAction("Index", "AccidentReports");
                }
                    
                
            }
            else
            {
                return RedirectToAction("SafetyProblems");
            }
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> GenerateAccidentReport(int? id)
        {
            if (id != null)
            {
                var SP = await _context.SafetyProblems.Include(x => x.Project).Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                AccidentReport AR = new AccidentReport(SP);
                ViewData["ProjectId"] = await GetProjectList();
                return View("Reports/AccidentReport", AR);
            }
            else
            {
                return NotFound();
            }
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> SafetyProblem()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            ViewData["ProjectId"] = await GetProjectList();
            return View();
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Edit_SafetyProblem(int? id)
        {
            if (id != null)
            {
                var sp = await _context.SafetyProblems.FindAsync(id);
                ViewData["SubProjectId"] = new SelectList(_context.SubProjects.Where(x => x.ProjectId.Equals(sp.ProjectId)), "Id", "Name");
                ViewData["ProjectId"] = await GetProjectList();
                return View(sp);
            }
            else
            {
                return NotFound();
            }
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> SafetyProblem(SafetyProblemVM model, IFormFile[] files)
        {
            if (ModelState.IsValid)
            {
                var user = await _userManager.GetUserAsync(User);
                SafetyProblem SP = new SafetyProblem(model, user);
                _context.Add(SP);
                await _context.SaveChangesAsync();
                var lastadded = await _context.SafetyProblems.Include(x => x.Project).ThenInclude(x => x.Division).LastAsync();

                var folderpath = _env.WebRootPath + "\\AHAK\\SafetyProblems\\" + lastadded.Id.ToString() + "\\";
                if (!Directory.Exists(folderpath) && files.Count() > 0)
                {
                    Directory.CreateDirectory(folderpath);
                }
                if (files.Count() > 0)
                {

                    foreach (var file in files)
                    {
                        var fileName = ContentDispositionHeaderValue.Parse(file.ContentDisposition).FileName.Trim('"');
                        fileName = folderpath + $@"\{fileName}";

                        using (FileStream fs = System.IO.File.Create(fileName))
                        {
                            file.CopyTo(fs);
                            fs.Flush();
                        }
                        if (fileName.ToLower().Contains("jpg") || fileName.ToLower().Contains("jpeg"))
                        {
                            PhotoExtensions.SaveAndCompressJpeg(fileName, 80);
                        }

                    }
                }
                List<string> pictures = new List<string>();
                if (Directory.Exists(folderpath))
                {
                    var folder = Directory.EnumerateFiles(folderpath)
                                     .Select(fn => Path.GetFileName(fn));

                    foreach (string file1 in folder)
                    {
                        if (file1.Contains("_edit"))
                        {
                            pictures.Add(file1);
                        }
                        else
                        {
                            string[] fileparts = file1.Split(".");
                            if (!folder.Contains(fileparts[0] + "_edit." + fileparts[1]))
                            {
                                pictures.Add(file1);
                            }
                        }
                    }
                }
                lastadded.pictures = pictures;
                ViewAsPdf pdf = new ViewAsPdf("Reports/_SafetyProblem", lastadded)
                {
                    FileName = "SafetyProblem_" + lastadded.Project.Abbreviation + "_" + lastadded.TimeStamp.ToString("yyyy-MM-dd") + ".pdf",
                };
                byte[] pdfData = await pdf.BuildFile(ControllerContext);

                string Subject = "Safety Problem Added ";
                string HtmlContent = "<strong>Hejsa</strong> En HJ medarbejder har udfyldt et Safety Problem. Se vedhaftede";
                string footerstringHTML = "<br />Hölscher Jensen A/S<br />Fabriksparken 37<br />2600 Glostrup<br />Denmark";
                string footerstringPLAIN = "\r\n\r\nHölscher Jensen A/S \r\nFabriksparken 37\r\n2600 Glostrup\r\nDenmark";
                var file2 = Convert.ToBase64String(pdfData);
                await _emailSender.SendEmailAsync2("ofw@hj-as.dk", Subject, HtmlContent, footerstringHTML, footerstringPLAIN, pdf.FileName, file2);
                await _emailSender.SendEmailAsync2("bin@hj-as.dk", Subject, HtmlContent, footerstringHTML, footerstringPLAIN, pdf.FileName, file2);
                if (model.ProjectId.Equals(437) || model.ProjectId.Equals(562))
                {
                    await _emailSender.SendEmailAsync2("mak@hj-as.dk", Subject, HtmlContent, footerstringHTML, footerstringPLAIN, pdf.FileName, file2);
                    await _emailSender.SendEmailAsync2("ase@hj-as.dk", Subject, HtmlContent, footerstringHTML, footerstringPLAIN, pdf.FileName, file2);
                    await _emailSender.SendEmailAsync2("bin@hj-as.dk", Subject, HtmlContent, footerstringHTML, footerstringPLAIN, pdf.FileName, file2);
                }
                return RedirectToAction("MainMenu", "TrackItems");
            }
            else
            {
                return NotFound();
            }
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Edit_SafetyProblem(SafetyProblem model)
        {
            if (ModelState.IsValid)
            {
                _context.Update(model);
                var folderpath = _env.WebRootPath + "\\AHAK\\SafetyProblems\\" + model.Id.ToString() + "\\";
                if (!Directory.Exists(folderpath) && HttpContext.Request.Form.Files != null)
                {
                    Directory.CreateDirectory(folderpath);
                }
                if (HttpContext.Request.Form.Files != null)
                {
                    var files = HttpContext.Request.Form.Files;

                    foreach (var file in files)
                    {
                        if (file.Length > 0)
                        {
                            //Getting FileName
                            var fileName = ContentDispositionHeaderValue.Parse(file.ContentDisposition).FileName.Trim('"');
                            fileName = folderpath + $@"\{fileName}";

                            using (FileStream fs = System.IO.File.Create(fileName))
                            {
                                file.CopyTo(fs);
                                fs.Flush();
                            }
                        }
                    }
                }
                await _context.SaveChangesAsync();
                return RedirectToAction("MainMenu", "TrackItems");
            }
            else { return NotFound(); }
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> SafetyProblems(int? ProjectId = null)
        {
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            ViewData["ProjectId"] = await GetProjectList();
            if(ProjectId != null)
            {
                var sps = await _context.SafetyProblems.Where(x => x.ProjectId.Equals(ProjectId)).Include(x => x.Project).ThenInclude(x => x.Division).Where(x => x.Project.DivisionId.Equals(user.DivisionId)).OrderByDescending(x => x.TimeStamp).ToListAsync();
                return View("Reports/SafetyProblems", sps);
            }
            else
            {
                var sps = await _context.SafetyProblems.Include(x => x.Project).ThenInclude(x => x.Division).Where(x => x.Project.DivisionId.Equals(user.DivisionId)).OrderByDescending(x => x.TimeStamp).ToListAsync();

                return View("Reports/SafetyProblems", sps);
            }
            
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> GetLifeCycle(int? id)
        {
            if (id != null)
            {
                var user = await _userManager.GetUserAsync(User);
                if (user.Active == false)
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
                }
                var install = await _context.Installations.Include(x => x.Project).Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();

                if (install != null)
                {
                    if (user.DivisionId.Equals(install.Project.DivisionId))
                    {
                        LifeCycle LC = new LifeCycle(install);
                        //var InstallOperations = await _context.InstallOperations.Include(x => x.Install).Where(x => x.BaseID.Equals(LC.BaseID) && x.Install.ItemTypeId.Equals(install.ItemTypeId)).ToListAsync();
                        //var installs = await _context.Installations.Where(x => x.BaseID.Equals(LC.BaseID) && x.ItemTypeId.Equals(install.ItemTypeId)).ToListAsync();
                        //var Coords = await _context.CoordTrack2s.Include(x => x.Install).Where(x => x.InstallId != null).Select(y => y).Where(x => x.Install.BaseID.Equals(LC.BaseID) && x.Install.ItemTypeId.Equals(install.ItemTypeId)).ToListAsync();
                        LC.Coordinates = await _context.CoordTrack2s.Include(x => x.Install).Where(x => x.InstallId != null).Select(y => y).Where(x => x.Install.BaseID.Equals(LC.BaseID) && x.Install.ItemTypeId.Equals(install.ItemTypeId)).ToListAsync();
                        LC.Installations = await _context.Installations.Where(x => x.BaseID.Equals(LC.BaseID) && x.ItemTypeId.Equals(install.ItemTypeId)).ToListAsync();
                        LC.OperationTimes = await _context.InstallOperations.Include(x => x.Install).Where(x => x.BaseID.Equals(LC.BaseID) && x.Install.ItemTypeId.Equals(install.ItemTypeId)).ToListAsync();
                        return View(LC);
                    }
                    else
                    {
                        return RedirectToAction("ErrorMessage", "Home", new { text = "You do not have permission to view this lifecycle" });
                    }
                }
                LifeCycle LC2 = new LifeCycle { Coordinates = new List<CoordTrack2>(), Installations = new List<Install>(), OperationTimes = new List<InstallOperation>(), UniqueID = "0" };
                return View(LC2);
            }
            else
            {
                return NotFound();
            }


        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<string> StartOperation(int? id, string dato)
        {
            if (id != null)
            {
                InstallOperation IO = new InstallOperation();
                IO.Started = DateTime.Parse(dato);
                IO.InstallId = id;
                _context.Add(IO);
                var install = await _context.Installations.SingleOrDefaultAsync(x => x.Id.Equals(id));
                install.IsInOperation = true;
                _context.Update(install);
                await _context.SaveChangesAsync();
                return "Success";
            }
            else
            {
                return "Failure";
            }
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<string> StopOperation(int? id, string dato)
        {
            if (id != null)
            {
                var IO = await _context.InstallOperations.Where(x => x.InstallId.Equals(id)).OrderByDescending(x => x.Started).FirstAsync();
                IO.Stopped = DateTime.Parse(dato);
                _context.Update(IO);
                var install = await _context.Installations.SingleOrDefaultAsync(x => x.Id.Equals(id));
                install.IsInOperation = false;
                _context.Update(install);
                await _context.SaveChangesAsync();
                return "Success";
            }
            else
            {
                return "Failure";
            }
        }
        [HttpGet]
        public async Task<IActionResult> Details_Install(int? id)
        {
            if (id != null)
            {
                var user = await _userManager.GetUserAsync(User);
                if (user.Active == false)
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
                }
                InstallVM model = new InstallVM();
                model.Install = await _context.Installations
                .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                .Include(x => x.Project).ThenInclude(x => x.Division)
                .Include(x => x.SubProject)
                .Include(x => x.Coordinates)
                .Where(x => x.Id.Equals(id))
                .SingleOrDefaultAsync();
                if (((from p in _context.ProjectUsers where p.userId.Equals(user.Id) select p.projectId).ToList().Contains(Convert.ToInt32(model.Install.ProjectId))) || !User.IsInRole("Guest"))
                {
                    model.Install_Photos = await _context.PhotoFilesInstalls.Where(x => x.InstallId.Equals(model.Install.Id)).ToListAsync();
                    if (model != null)
                    {
                        return new ViewAsPdf("Reports/_Install", model);
                    }
                    else
                    {
                        return NotFound();
                    }
                }
                else
                {
                    return NotFound();
                }
            }
            else
            {
                return NotFound();
            }
        }
        [HttpGet]
        public async Task<IActionResult> Details_Arrival(int? id)
        {
            if (id != null)
            {
                var user = await _userManager.GetUserAsync(User);
                if (user.Active == false)
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
                }
                ArrivalVM model = new ArrivalVM();
                model.Arrival = await _context.Arrivals
                .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                .Include(x => x.Project).ThenInclude(x => x.Division)
                .Include(x => x.SubProject)
                .Where(x => x.Id.Equals(id))
                .SingleOrDefaultAsync();
                if (((from p in _context.ProjectUsers where p.userId.Equals(user.Id) select p.projectId).ToList().Contains(Convert.ToInt32(model.Arrival.ProjectId))) || !User.IsInRole("Guest"))
                {
                    model.Arrival_Photos = await _context.PhotoFilesArrivals.Where(x => x.ArrivalId.Equals(model.Arrival.Id)).ToListAsync();
                    if (model != null)
                    {
                        return new ViewAsPdf("Reports/_Arrival", model);
                    }
                    else
                    {
                        return NotFound();
                    }
                }
                else
                {
                    return NotFound();
                }
            }
            else
            {
                return NotFound();
            }
        }
        [HttpGet]
        public async Task<IActionResult> Details_Mobilize(int? id)
        {
            if (id != null)
            {
                var user = await _userManager.GetUserAsync(User);
                if (user.Active == false)
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
                }
                MobVM model = new MobVM();
                model.Mobilize = await _context.Mobilisations
                .Include(x => x.ItemType).ThenInclude(x => x.Rental_Unit)
                .Include(x => x.ItemType).ThenInclude(x => x.Install_Unit)
                .Include(x => x.Project).ThenInclude(x => x.Division)
                .Include(x => x.SubProject)
                .Where(x => x.Id.Equals(id))
                .SingleOrDefaultAsync();
                if (((from p in _context.ProjectUsers where p.userId.Equals(user.Id) select p.projectId).ToList().Contains(Convert.ToInt32(model.Mobilize.ProjectId))) || !User.IsInRole("Guest"))
                {
                    model.Mob_Photos = await _context.PhotoFilesMobilizations.Where(x => x.MobilizeId.Equals(model.Mobilize.Id)).ToListAsync();
                    if (model != null)
                    {
                        return new ViewAsPdf("Reports/_Mobilize", model);
                    }
                    else
                    {
                        return NotFound();
                    }
                }
                else
                {
                    return NotFound();
                }
            }
            else
            {
                return NotFound();
            }
        }
        [HttpGet]
        public async Task<IActionResult> Details_SafetyProblem(int? id)
        {
            if (id != null)
            {
                var user = await _userManager.GetUserAsync(User);
                if (user.Active == false)
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
                }
                var model = await _context.SafetyProblems.Include(x => x.Project).ThenInclude(x => x.Division)
                    .Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                if (((from p in _context.ProjectUsers where p.userId.Equals(user.Id) select p.projectId).ToList().Contains(Convert.ToInt32(model.ProjectId))) || !User.IsInRole("Guest"))
                {
                    string path = _env.WebRootPath + "/AHAK/SafetyProblems/" + model.Id.ToString() + "/";
                    List<string> pictures = new List<string>();
                    if (Directory.Exists(path))
                    {
                        var folder = Directory.EnumerateFiles(path)
                                         .Select(fn => Path.GetFileName(fn));

                        foreach (string file in folder)
                        {
                            if (file.Contains("_edit"))
                            {
                                pictures.Add(file);
                            }
                            else
                            {
                                string[] fileparts = file.Split(".");
                                if (!folder.Contains(fileparts[0] + "_edit." + fileparts[1]))
                                {
                                    pictures.Add(file);
                                }
                            }
                        }
                    }
                    model.pictures = pictures;
                    return new ViewAsPdf("Reports/_SafetyProblem", model);
                }
                else { return NotFound(); }
            }
            else { return NotFound(); }
        }
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> UpdateCoordTrack2s()
        {
            var coords = await (from cs in _context.CoordTrack2s.Include(x => x.Install)
                                join i in _context.Installations
                                on cs.InstallId equals i.Id
                                where cs.InstallId != null &&
                                cs.Latitude <= 1.0 && cs.Longitude <= 1.0
                                && i.Latitude >= 1.0 && i.Longitude >= 1.0
                                && i.ProjectId == 418
                                select cs).ToListAsync();
            foreach (var coord in coords)
            {
                coord.Latitude_backup = coord.Latitude;
                coord.Longitude_backup = coord.Longitude;
                coord.Latitude = coord.Install.Latitude;
                coord.Longitude = coord.Install.Longitude;
                _context.Update(coord);
            }
            await _context.SaveChangesAsync();
            return RedirectToAction("Index", "Home");
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> UpdateCoords(int? InstallationId, double? Latitude, double? Longitude)
        {
            if (InstallationId != null && Latitude != null && Longitude != null)
            {
                var item = await _context.Installations.FindAsync(InstallationId);
                var coordtrack = await _context.CoordTrack2s.Where(x => x.InstallId.Equals(item.Id) && x.TypeCoord.Equals("Installed")).FirstAsync();
                item.Latitude = Convert.ToDouble(Latitude);
                item.Longitude = Convert.ToDouble(Longitude);
                coordtrack.Latitude_backup = coordtrack.Latitude;
                coordtrack.Longitude_backup = coordtrack.Longitude;
                coordtrack.Latitude = item.Latitude;
                coordtrack.Longitude = item.Longitude;
                _context.Update(item);
                _context.Update(coordtrack);
                await _context.SaveChangesAsync();
                return RedirectToAction("OverView");
            }
            else
            {
                return RedirectToAction("OverView");
            }
        }

        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Edit_DeInstall(int id)
        {
            var model = await _context.Deinstallations.FindAsync(id);
            ViewData["SubProjectId"] = new SelectList(_context.SubProjects.Where(x => x.ProjectId.Equals(model.ProjectId)), "Id", "Name");
            ViewData["ProjectId"] = await GetProjectList();
            var itemtypes = (from it in _context.ItemTypes join bqh in _context.BoQHeadLines on Math.Floor(it.BoQnr) equals Math.Floor(bqh.BoQnum) where bqh.Type.Equals("Installation") && !it.Item_Type.ToLower().Contains("discount") && it.ProjectId.Equals(model.ProjectId) && bqh.ProjectId.Equals(model.ProjectId) select it).OrderBy(x => x.BoQnr).ToList();
            ViewData["ItemTypeId"] = new SelectList(itemtypes, "Id", "Item_Type");
            return View("Reports/Edit_DeInstall", model);
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Edit_DeInstall(DeInstall model)
        {
            if (ModelState.IsValid)
            {
                model.LastEditedInDataBase = DateTime.Now;
                _context.Update(model);
                await _context.SaveChangesAsync();
                ViewData["SubProjectId"] = new SelectList(_context.SubProjects.Where(x => x.ProjectId.Equals(model.ProjectId)), "Id", "Name");
                ViewData["ProjectId"] = await GetProjectList();
                return RedirectToAction("DeInstallations");
            }
            ViewData["SubProjectId"] = new SelectList(_context.SubProjects.Where(x => x.ProjectId.Equals(model.ProjectId)), "Id", "Name");
            ViewData["ProjectId"] = await GetProjectList();
            return RedirectToAction("DeInstallations");
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Edit_Install(int id)
        {
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            var model = await _context.Installations.FindAsync(id);
            if(model.UniqueID == null)
            {
                model.UniqueID = "N/A";
            }
            ViewData["SubProjectId"] = new SelectList(_context.SubProjects.Where(x => x.ProjectId.Equals(model.ProjectId)), "Id", "Name", model.SubProjectId);
            ViewData["ProjectId"] = await GetProjectList();
            var itemtypes = (from it in _context.ItemTypes join bqh in _context.BoQHeadLines on Math.Floor(it.BoQnr) equals Math.Floor(bqh.BoQnum) where bqh.Type.Equals("Installation") && !it.Item_Type.ToLower().Contains("discount") && it.ProjectId.Equals(model.ProjectId) && bqh.ProjectId.Equals(model.ProjectId) select it).OrderBy(x => x.BoQnr).ToList();
            ViewData["ItemTypeId"] = new SelectList(itemtypes, "Id", "Item_Type", model.ItemTypeId);
            ViewData["VariationOrderId"] = new SelectList(_context.BoQHeadLines.Where(x => x.ProjectId.Equals(model.ProjectId) && x.Type.Equals("ExtraWork")), "Id", "HeadLine");
            return View("Reports/Edit_Install", model);
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager")]
        public async Task<IActionResult> Delete_Install(int? id)
        {
            if (id != null)
            {
                var install = await _context.Installations.FindAsync(id);
                var coords = await _context.CoordTrack2s.Where(x => x.InstallId.Equals(id)).ToListAsync();
                foreach (var coord in coords)
                {
                    _context.Remove(coord);
                }
                await _context.SaveChangesAsync();
                var deinstall = await _context.Deinstallations.SingleOrDefaultAsync(x => x.InstallId.Equals(id));
                if (deinstall != null)
                {
                    var coordtrack = await _context.CoordTrack2s.Where(x => x.InstallId.Equals(install.Id) && x.TypeCoord.Equals("DeInstalled")).FirstOrDefaultAsync();
                    if (coordtrack != null)
                    {
                        _context.Remove(coordtrack);
                    }
                    await _context.SaveChangesAsync();
                    _context.Remove(deinstall);
                    await _context.SaveChangesAsync();
                }
                var snapshotitems = await _context.SnapShotItems.Where(x => x.InstallationId.Equals(install.Id)).ToListAsync();
                foreach(var snapshotitem in snapshotitems)
                {
                    _context.Remove(snapshotitem);
                }
                _context.Remove(install);
                await _context.SaveChangesAsync();
                return RedirectToAction("Installations", "TrackItems");
            }
            else
            {
                return NotFound();
            }
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Edit_Install(Install model, IFormFile[] files)
        {
            if (ModelState.IsValid)
            {
                //if(model.ProjectId == 437 && model.SubProjectId == null)
                //{
                //    model.SubProjectId = 238;
                //}
                var user = await _userManager.GetUserAsync(User);
                var before = await _context.Installations.AsNoTracking().Where(x => x.Id.Equals(model.Id)).SingleOrDefaultAsync();
                Log2 newLog = new Log2
                {
                    ItemTypeId = before.ItemTypeId,
                    Description = _SharedLocalizer.GetLocalizedHtmlString("Install Before Edit.:") + " " + before.Install_Text + " : " + before.Id.ToString() + " : AMOUNT: " + before.Amount.ToString(),
                    TimeStamp = before.TimeStamp,
                    TheUser = user.full_name(),
                    otherinfo = "Edited On: " + DateTime.Now.ToString() + ". Invoicedate: " + before.InvoiceDate + ". RentalStartDate: " + before.RentalStartDate + ". DeInstallDate: " + Convert.ToDateTime(before.DeinstallDate).ToString() + ". PayedAmount: " + before.PayedAmount.ToString() + ". UNIQUEID: " + before.UniqueID + ". ToBePaid: " + before.ToBePaid.ToString() + ". "
                };
                _context.Add(newLog);
                if (before.ProjectId != model.ProjectId)
                {
                    var itemtype = await _context.ItemTypes.Where(x => x.Id.Equals(model.ItemTypeId)).SingleOrDefaultAsync();
                    var newitemtype = await _context.ItemTypes.Where(x => x.Item_Type.Contains(itemtype.Item_Type) && x.ProjectId.Equals(model.ProjectId)).SingleOrDefaultAsync();
                    if (newitemtype != null)
                    {
                        model.ItemTypeId = newitemtype.Id;
                    }
                }
                if (before.ItemTypeId != model.ItemTypeId || before.SubProjectId != model.SubProjectId)
                {
                    if (model.UniqueID.Contains("#"))
                    {
                        var associated_arrival = await _context.Arrivals.SingleOrDefaultAsync(x =>
                        x.ItemTypeId.Equals(before.ItemTypeId)
                        && x.ProjectId.Equals(model.ProjectId)
                        && x.TimeStamp <= model.TimeStamp
                        && x.EndStamp == null
                        && x.UniqueID.Equals(model.UniqueID));


                        if (associated_arrival != null)
                        {
                            if (associated_arrival.TimeStamp == model.RentalStartDate && associated_arrival.Arrival_Text.Contains("Auto"))
                            {
                                associated_arrival.ToBePaid = model.ToBePaid;
                                associated_arrival.ProjectId = model.ProjectId;
                                associated_arrival.ItemTypeId = model.ItemTypeId;
                                associated_arrival.Amount = model.Amount;
                                associated_arrival.Arrival_Text = "Auto Arrival Change after itemtype change of item with ID: " + model.Id.ToString() + " and UniqueID: " + model.UniqueID;
                                associated_arrival.LastEditedInDataBase = DateTime.Now;
                                associated_arrival.Latitude = model.Latitude;
                                associated_arrival.Longitude = model.Longitude;
                                associated_arrival.SubProjectId = model.SubProjectId;
                                associated_arrival.UniqueID = model.UniqueID;
                                associated_arrival.TimeStamp = model.RentalStartDate;
                                associated_arrival.InvoiceDate = DateTime.Now.Date;
                                _context.Update(associated_arrival);
                                await _context.SaveChangesAsync();
                            }
                            else
                            {
                                associated_arrival.EndStamp = model.RentalStartDate.AddDays(-1);
                                _context.Update(associated_arrival);
                                await _context.SaveChangesAsync();
                                Arrival new_arrival = new Arrival();
                                new_arrival.InvoiceDate = DateTime.Now.Date;
                                new_arrival.ToBePaid = model.ToBePaid;
                                new_arrival.ProjectId = model.ProjectId;
                                new_arrival.ItemTypeId = model.ItemTypeId;
                                new_arrival.Amount = model.Amount;
                                new_arrival.Arrival_Text = "Auto Arrival after itemtype change of item with ID: " + model.Id.ToString() + " and UniqueID: " + model.UniqueID;
                                new_arrival.EnteredIntoDataBase = DateTime.Now;
                                new_arrival.Latitude = model.Latitude;
                                new_arrival.Longitude = model.Longitude;
                                new_arrival.SubProjectId = model.SubProjectId;
                                new_arrival.UniqueID = model.UniqueID;
                                new_arrival.TimeStamp = model.RentalStartDate;
                                _context.Add(new_arrival);
                                await _context.SaveChangesAsync();
                            }

                        }




                    }
                }
                if (model.DeinstallDate != null)
                {
                    var deinstallbefore = await _context.Deinstallations.FirstOrDefaultAsync(x => x.InstallId.Equals(model.Id));
                    model.isInstalled = false;
                    if (deinstallbefore == null)
                    {
                        DeInstall deinstall = new DeInstall { DoneBy = user.full_name(), SubProjectId = model.SubProjectId, ProjectId = model.ProjectId, InstallId = model.Id, ItemTypeId = model.ItemTypeId, Amount = model.Amount, TimeStamp = Convert.ToDateTime(model.DeinstallDate), DeInstall_Text = model.Install_Text, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                        _context.Add(deinstall);
                        await _context.SaveChangesAsync();
                    }
                }
                if (model.ItemTypeId.Equals(1703) && model.UniqueID.Contains("#") && !before.UniqueID.Contains("#"))
                {
                    string uniqueid = model.UniqueID.Split("-")[1].Trim();
                    string HDid = model.UniqueID.Split("-")[0].Trim();
                    var relevant_install = await _context.Installations.Where(x => x.UniqueID.Equals(uniqueid) && x.ItemTypeId.Equals(1800) &&
                    x.TimeStamp >= model.RentalStartDate).OrderBy(x => x.TimeStamp).FirstOrDefaultAsync();
                    if (relevant_install != null)
                    {
                        model.RentalStartDate = relevant_install.RentalStartDate;
                        var associated_arrival = await _context.Arrivals.Where(x => x.UniqueID.Equals(HDid) && x.ItemTypeId.Equals(1703) && x.TimeStamp <= model.TimeStamp).OrderBy(x => x.TimeStamp).LastOrDefaultAsync();
                        if (associated_arrival != null)
                        {
                            associated_arrival.UniqueID = model.UniqueID;
                            associated_arrival.TimeStamp = model.RentalStartDate;
                            _context.Update(associated_arrival);
                        }
                    }
                }
                before = null;
                model.LastEditedInDataBase = DateTime.Now;
                if (files != null)
                {
                    var directory = _env.WebRootPath + "\\AHAK\\InstallPhotos\\" + model.Id.ToString() + "\\";
                    if (!Directory.Exists(directory) && files != null)
                    {
                        Directory.CreateDirectory(directory);
                    }
                    foreach (IFormFile photo in files)
                    {
                        var path = Path.Combine(directory, photo.FileName);
                        var path2 = Path.Combine(directory, photo.FileName.Split(".")[0] + "_edit." + photo.FileName.Split(".")[1]);
                        if (!path.Contains(".pdf"))
                        {
                            PhotoFileInstalled2 installphoto = new PhotoFileInstalled2 { Path = path, TimeStamp = model.TimeStamp, InstallId = model.Id, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                            _context.Add(installphoto);
                        }
                        else
                        {
                            PhotoFileInstalled2 newphoto = new PhotoFileInstalled2 { Latitude = model.Latitude, Longitude = model.Longitude, InstallId = model.Id, Path = path.Replace(".pdf", ".png"), TimeStamp = DateTime.Now };
                            _context.Add(newphoto);
                        }
                        var stream = new FileStream(path, FileMode.Create);
                        await photo.CopyToAsync(stream);
                        stream.Close();

                        if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                        {
                            PhotoExtensions.SaveAndCompressJpeg(path, 80);
                        }
                        else if (path.Contains(".pdf"))
                        {
                            PhotoExtensions.ConvertPdfToPng(path);
                            System.IO.File.Delete(path);
                        }
                    }
                }
                _context.Update(model);
                await _context.SaveChangesAsync();
                Log2 newLogafter = new Log2
                {
                    ItemTypeId = model.ItemTypeId,
                    Description = _SharedLocalizer.GetLocalizedHtmlString("Install After Edit.:") + " " + model.Install_Text + " : " + model.Id.ToString() + " : AMOUNT: " + model.Amount.ToString(),
                    TimeStamp = model.TimeStamp,
                    TheUser = user.full_name(),
                    otherinfo = "Edited On: " + DateTime.Now.ToString() + ". Invoicedate: " + model.InvoiceDate + ". RentalStartDate: " + model.RentalStartDate + ". DeInstallDate: " + Convert.ToDateTime(model.DeinstallDate).ToString() + ". PayedAmount: " + model.PayedAmount.ToString() + ". UNIQUEID: " + model.UniqueID + ". ToBePaid: " + model.ToBePaid.ToString() + ". "
                };
                _context.Add(newLogafter);
                await _context.SaveChangesAsync();
                ViewData["ProjectId"] = await GetProjectList();
                return RedirectToAction("Installations");
            }
            ViewData["SubProjectId"] = new SelectList(_context.SubProjects.Where(x => x.ProjectId.Equals(model.ProjectId)), "Id", "Name");
            ViewData["ProjectId"] = await GetProjectList();
            return RedirectToAction("Installations");
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Edit_Mobilization(int? id)
        {
            if (id != null)
            {
                var user = await _userManager.GetUserAsync(User);
                await CheckUser(user);
                var model = await _context.Mobilisations.Include(x => x.Project).Include(x => x.SubProject).Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                if (model == null)
                {
                    return NotFound();
                }
                if(model.Project.DivisionId != user.DivisionId && !User.IsInRole("Admin"))
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You do not have access to this item" });
                }
                ViewData["SubProjectId"] = new SelectList(_context.SubProjects.Where(x => x.ProjectId.Equals(model.ProjectId)), "Id", "Name");
                ViewData["VariationOrderId"] = new SelectList(_context.BoQHeadLines.Where(x => x.ProjectId.Equals(model.ProjectId) && x.Type.Equals("ExtraWork")), "Id", "HeadLine");
                ViewData["ProjectId"] = await GetProjectList();
                var itemtypes = (from it in _context.ItemTypes
                                 join bqh in _context.BoQHeadLines
                                 on Convert.ToInt32(it.BoQnr)
                                 equals Convert.ToInt32(bqh.BoQnum)
                                 where bqh.Type.Equals("Mobilization")
                                 && !it.Item_Type.ToLower().Contains("discount")
                                 && it.ProjectId.Equals(model.ProjectId)
                                 && bqh.ProjectId.Equals(model.ProjectId)
                                 select it).OrderBy(x => x.BoQnr).ToList();
                ViewData["ItemTypeId"] = new SelectList(itemtypes, "Id", "Item_Type");
                return View("Reports/Edit_Mobilization", model);
            }
            else
            {
                return NotFound();
            }
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember,International")]
        public async Task<IActionResult> Edit_Arrival(int id)
        {
            var user = await _userManager.GetUserAsync(User);
            await CheckUser(user);
            var model = await _context.Arrivals.Include(x => x.Project).SingleOrDefaultAsync(x => x.Id.Equals(id));
            if (model.UniqueID == null)
            {
                model.UniqueID = "N/A";
            }
            if (user.DivisionId.Equals(model.Project.DivisionId) || User.IsInRole("Admin"))
            {
                ViewData["SubProjectId"] = new SelectList(_context.SubProjects.Where(x => x.ProjectId.Equals(model.ProjectId)), "Id", "Name");
                ViewData["VariationOrderId"] = new SelectList(_context.BoQHeadLines.Where(x => x.ProjectId.Equals(model.ProjectId) && x.Type.Equals("ExtraWork")), "Id", "HeadLine");
                ViewData["ProjectId"] = await GetProjectList();
                //List<ItemType> itemtypes = new List<ItemType>();
                //List<ItemType> itemtypesarrival = new List<ItemType>();
                //itemtypes = (from it in _context.ItemTypes join bqh in _context.BoQHeadLines on Math.Floor(it.BoQnr) equals Math.Floor(bqh.BoQnum) where bqh.Type.Equals("Installation") && it.ProjectId.Equals(model.ProjectId) && bqh.ProjectId.Equals(model.ProjectId) select it).OrderBy(x => x.BoQnr).ToList();
                //itemtypesarrival = (from it in _context.ItemTypes join bqh in _context.BoQHeadLines on Math.Floor(it.BoQnr_Rental.Value) equals Math.Floor(bqh.BoQnum) where bqh.Type.Equals("Rental") && it.ProjectId.Equals(model.ProjectId) && bqh.ProjectId.Equals(model.ProjectId) select it).OrderBy(x => x.BoQnr).ToList();
                //foreach (var item in itemtypesarrival)
                //{
                //    itemtypes.Add(item);
                //}
                var itemtypes2 = (from it in _context.ItemTypes join bqh in _context.BoQHeadLines on Math.Floor(it.BoQnr) equals Math.Floor(bqh.BoQnum) where it.ProjectId.Equals(model.ProjectId) && bqh.ProjectId.Equals(model.ProjectId) && bqh.Type.Equals("Mobilization") && !it.Item_Type.ToLower().Contains("discount") && it.Item_Type.ToLower().Contains("transport") select it).OrderBy(x => x.BoQnr);
                ViewData["ItemTypeId"] = new SelectList(_context.ItemTypes.Where(x => x.Id.Equals(model.ItemTypeId)), "Id", "Item_Type", model.ItemTypeId);
                ViewData["ItemTypeId2"] = new SelectList(itemtypes2, "Id", "Item_Type");
                return View("Reports/Edit_Arrival", model);
            }
            else
            {
                return NotFound();
            }
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Edit_Mobilization(Mobilize model)
        {
            if (ModelState.IsValid)
            {
                var user = await _userManager.GetUserAsync(User);
                var before = await _context.Mobilisations.AsNoTracking().Where(x => x.Id.Equals(model.Id)).SingleOrDefaultAsync();
                Log2 newLog = new Log2
                {
                    ItemTypeId = before.ItemTypeId,
                    Description = _SharedLocalizer.GetLocalizedHtmlString("Moblize Before Edit.:") + " " + before.MobilizeText_Text + " : " + before.Id.ToString() + " : AMOUNT: " + before.Amount.ToString(),
                    TimeStamp = before.TimeStamp,
                    TheUser = user.full_name(),
                    otherinfo = "Edited On: " + DateTime.Now.ToString() + ". Invoicedate: " + before.InvoiceDate + ". PayedAmount: " + before.PaidAmount.ToString() + ". UNIQUEID: " + before.UniqueID + ". ToBePaid: " + before.ToBePaid.ToString() + ". "
                };
                _context.Add(newLog);
                model.LastEditedInDataBase = DateTime.Now;
                if (model.UniqueID == null)
                {
                    model.UniqueID = "N/A";
                }
                _context.Update(model);
                await _context.SaveChangesAsync();
                ViewData["SubProjectId"] = new SelectList(_context.SubProjects.Where(x => x.ProjectId.Equals(model.ProjectId)), "Id", "Name");
                ViewData["VariationOrderId"] = new SelectList(_context.BoQHeadLines.Where(x => x.ProjectId.Equals(model.ProjectId) && x.Type.Equals("ExtraWork")), "Id", "HeadLine");
                ViewData["ProjectId"] = await GetProjectList();
                return RedirectToAction("Mobilisations");
            }
            ViewData["ProjectId"] = await GetProjectList();
            ViewData["SubProjectId"] = new SelectList(_context.SubProjects.Where(x => x.ProjectId.Equals(model.ProjectId)), "Id", "Name");
            ViewData["VariationOrderId"] = new SelectList(_context.BoQHeadLines.Where(x => x.ProjectId.Equals(model.ProjectId) && x.Type.Equals("ExtraWork")), "Id", "HeadLine");
            return View(model);
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember,International")]
        public async Task<IActionResult> Edit_Arrival(Arrival model)
        {
            if (ModelState.IsValid)
            {
                var user = await _userManager.GetUserAsync(User);
                var before = await _context.Arrivals.AsNoTracking().Where(x => x.Id.Equals(model.Id)).FirstOrDefaultAsync();
                Log2 newLog = new Log2
                {
                    ItemTypeId = before.ItemTypeId,
                    Description = _SharedLocalizer.GetLocalizedHtmlString("Arrival Before Edit.:") + " " + before.Arrival_Text + " : " + before.Id.ToString() + " : AMOUNT: " + before.Amount.ToString(),
                    TimeStamp = before.TimeStamp,
                    TheUser = user.full_name(),
                    otherinfo = "Edited On: " + DateTime.Now.ToString() + ".Invoicedate: " + before.InvoiceDate + ". DeInstallDate: " + Convert.ToDateTime(before.EndStamp).ToString() + ". PayedAmount: " + before.PayedAmount.ToString() + ". UNIQUEID: " + before.UniqueID + ". ToBePaid: " + before.ToBePaid.ToString() + ". VariationOrderId: " + before.VariationOrderId.ToString() + "."
                };
                _context.Add(newLog);
                model.LastEditedInDataBase = DateTime.Now;
                _context.Update(model);
                await _context.SaveChangesAsync();
                Log2 newLogAfter = new Log2
                {
                    ItemTypeId = before.ItemTypeId,
                    Description = _SharedLocalizer.GetLocalizedHtmlString("Arrival After Edit.:") + " " + model.Arrival_Text + " : " + model.Id.ToString() + " : AMOUNT: " + model.Amount.ToString(),
                    TimeStamp = before.TimeStamp,
                    TheUser = user.full_name(),
                    otherinfo = "Edited On: " + DateTime.Now.ToString() + ".Invoicedate: " + model.InvoiceDate + ". DeInstallDate: " + Convert.ToDateTime(model.EndStamp).ToString() + ". PayedAmount: " + model.PayedAmount.ToString() + ". UNIQUEID: " + model.UniqueID + ". ToBePaid: " + model.ToBePaid.ToString() + ". VariationOrderId: " + model.VariationOrderId.ToString() + "."
                };
                _context.Add(newLogAfter);
                await _context.SaveChangesAsync();
                ViewData["SubProjectId"] = new SelectList(_context.SubProjects.Where(x => x.ProjectId.Equals(model.ProjectId)), "Id", "Name");
                ViewData["VariationOrderId"] = new SelectList(_context.BoQHeadLines.Where(x => x.ProjectId.Equals(model.ProjectId) && x.Type.Equals("ExtraWork")), "Id", "HeadLine");
                ViewData["ProjectId"] = await GetProjectList();
                return RedirectToAction("Arrivals");
            }
            ViewData["SubProjectId"] = new SelectList(_context.SubProjects.Where(x => x.ProjectId.Equals(model.ProjectId)), "Id", "Name");
            ViewData["ProjectId"] = await GetProjectList();
            return RedirectToAction("Installations");
        }

        [Authorize(Roles = "Admin,DivisionAdmin,Manager")]
        public async Task<IActionResult> Delete_Arrival(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var arrival = await _context.Arrivals
                .FirstOrDefaultAsync(m => m.Id == id);
            if (arrival == null)
            {
                return NotFound();
            }

            return View(arrival);
        }
        [Authorize(Roles = "Admin,DivisionAdmin,Manager")]
        public async Task<IActionResult> Delete_Mobilization(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var mob = await _context.Mobilisations
                .FirstOrDefaultAsync(m => m.Id == id);
            if (mob == null)
            {
                return NotFound();
            }

            return View(mob);
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager")]
        public async Task<IActionResult> Toggle_Exclude_Grout(int? id)
        {
            if (id != null)
            {
                var user = await _userManager.GetUserAsync(User);
                if (user.Active == false)
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
                }
                var grout = await _context.Groutings.Include(x => x.Project).SingleOrDefaultAsync(x => x.Id.Equals(id));
                if (!grout.Project.DivisionId.Equals(user.DivisionId) && !User.IsInRole("Admin"))
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You do not have access to edit this item" });
                }
                if (grout.Exclude_From_Invoice == false)
                {
                    grout.Exclude_From_Invoice = true;
                }
                else
                {
                    grout.Exclude_From_Invoice = false;
                }
                _context.Update(grout);
                await _context.SaveChangesAsync();
                return RedirectToAction("Groutings");
            }
            else { return NotFound(); }
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin")]
        public async Task<IActionResult> RemoveDoubleGroutings()
        {
            var installs = await _context.Installations.Where(x => x.Install_Text.Contains("Grouting: ")).OrderByDescending(x => x.Id).ToListAsync();
            List<Int32> IDsNotToRemove = new List<Int32>();
            foreach (var install in installs)
            {
                if (installs.Exists(x => x.Install_Text.Equals(install.Install_Text) && !x.Id.Equals(install.Id) && IDsNotToRemove.IndexOf(x.Id) < 0))
                {
                    var coords = await _context.CoordTrack2s.Where(x => x.InstallId.Equals(install.Id)).ToListAsync();
                    foreach (var coord in coords)
                    {
                        _context.Remove(coord);
                    }
                    await _context.SaveChangesAsync();
                    IDsNotToRemove.Add(install.Id);
                    _context.Remove(install);
                }
            }
            await _context.SaveChangesAsync();
            return RedirectToAction("MainMenu");
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin")]
        public async Task<IActionResult> UpdateAndCreateGroutInstallations()
        {
            var grouts = await _context.Groutings.Where(x => x.ReportChecked.Equals(false)).ToListAsync();
            foreach (Grouting g in grouts)
            {
                var install = await _context.Installations.Where(x => x.Install_Text.Equals("Grouting: " + g.Id)).SingleOrDefaultAsync();
                string loc = "";
                try
                {
                    loc = FindNearestKM(Convert.ToInt32(g.ProjectId), g.Latitude, g.Longitude);
                    if (g.Location == "" || g.Location == null)
                    {
                        g.Location = loc;
                    }
                }
                catch
                {

                }
                if (install == null)
                {
                    ItemType itemtype;
                    if (g.Exclude_From_Invoice == false)
                    {
                        itemtype = await _context.ItemTypes.Where(x => x.Item_Type.ToLower().Contains("grouting liter") && x.ProjectId.Equals(g.ProjectId)).FirstOrDefaultAsync();
                    }
                    else
                    {
                        itemtype = await _context.ItemTypes.Where(x => x.Item_Type.ToLower().Contains("excluded grouting l") && x.ProjectId.Equals(g.ProjectId)).FirstOrDefaultAsync();
                    }
                    Install inst = new Install
                    {
                        ToBePaid = true,
                        Install_Text = "Grouting: " + g.Id,
                        ItemTypeId = itemtype.Id,
                        Amount = g.Totalm3 * 1000.0,
                        UniqueID = g.Id.ToString(),
                        TimeStamp = g.StartTime.Date,
                        RentalStartDate = g.StartTime.Date,
                        InvoiceDate = DateTime.Now.Date,
                        Latitude = g.Latitude,
                        Longitude = g.Longitude,
                        isInstalled = false,
                        IsInOperation = false,
                        ProjectId = g.ProjectId,
                        SubProjectId = g.SubProjectId,
                        DeinstallDate = g.EndTime,
                        Location = loc,
                        EnteredIntoDataBase = DateTime.Now,
                        LastEditedInDataBase = DateTime.Now,
                        DoneBy = g.DoneBy
                    };
                    _context.Add(inst);
                    await _context.SaveChangesAsync();
                    var lastaddedinstall = await _context.Installations.LastAsync();
                    CoordTrack2 new_coord = new CoordTrack2
                    {
                        TypeCoord = "Install",
                        Latitude = g.Latitude,
                        Longitude = g.Longitude,
                        Accuracy = 0,
                        Latitude_backup = 0,
                        Longitude_backup = 0,
                        Accuracy_backup = 0,
                        TimeStamp = g.StartTime,
                        InstallId = lastaddedinstall.Id
                    };
                    _context.Add(new_coord);
                }
                else
                {
                    ItemType itemtype;
                    if (g.Exclude_From_Invoice == false)
                    {
                        itemtype = await _context.ItemTypes.Where(x => x.Item_Type.ToLower().Contains("grouting liter") && x.ProjectId.Equals(g.ProjectId)).FirstOrDefaultAsync();
                    }
                    else
                    {
                        itemtype = await _context.ItemTypes.Where(x => x.Item_Type.ToLower().Contains("excluded grouting L") && x.ProjectId.Equals(g.ProjectId)).FirstOrDefaultAsync();
                    }
                    install.ItemTypeId = itemtype.Id;
                    install.Amount = g.Totalm3 * 1000.0;
                    install.TimeStamp = g.StartTime;
                    install.Latitude = g.Latitude;
                    install.Longitude = g.Longitude;
                    install.ProjectId = g.ProjectId;
                    install.SubProjectId = g.SubProjectId;
                    install.Location = loc;
                    install.LastEditedInDataBase = DateTime.Now;
                    install.DoneBy = g.DoneBy;
                    _context.Update(install);
                    var coord = await _context.CoordTrack2s.Where(x => x.InstallId.Equals(install.Id)).FirstOrDefaultAsync();
                    if (coord == null)
                    {
                        CoordTrack2 new_coord = new CoordTrack2
                        {
                            TypeCoord = "Install",
                            Latitude = g.Latitude,
                            Longitude = g.Longitude,
                            Accuracy = 0,
                            Latitude_backup = 0,
                            Longitude_backup = 0,
                            Accuracy_backup = 0,
                            TimeStamp = g.StartTime,
                            InstallId = install.Id
                        };
                        _context.Add(new_coord);
                    }

                }
                g.ReportChecked = true;
                _context.Update(g);
            }
            await _context.SaveChangesAsync();
            return RedirectToAction("MainMenu");
        }
        // POST: DocumentTypes/Delete/5
        [HttpPost, ActionName("Delete_Arrival")]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteArrivalConfirmed(int id)
        {
            var arrival = await _context.Arrivals.FindAsync(id);
            var coords = await _context.CoordTrack2s.Where(x => x.ArrivalId.Equals(id)).ToListAsync();
            foreach (var c in coords)
            {
                _context.CoordTrack2s.Remove(c);
            }
            _context.Arrivals.Remove(arrival);
            await _context.SaveChangesAsync();
            return RedirectToAction("Arrivals");
        }
        [HttpPost, ActionName("Delete_Mobilization")]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteMobilizationConfirmed(int id)
        {
            var mob = await _context.Mobilisations.FindAsync(id);
            var coords = await _context.CoordTrack2s.Where(x => x.MobilizeId.Equals(id)).ToListAsync();
            foreach (var c in coords)
            {
                _context.CoordTrack2s.Remove(c);
            }
            _context.Mobilisations.Remove(mob);
            await _context.SaveChangesAsync();
            return RedirectToAction("Mobilisations");
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Edit_Maintenance(int? id)
        {
            if (id != null)
            {
                var main = await _context.Maintenances.Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                ViewData["ProjectId"] = await GetProjectList();
                ViewData["SubProjectId"] = new SelectList(_context.SubProjects.Where(x => x.ProjectId.Equals(main.ProjectId)), "Id", "Name");
                return View("Reports/Edit_Maintenance", main);
            }
            else
            {
                return NotFound();
            }
        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        [RequestSizeLimit(900000000)]
        public async Task<IActionResult> Edit_Maintenance(Maintenance model, IFormFile[] files)
        {
            if (ModelState.IsValid)
            {
                _context.Update(model);
                await _context.SaveChangesAsync();

                var directory = _env.WebRootPath + "\\AHAK\\MaintenancePhotos\\" + model.Id.ToString() + "\\";
                if (!Directory.Exists(directory) && files != null)
                {
                    Directory.CreateDirectory(directory);
                }
                foreach (IFormFile photo in files)
                {

                    var path = Path.Combine(directory, photo.FileName);

                    PhotoFileMaintenance maintenancephoto = new PhotoFileMaintenance { Path = path, TimeStamp = model.TimeStamp, MaintenanceId = model.Id, Latitude = Convert.ToDouble(model.Latitude), Longitude = Convert.ToDouble(model.Longitude) };
                    _context.Add(maintenancephoto);
                    var stream = new FileStream(path, FileMode.Create);
                    await photo.CopyToAsync(stream);
                    stream.Close();
                    if (path.ToLower().Contains(".jpg") || path.ToLower().Contains(".jpeg"))
                    {
                        PhotoExtensions.SaveAndCompressJpeg(path, 80);
                    }
                    await _context.SaveChangesAsync();
                }
                return RedirectToAction("Maintenances");
            }
            else
            {
                return NotFound();
            }
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Edit_DailyReport_2(int id)
        {
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            ViewData["Users"] = await GetUserList();
            var model = await _context.Daily_Report_2s.Include(x => x.Title).Include(x => x.Project).Where(x => x.Id.Equals(id)).FirstAsync();
            if (model.tobepaid == null)
            {
                model.tobepaid = 3;
            }
            ViewBag.Machinery = new MultiSelectList(_context.Machinery.Select(m => new { m.Id, Name = m.MachineryName }).ToList(), "Id", "Name");
            ViewData["SubProjectId"] = new SelectList(_context.SubProjects.Where(x => x.ProjectId.Equals(model.ProjectId)), "Id", "Name");
            ViewData["ProjectId"] = await GetProjectList();
            ViewData["TitleId"] = new SelectList(_context.Titles.Include(x => x.Project).Where(x => x.ProjectId.Equals(model.ProjectId)).OrderBy(x => x.TheTitle), "Id", "TheTitle");
            ViewData["VariationOrderId"] = new SelectList(_context.BoQHeadLines.Where(x => x.Type.Equals("ExtraWork") && x.ProjectId.Equals(model.ProjectId)), "Id", "HeadLine");
            List<string> photos = new List<string>();
            string path = _env.WebRootPath + "/AHAK/DailyReports/" + model.Id.ToString() + "/";
            List<string> pictures = new List<string>();
            if (Directory.Exists(path))
            {
                var folder = Directory.EnumerateFiles(path)
                                 .Select(fn => Path.GetFileName(fn));

                foreach (string file in folder)
                {
                    if (file.Contains("_edit"))
                    {
                        pictures.Add(file);
                    }
                    else
                    {
                        string[] fileparts = file.Split(".");
                        if (!folder.Contains(fileparts[0] + "_edit." + fileparts[1]))
                        {
                            pictures.Add(file);
                        }
                    }
                }
            }
            model.pictures = pictures;
            if (User.IsInRole("ProjectMember") && !User.IsInRole("Manager") && !User.IsInRole("Admin"))
            {
                if (model.DoneBy.Equals(user.full_name()))
                {
                    return View("Reports/Edit_DailyReport_2", model);
                }
                else
                {
                    return NotFound();
                }
            }
            return View("Reports/Edit_DailyReport_2", model);
        }
        [HttpPost]
        public async Task<IActionResult> RemovePhoto(string theid, string thephoto)
        {
            var path = _env.WebRootPath + "\\AHAK\\DailyReports\\" + theid + "\\";
            System.IO.File.Delete(path + thephoto);
            if (thephoto.Contains("_edit"))
            {
                string fileextension = thephoto.Split(".")[1];
                string potentialoriginal = path + thephoto.Split("_edit")[0] + "." + fileextension;
                if (System.IO.File.Exists(potentialoriginal))
                {
                    System.IO.File.Delete(potentialoriginal);
                }
            }
            if (Directory.GetFiles(path).Count() == 0)
            {
                var dr = await _context.Daily_Report_2s.FindAsync(Convert.ToInt32(theid));
                dr.HasPhotos = false;
                _context.Update(dr);
                await _context.SaveChangesAsync();
            }

            return Ok();
        }
        [HttpPost]
        public async Task<IActionResult> DownloadPhoto(string theid, string thephoto)
        {
            string fileextension = thephoto.Split(".")[1];
            string potentialoriginal = thephoto.Split("_edit")[0] + "." + fileextension;
            var botsFolderPath = Path.Combine(_env.WebRootPath, "AHAK", "DailyReports", theid);
            var botFilePaths = Directory.GetFiles(botsFolderPath);
            var zipFileMemoryStream = new MemoryStream();
            using (ZipArchive archive = new ZipArchive(zipFileMemoryStream, ZipArchiveMode.Update, leaveOpen: true))
            {
                foreach (var botFilePath in botFilePaths)
                {
                    if (botFilePath.ToLower().Contains(thephoto.ToLower()) || botFilePath.ToLower().Contains(potentialoriginal.ToLower()))
                    {
                        var botFileName = Path.GetFileName(botFilePath);
                        var entry = archive.CreateEntry(botFileName);
                        using (var entryStream = entry.Open())
                        using (var fileStream = System.IO.File.OpenRead(botFilePath))
                        {
                            await fileStream.CopyToAsync(entryStream);
                        }
                    }
                }
            }
            zipFileMemoryStream.Seek(0, SeekOrigin.Begin);
            return File(zipFileMemoryStream, "application/octet-stream", "Photos.zip");

        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> Edit_DailyReport_2(Daily_Report_2 model)
        {
            var user = await _userManager.GetUserAsync(User);
            if (ModelState.IsValid)
            {
                var prev_model = await _context.Daily_Report_2s.AsNoTracking().SingleOrDefaultAsync(x => x.Id.Equals(model.Id));
                if(prev_model.tobepaid != model.tobepaid && model.tobepaid == 1)
                {
                    model.InvoiceDate = DateTime.Now;
                }
                if (prev_model.Report_Checked != model.Report_Checked && model.Report_Checked == true)
                {
                    model.Checked_By = user.full_name();
                }
                if (model.StandingTime.GetValueOrDefault() == null)
                {
                    model.StandingTime = new TimeSpan(0); 
                }
                model.LastEditedInDataBase = DateTime.Now;
                var folderpath = _env.WebRootPath + "\\AHAK\\DailyReports\\" + model.Id.ToString() + "\\";
                if (!Directory.Exists(folderpath) && HttpContext.Request.Form.Files != null)
                {
                    Directory.CreateDirectory(folderpath);

                }
                if (HttpContext.Request.Form.Files != null)
                {
                    var files = HttpContext.Request.Form.Files;
                    if (files.Count() > 0)
                    {
                        model.HasPhotos = true;
                    }

                    foreach (var file in files)
                    {
                        if (file.Length > 0)
                        {
                            //Getting FileName
                            var fileName = ContentDispositionHeaderValue.Parse(file.ContentDisposition).FileName.Trim('"');
                            fileName = folderpath + $@"\{fileName}";

                            using (FileStream fs = System.IO.File.Create(fileName))
                            {
                                file.CopyTo(fs);
                                fs.Flush();
                            }
                            if (fileName.ToLower().Contains(".jpg") || fileName.ToLower().Contains(".jpeg"))
                            {
                                PhotoExtensions.SaveAndCompressJpeg(fileName, 80);
                            }
                        }
                    }
                }
                if (model.Machinery != null && model.Machinery != "" && model.Machinery != "None")
                {
                    model.Machinery = model.Machinery.TrimStart(',');
                    model.Machinery = model.Machinery.TrimEnd(',');
                    if (model.Machinery.Contains(","))
                    {
                        string[] machineries = model.Machinery.Split(",");
                        foreach (string machine in machineries.Distinct())
                        {
                            string machinery = machine.Replace(",", "").Trim();
                            if (machinery.Trim() != "")
                            {
                                var existingmachinery = await _context.Machinery.Where(x => x.MachineryName.Equals(machinery) && x.DivisionId.Equals(user.DivisionId)).FirstOrDefaultAsync();
                                if (existingmachinery == null)
                                {
                                    Machinery mc = new Machinery { MachineryName = machinery, DivisionId = user.DivisionId };
                                    _context.Add(mc);
                                }
                            }
                        }
                    }
                    else
                    {
                        var existingmachinery = await _context.Machinery.Where(x => x.MachineryName.Equals(model.Machinery) && x.DivisionId.Equals(user.DivisionId)).FirstOrDefaultAsync();
                        if (existingmachinery == null)
                        {
                            Machinery mc = new Machinery { MachineryName = model.Machinery.TrimStart(',').TrimEnd(',').Trim(), DivisionId = user.DivisionId };
                            _context.Add(mc);
                        }
                    }

                }
                
                var title = await _context.Titles.Where(x => x.Id.Equals(model.TitleId)).SingleOrDefaultAsync();
                if (title.ProjectId != model.ProjectId)
                {
                    var newtitle = await _context.Titles.Where(x => x.ProjectId.Equals(model.ProjectId) && x.TheTitle.Equals(title.TheTitle)).SingleOrDefaultAsync();
                    if (newtitle != null)
                    {
                        model.TitleId = newtitle.Id;
                    }
                    else
                    {
                        return RedirectToAction("ErrorMessage", "Home", new { text = "Title does not belong to this project. Ask Rho For help or make sure you correctly choose a new title when editing." });
                    }
                }
                _context.Update(model);
                await _context.SaveChangesAsync();
            }
            else
            {
                var theuser = await _userManager.GetUserAsync(User);
                ViewData["SubProjectId"] = new SelectList(_context.SubProjects.Where(x => x.ProjectId.Equals(model.ProjectId)), "Id", "Name");
                ViewBag.Machinery = new MultiSelectList(_context.Machinery.Where(x => x.DivisionId.Equals(user.DivisionId)).Select(m => new { m.Id, Name = m.MachineryName }).ToList(), "Id", "Name");
                ViewData["TitleId"] = new SelectList(_context.Titles.Include(x => x.Project).Where(x => x.Project.DivisionId.Equals(theuser.DivisionId)), "Id", "TheTitle");
                ViewData["Users"] = await GetUserList();
                ViewData["ProjectId"] = await GetProjectList();
                return View("Reports/Edit_DailyReport_2", model);
            }
            return RedirectToAction("DailyReports");
        }
        [HttpGet]
        public async Task<IActionResult> Daily_Report_2_DetailsPdf(int? id)
        {
            if (id != null)
            {
                var theuser = await _userManager.GetUserAsync(User);
                if (User.IsInRole("Admin"))
                {
                    ViewData["userId"] = new SelectList(_context.Users, "Id", "Email");
                }
                else
                {
                    ViewData["userId"] = new SelectList(_context.Users.Where(x => x.DivisionId.Equals(theuser.DivisionId)), "Id", "Email");
                }


                var model = await _context.Daily_Report_2s
                    .Include(x => x.Project).ThenInclude(x => x.Division)
                    .Include(x => x.SubProject)
                    .Include(x => x.Title)
                    .Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                if (model.Work_Performed != null && model.Work_Performed != "")
                {
                    model.Work_Performed = model.Work_Performed.Replace("\r\n\r\n", "\r\n");
                }
                if (((from p in _context.ProjectUsers where p.userId.Equals(theuser.Id) select p.projectId).ToList().Contains(Convert.ToInt32(model.ProjectId))) || !User.IsInRole("Guest"))
                {
                    List<string> photos = new List<string>();
                    string path = _env.WebRootPath + "/AHAK/DailyReports/" + model.Id.ToString() + "/";
                    List<string> pictures = new List<string>();
                    if (Directory.Exists(path))
                    {
                        var folder = Directory.EnumerateFiles(path)
                                         .Select(fn => Path.GetFileName(fn));

                        foreach (string file in folder)
                        {
                            if (file.Contains("_edit"))
                            {
                                pictures.Add(file);
                            }
                            else
                            {
                                string[] fileparts = file.Split(".");
                                if (!folder.Contains(fileparts[0] + "_edit." + fileparts[1]))
                                {
                                    pictures.Add(file);
                                }
                            }
                        }
                    }
                    model.pictures = pictures;
                    return new ViewAsPdf("Reports/_Daily_Report_2", model);
                }
                else
                {
                    return NotFound();
                }
            }
            else
            {
                return NotFound();
            }
        }

        [HttpGet]
        public async Task<IActionResult> ToolBoxes()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            List<ToolBox> items = new List<ToolBox>();
            if (User.IsInRole("Guest"))
            {
                items = await (from pu in _context.ProjectUsers
                               join dr in _context.ToolBoxes.Include(x => x.users).Include(x => x.Project).ThenInclude(x => x.Division) on pu.projectId equals dr.ProjectId
                               where pu.userId.Equals(user.Id) && dr.Project.DivisionId.Equals(user.DivisionId)
                               select dr).OrderByDescending(x => x.Report_Date).ToListAsync();
            }
            else
            {
                items = await _context.ToolBoxes.Include(x => x.users).Include(x => x.Project).ThenInclude(x => x.Division)
                .Where(x => x.Project.DivisionId.Equals(user.DivisionId))
                .OrderByDescending(x => x.Report_Date).ToListAsync();
            }

            return View("Reports/ToolBoxes", items);
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager")]
        public async Task<IActionResult> Edit_ToolBox(int? id)
        {
            if (id != null)
            {
                var model = await _context.ToolBoxes.Include(x => x.users).Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                ViewData["SubProjectId"] = new SelectList(_context.SubProjects.Where(x => x.ProjectId.Equals(model.ProjectId)), "Id", "Name");
                ViewData["ProjectId"] = await GetProjectList();
                return View("Reports/Edit_ToolBox", model);
            }
            else
            {
                return NotFound();
            }

        }
        [HttpPost]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager")]
        public async Task<IActionResult> Edit_ToolBox(ToolBox model)
        {
            if (ModelState.IsValid)
            {
                _context.ToolBoxes.Update(model);
                await _context.SaveChangesAsync();
                return RedirectToAction("ToolBoxes");
            }
            else
            {
                return NotFound();
            }

        }
        [HttpGet]
        public async Task<IActionResult> Details_ToolBox(int? id)
        {
            if (id != null)
            {
                var user = await _userManager.GetUserAsync(User);
                if (user.Active == false)
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
                }
                var Toolbox = await _context.ToolBoxes.Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.users).Where(x => x.Id.Equals(id)).SingleOrDefaultAsync();
                if (((from p in _context.ProjectUsers where p.userId.Equals(user.Id) select p.projectId).ToList().Contains(Convert.ToInt32(Toolbox.ProjectId))) || !User.IsInRole("Guest"))
                {
                    return new ViewAsPdf("Reports/_ToolBox", Toolbox);
                }
                else
                {
                    return NotFound();
                }
            }
            else { return NotFound(); }
        }

        public DateTime FirstDate(DateTime d1, DateTime d2)
        {
            if (d1 >= d2)
            {
                return d2.Date;
            }
            else
            {
                return d1.Date;
            }
        }
        public DateTime LastDate(DateTime d1, DateTime d2)
        {
            if (d1 >= d2)
            {
                return d1.Date;
            }
            else
            {
                return d2.Date;
            }
        }
        [HttpPost]
        public async Task<IActionResult> CombsearchDR(string searchstring, string filterchoice, string filterchoice2)
        {
            int f_c_converted;
            int f_c_converted2;
            f_c_converted = Convert.ToInt32(filterchoice);
            f_c_converted2 = Convert.ToInt32(filterchoice2);
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            IEnumerable<SelectListItem> selList = await GetProjectList();
            IEnumerable<SelectListItem> selList2 = await CreateFilter2list();
            ViewData["Filterchoices"] = new SelectList(selList, "Value", "Text", filterchoice);
            ViewData["Filterchoices2"] = new SelectList(selList2, "Value", "Text", filterchoice2);
            ViewData["ProjectId"] = await GetProjectList();
            List<Daily_Report_2> results = new List<Daily_Report_2>();
            if (ModelState.IsValid)
            {
                if (string.IsNullOrEmpty(searchstring) && (string.IsNullOrEmpty(filterchoice) || filterchoice.Equals("All")) && (string.IsNullOrEmpty(filterchoice2) || filterchoice2.Equals("All")))
                {
                    return RedirectToAction("DailyReports");
                }
                else if (string.IsNullOrEmpty(searchstring) && (!string.IsNullOrEmpty(filterchoice)))
                {
                    if (User.IsInRole("Admin"))
                    {
                        results = await (from dr in _context.Daily_Report_2s
                                 .Include(m => m.Project).ThenInclude(x => x.Division)
                                 .Include(m => m.Title)
                                 .OrderBy(x => x.Project.Name).ThenByDescending(x => x.Report_Date)
                                         where
                                         dr.ProjectId.Equals(f_c_converted)
                                         select dr).OrderByDescending(x => x.Report_Date).ToListAsync();
                    }
                    else
                    {
                        results = await (from dr in _context.Daily_Report_2s
                                 .Include(m => m.Project).ThenInclude(x => x.Division)
                                 .Include(m => m.Title)
                                 .OrderBy(x => x.Project.Name).ThenByDescending(x => x.Report_Date)
                                         where
                                         dr.Project.DivisionId.Equals(user.DivisionId) &&
                                         dr.ProjectId.Equals(f_c_converted)
                                         select dr).OrderByDescending(x => x.Report_Date).ToListAsync();
                    }
                }
                else if (!string.IsNullOrEmpty(searchstring) && (string.IsNullOrEmpty(filterchoice) || filterchoice.Equals("All")))
                {

                    if (User.IsInRole("Admin"))
                    {
                        results = await (from dr in _context.Daily_Report_2s
                                 .Include(m => m.Project).ThenInclude(x => x.Division)
                                 .Include(m => m.Title)
                                 .OrderBy(x => x.Project.Name).ThenByDescending(x => x.Report_Date)
                                         where
                                         (dr.Work_Performed.ToLower().Contains(searchstring.ToLower())
                                         || dr.DoneBy.ToLower().Contains(searchstring.ToLower())
                                         || dr.short_Description.ToLower().Contains(searchstring.ToLower()))
                                         select dr).OrderByDescending(x => x.Report_Date).ToListAsync();
                    }
                    else
                    {
                        results = await (from dr in _context.Daily_Report_2s
                                 .Include(m => m.Project).ThenInclude(x => x.Division)
                                 .Include(m => m.Title)
                                 .OrderBy(x => x.Project.Name).ThenByDescending(x => x.Report_Date)
                                         where
                                         dr.Project.DivisionId.Equals(user.DivisionId) &&
                                        (dr.Work_Performed.ToLower().Contains(searchstring.ToLower())
                                         || dr.DoneBy.ToLower().Contains(searchstring.ToLower())
                                         || dr.short_Description.ToLower().Contains(searchstring.ToLower()))
                                         select dr).OrderByDescending(x => x.Report_Date).ToListAsync();
                    }
                }
                else
                {

                    if (User.IsInRole("Admin"))
                    {
                        results = await (from dr in _context.Daily_Report_2s
                                 .Include(m => m.Project).ThenInclude(x => x.Division)
                                 .Include(m => m.Title)
                                 .OrderBy(x => x.Project.Name).ThenByDescending(x => x.Report_Date)
                                         where
                                         dr.ProjectId.Equals(f_c_converted)
                                         &&
                                         (dr.Work_Performed.ToLower().Contains(searchstring.ToLower())
                                         || dr.DoneBy.ToLower().Contains(searchstring.ToLower())
                                         || dr.short_Description.ToLower().Contains(searchstring.ToLower()))
                                         select dr).OrderByDescending(x => x.Report_Date).ToListAsync();
                    }
                    else
                    {
                        results = await (from dr in _context.Daily_Report_2s
                                 .Include(m => m.Project).ThenInclude(x => x.Division)
                                 .Include(m => m.Title)
                                 .OrderBy(x => x.Project.Name).ThenByDescending(x => x.Report_Date)
                                         where
                                         dr.ProjectId.Equals(f_c_converted) &&
                                         dr.Project.DivisionId.Equals(user.DivisionId) &&
                                        (dr.Work_Performed.ToLower().Contains(searchstring.ToLower())
                                         || dr.DoneBy.ToLower().Contains(searchstring.ToLower())
                                         || dr.short_Description.ToLower().Contains(searchstring.ToLower()))
                                         select dr).OrderByDescending(x => x.Report_Date).ToListAsync();
                    }
                }
                if (filterchoice2 != null && filterchoice2 != "All")
                {
                    results = results.Where(x => x.SubProjectId.Equals(f_c_converted2)).OrderByDescending(x => x.Report_Date).ThenBy(x => x.Project.Name).ThenBy(x => x.SubProject.Name).ToList();
                }
                if (User.IsInRole("Guest"))
                {
                    results = results.Where(x => x.Report_Checked.Equals(true)).ToList();
                }
                if (User.IsInRole("ExternalDriller"))
                {
                    results = results.Where(x => x.DoneBy.Equals(user.full_name())).ToList();
                }
                return View("Reports/DailyReports", results);
            }
            return RedirectToAction("DailyReports");
        }
        [HttpGet]
        public async Task<JsonResult> AutoCompleteDR(string search)
        {
            var user = await _userManager.GetUserAsync(User);
            
            List<Daily_Report_2> results = new List<Daily_Report_2>();
            if (!HttpContext.User.IsInRole("Admin"))
            {
                results = await (from dr in _context.Daily_Report_2s
                                 .Include(m => m.Project).ThenInclude(x => x.Division)
                                 .Include(m => m.Title)
                                 .OrderBy(x => x.Project.Name).ThenByDescending(x => x.Report_Date)
                                 where
                                 dr.Project.Division.Id.Equals(user.DivisionId)
                                 && (dr.DoneBy.ToLower().Contains(search.ToLower())
                                 || dr.Project.Name.ToLower().Contains(search.ToLower())
                                 || dr.Work_Performed.ToLower().Contains(search.ToLower())
                                 || dr.short_Description.ToLower().Contains(search.ToLower()))
                                 select dr).ToListAsync();
            }
            else
            {
                results = await (from dr in _context.Daily_Report_2s
                                 .Include(m => m.Project).ThenInclude(x => x.Division)
                                 .Include(m => m.Title)
                                 .OrderBy(x => x.Project.Name).ThenByDescending(x => x.Report_Date)
                                 where
                                 (dr.DoneBy.ToLower().Contains(search.ToLower())
                                 || dr.Project.Name.ToLower().Contains(search.ToLower())
                                 || dr.Work_Performed.ToLower().Contains(search.ToLower())
                                 || dr.short_Description.ToLower().Contains(search.ToLower()))
                                 select dr).ToListAsync();
            }

            return Json(results.Select(m => new
            {
                id = m.Id,
                value = m.Work_Performed,
                label = m.Project.Name + '_' + m.Work_Performed
            }).OrderBy(x => x.label));
        }
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> UpdateOpenDew()
        {
            List<Install> opendewpumps = new List<Install>();
            var opendews = await _context.Installations.Where(x => x.ItemTypeId.Equals(13) && x.ProjectId.Equals(40)).ToListAsync();
            opendewpumps = await _context.Installations.Where(x => x.ItemTypeId.Equals(14) && x.ProjectId.Equals(40)).ToListAsync();
            List<int> closestones = new List<int>();

            foreach (var item in opendewpumps)
            {
                int closeone = -100;
                double closedist = 1000000.0;
                foreach (var opendew in opendews)
                {
                    var dist = DistanceAlgorithm.DistanceBetweenPlaces(opendew.Longitude, opendew.Latitude, Convert.ToDouble(item.Longitude), Convert.ToDouble(item.Latitude));
                    if (dist < closedist)
                    {
                        closeone = opendew.Id;
                    }
                    closestones.Add(closeone);
                }
            }
            foreach (var od in opendews)
            {
                if (!closestones.Contains(od.Id))
                {


                    var pistonpump = await _context.Installations
                        .Include(x => x.ItemType)
                        .Where(x => x.ItemType.Item_Type.ToLower().Contains("piston pump") && (DistanceAlgorithm.DistanceBetweenPlaces(od.Longitude, od.Latitude, Convert.ToDouble(x.Longitude), Convert.ToDouble(x.Latitude)) <= 0.025)).ToListAsync();
                    if (pistonpump != null && pistonpump.Count() > 0)
                    {
                        Install pump = new Install();
                        pump.ToBePaid = true;
                        pump.Latitude = od.Latitude;
                        pump.Longitude = od.Longitude;
                        pump.Install_Text = "For Open Dew.";
                        if (od.isInstalled)
                        {
                            pump.isInstalled = true;
                        }
                        else
                        {
                            pump.isInstalled = false;
                            pump.DeinstallDate = od.DeinstallDate;
                        }

                        pump.TimeStamp = od.TimeStamp;
                        pump.InvoiceDate = DateTime.Now;
                        pump.RentalStartDate = od.TimeStamp;
                        pump.ProjectId = od.ProjectId;
                        pump.ItemTypeId = 14;
                        _context.Add(pump);
                        await _context.SaveChangesAsync();
                        var lastadded = await _context.Installations.LastAsync();
                        CoordTrack2 Coords = new CoordTrack2();
                        Coords.Latitude = lastadded.Latitude;
                        Coords.Longitude = lastadded.Longitude;
                        Coords.InstallId = lastadded.Id;
                        Coords.TypeCoord = "Installed";
                        Coords.TimeStamp = lastadded.TimeStamp;
                        _context.Add(Coords);
                        await _context.SaveChangesAsync();
                        if (!od.isInstalled)
                        {
                            CoordTrack2 Coords2 = new CoordTrack2();
                            Coords2.Latitude = lastadded.Latitude;
                            Coords2.Longitude = lastadded.Longitude;
                            Coords2.InstallId = lastadded.Id;
                            Coords2.TypeCoord = "DeInstalled";
                            Coords2.TimeStamp = Convert.ToDateTime(lastadded.DeinstallDate);
                            _context.Add(Coords2);
                            await _context.SaveChangesAsync();
                        }
                    }
                    else
                    {
                    }
                }
            }
            return RedirectToAction("MainMenu");
        }
        [HttpPost]
        [Route("/TrackItems/Installations/data.csv")]
        [Produces("text/csv")]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember,Guest")]
        public async Task<IActionResult> ExportInstall(int ProjectId, int ItemTypeId)
        {
            Debug.WriteLine($"ProjectId: {ProjectId}");
            Debug.WriteLine($"ItemTypeId: {ItemTypeId}");

            if (User.IsInRole("Guest"))
            {
                var user = await _userManager.GetUserAsync(User);
                if (user.Active == false)
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
                }
                var projectuser = await _context.ProjectUsers.SingleOrDefaultAsync(x => x.projectId.Equals(ProjectId) && x.userId.Equals(user.Id));
                if (projectuser == null)
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You do not have access to that project" });
                }
            }
            StringBuilder sb = new StringBuilder();
            var data = await _context.Installations.Include(x => x.ItemType).Include(x => x.Project).Where(x => x.ProjectId.Equals(ProjectId)).ToListAsync();
            List<string> headerrow = new List<string>(new string[] { "Id", "Project", "ItemType", "Unique ID", "Location", "Install Text", "TimeStamp", "Latitude", "Longitude", "isInstalled", "Amount", "Total Amount Installed", "ToBePaid", "Paid Amount", "DeInstall Date" });
            sb.AppendLine(string.Join(";", headerrow.ToArray()));
            foreach (Install item in data)
            {
                List<string> fillerrow = new List<string>(new string[] { "", "", "", "", "", "", "", "", "", "", "", "", "", "", "" })
                {
                    [0] = item.Id.ToString(),
                    [1] = item.Project.Name,
                    [2] = item.ItemType.Item_Type,
                    [3] = item.UniqueID,
                    [4] = item.Location,
                    [6] = String.Format("{0:yyyy-MM-dd}", item.TimeStamp),
                    [7] = item.Latitude.ToString(),
                    [8] = item.Longitude.ToString(),
                    [9] = item.isInstalled.ToString(),
                    [10] = item.Amount.ToString(),
                    [11] = data.Where(x => x.ItemTypeId.Equals(item.ItemTypeId)).Sum(x => x.Amount).ToString(),
                    [12] = item.ToBePaid.ToString(),
                    [13] = item.PayedAmount != null ? item.PayedAmount.ToString() : "" //.Where(x => x.ItemTypeId.Equals(item.ItemTypeId)).Sum(x => x.Amount).ToString()
                };
                if (item.Install_Text != null)
                {
                    fillerrow[5] = item.Install_Text.ToString().Replace(";", ":");
                }
                else
                {
                    fillerrow[5] = "";
                }

                if (item.DeinstallDate != null)
                {
                    fillerrow[14] = String.Format("{0:yyyy-MM-dd}", item.DeinstallDate);
                }
                else
                {
                    fillerrow[14] = "";
                }

                if (ItemTypeId == -1)
                {
                    sb.AppendLine(string.Join(";", fillerrow.ToArray()));
                }
                else
                {
                    if (item.ItemTypeId.Equals(ItemTypeId))
                    {
                        sb.AppendLine(string.Join(";", fillerrow.ToArray()));
                    }
                }

            }
            return File(System.Text.Encoding.ASCII.GetBytes(sb.ToString()), "text/csv", "data.csv");
        }

        [HttpPost]
        [Route("/PumpInstallations/data.csv")]
        [Produces("text/csv")]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember,Guest")]
        public async Task<IActionResult> ExportPumpInstall(int ProjectId)//, int ItemTypeId)
        {
            Debug.WriteLine($"ProjectId: {ProjectId}");
            //Debug.WriteLine($"ItemTypeId: {ItemTypeId}");

            if (User.IsInRole("Guest"))
            {
                var user = await _userManager.GetUserAsync(User);
                if (user.Active == false)
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
                }
                var projectuser = await _context.ProjectUsers.SingleOrDefaultAsync(x => x.projectId.Equals(ProjectId) && x.userId.Equals(user.Id));
                if (projectuser == null)
                {
                    return RedirectToAction("ErrorMessage", "Home", new { text = "You do not have access to that project" });
                }
            }
            StringBuilder sb = new StringBuilder();
            var data = await _context.PumpInstallation
                .Include(x => x.Project)
                .Include(x => x.SubProject)
                .Include(x => x.MeasPoint)
                //.Where(x => x.Id.Equals(ProjectId))
                .OrderByDescending(x => x.TimeStamp)
                .ToListAsync();
            List<string> headerrow = new List<string>(new string[] { "Id", "Project", "SubProject", "Well Name",
                "Date and Time", "PumpType", "Sensor Range", "Depth of Well (m)",
                "Depth of Pump (m)", "Depth of Sensor (m)", "Hose/Pipe diameter", "Water level from top of pipe",
                "Cut/Extend" });
            sb.AppendLine(string.Join(";", headerrow.ToArray()));
            foreach (PumpInstallation item in data)
            {
                //List<string> fillerrow = new List<string>(new string[] { "", "", "", "", "", "", "", "", "", "", "", "", "" })
                //{
                //    [0] = item.Id.ToString(), //Id
                //    [1] = item.Project.Abbreviation, //Project
                //    [2] = item.SubProject != null ? item.SubProject.Id.ToString() : "", //SubProject
                //    [3] = item.WellName, //Well Name
                //    [4] = String.Format("{0:yyyy-MM-dd}", item.TimeStamp), //Date and Time
                //    [5] = item.PumpTypeId != null?  item.PumpType.Item_Type : item.PumpTypeWritten, //PumpType
                //    [6] = item.SensorRange?.ToString(), //Sensor Range
                //    [7] = item.WellDepth?.ToString(), //Depth of Well
                //    [8] = item.PumpDepth?.ToString(), //Depth of Pump
                //    [9] = item.SensorDepth?.ToString(), //Depth of Sensor
                //    [10] = item.DiameterHose?.ToString(), //Hose/Pipe diameter
                //    [11] = item.WaterLevel?.ToString(), //Water level from top of pipe
                //    [12] = item.PipeCut?.ToString(), //cut/Extend                 
                //};
                List<string> fillerrow = new List<string>
                {
                    item?.Id.ToString() ?? "", // Id
                    item?.Project?.Abbreviation ?? "", // Project
                    item?.SubProject?.Id.ToString() ?? "", // SubProject
                    item?.WellName ?? "", // Well Name
                    item?.TimeStamp != null ? item.TimeStamp.ToString("yyyy-MM-dd") : "", // Date and Time
                    item?.PumpTypeId != null
                        ? item?.PumpType?.Item_Type ?? ""
                        : item?.PumpTypeWritten ?? "", // PumpType
                    item?.SensorRange?.ToString() ?? "", // Sensor Range
                    item?.WellDepth?.ToString() ?? "", // Depth of Well
                    item?.PumpDepth?.ToString() ?? "", // Depth of Pump
                    item?.SensorDepth?.ToString() ?? "", // Depth of Sensor
                    item?.DiameterHose?.ToString() ?? "", // Hose/Pipe diameter
                    item?.WaterLevel?.ToString() ?? "", // Water level from top of pipe
                    item?.PipeCut?.ToString() ?? "" // Cut/Extend
                };

                sb.AppendLine(string.Join(";", fillerrow.ToArray()));

            }
            return File(System.Text.Encoding.ASCII.GetBytes(sb.ToString()), "text/csv", "data.csv");
        }
        [HttpPost]
        [Route("/TrackItems/Arrivals/data.csv")]
        [Produces("text/csv")]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> ExportArrival(int ProjectId)
        {
            StringBuilder sb = new StringBuilder();
            var data = await _context.Arrivals.Include(x => x.ItemType).Include(x => x.Project).Where(x => x.ProjectId.Equals(ProjectId)).ToListAsync();
            List<string> headerrow = new List<string>(new string[] { "Id", "Project", "ItemType", "From", "Arrival Text", "TimeStamp", "Amount", "Total Amount Arrived" });
            sb.AppendLine(string.Join(";", headerrow.ToArray()));
            foreach (Arrival item in data)
            {
                List<string> fillerrow = new List<string>(new string[] { "", "", "", "", "", "", "", "" })
                {
                    [0] = item.Id.ToString(),
                    [1] = item.Project.Name,
                    [2] = item.ItemType.Item_Type,
                    [5] = String.Format("{0:yyyy-MM-dd}", item.TimeStamp),
                    [6] = item.Amount.ToString(),
                    [7] = data.Where(x => x.ItemTypeId.Equals(item.ItemTypeId)).Sum(x => x.Amount).ToString()
                };
                if (item.MobilisationId.Equals(2))
                {
                    fillerrow[3] = "Germany";
                }
                else
                {
                    fillerrow[3] = "Denmark";
                }
                if (item.Arrival_Text != null)
                {
                    fillerrow[4] = item.Arrival_Text.ToString().Replace(";", ":");
                }
                else
                {
                    fillerrow[4] = "";
                }

                sb.AppendLine(string.Join(";", fillerrow.ToArray()));

            }
            return File(System.Text.Encoding.ASCII.GetBytes(sb.ToString()), "text/csv", "data.csv");
        }
        [HttpPost]
        [Route("/TrackItems/Mobilisations/data.csv")]
        [Produces("text/csv")]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> ExportMobilize(int ProjectId)
        {
            StringBuilder sb = new StringBuilder();
            var data = await _context.Mobilisations.Include(x => x.ItemType).Include(x => x.Project).Where(x => x.ProjectId.Equals(ProjectId)).ToListAsync();
            List<string> headerrow = new List<string>(new string[] { "Id", "Project", "ItemType", "Mobilize Text", "TimeStamp", "Latitude", "Longitude", "Amount", "Total Amount Mobilized" });
            sb.AppendLine(string.Join(";", headerrow.ToArray()));
            foreach (Mobilize item in data)
            {
                List<string> fillerrow = new List<string>(new string[] { "", "", "", "", "", "", "", "" })
                {
                    [0] = item.Id.ToString(),
                    [1] = item.Project.Name,
                    [2] = item.ItemType.Item_Type,
                    [5] = String.Format("{0:yyyy-MM-dd}", item.TimeStamp),
                    [6] = item.Latitude.ToString(),
                    [7] = item.Longitude.ToString(),
                    [8] = item.Amount.ToString(),
                    [9] = data.Where(x => x.ItemTypeId.Equals(item.ItemTypeId)).Sum(x => x.Amount).ToString()
                };

                if (item.MobilizeText_Text != null)
                {
                    fillerrow[3] = item.MobilizeText_Text.ToString().Replace(";", ":");
                }
                else
                {
                    fillerrow[3] = "";
                }

                sb.AppendLine(string.Join(";", fillerrow.ToArray()));

            }
            return File(System.Text.Encoding.ASCII.GetBytes(sb.ToString()), "text/csv", "data.csv");
        }
        [HttpPost]
        [Route("/TrackItems/DeInstallations/data.csv")]
        [Produces("text/csv")]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> ExportDeInstall(int ProjectId)
        {
            StringBuilder sb = new StringBuilder();
            var data = await _context.Deinstallations.Include(x => x.Install).Include(x => x.ItemType).Include(x => x.Project).Where(x => x.ProjectId.Equals(ProjectId)).ToListAsync();
            List<string> headerrow = new List<string>(new string[] { "Id", "Project", "ItemType", "DeInstall Text", "TimeStamp", "Latitude", "Longitude", "Amount", "Total Amount DeInstalled", "InstallId", "Location" });
            sb.AppendLine(string.Join(";", headerrow.ToArray()));
            foreach (DeInstall item in data)
            {
                List<string> fillerrow = new List<string>(new string[] { "", "", "", "", "", "", "", "", "", "", "" })
                {
                    [0] = item.Id.ToString(),
                    [1] = item.Project.Name,
                    [2] = item.ItemType.Item_Type,
                    [4] = String.Format("{0:yyyy-MM-dd}", item.TimeStamp),
                    [5] = item.Latitude.ToString(),
                    [6] = item.Longitude.ToString(),
                    [7] = item.Amount.ToString(),
                    [8] = data.Where(x => x.ItemTypeId.Equals(item.ItemTypeId)).Sum(x => x.Amount).ToString()
                };

                if (item.DeInstall_Text != null)
                {
                    fillerrow[3] = item.DeInstall_Text.ToString().Replace(";", ":");
                }
                else
                {
                    fillerrow[3] = "";
                }

                if (item.InstallId != null)
                {
                    fillerrow[9] = item.InstallId.ToString();
                    fillerrow[10] = item.Install.Location;
                }
                sb.AppendLine(string.Join(";", fillerrow.ToArray()));

            }
            return File(System.Text.Encoding.ASCII.GetBytes(sb.ToString()), "text/csv", "data.csv");
        }
        [HttpPost]
        [Route("/TrackItems/Dailyreports/data.csv")]
        [Produces("text/csv")]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> ExportDailyReport(int ProjectId)
        {
            //StringBuilder sb = new StringBuilder();
            MemoryStream memoryStream = new MemoryStream();
            TextWriter outputFile = new StreamWriter(memoryStream, new UTF8Encoding(true));
            //StreamWriter outputFile = new StreamWriter("output.csv", false, new UTF8Encoding(true));
            var data = await _context.Daily_Report_2s.Include(x => x.Title).Include(x => x.Project).ThenInclude(x => x.Division).Include(x => x.SubProject).Where(x => x.ProjectId.Equals(ProjectId)).ToListAsync();
            List<string> headerrow = new List<string>(new string[] { "Id", "Project", "SubProject", "Key Words", "Date", "Start Time", "End Time", "Hours", "Total Hours", "Work Performed", "No. of. People", "Machinery", "Done by", "Title", "Standing Time", "Safety Time", "paid_unpaid" });
            //sb.AppendLine(string.Join(";", headerrow.ToArray()));
            outputFile.WriteLine(string.Join(";", headerrow.ToArray()));
            foreach (Daily_Report_2 item in data)
            {
                List<string> fillerrow = new List<string>(new string[] { "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "" })
                {
                    [0] = item.Id.ToString(),
                    [1] = item.Project.Name,
                    [4] = String.Format("{0:yyyy-MM-dd}", item.Report_Date),
                    [5] = item.StartHour.ToString(),
                    [6] = item.EndHour.ToString(),
                    [7] = item.Hours.ToString(),
                    [8] = (item.Hours.Hours * item.Amount).ToString(),
                    [9] = item.Work_Performed.Replace(";", ":").Replace("\r\n", " ").ToString(),
                    [10] = item.Amount.ToString(),
                    [12] = item.DoneBy,
                    [13] = item.Title.TheTitle,
                    [14] = item.StandingTime.ToString(),
                    [15] = item.SafetyHours.ToString()
                };
                if (item.SubProjectId != null)
                {
                    fillerrow[2] = item.SubProject.Name;
                }
                else
                {
                    fillerrow[2] = "";
                }
                if (item.short_Description != null)
                {
                    fillerrow[3] = item.short_Description;
                }
                else
                {
                    fillerrow[3] = "";
                }
                if (item.Machinery != null)
                {
                    fillerrow[11] = item.Machinery.ToString();
                }
                else
                {
                    fillerrow[11] = "";
                }
                if (item.tobepaid == 1)
                {
                    fillerrow[16] = "To be paid";
                }
                else if (item.tobepaid == 2)
                {
                    fillerrow[16] = "Not to be paid";
                }
                else
                {
                    fillerrow[16] = "Undecided";
                }
                outputFile.WriteLine(string.Join(";", fillerrow.ToArray()));
                //sb.AppendLine(string.Join(";", fillerrow.ToArray()));

            }
            outputFile.Flush();
            outputFile.Close();
            //return File(System.Text.Encoding.ASCII.GetBytes(sb.ToString()), "text/csv", "data.csv");
            return File(memoryStream.GetBuffer(), "text/csv", "file.csv");
        }

        [HttpPost]
        [Authorize(Roles = "AlarmTeam,Manager,DivisionAdmin,Admin")]
        public async Task<IActionResult> SystemCheck()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            SystemCheck sc = new SystemCheck { DoneBy = user.full_name(), TimeChecked = DateTime.Now, DivisionId = user.DivisionId, Comments = "" };
            _context.Add(sc);
            await _context.SaveChangesAsync();
            return RedirectToAction("MainMenu");
        }
        [HttpGet]
        [Authorize(Roles = "AlarmTeam,Manager,DivisionAdmin,Admin")]
        public async Task<IActionResult> SystemChecks()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            var checks = await _context.SystemChecks.Include(x => x.Division).Where(x => x.DivisionId.Equals(user.DivisionId)).OrderByDescending(x => x.TimeChecked).ToListAsync();
            return View("Reports/SystemChecks", checks);
        }
        [HttpGet]
        [Authorize(Roles = "AlarmTeam,Manager,DivisionAdmin,Admin")]
        public async Task<IActionResult> SystemCheckWithComment()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            SystemCheck sc = new SystemCheck { DoneBy = user.full_name(), TimeChecked = DateTime.Now, DivisionId = user.DivisionId, Comments = "" };
            return View(sc);
        }
        [HttpPost]
        [Authorize(Roles = "AlarmTeam,Manager,DivisionAdmin,Admin")]
        public async Task<IActionResult> SystemCheckWithComment(SystemCheck model)
        {
            if (ModelState.IsValid)
            {
                _context.Add(model);
                await _context.SaveChangesAsync();
                return RedirectToAction("MainMenu");
            }
            else
            {
                return View(model);
            }
        }
        [HttpPost]
        [Authorize(Roles = "ProjectMember,Admin,DivisionAdmin,Manager")]
        public async Task<IActionResult> HourRegistrationPrefilled(string week1)
        {

            var theuser = await _userManager.GetUserAsync(User);
            DateTime startdate = MainOps.ExtensionMethods.StringExtensions.FirstDateOfWeekISO8601(DateTime.Now.Year, Convert.ToInt32(week1));
            DateTime enddate = startdate.AddDays(14);
            var daily_reports = await _context.Daily_Report_2s.Where(x => x.Report_Date.Date >= startdate.Date && x.Report_Date.Date < enddate.Date && x.DoneBy.Equals(theuser.full_name()) && !x.short_Description.Equals("Truck Daily Report")).ToListAsync();
            var alarm_reports = await _context.AlarmCalls.Where(x => x.TimeStamp.Date >= startdate.Date && x.TimeStamp.Date < enddate.Date && x.DoneBy.Equals(theuser.full_name())).ToListAsync();
            List<int> projectsdr = daily_reports.Select(x => x.ProjectId).Distinct().ToList();
            List<int?> projectsalarm = alarm_reports.Select(x => x.ProjectId).Distinct().ToList();
            List<int> projects = new List<int>();
            foreach (int projectid in projectsdr)
            {
                projects.Add(projectid);
            }
            foreach (int? projectid in projectsalarm)
            {
                if (projects.IndexOf(Convert.ToInt32(projectid)) == -1)
                {
                    projects.Add(Convert.ToInt32(projectid));
                }
            }
            HourRegistrationVM HourRegistrationVM = new HourRegistrationVM(theuser);
            for (int i = 0; i < projects.Count; i++)
            {
                HourRegistrationVM.Rows.ElementAt(i).ProjectId = projects[i];
            }
            int daynr = 1;
            for (DateTime dt = startdate; dt < enddate; dt = dt.AddDays(1))
            {
                foreach (var row in HourRegistrationVM.Rows)
                {
                    var minutes = daily_reports.Where(x => x.Report_Date.Date.Equals(dt) && x.ProjectId.Equals(row.ProjectId)).Sum(x => (x.EndHour - x.StartHour).TotalMinutes);
                    var hours = minutes / 60.0;
                    if (hours > 0)
                    {
                        switch (daynr)
                        {
                            case 1: row.day1 = hours; break;
                            case 2: row.day2 = hours; break;
                            case 3: row.day3 = hours; break;
                            case 4: row.day4 = hours; break;
                            case 5: row.day5 = hours; break;
                            case 6: row.day6 = hours; break;
                            case 7: row.day7 = hours; break;
                            case 8: row.day8 = hours; break;
                            case 9: row.day9 = hours; break;
                            case 10: row.day10 = hours; break;
                            case 11: row.day11 = hours; break;
                            case 12: row.day12 = hours; break;
                            case 13: row.day13 = hours; break;
                            case 14: row.day14 = hours; break;
                            default:
                                break;

                        }
                    }

                }
                foreach (var row in HourRegistrationVM.Rows)
                {
                    var hours_alarm = alarm_reports.Where(x => x.TimeStamp.Date.Equals(dt) && x.ProjectId.Equals(row.ProjectId)).Sum(x => Math.Max(x.Hours.TotalMinutes / 60, 4.0));
                    //var hours_alarm = alarm_reports.Where(x => x.TimeStamp.Date.Equals(dt) && x.ProjectId.Equals(row.ProjectId)).Sum(x => Math.Max(x.Hours.Hours, 4));
                    if (hours_alarm > 0)
                    {
                        switch (daynr)
                        {
                            case 1: row.day1_Alarm = hours_alarm; break;
                            case 2: row.day2_Alarm = hours_alarm; break;
                            case 3: row.day3_Alarm = hours_alarm; break;
                            case 4: row.day4_Alarm = hours_alarm; break;
                            case 5: row.day5_Alarm = hours_alarm; break;
                            case 6: row.day6_Alarm = hours_alarm; break;
                            case 7: row.day7_Alarm = hours_alarm; break;
                            case 8: row.day8_Alarm = hours_alarm; break;
                            case 9: row.day9_Alarm = hours_alarm; break;
                            case 10: row.day10_Alarm = hours_alarm; break;
                            case 11: row.day11_Alarm = hours_alarm; break;
                            case 12: row.day12_Alarm = hours_alarm; break;
                            case 13: row.day13_Alarm = hours_alarm; break;
                            case 14: row.day14_Alarm = hours_alarm; break;
                            default:
                                break;

                        }
                    }

                }
                daynr += 1;
            }
            var previous = await _context.HourRegistrations.Include(x => x.Rows).Where(x => x.FullName.Equals(theuser.full_name())).LastOrDefaultAsync();
            if (previous != null)
            {
                HourRegistrationVM.HourRegistration.PaymentNr = previous.PaymentNr;
                HourRegistrationVM.HourRegistration.FullName = previous.FullName;
                HourRegistrationVM.HourRegistration.LicensePlate = previous.LicensePlate;
                HourRegistrationVM.HourRegistration.weektype = previous.weektype;
                HourRegistrationVM.HourRegistration.Supervisor_Name = previous.Supervisor_Name;
                if (previous.Week1 < 51)
                {
                    HourRegistrationVM.HourRegistration.Week1 = Convert.ToInt32(week1);
                    HourRegistrationVM.HourRegistration.Week2 = HourRegistrationVM.HourRegistration.Week1 + 1;
                }
                for (int i = 0; i < previous.Rows.Count() - 1; i++)
                {
                    if (previous.Rows.ElementAt(i).AddOns > 0)
                    {
                        //HourRegistrationVM.Rows.ElementAt(i).AddOns = previous.Rows.ElementAt(i).AddOns;
                        var row = HourRegistrationVM.Rows.Where(x => x.ProjectId.Equals(previous.Rows.ElementAt(i).ProjectId)).SingleOrDefault();
                        if (row != null)
                        {
                            row.AddOns = 0;
                            row.AddOns_Amount = previous.Rows.ElementAt(i).AddOns_Amount;
                        }
                    }
                }
            }
            else
            {
                HourRegistrationVM.HourRegistration.weektype = "2";
            }

            if (theuser.full_name().Contains("Maris") || theuser.full_name().Contains("Janis") || theuser.full_name().Contains("Arnis") || theuser.full_name().Contains("Sentis") || User.IsInRole("Admin") || User.IsInRole("Supervisor"))
            {
                ViewData["HourSchedules"] = new SelectList(_context.HourSchedules, "Id", "Name");
            }
            else
            {
                ViewData["HourSchedules"] = new SelectList(_context.HourSchedules.Where(x => !x.Name.Contains("Maris") && !x.Name.Contains("Janis")), "Id", "Name");
            }
            var users = await (from user in _context.Users
                               join userRole in _context.UserRoles
                               on user.Id equals userRole.UserId
                               join role in _context.Roles on userRole.RoleId
                               equals role.Id
                               where userRole.UserId == user.Id && role.Name.Equals("Supervisor") && user.DivisionId.Equals(theuser.DivisionId)
                               select new
                               {
                                   user.Id,
                                   FullName = user.full_name()
                               }).ToListAsync();
            ViewData["SupervisorId"] = new SelectList(users, "FullName", "FullName");
            ViewData["ProjectId"] = await GetProjectList();
            return View("HourRegistration", HourRegistrationVM);
        }
        [HttpGet]
        [Authorize(Roles = "Admin,DivisionAdmin,Manager,ProjectMember")]
        public async Task<IActionResult> SearchGrouting(DateTime starttime, DateTime endtime)
        {
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            DateTime Start = starttime.Date;
            DateTime End = endtime.Date;
            var grouts = await _context.Groutings.Include(x => x.Project).Include(x => x.SubProject).Include(x => x.Data).Where(x => x.Project.DivisionId.Equals(user.DivisionId) && x.StartTime >= Start && x.EndTime <= End).OrderBy(x => x.StartTime).ThenBy(x => x.EndTime).ToListAsync();
            ViewData["startdate"] = starttime;
            ViewData["enddate"] = endtime;
            return View("Reports/Groutings", grouts);
        }
        public async Task<decimal> InvoicedUntilDate(DateTime d, GenerateInvoiceVM model)
        {
            List<Invoice> invoices = new List<Invoice>();
            if (model.SubProjectId == null)
            {
                invoices = await _context.Invoices.Where(x => x.ProjectId.Equals(model.ProjectId) && x.TimeStampEnd.Date <= d.Date).ToListAsync();
            }
            else
            {
                invoices = await _context.Invoices.Where(x => x.SubProjectId.Equals(model.SubProjectId) && x.TimeStampEnd.Date <= d.Date).ToListAsync();
            }
            return invoices.Sum(x => x.Amount);
        }
        public bool AreAllInvoicesBeforeSent(DateTime d, GenerateInvoiceVM model, InvoiceModel curModel)
        {
            List<Invoice> invoices = new List<Invoice>();

            if (model.SubProjectId == null)
            {

                invoices = curModel.AllInvoices.Where(x => x.ProjectId.Equals(model.ProjectId) && x.TimeStampEnd.Date <= d.Date).OrderBy(x => x.TimeStampEnd).ToList(); //await _context.Invoices.Where(x => x.ProjectId.Equals(model.ProjectId) && x.TimeStampEnd.Date <= d.Date).OrderBy(x=>x.TimeStampEnd).ToListAsync();
                if (model.Tax.Equals(true))
                {
                    invoices = invoices.Where(x => x.Taxes.Equals(true)).ToList();
                }
                else
                {
                    invoices = invoices.Where(x => x.Taxes.Equals(false)).ToList();
                }
            }
            else
            {
                invoices = curModel.AllInvoices.Where(x => x.SubProjectId.Equals(model.SubProjectId) && x.TimeStampEnd.Date <= d.Date).OrderBy(x => x.TimeStampEnd).ToList(); //await _context.Invoices.Where(x => x.SubProjectId.Equals(model.SubProjectId) && x.TimeStampEnd.Date <= d.Date).OrderBy(x => x.TimeStampEnd).ToListAsync();
                if (model.Tax.Equals(true))
                {
                    invoices = invoices.Where(x => x.Taxes.Equals(true)).ToList();
                }
                else
                {
                    invoices = invoices.Where(x => x.Taxes.Equals(false)).ToList();
                }
            }
            if (invoices.Count == 0)
            {
                return false;
            }
            var startdate = invoices.First().TimeStampStart.Date;
            //var enddate = invoices.Last().TimeStampEnd.Date;

            for (DateTime date = startdate; date <= d.Date; date = date.AddDays(1))
            {
                bool datewasinrange = false;
                foreach (var span in invoices)
                {
                    if (date <= span.TimeStampEnd && date >= span.TimeStampStart)
                    {
                        datewasinrange = true;
                        break;
                    }
                }
                if (datewasinrange == false)
                {
                    return false;
                }
            }
            return true;
        }
        public Int32 GetInstalledDaysArrival(List<Install> installations, Arrival arr, DateTime start, DateTime end)
        {

            ArrivalReturn return_arrival = new ArrivalReturn();
            List<Install> relevant_installs = new List<Install>();
            if (arr.ItemType.Rental_UnitId == 14)
            {
                relevant_installs = installations
                    .Where(x =>
                    arr.UniqueID.Replace("#", " ").Contains(x.UniqueID.Replace("#", ""))
                    && !x.ItemTypeId.Equals(arr.ItemTypeId)
                    && x.RentalStartDate >= arr.TimeStamp
                    && (x.ItemType.rental_price <= (decimal)0.01)).OrderBy(x => x.RentalStartDate).ToList();
            }
            else
            {
                if (arr.EndStamp != null)
                {
                    relevant_installs = installations.Where(x => x.UniqueID.Contains(arr.UniqueID) && x.ItemTypeId.Equals(arr.ItemTypeId) && x.RentalStartDate <= Convert.ToDateTime(arr.EndStamp)).OrderBy(x => x.RentalStartDate).ToList();
                }
                else
                {
                    relevant_installs = installations.Where(x => x.UniqueID.Contains(arr.UniqueID) && x.ItemTypeId.Equals(arr.ItemTypeId) && x.RentalStartDate >= arr.TimeStamp).OrderBy(x => x.RentalStartDate).ToList();
                }

            }

            List<DateTime> uniqueDays = new List<DateTime>();
            DateTime correctStartDate;
            DateTime correctEndDate;
            if (arr.TimeStamp >= start)
            {
                correctStartDate = arr.TimeStamp.Date;
            }
            else
            {
                correctStartDate = start.Date;
            }
            if (arr.EndStamp == null)
            {
                correctEndDate = end.Date;
            }
            else
            {
                if (Convert.ToDateTime(arr.EndStamp).Date <= end.Date)
                {
                    correctEndDate = Convert.ToDateTime(arr.EndStamp).Date;
                }
                else
                {
                    correctEndDate = end.Date;
                }
            }
            var inst = relevant_installs.FirstOrDefault(x => x.RentalStartDate <= correctEndDate && (x.DeinstallDate == null));
            if (inst != null)
            {
                for (DateTime dt = correctStartDate; dt <= correctEndDate; dt = dt.AddDays(1))
                {
                    if (!uniqueDays.Contains(dt))
                    {
                        uniqueDays.Add(dt);
                    }
                }
            }
            else
            {
                for (DateTime dt = correctStartDate; dt <= correctEndDate; dt = dt.AddDays(1))
                {
                    var inst_individual = relevant_installs.FirstOrDefault(x => x.RentalStartDate <= dt && x.DeinstallDate == null);
                    if (inst_individual != null)
                    {
                        if (!uniqueDays.Contains(dt))
                        {
                            uniqueDays.Add(dt);
                        }
                    }
                    var inst_individuals = relevant_installs.Where(x => x.TimeStamp <= dt && x.DeinstallDate != null);
                    var inst_individual2 = inst_individuals.FirstOrDefault(x => x.DeinstallDate >= dt);
                    if (inst_individual2 != null)
                    {
                        //arr.EndStamp = inst_individual2.DeinstallDate;
                        if (!uniqueDays.Contains(dt))
                        {
                            uniqueDays.Add(dt);
                        }
                    }
                }
            }
            return_arrival.arr = arr;
            return_arrival.days = uniqueDays.Count;
            //return return_arrival;
            return uniqueDays.Count;
        }
        public class ArrivalReturn
        {
            public int days { get; set; }
            public Arrival arr { get; set; }
            public ArrivalReturn()
            {

            }
        }
        public double GetInstalledDaysInstall(List<Install> installations, Install inst, DateTime start, DateTime end)
        {
            if (inst.DeinstallDate == null)
            {
                if (inst.TimeStamp < start)
                {
                    return (end - start).TotalDays;
                }
                else
                {
                    return (end - inst.TimeStamp).TotalDays;
                }
            }
            else
            {
                if (inst.DeinstallDate.Value < end)
                {
                    if (inst.TimeStamp < start)
                    {
                        return (Convert.ToDateTime(inst.DeinstallDate) - start).TotalDays;
                    }
                    else
                    {
                        return (Convert.ToDateTime(inst.DeinstallDate) - inst.TimeStamp).TotalDays;
                    }
                }
                else
                {
                    if (inst.TimeStamp < start)
                    {
                        return (end - start).TotalDays;
                    }
                    else
                    {
                        return (end - inst.TimeStamp).TotalDays;
                    }
                }
            }
        }
        public double GetOperationalDaysInstall(List<ItemActivity> activities, Install inst, DateTime start, DateTime end)
        {
            if (activities.Count < 1)
            {
                return 0.0;
            }
            DateTime realstart;
            DateTime realend;
            int totaldaysofactivity = 0;
            if (inst.isInstalled == true)
            {
                realend = end.Date;
            }
            else
            {
                if (Convert.ToDateTime(inst.DeinstallDate).Date < end.Date)
                {
                    realend = Convert.ToDateTime(inst.DeinstallDate).Date;
                }
                else
                {
                    realend = end.Date;
                }
            }
            if (inst.RentalStartDate < start)
            {
                realstart = start;
            }
            else
            {
                realstart = inst.RentalStartDate;
            }
            List<ItemActivity> realactivities = activities.Where(x => x.TheDate >= realstart && x.TheDate <= realend).OrderBy(x => x.TheDate).ToList();
            if (realactivities.Count < 1)
            {
                return 0.0;
            }
            for (DateTime dt = realstart.Date; dt <= realend.Date; dt = dt.AddDays(1))
            {
                var dayofactiveness = realactivities.FirstOrDefault(
                x => x.TheDate.Equals(dt)
                && x.WasActive.Equals(true)
                && (x.UniqueID.ToLower().Equals(inst.UniqueID.ToLower())
                || x.ItemName.ToLower().Equals(inst.UniqueID.ToLower())
                || x.ItemName.Replace("#", "").ToLower().Equals(inst.UniqueID.ToLower())
                || x.UniqueID.ToLower().Equals(inst.UniqueID.ToLower().Replace("#", "")))
                );
                if (dayofactiveness != null)
                {
                    totaldaysofactivity += 1;
                }
            }
            return (double)totaldaysofactivity;
        }
        public List<DateTime> GetListOperationalDaysArrival(List<ItemActivity> activities, Arrival arr, DateTime start, DateTime end)
        {
            if (activities.Count() < 1)
            {
                return new List<DateTime>();
            }
            DateTime realstart;
            DateTime realend;
            List<DateTime> totaldaysofactivity = new List<DateTime>();
            if (arr.EndStamp == null)
            {
                realend = end.Date;
            }
            else
            {
                if (Convert.ToDateTime(arr.EndStamp).Date < end.Date)
                {
                    realend = Convert.ToDateTime(arr.EndStamp).Date;
                }
                else
                {
                    realend = end.Date;
                }
            }
            if (arr.TimeStamp < start)
            {
                realstart = start;
            }
            else
            {
                realstart = arr.TimeStamp;
            }
            List<ItemActivity> realactivities = activities.Where(x => x.TheDate >= realstart && x.TheDate <= realend).OrderBy(x => x.TheDate).ToList();
            if (realactivities.Count < 1)
            {
                return totaldaysofactivity;
            }
            for (DateTime dt = realstart.Date; dt <= realend.Date; dt = dt.AddDays(1))
            {
                var dayofactiveness = realactivities.FirstOrDefault(
                x => x.TheDate.Equals(dt)
                && x.WasActive.Equals(true)
                && (arr.Arrival_Text.ToLower().Contains(x.UniqueID.ToLower())
                || arr.Arrival_Text.ToLower().Contains(x.ItemName.ToLower())
                || arr.Arrival_Text.ToLower().Contains(x.ItemName.Replace("#", "").ToLower())
                || arr.Arrival_Text.ToLower().Contains(x.UniqueID.ToLower().Replace("#", ""))
                || arr.UniqueID.ToLower().Contains(x.UniqueID.ToLower())
                || arr.UniqueID.ToLower().Contains(x.ItemName.ToLower())
                || arr.UniqueID.ToLower().Contains(x.ItemName.Replace("#", "").ToLower())
                || arr.UniqueID.ToLower().Contains(x.UniqueID.ToLower().Replace("#", "")))
                );
                if (dayofactiveness != null)
                {
                    totaldaysofactivity.Add(dt);
                }
            }
            return totaldaysofactivity;
        }
        public List<DateTime> GetListNOTOperationalDaysArrival(List<ItemActivity> activities, Arrival arr, DateTime start, DateTime end)
        {
            DateTime realstart;
            DateTime realend;
            List<DateTime> totaldaysofactivity = new List<DateTime>();
            if (arr.EndStamp == null)
            {
                realend = end.Date;
            }
            else
            {
                if (Convert.ToDateTime(arr.EndStamp).Date < end.Date)
                {
                    realend = Convert.ToDateTime(arr.EndStamp).Date;
                }
                else
                {
                    realend = end.Date;
                }
            }
            if (arr.TimeStamp < start)
            {
                realstart = start;
            }
            else
            {
                realstart = arr.TimeStamp;
            }
            List<ItemActivity> realactivities = activities.Where(x => x.TheDate >= realstart && x.TheDate <= realend).OrderBy(x => x.TheDate).ToList();
            for (DateTime dt = realstart.Date; dt <= realend.Date; dt = dt.AddDays(1))
            {
                var dayofactiveness = realactivities.FirstOrDefault(
                x => x.TheDate.Equals(dt)
                && x.WasActive.Equals(true)
                && (
                //arr.Arrival_Text.ToLower().Contains(x.UniqueID.ToLower())
                //|| arr.Arrival_Text.ToLower().Contains(x.ItemName.ToLower())
                //|| arr.Arrival_Text.ToLower().Contains(x.ItemName.Replace("#", "").ToLower())
                //|| arr.Arrival_Text.ToLower().Contains(x.UniqueID.ToLower().Replace("#", ""))
                arr.UniqueID.ToLower().Contains(x.UniqueID.ToLower())
                || arr.UniqueID.ToLower().Contains(x.ItemName.ToLower())
                || arr.UniqueID.ToLower().Contains(x.ItemName.Replace("#", "").ToLower())
                || arr.UniqueID.ToLower().Contains(x.UniqueID.ToLower().Replace("#", "")))
                );
                if (dayofactiveness == null)
                {
                    totaldaysofactivity.Add(dt);
                }
            }
            return totaldaysofactivity;
        }
        public double GetOperationalDaysArrival(List<ItemActivity> activities, Arrival arr, DateTime start, DateTime end)
        {
            if (activities.Count() < 1)
            {
                return 0.0;
            }
            DateTime realstart;
            DateTime realend;
            int totaldaysofactivity = 0;
            if (arr.EndStamp == null)
            {
                realend = end.Date;
            }
            else
            {
                if (Convert.ToDateTime(arr.EndStamp).Date < end.Date)
                {
                    realend = Convert.ToDateTime(arr.EndStamp).Date;
                }
                else
                {
                    realend = end.Date;
                }
            }
            if (arr.TimeStamp < start)
            {
                realstart = start;
            }
            else
            {
                realstart = arr.TimeStamp;
            }
            List<ItemActivity> realactivities = activities.Where(x => x.TheDate >= realstart && x.TheDate <= realend).OrderBy(x => x.TheDate).ToList();
            if (realactivities.Count < 1)
            {
                return 0.0;
            }
            for (DateTime dt = realstart.Date; dt <= realend.Date; dt = dt.AddDays(1))
            {
                var dayofactiveness = realactivities.FirstOrDefault(
                x => x.TheDate.Equals(dt)
                && x.WasActive.Equals(true)
                && (
                 arr.UniqueID.ToLower().Contains(x.UniqueID.ToLower())
                || arr.UniqueID.ToLower().Contains(x.ItemName.ToLower())
                || arr.UniqueID.ToLower().Contains(x.ItemName.Replace("#", "").ToLower())
                || arr.UniqueID.ToLower().Contains(x.UniqueID.ToLower().Replace("#", "")))
                );
                //arr.Arrival_Text.ToLower().Contains(x.UniqueID.ToLower())
                //|| arr.Arrival_Text.ToLower().Contains(x.ItemName.ToLower())
                //|| arr.Arrival_Text.ToLower().Contains(x.ItemName.Replace("#", "").ToLower())
                //|| arr.Arrival_Text.ToLower().Contains(x.UniqueID.ToLower().Replace("#", ""))
                if (dayofactiveness != null)
                {
                    totaldaysofactivity += 1;
                }
            }
            return (double)totaldaysofactivity;
        }
        
        public async Task<IActionResult> CompareSnapShotToSnapShot(int modelid, int snapshotid, int orderbyoption)
        {
            int indexfind = -1;
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            InvoiceSnapShot model = await _context.SnapShots
                .Include(x => x.Project).ThenInclude(x => x.BoQHeadlines)
                .Include(x => x.Items).ThenInclude(x => x.Install)
                .Include(x => x.Items).ThenInclude(x => x.Arrival)
                .Include(x => x.Items).ThenInclude(x => x.Mobilize)
                .Include(x => x.Items).ThenInclude(x => x.ItemType)
                .Include(x => x.Items).ThenInclude(x => x.ExtraWork)
                .SingleOrDefaultAsync(x => x.Id.Equals(modelid));
            InvoiceSnapShot snapshot = await _context.SnapShots
                .Include(x => x.Project).ThenInclude(x => x.BoQHeadlines)
                .Include(x => x.Items).ThenInclude(x => x.Install)
                .Include(x => x.Items).ThenInclude(x => x.Arrival)
                .Include(x => x.Items).ThenInclude(x => x.Mobilize)
                .Include(x => x.Items).ThenInclude(x => x.ItemType)
                .Include(x => x.Items).ThenInclude(x => x.ExtraWork)
                .SingleOrDefaultAsync(x => x.Id.Equals(snapshotid));
            if (orderbyoption == 1)
            {
                model.Items = model.Items.OrderBy(x => x.Install_date).ThenBy(x => x.Item_Name).ToList();
                snapshot.Items = snapshot.Items.OrderBy(x => x.Install_date).ThenBy(x => x.Item_Name).ToList();
            }
            else if (orderbyoption == 2)
            {
                //figure it out
            }
            else if (orderbyoption == 3)
            {
                model.Items = model.Items.OrderBy(x => x.location).ToList();
                snapshot.Items = snapshot.Items.OrderBy(x => x.location).ToList();
            }
            if ((snapshot.Project.DivisionId.Equals(user.DivisionId) && model.Project.DivisionId.Equals(user.DivisionId)) || User.IsInRole("Admin"))
            {
                CompareTwoSnapShots CompareModel = new CompareTwoSnapShots();
                foreach (var item in snapshot.Items.Where(x => x.FullPeriod == false))
                {
                    if (item.InstallationId != null)
                    {

                        var olditem = model.Items.FirstOrDefault(x => x.FullPeriod == false && x.InstallationId.Equals(item.InstallationId) && x.isIdleItem.Equals(item.isIdleItem));
                        
                        if (olditem != null)
                        {
                            if (olditem.Amount != item.Amount)
                            {
                                item.ChangeLog += "Amount Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.Install_date != item.Install_date)
                            {
                                item.ChangeLog += "Start Date Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if(olditem.EndStamp == null || item.EndStamp == null)
                            {
                                if(olditem.EndStamp == null && item.EndStamp == null)
                                {

                                }
                                else if(olditem.EndStamp == null && item.EndStamp != null)
                                {
                                    item.ChangeLog += "End Date Added.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                                else if(olditem.EndStamp != null && item.EndStamp == null)
                                {
                                    item.ChangeLog += "End Date Removed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                            }
                            else if (Convert.ToDateTime(olditem.EndStamp).Date != Convert.ToDateTime(item.EndStamp).Date)
                            {
                                item.ChangeLog += "End Date Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.ItemTypeId != item.ItemTypeId)
                            {
                                item.ChangeLog += "ItemType Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.location != item.location && olditem.location != null && olditem.location != null)
                            {
                                if (olditem.location == null && item.location == null)
                                {

                                }
                                else
                                {
                                    item.ChangeLog += "Location Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }

                            }
                            if (olditem.price != item.price)
                            {
                                item.ChangeLog += "Price Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;

                            }
                            if (olditem.rental_price != item.rental_price)
                            {
                                if ((olditem.rental_price / (decimal)olditem.Days) != (item.rental_price / (decimal)item.Days))
                                {
                                    item.ChangeLog += "Rental Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                            }
                        }
                        else
                        {
                            item.IsNew = true;
                        }
                    }
                    if (item.ArrivalId != null)
                    {
                        var olditems = model.Items.Where(x => x.FullPeriod == false && x.ArrivalId.Equals(item.ArrivalId) && x.isIdleItem.Equals(item.isIdleItem)).ToList();
                        InvoiceItemDB olditem = new InvoiceItemDB();
                        if(olditems.Count > 1)
                        {
                            indexfind = olditems.FindIndex(x => x.location.Equals(item.location));
                            if (indexfind == -1)
                            {
                                olditem = null;
                            }
                            else
                            {
                                olditem = olditems.ElementAt(indexfind);
                            }
                        }
                        else 
                        {
                            olditem = olditems.FirstOrDefault();
                        }

                        if (olditem != null)
                        {
                            if (olditem.Amount != item.Amount)
                            {
                                item.ChangeLog += "Amount Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.Install_date != item.Install_date)
                            {
                                item.ChangeLog += "Start Date Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.EndStamp == null || item.EndStamp == null)
                            {
                                if (olditem.EndStamp == null && item.EndStamp == null)
                                {

                                }
                                else if (olditem.EndStamp == null && item.EndStamp != null)
                                {
                                    item.ChangeLog += "End Date Added.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                                else if (olditem.EndStamp != null && item.EndStamp == null)
                                {
                                    item.ChangeLog += "End Date Removed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                            }
                            else if (Convert.ToDateTime(olditem.EndStamp).Date != Convert.ToDateTime(item.EndStamp).Date)
                            {
                                item.ChangeLog += "End Date Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.ItemTypeId != item.ItemTypeId)
                            {
                                item.ChangeLog += "Itemtype Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.location != item.location && olditem.location != null && olditem.location != null)
                            {
                                if (olditem.location == null && item.location == null)
                                {

                                }
                                else
                                {
                                    item.ChangeLog += "Location Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }

                            }
                            if (olditem.price != item.price)
                            {
                                item.ChangeLog += "Price Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;

                            }
                            if (olditem.rental_price != item.rental_price)
                            {
                                if ((olditem.rental_price / (decimal)olditem.Days) != (item.rental_price / (decimal)item.Days))
                                {
                                    item.ChangeLog += "Rental Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                            }
                        }
                        else
                        {
                            item.IsNew = true;
                        }
                    }
                    if (item.ExtraWorkId != null)
                    {
                        var olditem = model.Items.SingleOrDefault(x => x.FullPeriod == false && x.ExtraWorkId.Equals(item.ExtraWorkId));
                        if (olditem != null)
                        {
                            if (olditem.Amount != item.Amount)
                            {
                                item.ChangeLog += "Amount Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.Install_date != item.Install_date)
                            {
                                item.ChangeLog += "Start Date Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.EndStamp == null || item.EndStamp == null)
                            {
                                if (olditem.EndStamp == null && item.EndStamp == null)
                                {

                                }
                                else if (olditem.EndStamp == null && item.EndStamp != null)
                                {
                                    item.ChangeLog += "End Date Added.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                                else if (olditem.EndStamp != null && item.EndStamp == null)
                                {
                                    item.ChangeLog += "End Date Removed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                            }
                            else if (Convert.ToDateTime(olditem.EndStamp).Date != Convert.ToDateTime(item.EndStamp).Date)
                            {
                                item.ChangeLog += "End Date Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.ItemTypeId != item.ItemTypeId)
                            {
                                item.ChangeLog += "Itemtype Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.location != item.location && olditem.location != null && olditem.location != null)
                            {
                                if (olditem.location == null && item.location == null)
                                {

                                }
                                else
                                {
                                    item.ChangeLog += "Location Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }

                            }
                            if (olditem.price != item.price)
                            {
                                item.ChangeLog += "Price Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;

                            }
                            if (olditem.rental_price != item.rental_price)
                            {
                                if ((olditem.rental_price / (decimal)olditem.Days) != (item.rental_price / (decimal)item.Days))
                                {
                                    item.ChangeLog += "Rental Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                            }
                        }
                        else
                        {
                            item.IsNew = true;
                        }
                    }
                    if (item.Daily_Report_2Id != null)
                    {
                        var olditem = model.Items.SingleOrDefault(x => x.FullPeriod == false && x.Daily_Report_2Id.Equals(item.Daily_Report_2Id));
                        if (olditem != null)
                        {
                            if (olditem.Amount != item.Amount)
                            {
                                item.ChangeLog += "Amount Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.Install_date != item.Install_date)
                            {
                                item.ChangeLog += "Start Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.EndStamp != item.EndStamp && olditem.EndStamp != null && olditem.EndStamp != null)
                            {
                                if (olditem.EndStamp == null && item.EndStamp == null)
                                {

                                }
                                else
                                {
                                    item.ChangeLog += "End Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                            }
                            if (olditem.ItemTypeId != item.ItemTypeId)
                            {
                                item.ChangeLog += "Title Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.location != item.location && olditem.location != null && olditem.location != null)
                            {
                                if (olditem.location == null && item.location == null)
                                {

                                }
                                else
                                {
                                    item.ChangeLog += "Location Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }

                            }
                            if (olditem.price != item.price)
                            {
                                item.ChangeLog += "Price Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;

                            }
                            if (olditem.rental_price != item.rental_price)
                            {
                                if ((olditem.rental_price / (decimal)olditem.Days) != (item.rental_price / (decimal)item.Days))
                                {
                                    item.ChangeLog += "Rental Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                            }
                        }
                        else
                        {
                            item.IsNew = true;
                        }
                    }
                }
                foreach (var item in snapshot.Items.Where(x => x.FullPeriod == true))
                {
                    if (item.InstallationId != null)
                    {
                        var olditem = model.Items.SingleOrDefault(x => x.FullPeriod == true && x.InstallationId.Equals(item.InstallationId) && x.isIdleItem.Equals(item.isIdleItem));
                        if (olditem != null)
                        {
                            if (olditem.Amount != item.Amount)
                            {
                                item.ChangeLog += "Amount Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.Install_date != item.Install_date)
                            {
                                item.ChangeLog += "Start Date Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.EndStamp == null || item.EndStamp == null)
                            {
                                if (olditem.EndStamp == null && item.EndStamp == null)
                                {

                                }
                                else if (olditem.EndStamp == null && item.EndStamp != null)
                                {
                                    item.ChangeLog += "End Date Added.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                                else if (olditem.EndStamp != null && item.EndStamp == null)
                                {
                                    item.ChangeLog += "End Date Removed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                            }
                            else if (Convert.ToDateTime(olditem.EndStamp).Date != Convert.ToDateTime(item.EndStamp).Date)
                            {
                                item.ChangeLog += "End Date Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.ItemTypeId != item.ItemTypeId)
                            {
                                item.ChangeLog += "ItemType Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.location != item.location && olditem.location != null && olditem.location != null)
                            {
                                if (olditem.location == null && item.location == null)
                                {

                                }
                                else
                                {
                                    item.ChangeLog += "Location Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }

                            }
                            if (olditem.price != item.price)
                            {
                                item.ChangeLog += "Price Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;

                            }
                            if (olditem.rental_price != item.rental_price)
                            {
                                if ((olditem.rental_price / (decimal)olditem.Days) != (item.rental_price / (decimal)item.Days))
                                {
                                    item.ChangeLog += "Rental Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                            }
                        }
                        else
                        {
                            item.IsNew = true;
                        }
                    }
                    if (item.ArrivalId != null)
                    {
                        var olditems = model.Items.Where(x => x.FullPeriod == false && x.ArrivalId.Equals(item.ArrivalId) && x.isIdleItem.Equals(item.isIdleItem)).ToList();
                        InvoiceItemDB olditem = new InvoiceItemDB();
                        if (olditems.Count > 1)
                        {
                            indexfind = olditems.FindIndex(x => x.location.Equals(item.location));
                            if (indexfind == -1)
                            {
                                olditem = null;
                            }
                            else
                            {
                                olditem = olditems.ElementAt(indexfind);
                            }
                        }
                        else
                        {
                            olditem = olditems.FirstOrDefault();
                        }
                        if (olditem != null)
                        {
                            if (olditem.Amount != item.Amount)
                            {
                                item.ChangeLog += "Amount Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.Install_date != item.Install_date)
                            {
                                item.ChangeLog += "Start Date Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.EndStamp == null || item.EndStamp == null)
                            {
                                if (olditem.EndStamp == null && item.EndStamp == null)
                                {

                                }
                                else if (olditem.EndStamp == null && item.EndStamp != null)
                                {
                                    item.ChangeLog += "End Date Added.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                                else if (olditem.EndStamp != null && item.EndStamp == null)
                                {
                                    item.ChangeLog += "End Date Removed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                            }
                            else if (Convert.ToDateTime(olditem.EndStamp).Date != Convert.ToDateTime(item.EndStamp).Date)
                            {
                                item.ChangeLog += "End Date Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.ItemTypeId != item.ItemTypeId)
                            {
                                item.ChangeLog += "ItemType Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.location != item.location && olditem.location != null && olditem.location != null)
                            {
                                if (olditem.location == null && item.location == null)
                                {

                                }
                                else
                                {
                                    item.ChangeLog += "Location Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }

                            }
                            if (olditem.price != item.price)
                            {
                                item.ChangeLog += "Price Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;

                            }
                            if (olditem.rental_price != item.rental_price)
                            {
                                if ((olditem.rental_price / (decimal)olditem.Days) != (item.rental_price / (decimal)item.Days))
                                {
                                    item.ChangeLog += "Rental Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                            }
                        }
                        else
                        {
                            item.IsNew = true;
                        }
                    }
                    if (item.ExtraWorkId != null)
                    {
                        var olditem = model.Items.SingleOrDefault(x => x.FullPeriod == true && x.ExtraWorkId.Equals(item.ExtraWorkId));
                        if (olditem != null)
                        {
                            if (olditem.Amount != item.Amount)
                            {
                                item.ChangeLog += "Amount Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.Item_Name != item.Item_Name)
                            {
                                item.ChangeLog += "Text Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.Install_date != item.Install_date)
                            {
                                item.ChangeLog += "Start Date Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.EndStamp == null || item.EndStamp == null)
                            {
                                if (olditem.EndStamp == null && item.EndStamp == null)
                                {

                                }
                                else if (olditem.EndStamp == null && item.EndStamp != null)
                                {
                                    item.ChangeLog += "End Date Added.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                                else if (olditem.EndStamp != null && item.EndStamp == null)
                                {
                                    item.ChangeLog += "End Date Removed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                            }
                            else if (Convert.ToDateTime(olditem.EndStamp).Date != Convert.ToDateTime(item.EndStamp).Date)
                            {
                                item.ChangeLog += "End Date Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.ItemTypeId != item.ItemTypeId)
                            {
                                item.ChangeLog += "ItemType Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.location != item.location && olditem.location != null && olditem.location != null)
                            {
                                if (olditem.location == null && item.location == null)
                                {

                                }
                                else
                                {
                                    item.ChangeLog += "Location Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }

                            }
                            if (olditem.price != item.price)
                            {
                                item.ChangeLog += "Price Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;

                            }
                            if (olditem.rental_price != item.rental_price)
                            {
                                if ((olditem.rental_price / (decimal)olditem.Days) != (item.rental_price / (decimal)item.Days))
                                {
                                    item.ChangeLog += "Rental Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                            }
                        }
                        else
                        {
                            item.IsNew = true;
                        }
                    }
                    if (item.Daily_Report_2Id != null)
                    {
                        var olditem = model.Items.SingleOrDefault(x => x.FullPeriod == true && x.Daily_Report_2Id.Equals(item.Daily_Report_2Id));
                        if (olditem != null)
                        {
                            if (olditem.Amount != item.Amount)
                            {
                                item.ChangeLog += "Amount Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.Install_date != item.Install_date)
                            {
                                item.ChangeLog += "Start Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.EndStamp != item.EndStamp && olditem.EndStamp != null && olditem.EndStamp != null)
                            {
                                if (olditem.EndStamp == null && item.EndStamp == null)
                                {

                                }
                                else
                                {
                                    item.ChangeLog += "End Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                            }
                            if (olditem.ItemTypeId != item.ItemTypeId)
                            {
                                item.ChangeLog += "Title Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.location != item.location && olditem.location != null && olditem.location != null)
                            {
                                if (olditem.location == null && item.location == null)
                                {

                                }
                                else
                                {
                                    item.ChangeLog += "Location Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }

                            }
                            if (olditem.price != item.price)
                            {
                                item.ChangeLog += "Price Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;

                            }
                            if (olditem.rental_price != item.rental_price)
                            {
                                if ((olditem.rental_price / (decimal)olditem.Days) != (item.rental_price / (decimal)item.Days))
                                {
                                    item.ChangeLog += "Rental Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                            }
                        }
                        else
                        {
                            item.IsNew = true;
                        }
                    }
                }
                foreach(var item in model.Items)
                {
                    if(item.FullPeriod == false) {
                        if(item.InstallationId != null)
                        {
                            if(snapshot.Items.SingleOrDefault(x => x.FullPeriod == false && x.InstallationId.Equals(item.InstallationId) && x.isIdleItem.Equals(item.isIdleItem)) == null)
                            {
                                item.WasRemoved = true;
                            }
                        }
                        else if(item.ArrivalId != null)
                        {
                            var newitems = snapshot.Items.Where(x => x.FullPeriod == false && x.ArrivalId.Equals(item.ArrivalId) && x.isIdleItem.Equals(item.isIdleItem)).ToList();
                            InvoiceItemDB olditem = new InvoiceItemDB();
                            if(newitems.Count == 0)
                            {
                                item.WasRemoved = true;
                            }
                            else if(newitems.Count > 1)
                            {
                                indexfind = newitems.FindIndex(x => x.location.Equals(item.location));
                                if (indexfind == -1)
                                {
                                    item.WasRemoved = true;
                                }
                            }
                        }
                        else if(item.Daily_Report_2Id != null)
                        {
                            if (snapshot.Items.SingleOrDefault(x => x.FullPeriod == false && x.Daily_Report_2Id.Equals(item.Daily_Report_2Id)) == null)
                            {
                                item.WasRemoved = true;
                            }

                        }
                        else if(item.ExtraWorkId != null)
                        {
                            if (snapshot.Items.SingleOrDefault(x => x.FullPeriod == false && x.ExtraWorkId.Equals(item.ExtraWorkId)) == null)
                            {
                                item.WasRemoved = true;
                            }
                        }
                    }
                    else
                    {
                        if (item.InstallationId != null)
                        {
                            if (snapshot.Items.SingleOrDefault(x => x.FullPeriod == true && x.InstallationId.Equals(item.InstallationId) && x.isIdleItem.Equals(item.isIdleItem)) == null)
                            {
                                item.WasRemoved = true;
                            }
                        }
                        else if (item.ArrivalId != null)
                        {
                            var newitems = snapshot.Items.Where(x => x.FullPeriod == true && x.ArrivalId.Equals(item.ArrivalId) && x.isIdleItem.Equals(item.isIdleItem)).ToList();
                            InvoiceItemDB olditem = new InvoiceItemDB();
                            if (newitems.Count == 0)
                            {
                                item.WasRemoved = true;
                            }
                            else if (newitems.Count > 1)
                            {
                                indexfind = newitems.FindIndex(x => x.location.Equals(item.location));
                                if (indexfind == -1)
                                {
                                    item.WasRemoved = true;
                                }
                            }
                        }
                        else if (item.Daily_Report_2Id != null)
                        {
                            if (snapshot.Items.SingleOrDefault(x => x.FullPeriod == true && x.Daily_Report_2Id.Equals(item.Daily_Report_2Id)) == null)
                            {
                                item.WasRemoved = true;
                            }

                        }
                        else if (item.ExtraWorkId != null)
                        {
                            if (snapshot.Items.SingleOrDefault(x => x.FullPeriod == true && x.ExtraWorkId.Equals(item.ExtraWorkId)) == null)
                            {
                                item.WasRemoved = true;
                            }
                        }
                    }

                }
                CompareModel.SnapShot1 = model;
                CompareModel.SnapShot2 = snapshot;
                ViewData["OrderByOption"] = orderbyoption;
                return View(CompareModel);
            }
            else
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You do not have the right access to compare these snapshots" });
            }
        }
        [HttpGet]
        public async Task<IActionResult> SnapShotPDF(int? SnapShot1Id, int? SnapShot2Id, int? orderbyoption,int? TheSnapShotNumber)
        {
            int indexfind = -1;
            var user = await _userManager.GetUserAsync(User);
            if (user.Active == false)
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You are inactive" });
            }
            InvoiceSnapShot model = await _context.SnapShots
                .Include(x => x.Project).ThenInclude(x => x.BoQHeadlines)
                .Include(x => x.Items).ThenInclude(x => x.Install)
                .Include(x => x.Items).ThenInclude(x => x.Arrival)
                .Include(x => x.Items).ThenInclude(x => x.Mobilize)
                .Include(x => x.Items).ThenInclude(x => x.ItemType)
                .Include(x => x.Items).ThenInclude(x => x.ExtraWork)
                .SingleOrDefaultAsync(x => x.Id.Equals(SnapShot1Id));
            InvoiceSnapShot snapshot = await _context.SnapShots
                .Include(x => x.Project).ThenInclude(x => x.BoQHeadlines)
                .Include(x => x.Items).ThenInclude(x => x.Install)
                .Include(x => x.Items).ThenInclude(x => x.Arrival)
                .Include(x => x.Items).ThenInclude(x => x.Mobilize)
                .Include(x => x.Items).ThenInclude(x => x.ItemType)
                .Include(x => x.Items).ThenInclude(x => x.ExtraWork)
                .SingleOrDefaultAsync(x => x.Id.Equals(SnapShot2Id));
            if (orderbyoption == 1)
            {
                model.Items = model.Items.OrderBy(x => x.Install_date).ThenBy(x => x.Item_Name).ToList();
                snapshot.Items = snapshot.Items.OrderBy(x => x.Install_date).ThenBy(x => x.Item_Name).ToList();
            }
            else if (orderbyoption == 2)
            {
                //figure it out
            }
            else if (orderbyoption == 3)
            {
                model.Items = model.Items.OrderBy(x => x.location).ToList();
                snapshot.Items = snapshot.Items.OrderBy(x => x.location).ToList();
            }
            if ((snapshot.Project.DivisionId.Equals(user.DivisionId) && model.Project.DivisionId.Equals(user.DivisionId)) || User.IsInRole("Admin"))
            {
                CompareTwoSnapShots CompareModel = new CompareTwoSnapShots();
                foreach (var item in snapshot.Items.Where(x => x.FullPeriod == false))
                {
                    if (item.InstallationId != null)
                    {
                        var olditem = model.Items.SingleOrDefault(x => x.FullPeriod == false && x.InstallationId.Equals(item.InstallationId) && x.isIdleItem.Equals(item.isIdleItem));
                        if (olditem != null)
                        {
                            if (olditem.Amount != item.Amount)
                            {
                                item.ChangeLog += "Amount Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.Install_date != item.Install_date)
                            {
                                item.ChangeLog += "Start Date Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.EndStamp == null || item.EndStamp == null)
                            {
                                if (olditem.EndStamp == null && item.EndStamp == null)
                                {

                                }
                                else if (olditem.EndStamp == null && item.EndStamp != null)
                                {
                                    item.ChangeLog += "End Date Added.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                                else if (olditem.EndStamp != null && item.EndStamp == null)
                                {
                                    item.ChangeLog += "End Date Removed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                            }
                            else if (Convert.ToDateTime(olditem.EndStamp).Date != Convert.ToDateTime(item.EndStamp).Date)
                            {
                                item.ChangeLog += "End Date Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.ItemTypeId != item.ItemTypeId)
                            {
                                item.ChangeLog += "ItemType Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.location != item.location && olditem.location != null && olditem.location != null)
                            {
                                if (olditem.location == null && item.location == null)
                                {

                                }
                                else
                                {
                                    item.ChangeLog += "Location Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }

                            }
                            if (olditem.price != item.price)
                            {
                                item.ChangeLog += "Price Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;

                            }
                            if (olditem.rental_price != item.rental_price)
                            {
                                if((olditem.rental_price / (decimal)olditem.Days) != (item.rental_price / (decimal)item.Days))
                                {
                                    item.ChangeLog += "Rental Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                                
                            }
                        }
                        else
                        {
                            item.IsNew = true;
                        }
                    }
                    if (item.ArrivalId != null)
                    {
                        var olditems = model.Items.Where(x => x.FullPeriod == false && x.ArrivalId.Equals(item.ArrivalId) && x.isIdleItem.Equals(item.isIdleItem)).ToList();
                        InvoiceItemDB olditem = new InvoiceItemDB();
                        if (olditems.Count > 1)
                        {
                            indexfind = olditems.FindIndex(x => x.location.Equals(item.location));
                            if (indexfind == -1)
                            {
                                olditem = null;
                            }
                            else
                            {
                                olditem = olditems.ElementAt(indexfind);
                            }
                        }
                        else
                        {
                            olditem = olditems.FirstOrDefault();
                        }
                        if (olditem != null)
                        {
                            if (olditem.Amount != item.Amount)
                            {
                                item.ChangeLog += "Amount Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.Install_date != item.Install_date)
                            {
                                item.ChangeLog += "Start Date Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.EndStamp == null || item.EndStamp == null)
                            {
                                if (olditem.EndStamp == null && item.EndStamp == null)
                                {

                                }
                                else if (olditem.EndStamp == null && item.EndStamp != null)
                                {
                                    item.ChangeLog += "End Date Added.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                                else if (olditem.EndStamp != null && item.EndStamp == null)
                                {
                                    item.ChangeLog += "End Date Removed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                            }
                            else if (Convert.ToDateTime(olditem.EndStamp).Date != Convert.ToDateTime(item.EndStamp).Date)
                            {
                                item.ChangeLog += "End Date Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.ItemTypeId != item.ItemTypeId)
                            {
                                item.ChangeLog += "Itemtype Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.location != item.location && olditem.location != null && olditem.location != null)
                            {
                                if (olditem.location == null && item.location == null)
                                {

                                }
                                else
                                {
                                    item.ChangeLog += "Location Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }

                            }
                            if (olditem.price != item.price)
                            {
                                item.ChangeLog += "Price Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;

                            }
                            if (olditem.rental_price != item.rental_price)
                            {
                                if ((olditem.rental_price / (decimal)olditem.Days) != (item.rental_price / (decimal)item.Days))
                                {
                                    item.ChangeLog += "Rental Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                            }
                        }
                        else
                        {
                            item.IsNew = true;
                        }
                    }
                    if (item.ExtraWorkId != null)
                    {
                        var olditem = model.Items.SingleOrDefault(x => x.FullPeriod == false && x.ExtraWorkId.Equals(item.ExtraWorkId));
                        if (olditem != null)
                        {
                            if (olditem.Amount != item.Amount)
                            {
                                item.ChangeLog += "Amount Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.Install_date != item.Install_date)
                            {
                                item.ChangeLog += "Start Date Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.EndStamp == null || item.EndStamp == null)
                            {
                                if (olditem.EndStamp == null && item.EndStamp == null)
                                {

                                }
                                else if (olditem.EndStamp == null && item.EndStamp != null)
                                {
                                    item.ChangeLog += "End Date Added.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                                else if (olditem.EndStamp != null && item.EndStamp == null)
                                {
                                    item.ChangeLog += "End Date Removed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                            }
                            else if (Convert.ToDateTime(olditem.EndStamp).Date != Convert.ToDateTime(item.EndStamp).Date)
                            {
                                item.ChangeLog += "End Date Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.ItemTypeId != item.ItemTypeId)
                            {
                                item.ChangeLog += "Itemtype Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.location != item.location && olditem.location != null && olditem.location != null)
                            {
                                if (olditem.location == null && item.location == null)
                                {

                                }
                                else
                                {
                                    item.ChangeLog += "Location Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }

                            }
                            if (olditem.price != item.price)
                            {
                                item.ChangeLog += "Price Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;

                            }
                            if (olditem.rental_price != item.rental_price)
                            {
                                if ((olditem.rental_price / (decimal)olditem.Days) != (item.rental_price / (decimal)item.Days))
                                {
                                    item.ChangeLog += "Rental Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                            }
                        }
                        else
                        {
                            item.IsNew = true;
                        }
                    }
                    if (item.Daily_Report_2Id != null)
                    {
                        var olditem = model.Items.SingleOrDefault(x => x.FullPeriod == false && x.Daily_Report_2Id.Equals(item.Daily_Report_2Id));
                        if (olditem != null)
                        {
                            if (olditem.Amount != item.Amount)
                            {
                                item.ChangeLog += "Amount Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.Install_date != item.Install_date)
                            {
                                item.ChangeLog += "Start Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.EndStamp == null || item.EndStamp == null)
                            {
                                if (olditem.EndStamp == null && item.EndStamp == null)
                                {

                                }
                                else if (olditem.EndStamp == null && item.EndStamp != null)
                                {
                                    item.ChangeLog += "End Date Added.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                                else if (olditem.EndStamp != null && item.EndStamp == null)
                                {
                                    item.ChangeLog += "End Date Removed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                            }
                            else if (Convert.ToDateTime(olditem.EndStamp).Date != Convert.ToDateTime(item.EndStamp).Date)
                            {
                                item.ChangeLog += "End Date Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.ItemTypeId != item.ItemTypeId)
                            {
                                item.ChangeLog += "Title Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.location != item.location && olditem.location != null && olditem.location != null)
                            {
                                if (olditem.location == null && item.location == null)
                                {

                                }
                                else
                                {
                                    item.ChangeLog += "Location Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }

                            }
                            if (olditem.price != item.price)
                            {
                                item.ChangeLog += "Price Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;

                            }
                            if (olditem.rental_price != item.rental_price)
                            {
                                if ((olditem.rental_price / (decimal)olditem.Days) != (item.rental_price / (decimal)item.Days))
                                {
                                    item.ChangeLog += "Rental Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                            }
                        }
                        else
                        {
                            item.IsNew = true;
                        }
                    }
                }
                foreach (var item in snapshot.Items.Where(x => x.FullPeriod == true))
                {
                    if (item.InstallationId != null)
                    {
                        var olditem = model.Items.SingleOrDefault(x => x.FullPeriod == true && x.InstallationId.Equals(item.InstallationId) && x.isIdleItem.Equals(item.isIdleItem));
                        if (olditem != null)
                        {
                            if (olditem.Amount != item.Amount)
                            {
                                item.ChangeLog += "Amount Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.Install_date != item.Install_date)
                            {
                                item.ChangeLog += "Start Date Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.EndStamp == null || item.EndStamp == null)
                            {
                                if (olditem.EndStamp == null && item.EndStamp == null)
                                {

                                }
                                else if (olditem.EndStamp == null && item.EndStamp != null)
                                {
                                    item.ChangeLog += "End Date Added.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                                else if (olditem.EndStamp != null && item.EndStamp == null)
                                {
                                    item.ChangeLog += "End Date Removed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                            }
                            else if (Convert.ToDateTime(olditem.EndStamp).Date != Convert.ToDateTime(item.EndStamp).Date)
                            {
                                item.ChangeLog += "End Date Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.ItemTypeId != item.ItemTypeId)
                            {
                                item.ChangeLog += "ItemType Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.location != item.location && olditem.location != null && olditem.location != null)
                            {
                                if (olditem.location == null && item.location == null)
                                {

                                }
                                else
                                {
                                    item.ChangeLog += "Location Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }

                            }
                            if (olditem.price != item.price)
                            {
                                item.ChangeLog += "Price Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;

                            }
                            if (olditem.rental_price != item.rental_price)
                            {
                                if ((olditem.rental_price / (decimal)olditem.Days) != (item.rental_price / (decimal)item.Days))
                                {
                                    item.ChangeLog += "Rental Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                            }
                        }
                        else
                        {
                            item.IsNew = true;
                        }
                    }
                    if (item.ArrivalId != null)
                    {
                        var olditems = model.Items.Where(x => x.FullPeriod == false && x.ArrivalId.Equals(item.ArrivalId) && x.isIdleItem.Equals(item.isIdleItem)).ToList();
                        InvoiceItemDB olditem = new InvoiceItemDB();
                        if (olditems.Count > 1)
                        {
                            indexfind = olditems.FindIndex(x => x.location.Equals(item.location));
                            if (indexfind == -1)
                            {
                                olditem = null;
                            }
                            else
                            {
                                olditem = olditems.ElementAt(indexfind);
                            }
                        }
                        else
                        {
                            olditem = olditems.FirstOrDefault();
                        }
                        if (olditem != null)
                        {
                            if (olditem.Amount != item.Amount)
                            {
                                item.ChangeLog += "Amount Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.Install_date != item.Install_date)
                            {
                                item.ChangeLog += "Start Date Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.EndStamp == null || item.EndStamp == null)
                            {
                                if (olditem.EndStamp == null && item.EndStamp == null)
                                {

                                }
                                else if (olditem.EndStamp == null && item.EndStamp != null)
                                {
                                    item.ChangeLog += "End Date Added.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                                else if (olditem.EndStamp != null && item.EndStamp == null)
                                {
                                    item.ChangeLog += "End Date Removed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                            }
                            else if (Convert.ToDateTime(olditem.EndStamp).Date != Convert.ToDateTime(item.EndStamp).Date)
                            {
                                item.ChangeLog += "End Date Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.ItemTypeId != item.ItemTypeId)
                            {
                                item.ChangeLog += "ItemType Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.location != item.location && olditem.location != null && olditem.location != null)
                            {
                                if (olditem.location == null && item.location == null)
                                {

                                }
                                else
                                {
                                    item.ChangeLog += "Location Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }

                            }
                            if (olditem.price != item.price)
                            {
                                item.ChangeLog += "Price Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;

                            }
                            if (olditem.rental_price != item.rental_price)
                            {
                                if ((olditem.rental_price / (decimal)olditem.Days) != (item.rental_price / (decimal)item.Days))
                                {
                                    item.ChangeLog += "Rental Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                            }
                        }
                        else
                        {
                            item.IsNew = true;
                        }
                    }
                    if (item.ExtraWorkId != null)
                    {
                        var olditem = model.Items.SingleOrDefault(x => x.FullPeriod == true && x.ExtraWorkId.Equals(item.ExtraWorkId));
                        if (olditem != null)
                        {
                            if (olditem.Amount != item.Amount)
                            {
                                item.ChangeLog += "Amount Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.Item_Name != item.Item_Name)
                            {
                                item.ChangeLog += "Text Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.Install_date != item.Install_date)
                            {
                                item.ChangeLog += "Start Date Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.EndStamp == null || item.EndStamp == null)
                            {
                                if (olditem.EndStamp == null && item.EndStamp == null)
                                {

                                }
                                else if (olditem.EndStamp == null && item.EndStamp != null)
                                {
                                    item.ChangeLog += "End Date Added.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                                else if (olditem.EndStamp != null && item.EndStamp == null)
                                {
                                    item.ChangeLog += "End Date Removed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                            }
                            else if (Convert.ToDateTime(olditem.EndStamp).Date != Convert.ToDateTime(item.EndStamp).Date)
                            {
                                item.ChangeLog += "End Date Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.ItemTypeId != item.ItemTypeId)
                            {
                                item.ChangeLog += "ItemType Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.location != item.location && olditem.location != null && olditem.location != null)
                            {
                                if (olditem.location == null && item.location == null)
                                {

                                }
                                else
                                {
                                    item.ChangeLog += "Location Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }

                            }
                            if (olditem.price != item.price)
                            {
                                item.ChangeLog += "Price Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;

                            }
                            if (olditem.rental_price != item.rental_price)
                            {
                                if ((olditem.rental_price / (decimal)olditem.Days) != (item.rental_price / (decimal)item.Days))
                                {
                                    item.ChangeLog += "Rental Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                            }
                        }
                        else
                        {
                            item.IsNew = true;
                        }
                    }
                    if (item.Daily_Report_2Id != null)
                    {
                        var olditem = model.Items.SingleOrDefault(x => x.FullPeriod == true && x.Daily_Report_2Id.Equals(item.Daily_Report_2Id));
                        if (olditem != null)
                        {
                            if (olditem.Amount != item.Amount)
                            {
                                item.ChangeLog += "Amount Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.Install_date != item.Install_date)
                            {
                                item.ChangeLog += "Start Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.EndStamp == null || item.EndStamp == null)
                            {
                                if (olditem.EndStamp == null && item.EndStamp == null)
                                {

                                }
                                else if (olditem.EndStamp == null && item.EndStamp != null)
                                {
                                    item.ChangeLog += "End Date Added.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                                else if (olditem.EndStamp != null && item.EndStamp == null)
                                {
                                    item.ChangeLog += "End Date Removed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                            }
                            else if (Convert.ToDateTime(olditem.EndStamp).Date != Convert.ToDateTime(item.EndStamp).Date)
                            {
                                item.ChangeLog += "End Date Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.ItemTypeId != item.ItemTypeId)
                            {
                                item.ChangeLog += "Title Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;
                            }
                            if (olditem.location != item.location && olditem.location != null && olditem.location != null)
                            {
                                if (olditem.location == null && item.location == null)
                                {

                                }
                                else
                                {
                                    item.ChangeLog += "Location Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }

                            }
                            if (olditem.price != item.price)
                            {
                                item.ChangeLog += "Price Changed.";
                                item.IsAltered = true;
                                olditem.IsAltered = true;

                            }
                            if (olditem.rental_price != item.rental_price)
                            {
                                if ((olditem.rental_price / (decimal)olditem.Days) != (item.rental_price / (decimal)item.Days))
                                {
                                    item.ChangeLog += "Rental Changed.";
                                    item.IsAltered = true;
                                    olditem.IsAltered = true;
                                }
                            }
                        }
                        else
                        {
                            item.IsNew = true;
                        }
                    }
                }
                CompareModel.SnapShot1 = model;
                CompareModel.SnapShot2 = snapshot;
                if(TheSnapShotNumber == 1)
                {
                    return new ViewAsPdf("Reports/_invoiceSnapShot", CompareModel.SnapShot1);
                }
                else
                {
                    return new ViewAsPdf("Reports/_invoiceSnapShot", CompareModel.SnapShot2);
                }
                
                //return View("Reports/_invoiceSnapShot", CompareModel.SnapShot1);
            }
            else
            {
                return RedirectToAction("ErrorMessage", "Home", new { text = "You do not have access to this content" });
            }


        }
        public int CalculateRentalMonths(Arrival arr,DateTime st,DateTime et)
        {
            //default (arr.timestamp < st and arr.endstamp == null
            DateTime StartTime;
            DateTime EndTime;
            if(arr.TimeStamp.Date > st.Date)
            {
                StartTime = arr.TimeStamp.Date;
            }
            else {
                StartTime = st.Date;
            }
            if(arr.EndStamp == null)
            {
                EndTime = et.Date;
            }
            else if(Convert.ToDateTime(arr.EndStamp).Date < et.Date)
            {
                EndTime = Convert.ToDateTime(arr.EndStamp).Date;
            }
            else
            {
                EndTime = et.Date;
            }
            if(arr.InvoiceDate.Date >= st.Date && arr.InvoiceDate.Date <= et.Date)
            {
                StartTime = arr.TimeStamp.Date;
            }
            int Days = (EndTime.Month - StartTime.Month) + (EndTime.Year - StartTime.Year) * 12 + 1;
            if(arr.InvoiceDate.Date > EndTime)
            {
                Days = 0;
            }
            else if(arr.InvoiceDate < StartTime)
            {
                if(arr.TimeStamp < StartTime)
                {
                    Days -= 1;
                }
            }
            //if (arr.TimeStamp.Date < st && arr.EndStamp == null) {
            //    Days = (et.Month - st.Month) + (et.Year - st.Year) * 12;
            //    if (arr.TimeStamp.Month == st.Month && !st.Month.Equals(et.Month))
            //    {
            //        Days += 1;
            //    }
            //}
            //else if(arr.TimeStamp.Date < st && arr.EndStamp != null)
            //{
            //    if(Convert.ToDateTime(arr.EndStamp) > et)
            //    {
            //        Days = (et.Month - st.Month) + (et.Year - st.Year) * 12;
            //        if (arr.TimeStamp.Month == st.Month && !st.Month.Equals(et.Month))
            //        {
            //            Days += 1;
            //        }
            //    }
            //    else
            //    {
            //        Days = (Convert.ToDateTime(arr.EndStamp).Month - st.Month) + (Convert.ToDateTime(arr.EndStamp).Year - st.Year) * 12;
            //        if (arr.TimeStamp.Month == st.Month && !st.Month.Equals(et.Month))
            //        {
            //            Days += 1;
            //        }
            //    }
            //}
            //else if(arr.TimeStamp.Date >= st && arr.EndStamp == null)
            //{
            //    if(arr.TimeStamp.Date > et) //arrival does not start until later regardless of invoicedate
            //    {
            //        return 0;
            //    }
            //    else
            //    {
            //        Days = (et.Month - arr.TimeStamp.Month) + (et.Year - arr.TimeStamp.Year) * 12; ;
            //        if (arr.TimeStamp.Month == st.Month && !st.Month.Equals(et.Month))
            //        {
            //            Days += 1;
            //        }
            //    }
            //}
            //else if (arr.TimeStamp.Date >= st && arr.EndStamp != null)
            //{
            //    if (arr.TimeStamp.Date > et) //arrival does not start until later regardless of invoicedate
            //    {
            //        return 0;
            //    }
            //    else
            //    {
            //        if (arr.EndStamp <= et)
            //        {                      
            //            Days = (Convert.ToDateTime(arr.EndStamp).Month - arr.TimeStamp.Month) +(Convert.ToDateTime(arr.EndStamp).Year - arr.TimeStamp.Year) * 12;
            //            if (arr.TimeStamp.Month == st.Month && !st.Month.Equals(et.Month))
            //            {
            //                Days += 1;
            //            }
            //        }
            //        else
            //        {
            //            Days = et.Month - arr.TimeStamp.Month + (et.Year - arr.TimeStamp.Year) * 12;

            //            if (arr.TimeStamp.Month == st.Month && !st.Month.Equals(et.Month))
            //            {
            //                Days += 1;
            //            }
            //        }
            //    }
            //}
            return Days;
        }
    }
}

