// <auto-generated />
using System;
using MainOps.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MainOps.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210531100035_commentsfordrilling")]
    partial class commentsfordrilling
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MainOps.Models.AlarmCall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<TimeSpan?>("Alarm_Time");

                    b.Property<string>("DoneBy");

                    b.Property<DateTime?>("EnteredIntoDataBase");

                    b.Property<TimeSpan>("Hours");

                    b.Property<DateTime?>("LastEditedInDataBase");

                    b.Property<double?>("Latitude");

                    b.Property<string>("LogText");

                    b.Property<double?>("Longitude");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("SubProjectId");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubProjectId");

                    b.ToTable("AlarmCalls");
                });

            modelBuilder.Entity("MainOps.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Active");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<int>("DivisionId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<bool>("MemberShipConfirmed");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PicturePath");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserLog");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MainOps.Models.Arrival", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Amount");

                    b.Property<string>("Arrival_Text");

                    b.Property<DateTime?>("EndStamp");

                    b.Property<DateTime?>("EnteredIntoDataBase");

                    b.Property<int>("ItemTypeId");

                    b.Property<DateTime?>("LastEditedInDataBase");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<int?>("MobilisationId");

                    b.Property<int?>("MobilizeId");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("SubProjectId");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("ItemTypeId");

                    b.HasIndex("MobilizeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubProjectId");

                    b.ToTable("Arrivals");
                });

            modelBuilder.Entity("MainOps.Models.BentoniteLayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("LayerTypeOverId");

                    b.Property<int?>("LayerTypeUnderId");

                    b.Property<double>("Over");

                    b.Property<double>("Under");

                    b.Property<int?>("WellDrillingInstructionId");

                    b.HasKey("Id");

                    b.HasIndex("WellDrillingInstructionId");

                    b.ToTable("BentoniteLayers");
                });

            modelBuilder.Entity("MainOps.Models.BoQHeadLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("BoQnum");

                    b.Property<string>("HeadLine");

                    b.Property<int>("ProjectId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("BoQHeadLines");
                });

            modelBuilder.Entity("MainOps.Models.CGJClasses.AccomodationWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.Property<int>("ProtocolId");

                    b.Property<string>("path");

                    b.HasKey("Id");

                    b.HasIndex("ProtocolId");

                    b.ToTable("AccomodationWorks");
                });

            modelBuilder.Entity("MainOps.Models.CGJClasses.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Location");

                    b.Property<int>("ProtocolId");

                    b.Property<string>("path");

                    b.HasKey("Id");

                    b.HasIndex("ProtocolId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("MainOps.Models.CGJClasses.Dagsrapport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Addresse");

                    b.Property<string>("Afdeling");

                    b.Property<string>("DagensVejr");

                    b.Property<DateTime>("Dato");

                    b.Property<bool>("ForSaetter");

                    b.Property<string>("KontraktNr");

                    b.Property<string>("Kontraktnavn");

                    b.Property<string>("Lokation");

                    b.Property<int?>("ProjectId");

                    b.Property<int>("RapportNr");

                    b.Property<int?>("SubProjectId");

                    b.Property<string>("UdarbjedetAf");

                    b.Property<string>("UddybendeNoter");

                    b.Property<string>("Ugedag");

                    b.Property<string>("Underskrift");

                    b.Property<string>("Vejrlig");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubProjectId");

                    b.ToTable("Dagsrapporter");
                });

            modelBuilder.Entity("MainOps.Models.CGJClasses.DagsRapport_EkstraArbejde", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DagsrapportId");

                    b.Property<int?>("EAId");

                    b.Property<string>("EANr");

                    b.Property<string>("EANr_skrevet");

                    b.Property<string>("Eget_Materiel");

                    b.Property<bool>("Fortsaetter");

                    b.Property<string>("Opgave");

                    b.Property<string>("UEFirma_Materiel");

                    b.HasKey("Id");

                    b.HasIndex("DagsrapportId");

                    b.HasIndex("EAId");

                    b.ToTable("Dags_Eksterarbejder");
                });

            modelBuilder.Entity("MainOps.Models.CGJClasses.DagsRapport_KontrakArbejde", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DagsrapportId");

                    b.Property<string>("EgetMateriel");

                    b.Property<string>("UL_Firma");

                    b.Property<string>("UL_Materiel");

                    b.HasKey("Id");

                    b.HasIndex("DagsrapportId");

                    b.ToTable("Dags_Kontraktarbejder");
                });

            modelBuilder.Entity("MainOps.Models.CGJClasses.DagsRapport_TimeRegistrering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AntalPersoner");

                    b.Property<double>("CGJ_Timer_Total");

                    b.Property<int?>("DagsrapportId");

                    b.Property<string>("EANr");

                    b.Property<string>("Note");

                    b.Property<double>("Overtid_100");

                    b.Property<double>("Overtid_50");

                    b.Property<double>("Timer");

                    b.Property<double>("TimerFoerOvertid");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("DagsrapportId");

                    b.ToTable("Dags_TimeRegistreringer");
                });

            modelBuilder.Entity("MainOps.Models.CGJClasses.EA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EAnr");

                    b.Property<string>("Opgave");

                    b.Property<string>("Sagsnummer");

                    b.HasKey("Id");

                    b.ToTable("EAs");
                });

            modelBuilder.Entity("MainOps.Models.CGJClasses.Junction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.Property<int>("ProtocolId");

                    b.Property<string>("path");

                    b.HasKey("Id");

                    b.HasIndex("ProtocolId");

                    b.ToTable("Junctions");
                });

            modelBuilder.Entity("MainOps.Models.CGJClasses.Protocol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Protocolnr");

                    b.HasKey("Id");

                    b.ToTable("Protocols");
                });

            modelBuilder.Entity("MainOps.Models.CGJClasses.RoadSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.Property<int>("ProtocolId");

                    b.Property<string>("path");

                    b.HasKey("Id");

                    b.HasIndex("ProtocolId");

                    b.ToTable("RoadSections");
                });

            modelBuilder.Entity("MainOps.Models.CGJClasses.SiteClearanceForUtilityRelocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.Property<int>("ProtocolId");

                    b.Property<string>("path");

                    b.HasKey("Id");

                    b.HasIndex("ProtocolId");

                    b.ToTable("SiteClearancesForUtilityReolocations");
                });

            modelBuilder.Entity("MainOps.Models.CGJClasses.SiteClearancesBetweenContractBorder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.Property<int>("ProtocolId");

                    b.Property<string>("path");

                    b.HasKey("Id");

                    b.HasIndex("ProtocolId");

                    b.ToTable("SiteClearancesBetweenContractBorders");
                });

            modelBuilder.Entity("MainOps.Models.CGJClasses.Structure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.Property<int>("ProtocolId");

                    b.Property<string>("path");

                    b.HasKey("Id");

                    b.HasIndex("ProtocolId");

                    b.ToTable("Structures");
                });

            modelBuilder.Entity("MainOps.Models.CGJensenAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.ToTable("CGJensenAdmins");
                });

            modelBuilder.Entity("MainOps.Models.ClearPumpTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Before_After_Acid");

                    b.Property<double?>("Bottom_well");

                    b.Property<string>("DoneBy");

                    b.Property<double?>("Filter_Diameter");

                    b.Property<string>("GeneralComments");

                    b.Property<TimeSpan?>("Init_Meas_Time");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<int?>("MeasPointId");

                    b.Property<int>("ProjectId");

                    b.Property<string>("PumpType");

                    b.Property<double?>("Ref_Level");

                    b.Property<string>("Ref_Point");

                    b.Property<DateTime>("Report_Date");

                    b.Property<int?>("SubProjectId");

                    b.Property<double?>("Water_Meter_After");

                    b.Property<double?>("Water_Meter_Before");

                    b.Property<double?>("Water_level");

                    b.Property<string>("Wellname");

                    b.Property<TimeSpan>("endtime");

                    b.Property<string>("imagepath");

                    b.Property<TimeSpan>("starttime");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubProjectId");

                    b.ToTable("ClearPumpTests");
                });

            modelBuilder.Entity("MainOps.Models.ClearPumpTestData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClearPumpTestId");

                    b.Property<string>("Comment");

                    b.Property<double?>("Dip");

                    b.Property<double?>("Flow");

                    b.Property<TimeSpan>("TimeStamp");

                    b.Property<double?>("m3");

                    b.HasKey("Id");

                    b.HasIndex("ClearPumpTestId");

                    b.ToTable("ClearPumpTestDatas");
                });

            modelBuilder.Entity("MainOps.Models.ClearPumpTestDataDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ClearPumpTestId");

                    b.Property<double?>("FlowData");

                    b.Property<double?>("Moni1LevelData");

                    b.Property<double?>("Moni2LevelData");

                    b.Property<double?>("PumpLevelData");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("ClearPumpTestId");

                    b.ToTable("ClearPumpTestDatasDevice");
                });

            modelBuilder.Entity("MainOps.Models.ClearPumpTestPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClearPumpTestId");

                    b.Property<string>("Path");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("ClearPumpTestId");

                    b.ToTable("ClearPumpTestPhotos");
                });

            modelBuilder.Entity("MainOps.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("comment")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MainOps.Models.ConstructionSiteInspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AdditionalInstruction");

                    b.Property<bool>("AllPPE");

                    b.Property<string>("Branch");

                    b.Property<bool>("ConditionLoadHandling");

                    b.Property<string>("DoneBy");

                    b.Property<bool>("EmergencyMeasures");

                    b.Property<DateTime?>("EnteredIntoDataBase");

                    b.Property<bool>("FirstAiders");

                    b.Property<bool>("FloorOpenings");

                    b.Property<string>("GeneralComments");

                    b.Property<bool>("GroundSupport");

                    b.Property<bool>("Hazardous_Work");

                    b.Property<bool>("KnownContaminants");

                    b.Property<bool>("LaddersStepsPlatforms");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<bool>("MarkingDevices");

                    b.Property<bool>("MeasuresPreventEnvHarm");

                    b.Property<int>("NumberOfPeople");

                    b.Property<bool>("OilBindingAgent");

                    b.Property<bool>("OperatingInstructions");

                    b.Property<bool>("OverAllState");

                    b.Property<string>("PreviousProblems");

                    b.Property<int>("ProjectId");

                    b.Property<bool>("ProjectManager");

                    b.Property<bool>("SafeAccessSite");

                    b.Property<bool>("SafeStorage");

                    b.Property<bool>("SafetyCondition");

                    b.Property<bool>("SafetyDataSheets");

                    b.Property<string>("Signature");

                    b.Property<bool>("SloapingAreas");

                    b.Property<bool>("SpecialPPE");

                    b.Property<bool>("SubContractorsUsed");

                    b.Property<int?>("SubProjectId");

                    b.Property<bool>("Sub_MaterialStorage");

                    b.Property<bool>("Sub_PPE");

                    b.Property<bool>("Sub_SafetyCond");

                    b.Property<bool>("SufficientLighting");

                    b.Property<bool>("Tidy");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<bool>("ToolBox_Done");

                    b.Property<bool>("UnKnownContaminants");

                    b.Property<bool>("WPA_Done");

                    b.Property<bool>("Walkways");

                    b.Property<bool>("WasteDisposal");

                    b.Property<bool>("WasteSeperation");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubProjectId");

                    b.ToTable("ConstructionSiteInspections");
                });

            modelBuilder.Entity("MainOps.Models.CoordSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("system");

                    b.HasKey("Id");

                    b.ToTable("CoordSystems");
                });

            modelBuilder.Entity("MainOps.Models.CoordTrack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<int>("TrackItemId");

                    b.Property<string>("TypeCoord");

                    b.HasKey("Id");

                    b.HasIndex("TrackItemId");

                    b.ToTable("CoordTracks");
                });

            modelBuilder.Entity("MainOps.Models.CoordTrack2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Accuracy");

                    b.Property<double?>("Accuracy_backup");

                    b.Property<int?>("ArrivalId");

                    b.Property<int?>("InstallId");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Latitude_backup");

                    b.Property<double?>("Longitude");

                    b.Property<double?>("Longitude_backup");

                    b.Property<int?>("MeasPointId");

                    b.Property<int?>("MobilizeId");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<string>("TypeCoord");

                    b.HasKey("Id");

                    b.HasIndex("ArrivalId");

                    b.HasIndex("InstallId");

                    b.HasIndex("MeasPointId");

                    b.HasIndex("MobilizeId");

                    b.ToTable("CoordTrack2s");
                });

            modelBuilder.Entity("MainOps.Models.CoordTrack3", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Accuracy");

                    b.Property<int>("HJItemId");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("HJItemId");

                    b.ToTable("CoordTrack3s");
                });

            modelBuilder.Entity("MainOps.Models.DataLoggerInstall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<int>("DataLoggerNumber");

                    b.Property<double?>("Depth_Sensor_1");

                    b.Property<double?>("Depth_Sensor_2");

                    b.Property<double?>("Diff_GL_Top_Pipe_1");

                    b.Property<double?>("Diff_GL_Top_Pipe_2");

                    b.Property<double?>("Dip_Pipe_1");

                    b.Property<double?>("Dip_Pipe_2");

                    b.Property<string>("DoneBy");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<int?>("MeasPointId");

                    b.Property<int>("ProjectId");

                    b.Property<double?>("Raw_Value_Pipe_1");

                    b.Property<double?>("Raw_Value_Pipe_2");

                    b.Property<string>("Signature");

                    b.Property<int?>("SubProjectId");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<string>("Type_Sensor_1");

                    b.Property<string>("Type_Sensor_2");

                    b.Property<string>("WellName");

                    b.HasKey("Id");

                    b.HasIndex("MeasPointId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubProjectId");

                    b.ToTable("DataLoggerInstallations");
                });

            modelBuilder.Entity("MainOps.Models.DataPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Datum");

                    b.Property<int?>("MeasPointId");

                    b.Property<double>("MessWert");

                    b.HasKey("Id");

                    b.HasIndex("MeasPointId");

                    b.ToTable("DataPoints");
                });

            modelBuilder.Entity("MainOps.Models.Decommission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Area_Reestablished");

                    b.Property<bool>("BentoniteFilling");

                    b.Property<double?>("BottomDip");

                    b.Property<bool>("Casted");

                    b.Property<double?>("DipBefore");

                    b.Property<string>("DoneBy");

                    b.Property<DateTime?>("EnteredIntoDataBase");

                    b.Property<string>("GeneralComments");

                    b.Property<double?>("Kg_Bentonite");

                    b.Property<double?>("Kg_Casting");

                    b.Property<double?>("Kg_Sand");

                    b.Property<double?>("L_Water");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<int?>("MeasPointId");

                    b.Property<bool>("PhotosAfter");

                    b.Property<bool>("PhotosBefore");

                    b.Property<double?>("Pipe_Cut_X_meter_under");

                    b.Property<int>("ProjectId");

                    b.Property<bool>("SandFilling");

                    b.Property<string>("Signature");

                    b.Property<int?>("SubProjectId");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<bool>("WasAirLiftedFirst");

                    b.Property<string>("Wellname");

                    b.HasKey("Id");

                    b.HasIndex("MeasPointId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubProjectId");

                    b.ToTable("Decommissions");
                });

            modelBuilder.Entity("MainOps.Models.DeInstall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Amount");

                    b.Property<string>("DeInstall_Text");

                    b.Property<DateTime?>("EnteredIntoDataBase");

                    b.Property<int?>("InstallId");

                    b.Property<int>("ItemTypeId");

                    b.Property<DateTime?>("LastEditedInDataBase");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("SubProjectId");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("InstallId");

                    b.HasIndex("ItemTypeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubProjectId");

                    b.ToTable("Deinstallations");
                });

            modelBuilder.Entity("MainOps.Models.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("EndDate");

                    b.Property<int?>("ItemTypeId");

                    b.Property<decimal>("Rate");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("ItemTypeId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("MainOps.Models.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LogoPath");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("MainOps.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DocumentTypeId")
                        .IsRequired();

                    b.Property<int?>("MeasPointId");

                    b.Property<string>("Name");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("SubProjectId");

                    b.Property<string>("path");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("MeasPointId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubProjectId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("MainOps.Models.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("MainOps.Models.Drill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BlindPipeDepth");

                    b.Property<string>("Comments");

                    b.Property<string>("DoneBy");

                    b.Property<double>("DrillDepth");

                    b.Property<double>("FilterLength");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<double>("MikrolitBagsUsed");

                    b.Property<string>("PipeDiameter");

                    b.Property<int>("ProjectId");

                    b.Property<double>("SandBagsUsed");

                    b.Property<int?>("SubProjectId");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<string>("WellID");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubProjectId");

                    b.ToTable("Drillings");
                });

            modelBuilder.Entity("MainOps.Models.DrillPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DrillId");

                    b.Property<string>("Path");

                    b.HasKey("Id");

                    b.HasIndex("DrillId");

                    b.ToTable("DrillPhotos");
                });

            modelBuilder.Entity("MainOps.Models.ExtraWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BoQHeadLineId");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EndStamp");

                    b.Property<decimal>("Price");

                    b.Property<int>("ProjectId");

                    b.Property<decimal>("Rental_Price");

                    b.Property<int?>("SubProjectId");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<bool>("VAT_Liftable");

                    b.Property<string>("Valuta");

                    b.HasKey("Id");

                    b.HasIndex("BoQHeadLineId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubProjectId");

                    b.ToTable("ExtraWorks");
                });

            modelBuilder.Entity("MainOps.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Text");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<int?>("WorkItemId");

                    b.Property<int?>("WorkTaskId");

                    b.HasKey("Id");

                    b.HasIndex("WorkItemId");

                    b.HasIndex("WorkTaskId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("MainOps.Models.Filter1Layer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("LayerTypeOverId");

                    b.Property<int?>("LayerTypeUnderId");

                    b.Property<double>("Length");

                    b.Property<double>("Over");

                    b.Property<double>("Under");

                    b.Property<int?>("WellDrillingInstructionId");

                    b.HasKey("Id");

                    b.HasIndex("WellDrillingInstructionId");

                    b.ToTable("Filter1Layers");
                });

            modelBuilder.Entity("MainOps.Models.Filter2Layer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("LayerTypeOverId");

                    b.Property<int?>("LayerTypeUnderId");

                    b.Property<double>("Length");

                    b.Property<double>("Over");

                    b.Property<double>("Under");

                    b.Property<int?>("WellDrillingInstructionId");

                    b.HasKey("Id");

                    b.HasIndex("WellDrillingInstructionId");

                    b.ToTable("Filter2Layers");
                });

            modelBuilder.Entity("MainOps.Models.GeneratorCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Coolant");

                    b.Property<string>("Coolant_Comment");

                    b.Property<double>("Diesel_Level");

                    b.Property<string>("Diesel_Level_Comment");

                    b.Property<string>("DoneBy");

                    b.Property<DateTime?>("EnteredIntoDataBase");

                    b.Property<string>("Equipment_Started");

                    b.Property<string>("Equipment_Started_After");

                    b.Property<string>("Equipment_Started_After_Comment");

                    b.Property<string>("Equipment_Started_Comment");

                    b.Property<string>("GeneralComments");

                    b.Property<double>("Generator_Hours");

                    b.Property<string>("Generator_Started");

                    b.Property<string>("Generator_Started_Comment");

                    b.Property<string>("Generator_Stopped");

                    b.Property<string>("Generator_Stopped_Comment");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<bool>("Oil_Level");

                    b.Property<string>("Oil_Level_Comment");

                    b.Property<int>("ProjectId");

                    b.Property<string>("Signature");

                    b.Property<int?>("SubProjectId");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubProjectId");

                    b.ToTable("GeneratorChecks");
                });

            modelBuilder.Entity("MainOps.Models.GroutAfterPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("GroutingId");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<string>("path");

                    b.HasKey("Id");

                    b.HasIndex("GroutingId");

                    b.ToTable("GroutAfterPhotos");
                });

            modelBuilder.Entity("MainOps.Models.GroutBeforePhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("GroutingId");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<string>("path");

                    b.HasKey("Id");

                    b.HasIndex("GroutingId");

                    b.ToTable("GroutBeforePhotos");
                });

            modelBuilder.Entity("MainOps.Models.GroutGroutPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("GroutingId");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<string>("path");

                    b.HasKey("Id");

                    b.HasIndex("GroutingId");

                    b.ToTable("GroutGroutPhotos");
                });

            modelBuilder.Entity("MainOps.Models.Grouting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DoneBy");

                    b.Property<DateTime>("EndTime");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<int>("ProjectId");

                    b.Property<DateTime>("StartTime");

                    b.Property<int?>("SubProjectId");

                    b.Property<double?>("Totalm3_override");

                    b.Property<double?>("WaterMeterEnd");

                    b.Property<double?>("WaterMeterStart");

                    b.Property<string>("imagepath");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubProjectId");

                    b.ToTable("Groutings");
                });

            modelBuilder.Entity("MainOps.Models.GroutTestDataDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("FlowData");

                    b.Property<int?>("GroutingId");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("GroutingId");

                    b.ToTable("GroutDataDevice");
                });

            modelBuilder.Entity("MainOps.Models.HJItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<int?>("DivisionId");

                    b.Property<bool>("GPS_Tracker");

                    b.Property<string>("HJId");

                    b.Property<int?>("HJItemClassId");

                    b.Property<double?>("ItemHeight");

                    b.Property<double?>("ItemLength");

                    b.Property<double?>("ItemWidth");

                    b.Property<string>("Name");

                    b.Property<string>("Ownership");

                    b.Property<string>("PathTo3DDrawing");

                    b.Property<string>("PathToPicture");

                    b.Property<double?>("latitude");

                    b.Property<double?>("longitude");

                    b.Property<double?>("weight");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.HasIndex("HJItemClassId");

                    b.ToTable("HJItems");
                });

            modelBuilder.Entity("MainOps.Models.HJItemClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassName");

                    b.Property<string>("ClassNumber");

                    b.Property<int?>("Electrical_Maintenance_Freq");

                    b.Property<int?>("HJItemMasterClassId");

                    b.Property<int?>("Safety_Maintenance_Freq");

                    b.Property<int?>("Service_Maintenance_Freq");

                    b.HasKey("Id");

                    b.HasIndex("HJItemMasterClassId");

                    b.ToTable("HJItemClasses");
                });

            modelBuilder.Entity("MainOps.Models.HJItemMasterClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassName");

                    b.Property<string>("ClassNumber");

                    b.HasKey("Id");

                    b.ToTable("HJItemMasterClasses");
                });

            modelBuilder.Entity("MainOps.Models.HorizontalDrainTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Distance");

                    b.Property<string>("DoneBy");

                    b.Property<double>("Duration");

                    b.Property<DateTime?>("EnteredIntoDataBase");

                    b.Property<int?>("InstallId");

                    b.Property<DateTime?>("LastEditedInDataBase");

                    b.Property<string>("Location");

                    b.Property<string>("LogText");

                    b.Property<int>("ProjectId");

                    b.Property<string>("Signature");

                    b.Property<int?>("SubProjectId");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("InstallId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubProjectId");

                    b.ToTable("HorizontalDrainTests");
                });

            modelBuilder.Entity("MainOps.Models.HourRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Edited");

                    b.Property<string>("FullName");

                    b.Property<string>("LicensePlate");

                    b.Property<string>("PaymentNr");

                    b.Property<string>("Signature_Supervisor");

                    b.Property<string>("Signature_Worker");

                    b.Property<string>("Supervisor_Name");

                    b.Property<int>("Week1");

                    b.Property<int>("Week2");

                    b.Property<double?>("totaladdons");

                    b.Property<double?>("totaloverhours100");

                    b.Property<double?>("totaloverhours50");

                    b.Property<double>("totalregularhours");

                    b.Property<string>("weektype");

                    b.HasKey("Id");

                    b.ToTable("HourRegistrations");
                });

            modelBuilder.Entity("MainOps.Models.HourRegistration_Ongoing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Edited");

                    b.Property<string>("FullName");

                    b.Property<string>("LicensePlate");

                    b.Property<string>("PaymentNr");

                    b.Property<string>("Signature_Supervisor");

                    b.Property<string>("Signature_Worker");

                    b.Property<string>("Supervisor_Name");

                    b.Property<int>("Week1");

                    b.Property<int>("Week2");

                    b.Property<double?>("totaladdons");

                    b.Property<double?>("totaloverhours100");

                    b.Property<double?>("totaloverhours50");

                    b.Property<double>("totalregularhours");

                    b.Property<string>("weektype");

                    b.HasKey("Id");

                    b.ToTable("HourRegistrations_Ongoing");
                });

            modelBuilder.Entity("MainOps.Models.HourSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<double>("day01");

                    b.Property<double>("day02");

                    b.Property<double>("day03");

                    b.Property<double>("day04");

                    b.Property<double>("day05");

                    b.Property<double>("day06");

                    b.Property<double>("day07");

                    b.Property<double>("day08");

                    b.Property<double>("day09");

                    b.Property<double>("day10");

                    b.Property<double>("day11");

                    b.Property<double>("day12");

                    b.Property<double>("day13");

                    b.Property<double>("day14");

                    b.HasKey("Id");

                    b.ToTable("HourSchedules");
                });

            modelBuilder.Entity("MainOps.Models.InformationEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateEntered");

                    b.Property<int>("DivisionId");

                    b.Property<string>("DoneBy");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("InformationEntries");
                });

            modelBuilder.Entity("MainOps.Models.Install", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Amount");

                    b.Property<DateTime?>("DeinstallDate");

                    b.Property<string>("DoneBy");

                    b.Property<DateTime?>("EnteredIntoDataBase");

                    b.Property<string>("Install_Text");

                    b.Property<bool>("IsInOperation");

                    b.Property<int>("ItemTypeId");

                    b.Property<DateTime?>("LastEditedInDataBase");

                    b.Property<double>("Latitude");

                    b.Property<string>("Location");

                    b.Property<double>("Longitude");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("SubProjectId");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<string>("UniqueID");

                    b.Property<bool>("isInstalled");

                    b.HasKey("Id");

                    b.HasIndex("ItemTypeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubProjectId");

                    b.ToTable("Installations");
                });

            modelBuilder.Entity("MainOps.Models.InstallOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("InstallId");

                    b.Property<DateTime>("Started");

                    b.Property<DateTime?>("Stopped");

                    b.HasKey("Id");

                    b.HasIndex("InstallId");

                    b.ToTable("InstallOperations");
                });

            modelBuilder.Entity("MainOps.Models.ItemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("BoQnr");

                    b.Property<decimal?>("BoQnr_Rental");

                    b.Property<int?>("Install_UnitId");

                    b.Property<string>("Item_Type");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("Rental_UnitId");

                    b.Property<int?>("ReportTypeId");

                    b.Property<string>("Valuta");

                    b.Property<decimal?>("daily_cost");

                    b.Property<decimal?>("initial_cost");

                    b.Property<decimal?>("price");

                    b.Property<decimal?>("rental_price");

                    b.HasKey("Id");

                    b.HasIndex("Install_UnitId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Rental_UnitId");

                    b.HasIndex("ReportTypeId");

                    b.ToTable("ItemTypes");
                });

            modelBuilder.Entity("MainOps.Models.Layer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LayerType");

                    b.HasKey("Id");

                    b.ToTable("Layers");
                });

            modelBuilder.Entity("MainOps.Models.LayerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("LayerId");

                    b.Property<int>("LayerNumber");

                    b.Property<decimal>("Percent");

                    b.Property<int?>("WellDrillingInstructionId");

                    b.HasKey("Id");

                    b.HasIndex("LayerId");

                    b.HasIndex("WellDrillingInstructionId");

                    b.ToTable("LayerTypes");
                });

            modelBuilder.Entity("MainOps.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("PhotoPath");

                    b.Property<string>("TheUser");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<int?>("TrackItemId");

                    b.HasKey("Id");

                    b.HasIndex("TrackItemId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("MainOps.Models.Log2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int?>("ItemTypeId");

                    b.Property<string>("PhotoPath");

                    b.Property<string>("TheUser");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("ItemTypeId");

                    b.ToTable("Log2s");
                });

            modelBuilder.Entity("MainOps.Models.Logger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DivisionId");

                    b.Property<int>("LoggerNo");

                    b.Property<string>("SerialNo");

                    b.Property<string>("SimCardNo");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("Loggers");
                });

            modelBuilder.Entity("MainOps.Models.LoggerChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("LoggerAdded");

                    b.Property<int>("LoggerId");

                    b.Property<bool>("LoggerRemoved");

                    b.Property<int>("MeasPointId");

                    b.Property<DateTime>("When");

                    b.HasKey("Id");

                    b.HasIndex("LoggerId");

                    b.HasIndex("MeasPointId");

                    b.ToTable("LoggerChanges");
                });

            modelBuilder.Entity("MainOps.Models.Maintenance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DoneBy");

                    b.Property<DateTime>("EnteredIntoDataBase");

                    b.Property<int?>("HJItemId");

                    b.Property<TimeSpan>("HoursSpent");

                    b.Property<int?>("InstallId");

                    b.Property<double?>("Latitude");

                    b.Property<string>("LogText");

                    b.Property<double?>("Longitude");

                    b.Property<string>("MaintenancePoint");

                    b.Property<int?>("MeasPointId");

                    b.Property<int?>("ProjectId");

                    b.Property<string>("Signature")
                        .IsRequired();

                    b.Property<int?>("SubProjectId");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("HJItemId");

                    b.HasIndex("InstallId");

                    b.HasIndex("MeasPointId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubProjectId");

                    b.ToTable("Maintenances");
                });

            modelBuilder.Entity("MainOps.Models.MaintenanceEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("MaintenanceId");

                    b.Property<int?>("MaintenanceSubTypeId");

                    b.Property<int?>("MaintenanceTypeId");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceId");

                    b.HasIndex("MaintenanceSubTypeId");

                    b.HasIndex("MaintenanceTypeId");

                    b.ToTable("MaintenanceEntries");
                });

            modelBuilder.Entity("MainOps.Models.MaintenanceSubType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("MaintenanceTypeId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceTypeId");

                    b.ToTable("MaintenanceSubTypes");
                });

            modelBuilder.Entity("MainOps.Models.MaintenanceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("MaintenanceTypes");
                });

            modelBuilder.Entity("MainOps.Models.Meas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CommentId");

                    b.Property<string>("DoneBy");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<int?>("MeasPointId");

                    b.Property<string>("NewComment");

                    b.Property<double?>("TheMeasurement");

                    b.Property<DateTime>("When");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("MeasPointId");

                    b.ToTable("Measures");
                });

            modelBuilder.Entity("MainOps.Models.MeasPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Coordx");

                    b.Property<double>("Coordy");

                    b.Property<double>("Coordz");

                    b.Property<string>("DGUnr");

                    b.Property<string>("Description");

                    b.Property<double?>("Flow_Lower_Lower_Limit");

                    b.Property<double?>("Flow_Middle_Lower_Limit");

                    b.Property<double?>("Flow_Middle_Upper_Limit");

                    b.Property<double?>("Flow_Upper_Upper_Limit");

                    b.Property<int>("LaborId");

                    b.Property<double?>("Lati");

                    b.Property<bool>("LoggerActive");

                    b.Property<int?>("LoggerId");

                    b.Property<double?>("Longi");

                    b.Property<double?>("Lower_Lower_Limit");

                    b.Property<int?>("MeasTypeId");

                    b.Property<double?>("Middle_Lower_Limit");

                    b.Property<double?>("Middle_Upper_Limit");

                    b.Property<int?>("MonitorTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<double>("Offset");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("ScadaAddress");

                    b.Property<int?>("SubProjectId");

                    b.Property<bool>("ToBeHidden");

                    b.Property<double?>("Upper_Upper_Limit");

                    b.HasKey("Id");

                    b.HasIndex("LoggerId");

                    b.HasIndex("MeasTypeId");

                    b.HasIndex("MonitorTypeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubProjectId");

                    b.ToTable("MeasPoints");
                });

            modelBuilder.Entity("MainOps.Models.MeasType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DivisionId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("MeasTypes");
                });

            modelBuilder.Entity("MainOps.Models.Mobilize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Amount");

                    b.Property<string>("DoneBy");

                    b.Property<DateTime?>("EnteredIntoDataBase");

                    b.Property<int>("ItemTypeId");

                    b.Property<DateTime?>("LastEditedInDataBase");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("MobilizeText_Text");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("SubProjectId");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("ItemTypeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubProjectId");

                    b.ToTable("Mobilisations");
                });

            modelBuilder.Entity("MainOps.Models.MonitorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DivisionId");

                    b.Property<string>("MonitorTypeName");

                    b.Property<int>("alertfrequency");

                    b.Property<int>("frequency");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("MonitorType");
                });

            modelBuilder.Entity("MainOps.Models.Offset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MeasPointId");

                    b.Property<double>("offset");

                    b.Property<DateTime>("starttime");

                    b.HasKey("Id");

                    b.HasIndex("MeasPointId");

                    b.ToTable("Offsets");
                });

            modelBuilder.Entity("MainOps.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("PayDate");

                    b.Property<string>("PaymentID");

                    b.Property<int>("ProjectId");

                    b.Property<int?>("SubProjectId");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubProjectId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("MainOps.Models.PhotoError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Path");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<int>("TrackItemId");

                    b.HasKey("Id");

                    b.HasIndex("TrackItemId");

                    b.ToTable("PhotoError");
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileAlarmCall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AlarmCallId");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Path");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("AlarmCallId");

                    b.ToTable("PhotoFilesAlarmCall");
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileArrival", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ArrivalId");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Path");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("ArrivalId");

                    b.ToTable("PhotoFilesArrivals");
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileConstructionSiteInspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConstructionSiteInspectionId");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<string>("Path");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("ConstructionSiteInspectionId");

                    b.ToTable("PhotoFilesConstructionSiteInspection");
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileDataLoggerInstall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DataLoggerInstallId");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Path");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("DataLoggerInstallId");

                    b.ToTable("DataLogggerInstallPhotos");
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileDecommission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DecommissionId");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<string>("Path");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("DecommissionId");

                    b.ToTable("PhotoFilesDecommission");
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileDeinstalled", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DeinstallId");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Path");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("DeinstallId");

                    b.ToTable("PhotoFilesDeInstalls");
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("FeedbackId");

                    b.Property<string>("path");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId");

                    b.ToTable("FeedbackPhotos");
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileGeneratorCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GeneratorCheckId");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<string>("Path");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("GeneratorCheckId");

                    b.ToTable("PhotoFilesGeneratorCheck");
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileHorizontalDrainTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("HorizontalDrainTestId");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Path");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("HorizontalDrainTestId");

                    b.ToTable("PhotoFileHorizontalDrainTests");
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileInstalled", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Path");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<int>("TrackItemId");

                    b.HasKey("Id");

                    b.HasIndex("TrackItemId");

                    b.ToTable("PhotoFileInstalled");
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileInstalled2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("InstallId");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Path");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("InstallId");

                    b.ToTable("PhotoFilesInstalls");
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileMaintenance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<int>("MaintenanceId");

                    b.Property<string>("Path");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceId");

                    b.ToTable("PhotoFilesMaintenance");
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileMobilized", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<int>("MobilizeId");

                    b.Property<string>("Path");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("MobilizeId");

                    b.ToTable("PhotoFilesMobilizations");
                });

            modelBuilder.Entity("MainOps.Models.PhotoFilePack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Path");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<int>("TrackItemId");

                    b.HasKey("Id");

                    b.HasIndex("TrackItemId");

                    b.ToTable("PhotoFilePack");
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileReceived", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Path");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<int>("TrackItemId");

                    b.HasKey("Id");

                    b.HasIndex("TrackItemId");

                    b.ToTable("PhotoFileReceived");
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileSensorsCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<string>("Path");

                    b.Property<int>("SensorsCheckId");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("SensorsCheckId");

                    b.ToTable("PhotoFilesSensorsCheck");
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileSent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Path");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<int>("TrackItemId");

                    b.HasKey("Id");

                    b.HasIndex("TrackItemId");

                    b.ToTable("PhotoFileSent");
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileSiteCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<string>("Path");

                    b.Property<int>("SiteCheckId");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("SiteCheckId");

                    b.ToTable("PhotoFilesSiteCheck");
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileWorkItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("WorkItemId");

                    b.Property<string>("path");

                    b.HasKey("Id");

                    b.HasIndex("WorkItemId");

                    b.ToTable("WorkItemPhotos");
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileWTPCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<string>("Path");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<int>("WTPCheckId");

                    b.HasKey("Id");

                    b.HasIndex("WTPCheckId");

                    b.ToTable("PhotoFilesWTPCheck");
                });

            modelBuilder.Entity("MainOps.Models.PipeCut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Cut_Or_Extended");

                    b.Property<string>("DoneBy");

                    b.Property<int?>("MeasPointId");

                    b.Property<double>("Meters_Cut");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("MeasPointId");

                    b.ToTable("PipeCuts");
                });

            modelBuilder.Entity("MainOps.Models.PipeCutPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Path");

                    b.Property<int>("PipeCutId");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("PipeCutId");

                    b.ToTable("PipeCutPhotos");
                });

            modelBuilder.Entity("MainOps.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<string>("Client")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ClientEmail");

                    b.Property<int?>("CoordSystemId");

                    b.Property<int>("DivisionId");

                    b.Property<bool>("ImplementBreakTime");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ProjectNr")
                        .IsRequired();

                    b.Property<string>("Responsible_Person");

                    b.HasKey("Id");

                    b.HasIndex("CoordSystemId");

                    b.HasIndex("DivisionId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("MainOps.Models.ProjectCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.ToTable("ProjectCategories");
                });

            modelBuilder.Entity("MainOps.Models.ProjectStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<string>("ContractName");

                    b.Property<string>("Currency");

                    b.Property<DateTime?>("DateGiven");

                    b.Property<DateTime>("DateReceived");

                    b.Property<int?>("DivisionId");

                    b.Property<double>("InstallationValue");

                    b.Property<int>("ProjectCategoryId");

                    b.Property<string>("QuoteNumber");

                    b.Property<DateTime?>("RequestedReturnDate");

                    b.Property<bool>("ReturnedOnTime");

                    b.Property<int?>("StatusDescriptionId");

                    b.Property<string>("Technique");

                    b.Property<string>("TenderResponisble");

                    b.Property<double>("TotalContractValue");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.HasIndex("ProjectCategoryId");

                    b.HasIndex("StatusDescriptionId");

                    b.ToTable("ProjectStatuses");
                });

            modelBuilder.Entity("MainOps.Models.ProjectUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("projectId");

                    b.Property<string>("userId");

                    b.HasKey("Id");

                    b.HasIndex("projectId");

                    b.ToTable("ProjectUsers");
                });

            modelBuilder.Entity("MainOps.Models.PumpActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("End_activity");

                    b.Property<int>("MeasPointId");

                    b.Property<DateTime>("Start_activity");

                    b.HasKey("Id");

                    b.HasIndex("MeasPointId");

                    b.ToTable("PumpActivities");
                });

            modelBuilder.Entity("MainOps.Models.PumpTestData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<double?>("Dip");

                    b.Property<double?>("Flow");

                    b.Property<int>("ThreeStepTestId");

                    b.Property<TimeSpan>("TimeStamp");

                    b.Property<double?>("m3");

                    b.HasKey("Id");

                    b.HasIndex("ThreeStepTestId");

                    b.ToTable("PumpTestDatas");
                });

            modelBuilder.Entity("MainOps.Models.PumpTestDataDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("FlowData");

                    b.Property<double?>("Moni1LevelData");

                    b.Property<double?>("Moni2LevelData");

                    b.Property<double?>("PumpLevelData");

                    b.Property<int?>("ThreeStepTestId");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("ThreeStepTestId");

                    b.ToTable("PumpTestDatasDevice");
                });

            modelBuilder.Entity("MainOps.Models.PumpTesting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllCableSubmerged");

                    b.Property<bool>("CableDamaged");

                    b.Property<bool>("CableExtended");

                    b.Property<double>("CableExtendedm");

                    b.Property<double>("CableLength");

                    b.Property<bool>("CanBeFixed");

                    b.Property<bool>("CompleteExchange");

                    b.Property<string>("DoneBy");

                    b.Property<bool>("InsulationOK");

                    b.Property<bool>("InsulationTested");

                    b.Property<string>("PumpID")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("PumpType")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Signature");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<string>("WhichCableDamaged");

                    b.HasKey("Id");

                    b.ToTable("PumpTestings");
                });

            modelBuilder.Entity("MainOps.Models.PumptestingData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Duration");

                    b.Property<double?>("Flow");

                    b.Property<double?>("Pressure");

                    b.Property<int?>("PumpTestingId");

                    b.HasKey("Id");

                    b.HasIndex("PumpTestingId");

                    b.ToTable("PumptestingDatas");
                });

            modelBuilder.Entity("MainOps.Models.PumptestingPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("PumptestingId");

                    b.Property<string>("path");

                    b.HasKey("Id");

                    b.HasIndex("PumptestingId");

                    b.ToTable("PumptestingPhoto");
                });

            modelBuilder.Entity("MainOps.Models.PumpTestPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Path");

                    b.Property<int>("ThreeStepTestId");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("ThreeStepTestId");

                    b.ToTable("PumpTestPhotos");
                });

            modelBuilder.Entity("MainOps.Models.ReportClasses.AccidentReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AccidentWithAbsence");

                    b.Property<bool>("AccidentWithoutAbsence");

                    b.Property<bool>("CauseForChangeInAPV");

                    b.Property<string>("DoneBy");

                    b.Property<bool>("EnvironmentAccident");

                    b.Property<string>("HJSubContractor");

                    b.Property<string>("HowCouldItHappen");

                    b.Property<string>("InjuctionProhibition");

                    b.Property<bool>("IsOfferedLightJob");

                    b.Property<string>("NameOfInjured");

                    b.Property<string>("NameofWitnesses");

                    b.Property<bool>("NearMiss");

                    b.Property<bool>("Other");

                    b.Property<int>("ProjectId");

                    b.Property<int>("SafetyProblemId");

                    b.Property<DateTime>("StartLightJob");

                    b.Property<bool>("WasSafetyProcessInOrder");

                    b.Property<string>("WhatCanBeLearned");

                    b.Property<string>("WhatCausedAccident");

                    b.Property<string>("WhatHappened");

                    b.Property<string>("WhatInjury");

                    b.Property<string>("WhatIsDoneToPrevent");

                    b.Property<string>("WhatLightJob");

                    b.Property<string>("WhatWasDoneToFix");

                    b.Property<string>("WhereAndWhen");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SafetyProblemId");

                    b.ToTable("AccidentReports");
                });

            modelBuilder.Entity("MainOps.Models.ReportClasses.Daily_Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DoneBy");

                    b.Property<TimeSpan>("EndHour");

                    b.Property<string>("Extra_Works");

                    b.Property<string>("Machinery");

                    b.Property<int?>("MeasPointId");

                    b.Property<int>("ProjectId");

                    b.Property<DateTime>("Report_Date");

                    b.Property<TimeSpan>("StartHour");

                    b.Property<bool>("WasAlarmCall");

                    b.Property<string>("Work_Performed");

                    b.Property<string>("short_Description");

                    b.HasKey("Id");

                    b.HasIndex("MeasPointId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Daily_Reports");
                });

            modelBuilder.Entity("MainOps.Models.ReportClasses.Daily_Report_2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<string>("Checked_By");

                    b.Property<string>("DoneBy");

                    b.Property<TimeSpan>("EndHour");

                    b.Property<DateTime?>("EnteredIntoDataBase");

                    b.Property<string>("Extra_Works");

                    b.Property<DateTime?>("LastEditedInDataBase");

                    b.Property<string>("Machinery");

                    b.Property<string>("OtherPeople");

                    b.Property<int>("ProjectId");

                    b.Property<bool>("Report_Checked");

                    b.Property<DateTime>("Report_Date");

                    b.Property<TimeSpan?>("SafetyHours");

                    b.Property<string>("Signature");

                    b.Property<TimeSpan?>("StandingTime");

                    b.Property<TimeSpan>("StartHour");

                    b.Property<int?>("SubProjectId");

                    b.Property<int>("TitleId");

                    b.Property<string>("Work_Performed")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("short_Description");

                    b.Property<int?>("tobepaid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubProjectId");

                    b.HasIndex("TitleId");

                    b.ToTable("Daily_Report_2s");
                });

            modelBuilder.Entity("MainOps.Models.ReportClasses.Daily_Report_2_temp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Amount");

                    b.Property<string>("DoneBy");

                    b.Property<TimeSpan>("EndHour");

                    b.Property<string>("Extra_Works");

                    b.Property<string>("Machinery");

                    b.Property<string>("OtherPeople");

                    b.Property<int?>("ProjectId");

                    b.Property<DateTime?>("Report_Date");

                    b.Property<TimeSpan?>("SafetyHours");

                    b.Property<TimeSpan?>("StandingTime");

                    b.Property<TimeSpan>("StartHour");

                    b.Property<int?>("SubProjectId");

                    b.Property<int?>("TitleId");

                    b.Property<string>("Work_Performed");

                    b.Property<string>("short_Description");

                    b.Property<int?>("tobepaid");

                    b.HasKey("Id");

                    b.ToTable("Daily_Reports_Ongoing");
                });

            modelBuilder.Entity("MainOps.Models.ReportClasses.Generator_Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Battery_level");

                    b.Property<bool>("Battery_status");

                    b.Property<bool>("Cooling_check");

                    b.Property<bool>("Cut_power_supply_during_test");

                    b.Property<DateTime>("Date_Done");

                    b.Property<double>("Fuel_level");

                    b.Property<bool>("Fuel_level_check");

                    b.Property<bool>("Generator_Run_1_Hour");

                    b.Property<string>("HD_Equipment_Id");

                    b.Property<bool>("Heating_check");

                    b.Property<double>("Hours_of_Operation");

                    b.Property<bool>("Load_current_fully_overtaken");

                    b.Property<string>("Location");

                    b.Property<string>("Manufacturer");

                    b.Property<string>("Name");

                    b.Property<bool>("Oil_level_check");

                    b.Property<int?>("ProjectId");

                    b.Property<string>("Site_Manager_Name");

                    b.Property<string>("Special_events");

                    b.Property<bool>("Switching_off_generator_ok");

                    b.Property<bool>("Time_delayed_starting_of_pumps");

                    b.Property<string>("Type");

                    b.Property<bool>("received_alarm");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Generator_Test");
                });

            modelBuilder.Entity("MainOps.Models.ReportClasses.KSType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("name");

                    b.HasKey("Id");

                    b.ToTable("KSTypes");
                });

            modelBuilder.Entity("MainOps.Models.ReportClasses.Machinery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MachineryName");

                    b.HasKey("Id");

                    b.ToTable("Machinery");
                });

            modelBuilder.Entity("MainOps.Models.ReportClasses.Pump_Commission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Amps");

                    b.Property<double?>("Amps_actual");

                    b.Property<bool>("Amps_pass");

                    b.Property<double?>("Amps_restart");

                    b.Property<double?>("Amps_restart_actual");

                    b.Property<bool>("Amps_restart_pass");

                    b.Property<string>("CustomerName");

                    b.Property<DateTime>("Date_Done");

                    b.Property<string>("HD_ProjectNr");

                    b.Property<string>("Name");

                    b.Property<string>("Notes")
                        .HasMaxLength(512);

                    b.Property<double?>("Pressure");

                    b.Property<double?>("Pressure_actual");

                    b.Property<bool>("Pressure_pass");

                    b.Property<int>("ProjectId");

                    b.Property<string>("ProjectLocation");

                    b.Property<string>("RevisionReason");

                    b.Property<string>("Scetch_path");

                    b.Property<TimeSpan?>("Time_Delay");

                    b.Property<TimeSpan?>("Time_Delay_actual");

                    b.Property<bool>("Time_Delay_pass");

                    b.Property<string>("VersionNr");

                    b.Property<double?>("WL_Pump_Restart");

                    b.Property<double?>("WL_Pump_Restart_actual");

                    b.Property<bool>("WL_Pump_Restart_pass");

                    b.Property<double?>("WL_Pump_Stop");

                    b.Property<double?>("WL_Pump_Stop_actual");

                    b.Property<bool>("WL_Pump_Stop_pass");

                    b.Property<double?>("WL_stable");

                    b.Property<double?>("WL_stable_actual");

                    b.Property<bool>("WL_stable_pass");

                    b.Property<string>("WellName");

                    b.Property<string>("colour");

                    b.Property<string>("colour_actual");

                    b.Property<bool>("colour_pass");

                    b.Property<string>("imhoff");

                    b.Property<string>("imhoff_actual");

                    b.Property<bool>("imhoff_pass");

                    b.Property<double?>("resting_water_level");

                    b.Property<double?>("resting_water_level_actual");

                    b.Property<bool>("resting_water_level_pass");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Pump_Commissions");
                });

            modelBuilder.Entity("MainOps.Models.ReportClasses.Pump_Installation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Base_depth");

                    b.Property<double?>("Base_depth_actual");

                    b.Property<bool>("Base_depth_pass");

                    b.Property<string>("CustomerName");

                    b.Property<DateTime>("Date_Done");

                    b.Property<string>("Fitted");

                    b.Property<string>("Fitted_actual");

                    b.Property<bool>("Fitted_pass");

                    b.Property<string>("HD_ProjectNr");

                    b.Property<string>("Name");

                    b.Property<string>("Notes")
                        .HasMaxLength(512);

                    b.Property<int>("ProjectId");

                    b.Property<string>("ProjectLocation");

                    b.Property<string>("Pump");

                    b.Property<string>("Pump_actual");

                    b.Property<bool>("Pump_pass");

                    b.Property<string>("RevisionReason");

                    b.Property<string>("Scetch_path");

                    b.Property<string>("VersionNr");

                    b.Property<string>("WellName");

                    b.Property<string>("clearing");

                    b.Property<string>("clearing_actual");

                    b.Property<bool>("clearing_pass");

                    b.Property<string>("colour");

                    b.Property<string>("colour_actual");

                    b.Property<bool>("colour_pass");

                    b.Property<string>("dip_tube");

                    b.Property<string>("dip_tube_actual");

                    b.Property<bool>("dip_tube_pass");

                    b.Property<string>("imhoff");

                    b.Property<string>("imhoff_actual");

                    b.Property<bool>("imhoff_pass");

                    b.Property<double?>("install_depth");

                    b.Property<double?>("install_depth_actual");

                    b.Property<bool>("install_depth_pass");

                    b.Property<double?>("resting_water_level");

                    b.Property<double?>("resting_water_level_actual");

                    b.Property<bool>("resting_water_level_pass");

                    b.Property<string>("rotation");

                    b.Property<string>("rotation_actual");

                    b.Property<bool>("rotation_pass");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Pump_Installations");
                });

            modelBuilder.Entity("MainOps.Models.ReportClasses.Well_Development", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Base_depth_after");

                    b.Property<double?>("Base_depth_before");

                    b.Property<bool>("Base_depth_pass");

                    b.Property<string>("Colour_after");

                    b.Property<string>("Colour_before");

                    b.Property<bool>("Colour_pass");

                    b.Property<string>("CustomerName");

                    b.Property<DateTime>("Date_Done");

                    b.Property<TimeSpan>("Duration");

                    b.Property<string>("HD_ProjectNr");

                    b.Property<string>("Name");

                    b.Property<string>("Notes")
                        .HasMaxLength(512);

                    b.Property<int>("ProjectId");

                    b.Property<string>("ProjectLocation");

                    b.Property<string>("RevisionReason");

                    b.Property<string>("Scetch_path");

                    b.Property<string>("Test_result_after");

                    b.Property<string>("Test_result_before");

                    b.Property<bool>("Test_result_pass");

                    b.Property<string>("VersionNr");

                    b.Property<string>("WellName");

                    b.Property<bool>("Well_clearing_after");

                    b.Property<bool>("Well_clearing_before");

                    b.Property<bool>("Well_clearing_pass");

                    b.Property<string>("method");

                    b.Property<double?>("resting_water_level_after");

                    b.Property<double?>("resting_water_level_before");

                    b.Property<bool>("resting_water_level_pass");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Well_Developments");
                });

            modelBuilder.Entity("MainOps.Models.ReportClasses.Well_Drilling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Base_depth");

                    b.Property<double?>("Base_depth_actual");

                    b.Property<bool>("Base_depth_pass");

                    b.Property<int?>("Bentonite_Pellet_Bags");

                    b.Property<int?>("Bentonite_Pellet_Bags_actual");

                    b.Property<double?>("Casing_length");

                    b.Property<double?>("Casing_length_actual");

                    b.Property<bool>("Casing_length_pass");

                    b.Property<string>("Change_Notes")
                        .HasMaxLength(1024);

                    b.Property<string>("CustomerName");

                    b.Property<DateTime>("Date_Done");

                    b.Property<string>("Drill_Casing");

                    b.Property<double?>("Drill_Casing_size");

                    b.Property<string>("Drill_Fluid");

                    b.Property<string>("Drill_Info");

                    b.Property<string>("Drill_Method");

                    b.Property<string>("Drill_Method_actual");

                    b.Property<bool>("Drill_Method_pass");

                    b.Property<double?>("Filter_Pack");

                    b.Property<double?>("Filter_Pack_End");

                    b.Property<double?>("Filter_Pack_Start");

                    b.Property<bool>("Filter_Pack_pass");

                    b.Property<int?>("Filter_Sand_Bags");

                    b.Property<int?>("Filter_Sand_Bags_actual");

                    b.Property<string>("Ground_Notes")
                        .HasMaxLength(1024);

                    b.Property<string>("HD_ProjectNr");

                    b.Property<string>("Name");

                    b.Property<string>("Notes")
                        .HasMaxLength(1024);

                    b.Property<int>("ProjectId");

                    b.Property<string>("ProjectLocation");

                    b.Property<string>("RevisionReason");

                    b.Property<string>("Scetch_path");

                    b.Property<TimeSpan>("Standing_Time");

                    b.Property<string>("Standing_Time_Notes")
                        .HasMaxLength(1024);

                    b.Property<string>("VersionNr");

                    b.Property<string>("WL_End_Notes")
                        .HasMaxLength(1024);

                    b.Property<string>("WL_Notes")
                        .HasMaxLength(1024);

                    b.Property<string>("WL_Start_Notes")
                        .HasMaxLength(1024);

                    b.Property<string>("WellName");

                    b.Property<bool>("coord_pass");

                    b.Property<double?>("resting_water_level");

                    b.Property<double?>("resting_water_level_actual");

                    b.Property<bool>("resting_water_level_pass");

                    b.Property<double?>("x_coord");

                    b.Property<double?>("x_coord_actual");

                    b.Property<double?>("y_coord");

                    b.Property<double?>("y_coord_actual");

                    b.Property<double?>("z_coord");

                    b.Property<double?>("z_coord_actual");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Well_Drillings");
                });

            modelBuilder.Entity("MainOps.Models.ReportClasses.Well_Installation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Base_depth");

                    b.Property<double?>("Base_depth_actual");

                    b.Property<bool>("Base_depth_pass");

                    b.Property<string>("CustomerName");

                    b.Property<DateTime>("Date_Done");

                    b.Property<string>("Drill_Method");

                    b.Property<string>("Drill_Method_actual");

                    b.Property<bool>("Drill_Method_pass");

                    b.Property<string>("HD_ProjectNr");

                    b.Property<string>("Name");

                    b.Property<string>("Notes")
                        .HasMaxLength(512);

                    b.Property<int>("ProjectId");

                    b.Property<string>("ProjectLocation");

                    b.Property<string>("RevisionReason");

                    b.Property<string>("Scetch_path");

                    b.Property<string>("VersionNr");

                    b.Property<string>("WellName");

                    b.Property<bool>("coord_pass");

                    b.Property<double?>("resting_water_level");

                    b.Property<double?>("resting_water_level_actual");

                    b.Property<bool>("resting_water_level_pass");

                    b.Property<double?>("x_coord");

                    b.Property<double?>("x_coord_actual");

                    b.Property<double?>("y_coord");

                    b.Property<double?>("y_coord_actual");

                    b.Property<double?>("z_coord");

                    b.Property<double?>("z_coord_actual");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Well_Installations");
                });

            modelBuilder.Entity("MainOps.Models.ReportClasses.WTP_Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AG1_Check");

                    b.Property<bool>("AG2_Check");

                    b.Property<bool>("AG3_Check");

                    b.Property<bool>("AG_Check");

                    b.Property<string>("AG_Comment");

                    b.Property<bool>("Alarm_Check");

                    b.Property<string>("Alarm_Comment");

                    b.Property<bool>("Calibration_Check");

                    b.Property<string>("Calibration_Comment");

                    b.Property<bool>("Cleaing_Check");

                    b.Property<string>("Cleaing_Comment");

                    b.Property<bool>("Control_Cabinet_Check");

                    b.Property<string>("Control_Cabinet_Comment");

                    b.Property<string>("Coordination_Description");

                    b.Property<DateTime>("Date_Done");

                    b.Property<bool>("Electrical_Check");

                    b.Property<string>("Electrical_Comment");

                    b.Property<bool>("Exchange_Check");

                    b.Property<string>("Exchange_Comment");

                    b.Property<string>("Executed_Works");

                    b.Property<bool>("F1_Check");

                    b.Property<bool>("F2_Check");

                    b.Property<bool>("F3_Check");

                    b.Property<bool>("F_Check");

                    b.Property<string>("F_Comment");

                    b.Property<bool>("Filters_Check");

                    b.Property<string>("Filters_Comment");

                    b.Property<double>("GACFilter_Amount");

                    b.Property<bool>("GACFilter_Check");

                    b.Property<string>("GACFilter_Comment");

                    b.Property<double?>("Manganese_Inlet");

                    b.Property<double?>("Manganese_outlet");

                    b.Property<bool>("Manifolds_Check");

                    b.Property<string>("Manifolds_Comment");

                    b.Property<string>("Name");

                    b.Property<bool>("Organoleptic_Check");

                    b.Property<string>("Organoleptic_Comment");

                    b.Property<bool>("Power_Check");

                    b.Property<string>("Power_Comment");

                    b.Property<int?>("ProjectId");

                    b.Property<double?>("S1_Check");

                    b.Property<bool>("S1_Check_1");

                    b.Property<string>("S1_Comment");

                    b.Property<double?>("S2_Check");

                    b.Property<bool>("S2_Check_2");

                    b.Property<string>("S2_Comment");

                    b.Property<double?>("S3_Check");

                    b.Property<bool>("S3_Check_3");

                    b.Property<string>("S3_Comment");

                    b.Property<bool>("Sample_Check");

                    b.Property<string>("Sample_Comment");

                    b.Property<double>("SandFilter_Amount");

                    b.Property<bool>("SandFilter_Check");

                    b.Property<string>("SandFilter_Comment");

                    b.Property<string>("Unusual_Event");

                    b.Property<bool>("Valves_Check");

                    b.Property<string>("Valves_Comment");

                    b.Property<bool>("Visual_Check");

                    b.Property<string>("Visual_Comment");

                    b.Property<bool>("Water_Levels_Check");

                    b.Property<string>("Water_Levels_Comment");

                    b.Property<double?>("pH_Inlet");

                    b.Property<double?>("pH_outlet");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("WTP_Tests");
                });

            modelBuilder.Entity("MainOps.Models.ReportType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("ReportTypes");
                });

            modelBuilder.Entity("MainOps.Models.RowHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("AddOns");

                    b.Property<double?>("AddOns_Amount");

                    b.Property<double?>("Driving_Money_Amount");

                    b.Property<int?>("Driving_Money_Days");

                    b.Property<bool>("Edited");

                    b.Property<int?>("HourRegistrationId");

                    b.Property<string>("Others");

                    b.Property<double?>("OverHours_100");

                    b.Property<double?>("OverHours_50");

                    b.Property<int?>("ProjectId");

                    b.Property<double?>("Skur_penge");

                    b.Property<double?>("day1");

                    b.Property<double?>("day10");

                    b.Property<double?>("day10_Alarm");

                    b.Property<string>("day10_Type");

                    b.Property<double?>("day11");

                    b.Property<double?>("day11_Alarm");

                    b.Property<string>("day11_Type");

                    b.Property<double?>("day12");

                    b.Property<double?>("day12_Alarm");

                    b.Property<string>("day12_Type");

                    b.Property<double?>("day13");

                    b.Property<double?>("day1314_Alarm");

                    b.Property<double?>("day13_Alarm");

                    b.Property<string>("day13_Type");

                    b.Property<double?>("day14");

                    b.Property<double?>("day14_Alarm");

                    b.Property<string>("day14_Type");

                    b.Property<double?>("day1_Alarm");

                    b.Property<string>("day1_Type");

                    b.Property<double?>("day2");

                    b.Property<double?>("day2_Alarm");

                    b.Property<string>("day2_Type");

                    b.Property<double?>("day3");

                    b.Property<double?>("day3_Alarm");

                    b.Property<string>("day3_Type");

                    b.Property<double?>("day4");

                    b.Property<double?>("day4_Alarm");

                    b.Property<string>("day4_Type");

                    b.Property<double?>("day5");

                    b.Property<double?>("day5_Alarm");

                    b.Property<string>("day5_Type");

                    b.Property<double?>("day6");

                    b.Property<double?>("day6_Alarm");

                    b.Property<string>("day6_Type");

                    b.Property<double?>("day7");

                    b.Property<double?>("day7_Alarm");

                    b.Property<string>("day7_Type");

                    b.Property<double?>("day8");

                    b.Property<double?>("day8_Alarm");

                    b.Property<string>("day8_Type");

                    b.Property<double?>("day9");

                    b.Property<double?>("day9_Alarm");

                    b.Property<string>("day9_Type");

                    b.HasKey("Id");

                    b.HasIndex("HourRegistrationId");

                    b.HasIndex("ProjectId");

                    b.ToTable("RowHours");
                });

            modelBuilder.Entity("MainOps.Models.RowHours_Ongoing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("AddOns");

                    b.Property<double?>("AddOns_Amount");

                    b.Property<double?>("Driving_Money_Amount");

                    b.Property<int?>("Driving_Money_Days");

                    b.Property<bool>("Edited");

                    b.Property<int?>("HourRegistration_OngoingId");

                    b.Property<string>("Others");

                    b.Property<double?>("OverHours_100");

                    b.Property<double?>("OverHours_50");

                    b.Property<int?>("ProjectId");

                    b.Property<double?>("Skur_penge");

                    b.Property<double?>("day1");

                    b.Property<double?>("day10");

                    b.Property<double?>("day10_Alarm");

                    b.Property<string>("day10_Type");

                    b.Property<double?>("day11");

                    b.Property<double?>("day11_Alarm");

                    b.Property<string>("day11_Type");

                    b.Property<double?>("day12");

                    b.Property<double?>("day12_Alarm");

                    b.Property<string>("day12_Type");

                    b.Property<double?>("day13");

                    b.Property<double?>("day1314_Alarm");

                    b.Property<double?>("day13_Alarm");

                    b.Property<string>("day13_Type");

                    b.Property<double?>("day14");

                    b.Property<double?>("day14_Alarm");

                    b.Property<string>("day14_Type");

                    b.Property<double?>("day1_Alarm");

                    b.Property<string>("day1_Type");

                    b.Property<double?>("day2");

                    b.Property<double?>("day2_Alarm");

                    b.Property<string>("day2_Type");

                    b.Property<double?>("day3");

                    b.Property<double?>("day3_Alarm");

                    b.Property<string>("day3_Type");

                    b.Property<double?>("day4");

                    b.Property<double?>("day4_Alarm");

                    b.Property<string>("day4_Type");

                    b.Property<double?>("day5");

                    b.Property<double?>("day5_Alarm");

                    b.Property<string>("day5_Type");

                    b.Property<double?>("day6");

                    b.Property<double?>("day6_Alarm");

                    b.Property<string>("day6_Type");

                    b.Property<double?>("day7");

                    b.Property<double?>("day7_Alarm");

                    b.Property<string>("day7_Type");

                    b.Property<double?>("day8");

                    b.Property<double?>("day8_Alarm");

                    b.Property<string>("day8_Type");

                    b.Property<double?>("day9");

                    b.Property<double?>("day9_Alarm");

                    b.Property<string>("day9_Type");

                    b.HasKey("Id");

                    b.HasIndex("HourRegistration_OngoingId");

                    b.HasIndex("ProjectId");

                    b.ToTable("RowHours_Ongoing");
                });

            modelBuilder.Entity("MainOps.Models.SafetyProblem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DoneBy");

                    b.Property<double>("Latitude");

                    b.Property<string>("LogText");

                    b.Property<double>("Longitude");

                    b.Property<int?>("ProjectId");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<string>("safetyproblemtype");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("SafetyProblems");
                });

            modelBuilder.Entity("MainOps.Models.SensorsCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Closed_Bypass_Valve_Inlet");

                    b.Property<bool>("Closed_Bypass_Valve_Outlet");

                    b.Property<bool>("Conductivity_Cleaned_Inlet");

                    b.Property<bool>("Conductivity_Cleaned_Outlet");

                    b.Property<double?>("Conductivity_SCADA_Inlet");

                    b.Property<double?>("Conductivity_SCADA_Inlet_After");

                    b.Property<double?>("Conductivity_SCADA_Outlet");

                    b.Property<double?>("Conductivity_SCADA_Outlet_After");

                    b.Property<string>("DoneBy");

                    b.Property<DateTime?>("EnteredIntoDataBase");

                    b.Property<string>("GeneralComments");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<bool>("PH_Calibrated_Inlet");

                    b.Property<bool>("PH_Calibrated_Outlet");

                    b.Property<bool>("PH_Cleaned_Inlet");

                    b.Property<bool>("PH_Cleaned_Outlet");

                    b.Property<double?>("PH_SCADA_Inlet");

                    b.Property<double?>("PH_SCADA_Inlet_After");

                    b.Property<double?>("PH_SCADA_Outlet");

                    b.Property<double?>("PH_SCADA_Outlet_After");

                    b.Property<int>("ProjectId");

                    b.Property<string>("Signature");

                    b.Property<int?>("SubProjectId");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<bool>("Turbidity_Cleaned_Inlet");

                    b.Property<bool>("Turbidity_Cleaned_Outlet");

                    b.Property<double?>("Turbidity_SCADA_Inlet");

                    b.Property<double?>("Turbidity_SCADA_Inlet_After");

                    b.Property<double?>("Turbidity_SCADA_Outlet");

                    b.Property<double?>("Turbidity_SCADA_Outlet_After");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubProjectId");

                    b.ToTable("SensorsChecks");
                });

            modelBuilder.Entity("MainOps.Models.SiteCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AreasClear");

                    b.Property<string>("AreasClear_Comment");

                    b.Property<string>("CheckAllLevels");

                    b.Property<string>("CheckAllLevels_Comment");

                    b.Property<string>("DoneBy");

                    b.Property<DateTime?>("EnteredIntoDataBase");

                    b.Property<string>("GeneralComments");

                    b.Property<string>("Insulation");

                    b.Property<string>("Insulation_Comment");

                    b.Property<double?>("Latitude");

                    b.Property<string>("Leakages");

                    b.Property<string>("Leakages_Comment");

                    b.Property<double?>("Longitude");

                    b.Property<int>("ProjectId");

                    b.Property<string>("SCADA_PUMPS_RUNNING");

                    b.Property<string>("SCADA_PUMPS_RUNNING_Comment");

                    b.Property<string>("Signature");

                    b.Property<int?>("SubProjectId");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<string>("Valves");

                    b.Property<string>("Valves_Comment");

                    b.Property<string>("WellDamages");

                    b.Property<string>("WellDamages_Comment");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubProjectId");

                    b.ToTable("SiteChecks");
                });

            modelBuilder.Entity("MainOps.Models.SmallPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ItemTypeId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("ItemTypeId");

                    b.ToTable("SmallParts");
                });

            modelBuilder.Entity("MainOps.Models.StatusDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("Status_No");

                    b.HasKey("Id");

                    b.ToTable("StatusDescriptions");
                });

            modelBuilder.Entity("MainOps.Models.SubProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<string>("ClientContact");

                    b.Property<string>("ClientEmail");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<string>("Name");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("ProtokolId");

                    b.Property<string>("SubProjectNr");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("SubProjects");
                });

            modelBuilder.Entity("MainOps.Models.SummaryReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientEmail")
                        .IsRequired();

                    b.Property<bool>("IsSignedByClient");

                    b.Property<bool>("IsSignedByHJ");

                    b.Property<string>("People");

                    b.Property<int>("ProjectId");

                    b.Property<DateTime>("Report_Date");

                    b.Property<bool>("SentToClient");

                    b.Property<DateTime>("SignatureClientDateTime");

                    b.Property<DateTime>("SignatureHJDateTime");

                    b.Property<string>("TheDailyText");

                    b.Property<string>("signatureClient");

                    b.Property<string>("signatureHJ");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("SummaryReports");
                });

            modelBuilder.Entity("MainOps.Models.TelefonListe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Efternavn")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<string>("ForNavn")
                        .IsRequired();

                    b.Property<string>("Leder");

                    b.Property<string>("Loennr");

                    b.Property<string>("Telefonnr");

                    b.Property<string>("Titel");

                    b.HasKey("Id");

                    b.ToTable("TelefonListen");
                });

            modelBuilder.Entity("MainOps.Models.ThreeStepTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Bottom_well");

                    b.Property<string>("DoneBy");

                    b.Property<TimeSpan?>("Init_Meas_Time");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<int?>("MeasPointId");

                    b.Property<int>("ProjectId");

                    b.Property<double?>("Ref_Level");

                    b.Property<DateTime>("Report_Date");

                    b.Property<int?>("SubProjectId");

                    b.Property<double?>("Water_Meter_After");

                    b.Property<double?>("Water_Meter_Before");

                    b.Property<double?>("Water_level");

                    b.Property<string>("Wellname");

                    b.Property<TimeSpan>("endtime");

                    b.Property<string>("imagepath");

                    b.Property<TimeSpan>("starttime");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubProjectId");

                    b.ToTable("ThreeStepTests");
                });

            modelBuilder.Entity("MainOps.Models.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ItemTypeId");

                    b.Property<int?>("ProjectId");

                    b.Property<string>("TheTitle");

                    b.Property<bool>("Worker");

                    b.HasKey("Id");

                    b.HasIndex("ItemTypeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Titles");
                });

            modelBuilder.Entity("MainOps.Models.ToolBox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<string>("Dangerous_Work");

                    b.Property<bool>("Dangerous_Work_Instructed");

                    b.Property<string>("DoneBy");

                    b.Property<int>("ProjectId");

                    b.Property<DateTime>("Report_Date");

                    b.Property<string>("Safety_Aspects");

                    b.Property<bool>("Safety_Instructed");

                    b.Property<bool>("Work_Instructed");

                    b.Property<string>("Work_Tasks");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ToolBoxes");
                });

            modelBuilder.Entity("MainOps.Models.ToolBoxUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ToolBoxId");

                    b.Property<string>("name");

                    b.Property<string>("signature");

                    b.HasKey("Id");

                    b.HasIndex("ToolBoxId");

                    b.ToTable("ToolBoxUsers");
                });

            modelBuilder.Entity("MainOps.Models.TrackItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Ampere");

                    b.Property<string>("Certificate");

                    b.Property<string>("Comments");

                    b.Property<string>("Dimension");

                    b.Property<string>("EANnr");

                    b.Property<string>("Enterprice");

                    b.Property<string>("HOFOR_Description");

                    b.Property<bool>("Installed");

                    b.Property<bool>("IsError");

                    b.Property<string>("KomBus");

                    b.Property<string>("MeasArea");

                    b.Property<string>("P2_kW");

                    b.Property<string>("PIDnr");

                    b.Property<bool>("Packed");

                    b.Property<string>("Producent");

                    b.Property<int?>("ProjectId");

                    b.Property<string>("RUMnr");

                    b.Property<bool>("Received");

                    b.Property<bool>("Sent");

                    b.Property<string>("Supplier");

                    b.Property<string>("Supply");

                    b.Property<string>("TAGnr");

                    b.Property<string>("Tavle");

                    b.Property<string>("TypeNr");

                    b.Property<string>("TypeNr2");

                    b.Property<string>("Units");

                    b.Property<string>("Volts");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("TrackItems");
                });

            modelBuilder.Entity("MainOps.Models.TruckDailyReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Dato");

                    b.Property<string>("DoneBy");

                    b.HasKey("Id");

                    b.ToTable("TruckDailyReports");
                });

            modelBuilder.Entity("MainOps.Models.TruckSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<TimeSpan>("Hours");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("SubProjectId");

                    b.Property<int?>("TruckDailyReportId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubProjectId");

                    b.HasIndex("TruckDailyReportId");

                    b.ToTable("TruckSites");
                });

            modelBuilder.Entity("MainOps.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("TheUnit");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("MainOps.Models.WaterSampleLimit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Limit");

                    b.Property<double?>("MeanLimit");

                    b.Property<int>("WaterSamplePlaceId");

                    b.Property<int>("WaterSampleTypeId");

                    b.HasKey("Id");

                    b.HasIndex("WaterSamplePlaceId");

                    b.HasIndex("WaterSampleTypeId");

                    b.ToTable("WaterSampleLimits");
                });

            modelBuilder.Entity("MainOps.Models.WaterSampleMeas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Dato");

                    b.Property<int?>("ProjectId");

                    b.Property<int>("WaterSamplePlaceId");

                    b.Property<int?>("WaterSampleTypeId");

                    b.Property<string>("method");

                    b.Property<double>("value");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("WaterSamplePlaceId");

                    b.HasIndex("WaterSampleTypeId");

                    b.ToTable("WaterSampleMeasures");
                });

            modelBuilder.Entity("MainOps.Models.WaterSamplePlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("ProjectId");

                    b.Property<int?>("WaterSamplePlaceTypeId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("WaterSamplePlaceTypeId");

                    b.ToTable("WaterSamplePlaces");
                });

            modelBuilder.Entity("MainOps.Models.WaterSamplePlaceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("WaterSamplePlaceTypes");
                });

            modelBuilder.Entity("MainOps.Models.WaterSampleStandardLimit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Komponent");

                    b.Property<double?>("MaxLimit");

                    b.Property<double?>("MeanLimit");

                    b.Property<int>("WaterSamplePlaceTypeId");

                    b.HasKey("Id");

                    b.HasIndex("WaterSamplePlaceTypeId");

                    b.ToTable("StandardLimits");
                });

            modelBuilder.Entity("MainOps.Models.WaterSampleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("DL");

                    b.Property<string>("Enhed");

                    b.Property<string>("Komponent");

                    b.HasKey("Id");

                    b.ToTable("WaterSampleTypes");
                });

            modelBuilder.Entity("MainOps.Models.Well", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Approved_By");

                    b.Property<DateTime>("Approved_Date");

                    b.Property<string>("Assessed_By");

                    b.Property<DateTime>("Assessed_Date");

                    b.Property<int?>("CoordSystemId");

                    b.Property<double?>("Coord_x");

                    b.Property<double?>("Coord_y");

                    b.Property<double?>("Coord_z");

                    b.Property<string>("DGU_Number");

                    b.Property<int?>("DivisionId");

                    b.Property<string>("Done_By");

                    b.Property<DateTime>("Drill_Date");

                    b.Property<string>("Drill_Method");

                    b.Property<string>("Path_DrillProfile");

                    b.Property<string>("Pipe_1_Description");

                    b.Property<string>("Pipe_2_Description");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("SubProjectId");

                    b.Property<int?>("WellDrillingInstructionId");

                    b.Property<string>("WellName");

                    b.Property<double?>("Well_Depth");

                    b.Property<string>("Well_Type");

                    b.Property<string>("path_DrillLog");

                    b.HasKey("Id");

                    b.HasIndex("CoordSystemId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubProjectId");

                    b.HasIndex("WellDrillingInstructionId");

                    b.ToTable("Wells");
                });

            modelBuilder.Entity("MainOps.Models.WellDrillingInstruction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Aflednignstilladelse_Path");

                    b.Property<bool>("Afledningstilladelse");

                    b.Property<string>("Belaegning");

                    b.Property<bool>("BlindPipe1");

                    b.Property<double>("BlindPipe1m");

                    b.Property<bool>("BlindPipe2");

                    b.Property<double>("BlindPipe2m");

                    b.Property<string>("Blindroer1");

                    b.Property<string>("Blindroer2");

                    b.Property<double>("BoreDybde");

                    b.Property<string>("Boremetode");

                    b.Property<string>("Borerig");

                    b.Property<bool>("Boretilladelse");

                    b.Property<string>("Boretilladelse_Path");

                    b.Property<string>("Boringstype");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("DoneBy");

                    b.Property<string>("DrillPlace");

                    b.Property<string>("Filter1_Dim");

                    b.Property<double>("Filter1_Laengde");

                    b.Property<string>("Filter2_Dim");

                    b.Property<double?>("Filter2_Laengde");

                    b.Property<string>("Filterroer1");

                    b.Property<string>("Filterroer2");

                    b.Property<string>("Filterslidser");

                    b.Property<bool>("Filterstyr");

                    b.Property<string>("Forgravning");

                    b.Property<string>("Forsegling");

                    b.Property<bool>("Gravetilladelse");

                    b.Property<string>("Gravetilladelse_Path");

                    b.Property<string>("Grustype");

                    b.Property<bool>("Ledningsoplysninger");

                    b.Property<string>("Ledningsoplysninger_Path");

                    b.Property<double>("ProeveFrekvens");

                    b.Property<int?>("ProjectId");

                    b.Property<bool>("RaadenOverVej");

                    b.Property<string>("RaadenOverVej_Path");

                    b.Property<string>("Reetablering");

                    b.Property<string>("Registrering");

                    b.Property<bool>("Taetningsringe");

                    b.Property<bool>("ToFiltre");

                    b.Property<string>("WellID");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("WellDrillingInstructions");
                });

            modelBuilder.Entity("MainOps.Models.WellLayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<double?>("End_m");

                    b.Property<string>("Ground_Type");

                    b.Property<int>("Nr");

                    b.Property<double?>("Start_m");

                    b.Property<int?>("WellId");

                    b.HasKey("Id");

                    b.HasIndex("WellId");

                    b.ToTable("WellLayers");
                });

            modelBuilder.Entity("MainOps.Models.WorkItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Amount");

                    b.Property<string>("Comment_Worker");

                    b.Property<string>("Description");

                    b.Property<bool>("IsFinished");

                    b.Property<DateTime?>("TimeFinished");

                    b.Property<int?>("WorkTaskId");

                    b.HasKey("Id");

                    b.HasIndex("WorkTaskId");

                    b.ToTable("WorkItems");
                });

            modelBuilder.Entity("MainOps.Models.WorkTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments_Office");

                    b.Property<string>("Comments_Workers");

                    b.Property<DateTime>("DateToDo");

                    b.Property<string>("InChargeId");

                    b.Property<bool>("IsFinished");

                    b.Property<bool>("IsStarted");

                    b.Property<int>("ProjectId");

                    b.Property<int?>("SubProjectId");

                    b.Property<DateTime?>("TimeFinished");

                    b.Property<DateTime?>("TimeStarted");

                    b.Property<string>("WorkerId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubProjectId");

                    b.ToTable("WorkTasks");
                });

            modelBuilder.Entity("MainOps.Models.WTPCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Clear_Water_Pump");

                    b.Property<string>("Clear_Water_Pump_Comment");

                    b.Property<string>("DoneBy");

                    b.Property<DateTime?>("EnteredIntoDataBase");

                    b.Property<bool>("Filters_Operation");

                    b.Property<string>("Filters_Operation_Comment");

                    b.Property<bool>("FlowMeters");

                    b.Property<string>("FlowMeters_Comment");

                    b.Property<string>("GeneralComments");

                    b.Property<bool>("Heating");

                    b.Property<string>("Heating_Comment");

                    b.Property<double?>("Latitude");

                    b.Property<string>("Leakages");

                    b.Property<string>("Leakages_Comment");

                    b.Property<double?>("Longitude");

                    b.Property<string>("Preassures_Comment");

                    b.Property<string>("Pressures");

                    b.Property<int>("ProjectId");

                    b.Property<string>("Signature");

                    b.Property<int?>("SubProjectId");

                    b.Property<bool>("Suction_Tank");

                    b.Property<string>("Suction_Tank_Comment");

                    b.Property<string>("Tanks");

                    b.Property<string>("Tanks_Comment");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<bool>("Valves");

                    b.Property<string>("Valves_Comment");

                    b.Property<bool>("Water_Clear");

                    b.Property<string>("Water_Clear_Comment");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubProjectId");

                    b.ToTable("WTPChecks");
                });

            modelBuilder.Entity("MainOps.Models.WTPClasses.HelperClasses.Atom", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("mass");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("symbol")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.HasKey("id");

                    b.ToTable("Atoms");
                });

            modelBuilder.Entity("MainOps.Models.WTPClasses.HelperClasses.Category", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("category")
                        .IsRequired();

                    b.HasKey("id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MainOps.Models.WTPClasses.HelperClasses.Dosing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("dosing")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Dosings");
                });

            modelBuilder.Entity("MainOps.Models.WTPClasses.HelperClasses.Effect_type", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("description")
                        .IsRequired();

                    b.Property<string>("path_to_graph")
                        .IsRequired();

                    b.HasKey("id");

                    b.ToTable("Effect_types");
                });

            modelBuilder.Entity("MainOps.Models.WTPClasses.HelperClasses.Luxurity", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("wtp_luxurity")
                        .IsRequired();

                    b.HasKey("id");

                    b.ToTable("Luxurities");
                });

            modelBuilder.Entity("MainOps.Models.WTPClasses.HelperClasses.Temporal_section", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("section")
                        .IsRequired();

                    b.HasKey("id");

                    b.ToTable("Temporal_sections");
                });

            modelBuilder.Entity("MainOps.Models.WTPClasses.HelperClasses.Water_type", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("water_type")
                        .IsRequired();

                    b.HasKey("id");

                    b.ToTable("Water_types");
                });

            modelBuilder.Entity("MainOps.Models.WTPClasses.HelperClasses.WTPUnit", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("the_unit")
                        .IsRequired();

                    b.HasKey("id");

                    b.ToTable("WTPUnits");
                });

            modelBuilder.Entity("MainOps.Models.WTPClasses.MainClasses.Contamination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Unit_limitid");

                    b.Property<string>("contam_group")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<double?>("default_limit");

                    b.HasKey("Id");

                    b.HasIndex("Unit_limitid");

                    b.ToTable("Contaminations");
                });

            modelBuilder.Entity("MainOps.Models.WTPClasses.MainClasses.Effort", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CategoryId");

                    b.Property<int?>("DivisionId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("Temp_sectionid");

                    b.Property<int?>("WTPUnitId");

                    b.Property<string>("WTP_block_name")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<int?>("Wtp_luxurityId");

                    b.Property<double>("effort");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("Temp_sectionid");

                    b.HasIndex("WTPUnitId");

                    b.HasIndex("Wtp_luxurityId");

                    b.ToTable("Efforts");
                });

            modelBuilder.Entity("MainOps.Models.WTPClasses.MainClasses.FilterMaterial", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120);

                    b.Property<string>("contaminations")
                        .IsRequired();

                    b.Property<string>("device")
                        .IsRequired();

                    b.Property<int?>("water_typeid");

                    b.HasKey("id");

                    b.HasIndex("water_typeid");

                    b.ToTable("FilterMaterials");
                });

            modelBuilder.Entity("MainOps.Models.WTPClasses.MainClasses.Price", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EkdTid");

                    b.Property<int>("divisionid");

                    b.Property<string>("name")
                        .HasMaxLength(100);

                    b.Property<double?>("price");

                    b.Property<double?>("rent");

                    b.Property<double?>("size");

                    b.Property<int>("unit_pid");

                    b.Property<int>("unit_rid");

                    b.Property<int>("unitid");

                    b.HasKey("id");

                    b.HasIndex("EkdTid");

                    b.HasIndex("divisionid");

                    b.HasIndex("unit_pid");

                    b.HasIndex("unit_rid");

                    b.HasIndex("unitid");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("MainOps.Models.WTPClasses.MainClasses.WTP_block", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("DivisionId");

                    b.Property<double?>("Pow_Con");

                    b.Property<int?>("WTPUnitId");

                    b.Property<double?>("height");

                    b.Property<double?>("length");

                    b.Property<string>("name")
                        .HasMaxLength(100);

                    b.Property<bool>("necessity");

                    b.Property<double>("size");

                    b.Property<int?>("unit_sizeid");

                    b.Property<double?>("weight");

                    b.Property<double?>("width");

                    b.HasKey("id");

                    b.HasIndex("DivisionId");

                    b.HasIndex("WTPUnitId");

                    b.HasIndex("unit_sizeid");

                    b.ToTable("WTP_blocks");
                });

            modelBuilder.Entity("MainOps.Models.WTPClasses.MixedClasses.MediaEfficiency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("contaminationId");

                    b.Property<int?>("dosing_ofid");

                    b.Property<double>("dosing_relation");

                    b.Property<int?>("effect_typeid");

                    b.Property<sbyte>("efficiency");

                    b.Property<int>("filtermaterialid");

                    b.Property<bool>("has_concentration_effect");

                    b.Property<double>("lower_limit_aeration");

                    b.Property<double>("lower_limit_pH");

                    b.Property<bool>("need_Aeration");

                    b.Property<bool>("need_dosing");

                    b.Property<bool>("need_pH_control");

                    b.Property<double>("upper_limit_aeration");

                    b.Property<double>("upper_limit_pH");

                    b.HasKey("Id");

                    b.HasIndex("contaminationId");

                    b.HasIndex("dosing_ofid");

                    b.HasIndex("effect_typeid");

                    b.HasIndex("filtermaterialid");

                    b.ToTable("MediaEfficiencies");
                });

            modelBuilder.Entity("MainOps.Models.WTPClasses.MixedClasses.SpecialCase", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("cont_name");

                    b.Property<string>("new_filter");

                    b.HasKey("id");

                    b.ToTable("Special_Cases_Air_Strippers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MainOps.Models.AlarmCall", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("MainOps.Models.SubProject", "SubProject")
                        .WithMany()
                        .HasForeignKey("SubProjectId");
                });

            modelBuilder.Entity("MainOps.Models.ApplicationUser", b =>
                {
                    b.HasOne("MainOps.Models.Division", "Division")
                        .WithMany("Users")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.Arrival", b =>
                {
                    b.HasOne("MainOps.Models.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.Mobilize", "Mobilize")
                        .WithMany()
                        .HasForeignKey("MobilizeId");

                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("MainOps.Models.SubProject", "SubProject")
                        .WithMany()
                        .HasForeignKey("SubProjectId");
                });

            modelBuilder.Entity("MainOps.Models.BentoniteLayer", b =>
                {
                    b.HasOne("MainOps.Models.WellDrillingInstruction", "WellDrillingInstruction")
                        .WithMany("BentoniteLayers")
                        .HasForeignKey("WellDrillingInstructionId");
                });

            modelBuilder.Entity("MainOps.Models.BoQHeadLine", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.CGJClasses.AccomodationWork", b =>
                {
                    b.HasOne("MainOps.Models.CGJClasses.Protocol", "Protocol")
                        .WithMany()
                        .HasForeignKey("ProtocolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.CGJClasses.Building", b =>
                {
                    b.HasOne("MainOps.Models.CGJClasses.Protocol", "Protocol")
                        .WithMany()
                        .HasForeignKey("ProtocolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.CGJClasses.Dagsrapport", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("MainOps.Models.SubProject", "SubProject")
                        .WithMany()
                        .HasForeignKey("SubProjectId");
                });

            modelBuilder.Entity("MainOps.Models.CGJClasses.DagsRapport_EkstraArbejde", b =>
                {
                    b.HasOne("MainOps.Models.CGJClasses.Dagsrapport", "Dagsrapport")
                        .WithMany("Ekstraarbejder")
                        .HasForeignKey("DagsrapportId");

                    b.HasOne("MainOps.Models.CGJClasses.EA", "EA")
                        .WithMany()
                        .HasForeignKey("EAId");
                });

            modelBuilder.Entity("MainOps.Models.CGJClasses.DagsRapport_KontrakArbejde", b =>
                {
                    b.HasOne("MainOps.Models.CGJClasses.Dagsrapport", "Dagsrapport")
                        .WithMany("Kontraktarbejder")
                        .HasForeignKey("DagsrapportId");
                });

            modelBuilder.Entity("MainOps.Models.CGJClasses.DagsRapport_TimeRegistrering", b =>
                {
                    b.HasOne("MainOps.Models.CGJClasses.Dagsrapport", "Dagsrapport")
                        .WithMany("Timer")
                        .HasForeignKey("DagsrapportId");
                });

            modelBuilder.Entity("MainOps.Models.CGJClasses.Junction", b =>
                {
                    b.HasOne("MainOps.Models.CGJClasses.Protocol", "Protocol")
                        .WithMany()
                        .HasForeignKey("ProtocolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.CGJClasses.RoadSection", b =>
                {
                    b.HasOne("MainOps.Models.CGJClasses.Protocol", "Protocol")
                        .WithMany()
                        .HasForeignKey("ProtocolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.CGJClasses.SiteClearanceForUtilityRelocation", b =>
                {
                    b.HasOne("MainOps.Models.CGJClasses.Protocol", "Protocol")
                        .WithMany()
                        .HasForeignKey("ProtocolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.CGJClasses.SiteClearancesBetweenContractBorder", b =>
                {
                    b.HasOne("MainOps.Models.CGJClasses.Protocol", "Protocol")
                        .WithMany()
                        .HasForeignKey("ProtocolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.CGJClasses.Structure", b =>
                {
                    b.HasOne("MainOps.Models.CGJClasses.Protocol", "Protocol")
                        .WithMany()
                        .HasForeignKey("ProtocolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.ClearPumpTest", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.SubProject", "SubProject")
                        .WithMany()
                        .HasForeignKey("SubProjectId");
                });

            modelBuilder.Entity("MainOps.Models.ClearPumpTestData", b =>
                {
                    b.HasOne("MainOps.Models.ClearPumpTest")
                        .WithMany("Measurements")
                        .HasForeignKey("ClearPumpTestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.ClearPumpTestDataDevice", b =>
                {
                    b.HasOne("MainOps.Models.ClearPumpTest", "ClearPumpTest")
                        .WithMany()
                        .HasForeignKey("ClearPumpTestId");
                });

            modelBuilder.Entity("MainOps.Models.ClearPumpTestPhoto", b =>
                {
                    b.HasOne("MainOps.Models.ClearPumpTest", "ClearPumpTest")
                        .WithMany()
                        .HasForeignKey("ClearPumpTestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.ConstructionSiteInspection", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.SubProject", "SubProject")
                        .WithMany()
                        .HasForeignKey("SubProjectId");
                });

            modelBuilder.Entity("MainOps.Models.CoordTrack", b =>
                {
                    b.HasOne("MainOps.Models.TrackItem", "TrackItem")
                        .WithMany("TrackedCoordinates")
                        .HasForeignKey("TrackItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.CoordTrack2", b =>
                {
                    b.HasOne("MainOps.Models.Arrival", "Arrival")
                        .WithMany()
                        .HasForeignKey("ArrivalId");

                    b.HasOne("MainOps.Models.Install", "Install")
                        .WithMany()
                        .HasForeignKey("InstallId");

                    b.HasOne("MainOps.Models.MeasPoint", "MeasPoint")
                        .WithMany()
                        .HasForeignKey("MeasPointId");

                    b.HasOne("MainOps.Models.Mobilize", "Mobilize")
                        .WithMany()
                        .HasForeignKey("MobilizeId");
                });

            modelBuilder.Entity("MainOps.Models.CoordTrack3", b =>
                {
                    b.HasOne("MainOps.Models.HJItem", "HJItem")
                        .WithMany()
                        .HasForeignKey("HJItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.DataLoggerInstall", b =>
                {
                    b.HasOne("MainOps.Models.MeasPoint", "MeasPoint")
                        .WithMany()
                        .HasForeignKey("MeasPointId");

                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.SubProject", "SubProject")
                        .WithMany()
                        .HasForeignKey("SubProjectId");
                });

            modelBuilder.Entity("MainOps.Models.DataPoint", b =>
                {
                    b.HasOne("MainOps.Models.MeasPoint", "MeasPoint")
                        .WithMany()
                        .HasForeignKey("MeasPointId");
                });

            modelBuilder.Entity("MainOps.Models.Decommission", b =>
                {
                    b.HasOne("MainOps.Models.MeasPoint", "MeasPoint")
                        .WithMany()
                        .HasForeignKey("MeasPointId");

                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.SubProject", "SubProject")
                        .WithMany()
                        .HasForeignKey("SubProjectId");
                });

            modelBuilder.Entity("MainOps.Models.DeInstall", b =>
                {
                    b.HasOne("MainOps.Models.Install", "Install")
                        .WithMany()
                        .HasForeignKey("InstallId");

                    b.HasOne("MainOps.Models.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("MainOps.Models.SubProject", "SubProject")
                        .WithMany()
                        .HasForeignKey("SubProjectId");
                });

            modelBuilder.Entity("MainOps.Models.Discount", b =>
                {
                    b.HasOne("MainOps.Models.ItemType", "ItemType")
                        .WithMany("Discounts")
                        .HasForeignKey("ItemTypeId");
                });

            modelBuilder.Entity("MainOps.Models.Document", b =>
                {
                    b.HasOne("MainOps.Models.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.MeasPoint", "MeasPoint")
                        .WithMany("Documents")
                        .HasForeignKey("MeasPointId");

                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany("Documents")
                        .HasForeignKey("ProjectId");

                    b.HasOne("MainOps.Models.SubProject", "SubProject")
                        .WithMany("Documents")
                        .HasForeignKey("SubProjectId");
                });

            modelBuilder.Entity("MainOps.Models.Drill", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.SubProject", "SubProject")
                        .WithMany()
                        .HasForeignKey("SubProjectId");
                });

            modelBuilder.Entity("MainOps.Models.DrillPhoto", b =>
                {
                    b.HasOne("MainOps.Models.Drill", "Drill")
                        .WithMany("Photos")
                        .HasForeignKey("DrillId");
                });

            modelBuilder.Entity("MainOps.Models.ExtraWork", b =>
                {
                    b.HasOne("MainOps.Models.BoQHeadLine", "BoQHeadLine")
                        .WithMany()
                        .HasForeignKey("BoQHeadLineId");

                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.SubProject", "SubProject")
                        .WithMany()
                        .HasForeignKey("SubProjectId");
                });

            modelBuilder.Entity("MainOps.Models.Feedback", b =>
                {
                    b.HasOne("MainOps.Models.WorkItem", "WorkItem")
                        .WithMany("Feedbacks")
                        .HasForeignKey("WorkItemId");

                    b.HasOne("MainOps.Models.WorkTask", "WorkTask")
                        .WithMany("Feedbacks")
                        .HasForeignKey("WorkTaskId");
                });

            modelBuilder.Entity("MainOps.Models.Filter1Layer", b =>
                {
                    b.HasOne("MainOps.Models.WellDrillingInstruction", "WellDrillingInstruction")
                        .WithMany("Filter1_Layers")
                        .HasForeignKey("WellDrillingInstructionId");
                });

            modelBuilder.Entity("MainOps.Models.Filter2Layer", b =>
                {
                    b.HasOne("MainOps.Models.WellDrillingInstruction", "WellDrillingInstruction")
                        .WithMany("Filter2_Layers")
                        .HasForeignKey("WellDrillingInstructionId");
                });

            modelBuilder.Entity("MainOps.Models.GeneratorCheck", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.SubProject", "SubProject")
                        .WithMany()
                        .HasForeignKey("SubProjectId");
                });

            modelBuilder.Entity("MainOps.Models.GroutAfterPhoto", b =>
                {
                    b.HasOne("MainOps.Models.Grouting")
                        .WithMany("After_Photos")
                        .HasForeignKey("GroutingId");
                });

            modelBuilder.Entity("MainOps.Models.GroutBeforePhoto", b =>
                {
                    b.HasOne("MainOps.Models.Grouting")
                        .WithMany("Before_Photos")
                        .HasForeignKey("GroutingId");
                });

            modelBuilder.Entity("MainOps.Models.GroutGroutPhoto", b =>
                {
                    b.HasOne("MainOps.Models.Grouting")
                        .WithMany("Grout_Photos")
                        .HasForeignKey("GroutingId");
                });

            modelBuilder.Entity("MainOps.Models.Grouting", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.SubProject", "SubProject")
                        .WithMany()
                        .HasForeignKey("SubProjectId");
                });

            modelBuilder.Entity("MainOps.Models.GroutTestDataDevice", b =>
                {
                    b.HasOne("MainOps.Models.Grouting", "Grouting")
                        .WithMany("Data")
                        .HasForeignKey("GroutingId");
                });

            modelBuilder.Entity("MainOps.Models.HJItem", b =>
                {
                    b.HasOne("MainOps.Models.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId");

                    b.HasOne("MainOps.Models.HJItemClass", "HJItemClass")
                        .WithMany()
                        .HasForeignKey("HJItemClassId");
                });

            modelBuilder.Entity("MainOps.Models.HJItemClass", b =>
                {
                    b.HasOne("MainOps.Models.HJItemMasterClass", "HJItemMasterClass")
                        .WithMany()
                        .HasForeignKey("HJItemMasterClassId");
                });

            modelBuilder.Entity("MainOps.Models.HorizontalDrainTest", b =>
                {
                    b.HasOne("MainOps.Models.Install", "Install")
                        .WithMany()
                        .HasForeignKey("InstallId");

                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.SubProject", "SubProject")
                        .WithMany()
                        .HasForeignKey("SubProjectId");
                });

            modelBuilder.Entity("MainOps.Models.InformationEntry", b =>
                {
                    b.HasOne("MainOps.Models.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.Install", b =>
                {
                    b.HasOne("MainOps.Models.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("MainOps.Models.SubProject", "SubProject")
                        .WithMany()
                        .HasForeignKey("SubProjectId");
                });

            modelBuilder.Entity("MainOps.Models.InstallOperation", b =>
                {
                    b.HasOne("MainOps.Models.Install", "Install")
                        .WithMany()
                        .HasForeignKey("InstallId");
                });

            modelBuilder.Entity("MainOps.Models.ItemType", b =>
                {
                    b.HasOne("MainOps.Models.Unit", "Install_Unit")
                        .WithMany()
                        .HasForeignKey("Install_UnitId");

                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany("BoQList")
                        .HasForeignKey("ProjectId");

                    b.HasOne("MainOps.Models.Unit", "Rental_Unit")
                        .WithMany()
                        .HasForeignKey("Rental_UnitId");

                    b.HasOne("MainOps.Models.ReportType", "ReportType")
                        .WithMany()
                        .HasForeignKey("ReportTypeId");
                });

            modelBuilder.Entity("MainOps.Models.LayerType", b =>
                {
                    b.HasOne("MainOps.Models.Layer", "Layer")
                        .WithMany()
                        .HasForeignKey("LayerId");

                    b.HasOne("MainOps.Models.WellDrillingInstruction", "WellDrillingInstruction")
                        .WithMany("Layers")
                        .HasForeignKey("WellDrillingInstructionId");
                });

            modelBuilder.Entity("MainOps.Models.Log", b =>
                {
                    b.HasOne("MainOps.Models.TrackItem", "TrackItem")
                        .WithMany("Logs")
                        .HasForeignKey("TrackItemId");
                });

            modelBuilder.Entity("MainOps.Models.Log2", b =>
                {
                    b.HasOne("MainOps.Models.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId");
                });

            modelBuilder.Entity("MainOps.Models.Logger", b =>
                {
                    b.HasOne("MainOps.Models.Division", "Division")
                        .WithMany("Loggers")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.LoggerChange", b =>
                {
                    b.HasOne("MainOps.Models.Logger", "Logger")
                        .WithMany()
                        .HasForeignKey("LoggerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.MeasPoint", "MeasPoint")
                        .WithMany()
                        .HasForeignKey("MeasPointId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.Maintenance", b =>
                {
                    b.HasOne("MainOps.Models.HJItem", "HJItem")
                        .WithMany("MaintenanceList")
                        .HasForeignKey("HJItemId");

                    b.HasOne("MainOps.Models.Install", "Install")
                        .WithMany()
                        .HasForeignKey("InstallId");

                    b.HasOne("MainOps.Models.MeasPoint", "MeasPoint")
                        .WithMany()
                        .HasForeignKey("MeasPointId");

                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("MainOps.Models.SubProject", "SubProject")
                        .WithMany()
                        .HasForeignKey("SubProjectId");
                });

            modelBuilder.Entity("MainOps.Models.MaintenanceEntry", b =>
                {
                    b.HasOne("MainOps.Models.Maintenance", "Maintenance")
                        .WithMany("MaintenanceEntries")
                        .HasForeignKey("MaintenanceId");

                    b.HasOne("MainOps.Models.MaintenanceSubType", "MaintenanceSubType")
                        .WithMany()
                        .HasForeignKey("MaintenanceSubTypeId");

                    b.HasOne("MainOps.Models.MaintenanceType", "MaintenanceType")
                        .WithMany()
                        .HasForeignKey("MaintenanceTypeId");
                });

            modelBuilder.Entity("MainOps.Models.MaintenanceSubType", b =>
                {
                    b.HasOne("MainOps.Models.MaintenanceType", "MaintenanceType")
                        .WithMany()
                        .HasForeignKey("MaintenanceTypeId");
                });

            modelBuilder.Entity("MainOps.Models.Meas", b =>
                {
                    b.HasOne("MainOps.Models.Comment", "TheComment")
                        .WithMany()
                        .HasForeignKey("CommentId");

                    b.HasOne("MainOps.Models.MeasPoint", "MeasPoint")
                        .WithMany("Measures")
                        .HasForeignKey("MeasPointId");
                });

            modelBuilder.Entity("MainOps.Models.MeasPoint", b =>
                {
                    b.HasOne("MainOps.Models.Logger", "logger")
                        .WithMany()
                        .HasForeignKey("LoggerId");

                    b.HasOne("MainOps.Models.MeasType", "MeasType")
                        .WithMany()
                        .HasForeignKey("MeasTypeId");

                    b.HasOne("MainOps.Models.MonitorType", "MonitorType")
                        .WithMany()
                        .HasForeignKey("MonitorTypeId");

                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("MainOps.Models.SubProject", "SubProject")
                        .WithMany()
                        .HasForeignKey("SubProjectId");
                });

            modelBuilder.Entity("MainOps.Models.MeasType", b =>
                {
                    b.HasOne("MainOps.Models.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.Mobilize", b =>
                {
                    b.HasOne("MainOps.Models.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("MainOps.Models.SubProject", "SubProject")
                        .WithMany()
                        .HasForeignKey("SubProjectId");
                });

            modelBuilder.Entity("MainOps.Models.MonitorType", b =>
                {
                    b.HasOne("MainOps.Models.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.Offset", b =>
                {
                    b.HasOne("MainOps.Models.MeasPoint", "measpoint")
                        .WithMany("Offsets")
                        .HasForeignKey("MeasPointId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.Payment", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.SubProject", "SubProject")
                        .WithMany()
                        .HasForeignKey("SubProjectId");
                });

            modelBuilder.Entity("MainOps.Models.PhotoError", b =>
                {
                    b.HasOne("MainOps.Models.TrackItem", "TrackItem")
                        .WithMany("ErrorPhotos")
                        .HasForeignKey("TrackItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileAlarmCall", b =>
                {
                    b.HasOne("MainOps.Models.AlarmCall", "AlarmCall")
                        .WithMany("pictures")
                        .HasForeignKey("AlarmCallId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileArrival", b =>
                {
                    b.HasOne("MainOps.Models.Arrival", "Arrival")
                        .WithMany()
                        .HasForeignKey("ArrivalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileConstructionSiteInspection", b =>
                {
                    b.HasOne("MainOps.Models.ConstructionSiteInspection", "ConstructionSiteInspection")
                        .WithMany("Photos")
                        .HasForeignKey("ConstructionSiteInspectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileDataLoggerInstall", b =>
                {
                    b.HasOne("MainOps.Models.DataLoggerInstall", "DataLoggerInstall")
                        .WithMany("Photos")
                        .HasForeignKey("DataLoggerInstallId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileDecommission", b =>
                {
                    b.HasOne("MainOps.Models.Decommission", "Decommission")
                        .WithMany("Photos")
                        .HasForeignKey("DecommissionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileDeinstalled", b =>
                {
                    b.HasOne("MainOps.Models.DeInstall", "DeInstall")
                        .WithMany()
                        .HasForeignKey("DeinstallId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileFeedback", b =>
                {
                    b.HasOne("MainOps.Models.Feedback", "Feedback")
                        .WithMany("Photos")
                        .HasForeignKey("FeedbackId");
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileGeneratorCheck", b =>
                {
                    b.HasOne("MainOps.Models.GeneratorCheck", "GeneratorCheck")
                        .WithMany("Photos")
                        .HasForeignKey("GeneratorCheckId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileHorizontalDrainTest", b =>
                {
                    b.HasOne("MainOps.Models.HorizontalDrainTest", "HorizontalDrainTest")
                        .WithMany("Photos")
                        .HasForeignKey("HorizontalDrainTestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileInstalled", b =>
                {
                    b.HasOne("MainOps.Models.TrackItem", "TrackItem")
                        .WithMany("InstalledPhotos")
                        .HasForeignKey("TrackItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileInstalled2", b =>
                {
                    b.HasOne("MainOps.Models.Install", "Install")
                        .WithMany()
                        .HasForeignKey("InstallId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileMaintenance", b =>
                {
                    b.HasOne("MainOps.Models.Maintenance", "Maintenance")
                        .WithMany("MaintenancePhotos")
                        .HasForeignKey("MaintenanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileMobilized", b =>
                {
                    b.HasOne("MainOps.Models.Mobilize", "Mobilize")
                        .WithMany()
                        .HasForeignKey("MobilizeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.PhotoFilePack", b =>
                {
                    b.HasOne("MainOps.Models.TrackItem", "TrackItem")
                        .WithMany("PackedPhotos")
                        .HasForeignKey("TrackItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileReceived", b =>
                {
                    b.HasOne("MainOps.Models.TrackItem", "TrackItem")
                        .WithMany("ReceivedPhotos")
                        .HasForeignKey("TrackItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileSensorsCheck", b =>
                {
                    b.HasOne("MainOps.Models.SensorsCheck", "SensorsCheck")
                        .WithMany("Photos")
                        .HasForeignKey("SensorsCheckId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileSent", b =>
                {
                    b.HasOne("MainOps.Models.TrackItem", "TrackItem")
                        .WithMany("SentPhotos")
                        .HasForeignKey("TrackItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileSiteCheck", b =>
                {
                    b.HasOne("MainOps.Models.SiteCheck", "SiteCheck")
                        .WithMany("Photos")
                        .HasForeignKey("SiteCheckId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileWorkItem", b =>
                {
                    b.HasOne("MainOps.Models.WorkItem", "WorkItem")
                        .WithMany("Photos")
                        .HasForeignKey("WorkItemId");
                });

            modelBuilder.Entity("MainOps.Models.PhotoFileWTPCheck", b =>
                {
                    b.HasOne("MainOps.Models.WTPCheck", "WTPCheck")
                        .WithMany("Photos")
                        .HasForeignKey("WTPCheckId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.PipeCut", b =>
                {
                    b.HasOne("MainOps.Models.MeasPoint", "MeasPoint")
                        .WithMany()
                        .HasForeignKey("MeasPointId");
                });

            modelBuilder.Entity("MainOps.Models.PipeCutPhoto", b =>
                {
                    b.HasOne("MainOps.Models.PipeCut", "PipeCut")
                        .WithMany("Photos")
                        .HasForeignKey("PipeCutId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.Project", b =>
                {
                    b.HasOne("MainOps.Models.CoordSystem", "CoordSystem")
                        .WithMany()
                        .HasForeignKey("CoordSystemId");

                    b.HasOne("MainOps.Models.Division", "Division")
                        .WithMany("Projects")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.ProjectStatus", b =>
                {
                    b.HasOne("MainOps.Models.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId");

                    b.HasOne("MainOps.Models.ProjectCategory", "ProjectCategory")
                        .WithMany()
                        .HasForeignKey("ProjectCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.StatusDescription", "StatusDescription")
                        .WithMany()
                        .HasForeignKey("StatusDescriptionId");
                });

            modelBuilder.Entity("MainOps.Models.ProjectUser", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("projectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.PumpActivity", b =>
                {
                    b.HasOne("MainOps.Models.MeasPoint", "MeasPoint")
                        .WithMany()
                        .HasForeignKey("MeasPointId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.PumpTestData", b =>
                {
                    b.HasOne("MainOps.Models.ThreeStepTest")
                        .WithMany("TestData")
                        .HasForeignKey("ThreeStepTestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.PumpTestDataDevice", b =>
                {
                    b.HasOne("MainOps.Models.ThreeStepTest", "ThreeStepTest")
                        .WithMany()
                        .HasForeignKey("ThreeStepTestId");
                });

            modelBuilder.Entity("MainOps.Models.PumptestingData", b =>
                {
                    b.HasOne("MainOps.Models.PumpTesting", "PumpTesting")
                        .WithMany("TestData")
                        .HasForeignKey("PumpTestingId");
                });

            modelBuilder.Entity("MainOps.Models.PumptestingPhoto", b =>
                {
                    b.HasOne("MainOps.Models.PumpTesting", "PumpTesting")
                        .WithMany("photos")
                        .HasForeignKey("PumptestingId");
                });

            modelBuilder.Entity("MainOps.Models.PumpTestPhoto", b =>
                {
                    b.HasOne("MainOps.Models.ThreeStepTest", "ThreeStep")
                        .WithMany()
                        .HasForeignKey("ThreeStepTestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.ReportClasses.AccidentReport", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.SafetyProblem", "SafetyProblem")
                        .WithMany()
                        .HasForeignKey("SafetyProblemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.ReportClasses.Daily_Report", b =>
                {
                    b.HasOne("MainOps.Models.MeasPoint", "MeasPoint")
                        .WithMany()
                        .HasForeignKey("MeasPointId");

                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.ReportClasses.Daily_Report_2", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.SubProject", "SubProject")
                        .WithMany()
                        .HasForeignKey("SubProjectId");

                    b.HasOne("MainOps.Models.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.ReportClasses.Generator_Test", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany("Generator_TestsDocuments")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("MainOps.Models.ReportClasses.Pump_Commission", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.ReportClasses.Pump_Installation", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.ReportClasses.Well_Development", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany("WellDevelopmentsDocuments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.ReportClasses.Well_Drilling", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.ReportClasses.Well_Installation", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany("WellInstallationsDocuments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.ReportClasses.WTP_Test", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany("WTP_TestsDocuments")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("MainOps.Models.RowHours", b =>
                {
                    b.HasOne("MainOps.Models.HourRegistration")
                        .WithMany("Rows")
                        .HasForeignKey("HourRegistrationId");

                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("MainOps.Models.RowHours_Ongoing", b =>
                {
                    b.HasOne("MainOps.Models.HourRegistration_Ongoing")
                        .WithMany("Rows")
                        .HasForeignKey("HourRegistration_OngoingId");

                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("MainOps.Models.SafetyProblem", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("MainOps.Models.SensorsCheck", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.SubProject", "SubProject")
                        .WithMany()
                        .HasForeignKey("SubProjectId");
                });

            modelBuilder.Entity("MainOps.Models.SiteCheck", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.SubProject", "SubProject")
                        .WithMany()
                        .HasForeignKey("SubProjectId");
                });

            modelBuilder.Entity("MainOps.Models.SmallPart", b =>
                {
                    b.HasOne("MainOps.Models.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.SubProject", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany("SubProjects")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("MainOps.Models.SummaryReport", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.ThreeStepTest", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.SubProject", "SubProject")
                        .WithMany()
                        .HasForeignKey("SubProjectId");
                });

            modelBuilder.Entity("MainOps.Models.Title", b =>
                {
                    b.HasOne("MainOps.Models.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId");

                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("MainOps.Models.ToolBox", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.ToolBoxUser", b =>
                {
                    b.HasOne("MainOps.Models.ToolBox")
                        .WithMany("users")
                        .HasForeignKey("ToolBoxId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.TrackItem", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany("TrackItems")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("MainOps.Models.TruckSite", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("MainOps.Models.SubProject", "SubProject")
                        .WithMany()
                        .HasForeignKey("SubProjectId");

                    b.HasOne("MainOps.Models.TruckDailyReport", "TruckDailyReport")
                        .WithMany("Sites")
                        .HasForeignKey("TruckDailyReportId");
                });

            modelBuilder.Entity("MainOps.Models.WaterSampleLimit", b =>
                {
                    b.HasOne("MainOps.Models.WaterSamplePlace", "WaterSamplePlace")
                        .WithMany()
                        .HasForeignKey("WaterSamplePlaceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.WaterSampleType", "WaterSampleType")
                        .WithMany()
                        .HasForeignKey("WaterSampleTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.WaterSampleMeas", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("MainOps.Models.WaterSamplePlace", "WaterSamplePlace")
                        .WithMany()
                        .HasForeignKey("WaterSamplePlaceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.WaterSampleType", "WaterSampleType")
                        .WithMany()
                        .HasForeignKey("WaterSampleTypeId");
                });

            modelBuilder.Entity("MainOps.Models.WaterSamplePlace", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.WaterSamplePlaceType", "WaterSamplePlaceType")
                        .WithMany()
                        .HasForeignKey("WaterSamplePlaceTypeId");
                });

            modelBuilder.Entity("MainOps.Models.WaterSampleStandardLimit", b =>
                {
                    b.HasOne("MainOps.Models.WaterSamplePlaceType", "WaterSamplePlaceType")
                        .WithMany()
                        .HasForeignKey("WaterSamplePlaceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.Well", b =>
                {
                    b.HasOne("MainOps.Models.CoordSystem", "CoordSystem")
                        .WithMany()
                        .HasForeignKey("CoordSystemId");

                    b.HasOne("MainOps.Models.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId");

                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("MainOps.Models.SubProject", "SubProject")
                        .WithMany()
                        .HasForeignKey("SubProjectId");

                    b.HasOne("MainOps.Models.WellDrillingInstruction", "WelLDrillingInstruction")
                        .WithMany()
                        .HasForeignKey("WellDrillingInstructionId");
                });

            modelBuilder.Entity("MainOps.Models.WellDrillingInstruction", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("MainOps.Models.WellLayer", b =>
                {
                    b.HasOne("MainOps.Models.Well", "Well")
                        .WithMany("WellLayers")
                        .HasForeignKey("WellId");
                });

            modelBuilder.Entity("MainOps.Models.WorkItem", b =>
                {
                    b.HasOne("MainOps.Models.WorkTask", "WorkTask")
                        .WithMany("WorkItems")
                        .HasForeignKey("WorkTaskId");
                });

            modelBuilder.Entity("MainOps.Models.WorkTask", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.SubProject", "SubProject")
                        .WithMany()
                        .HasForeignKey("SubProjectId");
                });

            modelBuilder.Entity("MainOps.Models.WTPCheck", b =>
                {
                    b.HasOne("MainOps.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.SubProject", "SubProject")
                        .WithMany()
                        .HasForeignKey("SubProjectId");
                });

            modelBuilder.Entity("MainOps.Models.WTPClasses.MainClasses.Contamination", b =>
                {
                    b.HasOne("MainOps.Models.WTPClasses.HelperClasses.WTPUnit", "Unit_limit")
                        .WithMany()
                        .HasForeignKey("Unit_limitid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.WTPClasses.MainClasses.Effort", b =>
                {
                    b.HasOne("MainOps.Models.WTPClasses.HelperClasses.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("MainOps.Models.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId");

                    b.HasOne("MainOps.Models.WTPClasses.HelperClasses.Temporal_section", "Temp_section")
                        .WithMany()
                        .HasForeignKey("Temp_sectionid");

                    b.HasOne("MainOps.Models.WTPClasses.HelperClasses.WTPUnit", "WTPUnit")
                        .WithMany()
                        .HasForeignKey("WTPUnitId");

                    b.HasOne("MainOps.Models.WTPClasses.HelperClasses.Luxurity", "Wtp_luxurity")
                        .WithMany()
                        .HasForeignKey("Wtp_luxurityId");
                });

            modelBuilder.Entity("MainOps.Models.WTPClasses.MainClasses.FilterMaterial", b =>
                {
                    b.HasOne("MainOps.Models.WTPClasses.HelperClasses.Water_type", "water_type")
                        .WithMany()
                        .HasForeignKey("water_typeid");
                });

            modelBuilder.Entity("MainOps.Models.WTPClasses.MainClasses.Price", b =>
                {
                    b.HasOne("MainOps.Models.WTPClasses.HelperClasses.Category", "EkdT")
                        .WithMany()
                        .HasForeignKey("EkdTid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.Division", "division")
                        .WithMany()
                        .HasForeignKey("divisionid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.WTPClasses.HelperClasses.WTPUnit", "unit_p")
                        .WithMany()
                        .HasForeignKey("unit_pid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.WTPClasses.HelperClasses.WTPUnit", "unit_r")
                        .WithMany()
                        .HasForeignKey("unit_rid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.WTPClasses.HelperClasses.WTPUnit", "unit")
                        .WithMany()
                        .HasForeignKey("unitid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MainOps.Models.WTPClasses.MainClasses.WTP_block", b =>
                {
                    b.HasOne("MainOps.Models.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.WTPClasses.HelperClasses.WTPUnit", "WTPUnit")
                        .WithMany()
                        .HasForeignKey("WTPUnitId");

                    b.HasOne("MainOps.Models.WTPClasses.HelperClasses.WTPUnit", "unit_size")
                        .WithMany()
                        .HasForeignKey("unit_sizeid");
                });

            modelBuilder.Entity("MainOps.Models.WTPClasses.MixedClasses.MediaEfficiency", b =>
                {
                    b.HasOne("MainOps.Models.WTPClasses.MainClasses.Contamination", "Contamination")
                        .WithMany()
                        .HasForeignKey("contaminationId");

                    b.HasOne("MainOps.Models.WTPClasses.HelperClasses.Dosing", "dosing_of")
                        .WithMany()
                        .HasForeignKey("dosing_ofid");

                    b.HasOne("MainOps.Models.WTPClasses.HelperClasses.Effect_type", "effect_type")
                        .WithMany()
                        .HasForeignKey("effect_typeid");

                    b.HasOne("MainOps.Models.WTPClasses.MainClasses.FilterMaterial", "filtermaterial")
                        .WithMany()
                        .HasForeignKey("filtermaterialid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MainOps.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MainOps.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MainOps.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MainOps.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
